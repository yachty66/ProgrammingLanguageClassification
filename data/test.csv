id,code
10684,"28 = 22 + 23 + 24

 33 = 32 + 23 + 24

 49 = 52 + 23 + 24

 47 = 22 + 33 + 24

 How many numbers below fifty million can be expressed as the sum of a prime square,
"
17536,"      this.path = path;

       this.estimated = estimated;

     }

     public int getDistance() {

       return distance;

     }
"
26383,"                    {

                         tmp += '0';

                     }
"
29090,"/**

  * Class for converting from ""any"" base to ""any"" other base, when ""any"" means from 2-36. Works by

  * going from base 1 to decimal to base 2. Includes auxiliary method for determining whether a

  * number is valid for a given base.

  *
"
10482,"        { cout<<""Destructing base \n""; }      

 }; 

 class derived: public base { 

     public: 

         derived()      

         { cout<<""Constructing derived \n""; } 
"
11952,"        Xᵢ = a + (b-a)*rand()

         Σ += f(Xᵢ)

     end

     return Δₓ * Σ
"
33227,"	}

 }

 func assertRot13Output(t *testing.T, input, expected string) {

 	actual := rot13(input)

 	if actual != expected {

 		t.Fatalf(""With input string '%s' was expecting '%s' but actual was '%s'"",
"
87635,"      if (!super.equals(object)) return false;

       Vertex vertex = (Vertex) object;

       if (dist != vertex.dist) return false;

       if (name != null ? !name.equals(vertex.name) : vertex.name != null) return false;
"
29183,"                            node.Level != node.Right.Level;

             return !condition;

         }

         /// <summary>
"
93219,"}

 /** Test function

   * @returns None

   */

 static void test()

 {
"
11864,"     * @param l the left index of the range to be updated

      * @param r the right index of the range to be updated

      * @param value the value to be added to every element whose index x

      * satisfies l<=x<=r
"
40466,"    }while(ch=='y');

     out.close();

     ifstream in(""d:/person.dat"",ios::in|ios::binary);	//L9

     Person s;

     in.read((char*)&s,sizeof(s));		

     while(!in.eof()){							       
"
62931,"# Predict Output 

 predicted= predict(fit,x_test)
"
21621,"            x = removes();

             printf(""Element removed is: %d\n"", x);

             show();

             break;
"
24775,"// 'Hello World'
"
70170,"import java.util.ArrayList;

 import javax.imageio.ImageIO;

 /**

  * The Koch snowflake is a fractal curve and one of the earliest fractals to have been described.

  * The Koch snowflake can be built up iteratively, in a sequence of stages. The first stage is an
"
12357,"        size_t idx = word[index] - 'a';

         // Throw a runtime error in case the user enters a word which is not

         // present in the trie.

         if (!curr->character[idx]) {

             throw std::runtime_error(std::move(std::string(""Word not found."")));

         }
"
25732,"        private int Partition(T[] array, IComparer<T> comparer, int left, int right)

         {

             var pivot = SelectPivot(array, comparer, left, right);

             var nleft = left;

             var nright = right;

             while (true)
"
16981,"    })

   })

 })
"
10841,"    a = c * ((d << 1) - c);

     b = c * c + d * d;

     if (n % 2 == 0) /* If n is even */

     {

         C[0] = a;

         if (D)
"
51621,"                        

             var minimum = primaryindex

             var secondaryindex = primaryindex + 1

                         

             while secondaryindex < output.count {
"
40668,"	return math.Sqrt(res)

 }
"
10870,"		char := word[i]

 		numberOfUsage := usedLettersMap[char]

 		resultKey[i] = getIndex(sortedWord, char) + numberOfUsage + 1 //+1 -so that indexing does not start at 0

 		numberOfUsage++
"
29687,"using System;

 using FluentAssertions;

 using NUnit.Framework;

 using Utilities.Extensions;
"
10008,"            while (mmh.Count > 0)

             {

                 T value;

                 if (ascending)

                 {

                     value = mmh.GetMin();
"
11708,"}
"
84005,"         */

         std::string encrypt (const std::string &text, const int &key) {

             std::string encrypted_text = """"; // Empty string to store encrypted text

             for (auto &c: text) { // Going through each character
"
26638,"# Decimal value of 110011 is 51

 puts 'Decimal value of 11110 is ' + binary_to_decimal(11_110).to_s

 # Decimal value of 11110 is 30

 puts 'Decimal value of 101 is ' + binary_to_decimal(101).to_s
"
30137,"            var vertex4 = graph.AddVertex(40);

             var vertex5 = graph.AddVertex(40);

             graph.AddEdge(vertex1, vertex2, 1);

             graph.AddEdge(vertex1, vertex5, 1);

             graph.AddEdge(vertex2, vertex3, 1);

             graph.AddEdge(vertex2, vertex5, 1);
"
16869,"    std::function<double(double)> func = [](double x) {

         return -std::pow(x, 1.f / x);

     };

     std::cout << ""Test 2.... "";

     double minima = get_minima(func, -2, 10);

     std::cout << minima << "" ("" << M_E << "")..."";
"
25151," * @details

  * The algorithm is based on the simple TCP client and server model. However,

  * instead of the server only sending and the client only receiving data,

  * the server and client can both send data but only one at a time. This is
"
28645,"    def __iter__(self):

         node = self.head

         while len(node.forward) != 0:

             yield node.forward[0].key
"
20292,"      if array[i] > array[i + 1]

         array[i], array[i + 1] = array[i + 1], array[i]

         swapped = true

       end
"
23095,"        if P in tmp_symbols:

             tmp_symbols.remove(P)

         return dpll_algorithm(clauses, tmp_symbols, tmp_model)
"
23597,"    array = new Location[numberPoints];

   }

   /** Location class is an auxiliary type to keep points coordinates. */

   public static class Location {

     double x;
"
80449,"        ///     Add a single element to the tree.

         /// </summary>

         /// <param name=""key"">The element to add to the tree.</param>

         public void Add(TKey key)
"
52807,"    // If last not same, then 3 possibilities

     // a.Insert b.Remove c. Replace

     // Get min of three and continue for rest.

     return 1 + min(editDist(str1, str2, m, n - 1),

                    editDist(str1, str2, m - 1, n),
"
17495,"    ///     <list type=""bullet"">

     ///         <item>All nodes in the tree contain two children, usually called Left and Right.</item>

     ///         <item>All nodes in the Left subtree contain keys that are less than the node's key.</item>

     ///         <item>All nodes in the Right subtree contain keys that are greater than the node's key.</item>

     ///     </list>
"
33629,"				{1, 0, 0, 1, 0, 0},

 				{1, 0, 0, 1, 0, 0},

 				{0, 1, 1, 0, 1, 0},

 				{0, 0, 0, 1, 0, 0},

 				{0, 0, 0, 0, 0, 0},

 			},
"
11050,"  array

 end

 if $0 == __FILE__

   puts 'Enter a list of numbers separated by space'
"
86798,"        i + 1, rightNodesCount, inorderMap);

     return root;

   }

 }
"
79022," * called from main and from that function a private function is called which will do the actual

  * work. I have done this, while calling from main one have to give minimum parameters.

  */

 public class GenericTree {

   private class Node {

     int data;
"
30193,"int main() 

 {

     Derived1 d1;

     d1.test2();

     Derived d;

     d.test2();
"
12071,"    /* Input hexadecimal number from user */

     printf(""Enter any hexadecimal number: "");

     fgets(hex, MAX_STR_LEN, stdin);

     octal = 0ll;

     bin = 0ll;
"
15663," */

 #include <algorithm>

 #include <cassert>
"
17336,"    }

     else if (op1 == '*' || op1 == '/' || op1 == '%')

     {
"
41928,"      // divergence happens for all complex number with an absolute value

       // greater than 4 (= divergence threshold)

       if (a * a + b * b > 4) {

         break;

       }

     }
"
11921,"78 → 45360 → 871 → 45361 (→ 871)

 540 → 145 (→ 145)

 Starting with 69 produces a chain of five non-repeating terms, but the longest

 non-repeating chain with a starting number below one million is sixty terms.
"
17178,"#include<iostream> 

 using namespace std; 

 class Apple 

 { 

     int i; 

     public: 
"
71010," */

 #include <stdio.h>

 #include <stdlib.h>

 #include <time.h>

 #ifdef _OPENMP
"
11637,"            s not in literals and sym in literals

         ):

             pure_symbols.append(s)

     for p in pure_symbols:

         assignment[p] = None
"
24222," * Hence, the path can be be traced in N out of 2N number of ways.

  * This is the same as binomial coeeficient.

  */

 unsigned long long number_of_paths(int N)
"
17268,"private:	

 	int X,Y;

     //̬ݳԱⲿͳʼڲֱӳʼ

 	static int countP;

 };

 Point::Point(Point &p)
"
12529,"    // then automata goes to next state

     if (state < m && x == pat.charAt(state)) {

       return state + 1;

     }

     for (int ns = state; ns > 0; ns--) {
"
32076," */

 function problem7(): int

 {

     $numberOfPrimes = 0;
"
77895,"    previousCount = str1CharCount.get(str2[i])

     str1CharCount.set(str2[i], previousCount - 1)

   }

   // Now check if all entries in hashmap has zeros.

   for (const key in str1CharCount) {

     if (str1CharCount[key] !== 0) return false
"
11038,"  // adding edges

   graph.addEdge('A', 'B')

   graph.addEdge('A', 'D')
"
88278,"#include <algorithm>

 #include <cassert>

 #include <ctime>
"
19846,"    {

         private readonly IHeuristicKnapsackSolver<(char symbol, double frequency)> splitter;

         private readonly Translator translator;

         public ShannonFanoCompressor(
"
87046,"        @test fahrenheit_to_kelvin(40.0) == 277.59

         @test fahrenheit_to_kelvin(60.0) == 288.71

         @test fahrenheit_to_kelvin(80.0) == 299.82
"
10578,"    def test_improper_b_c_dimensions(self) -> None:

         a = np.array([[1, 2, 1], [2, 1, 2], [3, 2, 4]])

         b = np.array([[0, 3], [3, 0], [2, 3]])
"
46505,"        data[0][i][0] = _random(centres[cls][0] - R, centres[cls][0] + R);

         data[0][i][1] = _random(centres[cls][1] - R, centres[cls][1] + R);

         data[0][i][2] = _random(centres[cls][2] - R, centres[cls][2] + R);
"
26070,"    int blue;

     if (hueSection >= 0 && hueSection <= 1) {

       red = convertToInt(chroma + matchValue);

       green = convertToInt(secondLargestComponent + matchValue);

       blue = convertToInt(matchValue);
"
33368,"    Returns the Collatz sequence and its length of any positive integer.

     >>> n31(4)

     ([4, 2, 1], 3)
"
23762,"  })

   it('should return a title case string when input is an all-lowercase string with spaces', () => {

     expect(titleCaseConversion('lowercase input')).toEqual('Lowercase Input')

   })

   it('should return a title case string when input is an all-lowercase string with punctuation', () => {

     expect(titleCaseConversion('lower, case, input.')).toEqual('Lower, Case, Input.')
"
27333,"    // Function to merge 2 disjoint sets

     this.link(this.findSet(x), this.findSet(y))

   }

   link (x, y) {

     // Helper function for union operation
"
12366,"        {

             // Taken from http://oeis.org/A005132

             var expected = new BigInteger[]
"
13245,"    figure-coordinates in the arguments of this function determine which section

     of the Mandelbrot set is viewed. The main area of the Mandelbrot set is

     roughly between ""-1.5 < x < 0.5"" and ""-1 < y < 1"" in the figure-coordinates.
"
30584,"n = 5

 # Output: false

 puts is_power_of_two(n)

 #

 # Approach 2: Without recursion

 #
"
13960,"        'better at finding local points within a large space than simple iteration',

         () {

       final rand = Random.secure();

       final items = <int, Point>{};
"
54656,"if __name__ == ""__main__"":

     from doctest import testmod

     testmod()

     times = solution_times()

     print(f""The time for naive implementation is {times[0]}."")
"
10323," * Adds and edge between two vertices of graph say u and v in this

  * case.

  *

  * @param adj Adjacency list representation of graph

  * @param u first vertex

  * @param v second vertex
"
28587,"You may assume that each input would have exactly one solution, and you may not use the

 same element twice.

 Example:
"
31272,"#include <stdio.h>

 #include <stdlib.h>

 #include <time.h>

 /**
"
71194,"  }

   if (right < arrayLength && input[right] > input[max]) {

     max = right

   }

   if (max !== i) {
"
55004," * @see tcp_full_duplex_server.c

  *

  * @details

  * The algorithm is based on the simple TCP client and server model. However,

  * instead of the server only sending and the client only receiving data,
"
18852,"    mpc = (big_a - 1) - (big_a + 1) * _cos

     pmpc = (big_a - 1) + (big_a + 1) * _cos

     aa2 = 2 * sqrt(big_a) * alpha
"
28324,"    expect(merge([], [])).toEqual([])

   })

 })
"
97511,"    }

     updateH(root)

     root = delBalance(root)

     return root

   }
"
58869," * or left side. Suppose we will do it from the right side. So, there

  * are two possibilities for every pair of characters being traversed.

  * 1. If the last characters of two strings are the same, Ignore

  * the characters and get the count for the remaining string.

  * So, we get the solution for lengths m-1 and n-1 in a DP array.

  *
"
28370,"package DataStructures.Stacks;

 import java.util.ArrayList;

 import java.util.EmptyStackException;
"
17572,"#include <time.h>

 #include ""qr_decompose.h""

 #ifdef _OPENMP
"
92773,"    return convert(Int64, perm)

 end
"
22229,"        root._val = temp._val

         root._right = del(root._right, temp._val, tree)

       }

     } else {
"
31596,"#include <cassert>

 #include <cstdlib>

 #include <iostream>

 #ifdef _MSC_VER
"
95455,"    // new base is the remainders, with the last remainder

     // being the left-most digit.

     if (0 == decimalValue) return ""0"";
"
96297," * @return hash value of the key

  */

 size_t hashFxn(int key) {

     std::hash<int> hash;

     return hash(key);
"
21034,"    t->val = val;

     t->next = stack->head;

     stack->head = t;

     stack->count++;

 }

 /* Pop an element out of the stack */
"
12917,"            {

                 return;

             }
"
72989,"   * Returns true if the inStack is empty.

    * 

    * @return true if the inStack is empty.

    */
"
29463,"    return 0;

 }
"
50467,"    // Main Function

     std::cout << ""Enter the value of n to check if Prime\n"";

     int n;

     std::cin >> n;

     if (IsPrime(n))

         std::cout << n << "" is Prime"" << std::endl;
"
24629,"  private int size;

   /** Init SinglyLinkedList */

   public SinglyLinkedList() {

     head = null;
"
46865,"#endif

         for (col = row; col < mat_size; col++)

         {
"
28939,"  return !!((value & 1))

 }
"
66115,"        >>> numpy.isnan(array_sum)

         False

         """"""
"
28898,"uuid = ""ea2f1a96-1ddc-540d-b46f-429655e07cfa""

 version = ""0.9.10+4""

 [[Xorg_libpthread_stubs_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]

 git-tree-sha1 = ""6783737e45d3c59a4a4c4091f5f88cdcf0908cbb""
"
18618,"                {

                     output.Write(l);

                     leftIndex++;

                     if (leftIndex == leftLength)
"
29480,"            8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067,

             9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239,

             9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403,

             9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539,

             9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721,

             9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859,
"
14947,"    public int powSum(int N, int X) {

         Sum(N,X,1);

         return count;

     }

     //here i is the natural number which will be raised by X and added in sum.

     public void Sum(int N, int X,int i) {
"
79415,"    print(""a, b"", UnionFindNode.inSameSet(a, b))

     print(""b, c"", UnionFindNode.inSameSet(b, c))

     print(""a, c"", UnionFindNode.inSameSet(a, c))

     print(""New node d"")

     let d = UnionFindNode()
"
32214,"using System;

 using Algorithms.Numeric.Decomposition;

 using FluentAssertions;
"
21479,"      }

       node.right.p = node.p;

       node.p = node.right;

       if (node.right.left != nil) {

         node.right.left.p = node;

       }
"
90728,"    return 0;

 }
"
37481,"      tail = node

     } else {

       node.prev = tail

       tail.next = node

       tail = node

     }
"
22452,"        [Test]

         public static void Add_MultipleKeys_FormsCorrectBST()

         {
"
10444,"package Searches;

 /**

  * The common interface of most searching algorithms

  *

  * @author Podshivalov Nikita (https://github.com/nikitap492)
"
26401,"        printf(""connection with the server failed...\n"");

         exit(0);

     }

     else
"
14808,"    >>> bwt_transform(""panamabanana"")

     {'bwt_string': 'mnpbnnaaaaaa', 'idx_original_string': 11}

     >>> bwt_transform(4)

     Traceback (most recent call last):

         ...

     TypeError: The parameter s type must be str.
"
33151,"        }

         if (game_table[2] == 'o' && game_table[4] == 'o' &&

             game_table[6] == 'o')
"
66984,"deps = [""FFMPEG_jll""]

 git-tree-sha1 = ""b57e3acbe22f8484b4b5ff66a7499717fe1a9cc8""

 uuid = ""c87230d0-a227-11e9-1b43-d7ebe4e7570a""

 version = ""0.4.1""
"
90602,"    for (int i = 0; i < MAX; i++)

     {

         array_sort[i] = rand() % 101;

     }

     /* sort array */
"
15028,"            //Assert

             CollectionAssert.AreEqual(expectedSequenceOfVisitedVertices, sequenceOfVisitedVertices);

         }

     }

 }
"
75945,"    public static BigInteger shiftRows(BigInteger ciphertext) {

         int[] cells = splitBlockIntoCells(ciphertext);

         int[] output = new int[16];
"
25922,"            {

                 Head = temp.Previous;

             }

         }
"
11650,"    >>> dataset = np.array([[0, 0, 0], [1, 1, 1], [2, 2, 2]])

     >>> value_array = np.array([[0, 0, 0], [0, 0, 1]])

     >>> similarity_search(dataset, value_array)

     [[[0, 0, 0], 0.0], [[0, 0, 0], 1.0]]

     These are the errors that might occur:

     1. If dimensions are different.
"
12592,"                // if not exist, initiate count of this word with 1

                 dictionary.put(s, 1);

               }

             }

             s = """"; // reInit a empty word

           }
"
19817,"        server_addr;  ///< basic structures for all syscalls and functions that

                       /// deal with internet addresses. Structures for handling

                       /// internet addresses
"
15679,"            tree.Count.Should().Be(9);

             tree.Contains(6).Should().BeFalse();

             tree.GetKeysInOrder().SequenceEqual(new[] { 1, 8, 11, 13, 15, 17, 22, 25, 27 }).Should().BeTrue();
"
57368,"  end_date = Date.parse(date2)

   (end_date - beginning_date).to_i.abs

 end

 puts number_of_days('2019-06-29', '2019-06-30')
"
96875,"      x = last - 1

       while (x - start > 0) {

         swap(start, x)

         heapify(start, start, x)
"
25929,"        int low = 0;

         int high = a.length-1;

         int mid=0; // low + (high-low)/2 = (low + high)/2

         
"
25222,"  for (int i = 0, limit = string.length ~/ 2; i <= limit; ++i) {

     if (string[i] != string[string.length - 1 - i]) {

       return false;

     }
"
42351,"    }

     int leftNodesCount = i - inStart;

     int rightNodesCount = size - leftNodesCount - 1;

     root.left = createTree(preorder, inorder, preStart + 1, inStart, leftNodesCount);

     root.right = createTree(preorder, inorder, preStart + leftNodesCount + 1, i + 1,
"
15383,"	for i, c := range count {

 		for c > 0 {

 			data[z] = i + aMin

 			z++
"
18963,"            to_plot_y,

             color=""blue"",

             label=""Curve of Degree "" + str(self.degree),

         )

         plt.scatter(x, y, color=""red"", label=""Control Points"")

         plt.legend()
"
92472,"	}

 	textLength = len(text)

 	result := """"

 	for i := 0; i < textLength; i += keyLength {

 		transposition := make([]rune, keyLength)
"
25470,"                { new DateTime(1995, 1, 1), ""TestTime1"" },

                 { new DateTime(2000, 1, 1), ""TestTime2"" },

                 { new DateTime(2005, 1, 1), ""TestTime3"" },
"
25704,"    for (char value : values) {

       if (Character.isLetter(value)) {

         int index = Character.isUpperCase(value) ? value - 'A' : value - 'a';

         marked[index] = true; /* mark current character exists */

       }

     }
"
16830,"            inorder_traversal_of_bst::getInorderSuccessor(root, targetElement);

     std::cout << ""In-order sequence is : "";

     operations_on_datastructures::inorder_traversal_of_bst::printInorder(root);

     std::cout << std::endl;

     if (inorderSuccessor == nullptr) {

         std::cout << ""Inorder successor for last node is NULL"" << std::endl;
"
33935,"        } else {

             newEntry = new Entry<>();

         }
"
14477,"    for (int i = 0; i < N; i++) Count[Arr[i] - min]++;

     for (int i = 1; i < (max - min + 1); i++) Count[i] += Count[i - 1];

     for (int i = N - 1; i >= 0; i--) {
"
18539,"# initial triangle of Koch snowflake

 VECTOR_1 = numpy.array([0, 0])

 VECTOR_2 = numpy.array([0.5, 0.8660254])
"
12722,"    int *ARRAY = NULL, ARRAY_LENGTH, i, TEMPORARY_ELEMENT, isSorted = 0;

     float MEAN = 0, VARIANCE = 0, STAND;

     printf(""Enter no. for Random Numbers :"");

     scanf(""%d"", &ARRAY_LENGTH);

     ARRAY = (int *)realloc(
"
77708,"          v.dist = alternateDist;

           v.previous = u;

           q.add(v);

         }

       }
"
73096,"            {

                 { new DateTime(1995, 1, 1), ""TestTime1"" },

                 { new DateTime(2000, 1, 1), ""TestTime2"" },

                 { new DateTime(2005, 1, 1), ""TestTime3"" },
"
26450,"    assert(L.search(11) == 0); // search for the existing element

     assert(L.search(12) == 2);

     assert(L.search(50) == -1); // search for the non-existing element

     // Sort testing
"
27524,"  let res = str

   while (res.length % bits !== 0) {

     res = '0' + res

   }
"
26247,"/**

  * @brief A simple test case

  * The assert statement will check expected hist and miss to resultant hits and

  * miss
"
17116,"                path[i] = v;

             }

         }

     }

 }

 /**
"
32677,"            }

         }

         [Test]
"
26883,"            topologicalSortHelper(i, graph, stack);

         }

     }
"
23297,"  result_exponent = Math.log(n) / Math.log(2)

   result_exponent % 1 == 0

 end

 n = 1
"
11222,"        'E' => 14,

         'F' => 15,

     ];

     $hexDigits = str_split($hexNumber);
"
17650,"    return queueArray[front];

   }

   /**

    * Checks what's at the rear of the queue
"
20408,"    for (let y = 0; y < layout.length; y++) {

       transposed[x][y] = layout[y][x]

     }

   }

   return transposed

 }
"
14085,"    start_clk = std::clock();

     test2();

     end_clk = std::clock();

     std::cout << ""Test 2 completed in "" << get_clock_diff(start_clk, end_clk)

               << "" sec\n"";

     start_clk = std::clock();
"
23677,"  })

   // Return results

   return results

 }

 export { sumOfSubset }
"
29778,"    {

         printf(""only positive integers >= 0\n"");

         return 1;

     }

     // actual processing
"
20465,"        }

     }

 }
"
24504,"         2. The root node is black.

          3. All leaves are black.

          4. If a node is red, then both its children are black.

          5. Every path from any node to all of its descendent NIL nodes
"
11061,"        // equal to pivot

         if (profitPerUnit(arr[j]) <= profitPerUnit(pivot)) {

             i++;  // increment index of smaller element
"
33466,"        :return: index

         """"""

         return (self.green - self.red) / (self.green + self.red)

     def RI(self):

         """"""
"
88749,"    std::vector<uint32_t> arr1 = sorting::cycle_sort::cycleSort(array1);

     assert(std::is_sorted(std::begin(arr1), std::end(arr1)));

     std::cout << ""passed"" << std::endl;

     // [4.3, -6.5, -7.4, 0, 2.7, 1.8] return [-7.4, -6.5, 0, 1.8, 2.7, 4.3]
"
44995,"    return max;

 }
"
28480,"    return this.heap[1]

   }

   // returns boolean value whether the heap is empty or not

   isEmpty () {

     return this.size === 0

   }
"
56824,"  LinkedList.prototype.add = function (element) {

     const node = new Node(element)

     // Check if its the first element

     if (this.head === null) {

       this.head = node

     } else {
"
42472,"}
"
97633,"    // Get a character code by the use charCodeAt method.

     const presentCharCode = char.charCodeAt()

     // If the character code lies between 65 to 90 it means they are in the upper case so convert it.

     if (presentCharCode >= 65 && presentCharCode <= 90) {

       // Convert the case by use of the above explanation.
"
13482,"    while ((i_low + 1) < i_high)

     {

         int i_mid = (i_low + i_high) / 2;

         // element found
"
20411,"    uint64_t vector4size = vector2.size();

     std::cout << ""4th test... "";

     std::vector<uint64_t> result_test4;

     result_test4 = sorting::selectionSort(vector4, vector4size);
"
27209,"    if (lowerBound === upperBound) {

       return -1

     }

   }

   if (arr[lowerBound] === value) {

     return lowerBound
"
36530,"    /// pq[1] contains the min heap for the reverse search

     /// first element of pair contains the distance

     /// second element of pair contains the vertex
"
32222,"		t.Run(tc.name, func(t *testing.T) {

 			actual := RecursivePower(tc.base, tc.power)

 			if actual != tc.expected {

 				t.Errorf(""Expected %d to the power of %d to be: %d, but got: %d"", tc.base, tc.power, tc.expected, actual)

 			}
"
15062,"            //Arrange

             var solver = new NaiveKnapsackSolver<(char, double)>();

             var translator = new Translator();
"
19119,"uuid = ""d25df0c9-e2be-5dd7-82c8-3ad0b3e990b9""

 version = ""0.1.2""

 [[IniFile]]

 deps = [""Test""]

 git-tree-sha1 = ""098e4d2c533924c921f9f9847274f2ad89e018b8""

 uuid = ""83e8ac13-25f8-5344-8a64-a9f2b223428f""
"
10318,"    matrixC[i] = []

     for (let j = 0; j < n; j++) {

       matrixC[i][j] = 0

     }
"
18542,"    e.w = 9;

     insertEdge(g, e);

     e.v = 8;

     e.w = 9;

     insertEdge(g, e);
"
20375,"                {

                     break;

                 }

             }

         }
"
73291,"class GraphUnweightedUndirected {

   // Unweighted Undirected Graph class

   constructor () {
"
23716,"      }

     }

     int ele = sc.nextInt();

     // we start from bottom left corner
"
40595,"   * @param head head of the list.

    * @return count of the list.

    */

   private int countRecursion(Node head) {

     return head == null ? 0 : 1 + countRecursion(head.next);

   }
"
13211,"				i = 0

 			}

 		}

 	}

 	return Result{notFoundPosition,

 		c,
"
11594," * * `test3.csv`: random test samples points with a circular pattern

  * * `w31.csv`: initial random map

  * * `w32.csv`: trained SOM map

  *

  * The outputs can be readily plotted in [gnuplot](https:://gnuplot.info) using

  * the following snippet
"
32792,"            graph.RemoveVertex(vertexA);

             neighborsB.Should().HaveCount(1);

             neighborsB[0].Should().Be(vertexA);

             neighborsC.Should().HaveCount(1);
"
28207,"		} else {

 			symmetricDifferenceSet.Add(item)

 		}

 	}

 	for _, item := range st2.GetItems() {

 		if !dropSet.In(item) {
"
18166,"                10, 10, 10, 11, 11, 11, 11, 11, 12, 12,

                 12, 12, 12, 12, 13, 13, 13, 13, 13, 13};

             var sequence = new GolombsSequence().Sequence.Take(50);

             sequence.SequenceEqual(expected).Should().BeTrue();

         }
"
78982," */

 char *octalToHexadecimal(long octalValue){

     char *hexadecimalValue = malloc(256 * sizeof(char));
"
18905,"﻿namespace Algorithms

 module Program =

     [<EntryPoint>]

     let main argv =

         // For sort algorihm testing
"
14936,"using std::tuple;

 using std::unordered_set;

 using std::vector;

 /**

  * @brief Comparator function for sorting a vector

  * @tparam S Data type of Process ID
"
30520,"    long long int prod = 1, max_prod = 0;

     /* if second command-line argument is given,

      * use it as the number of digits to compute
"
53721," * @returns void

  */

 void print(List *list);

 /**

  * @brief   Example function
"
10382,"#include <stdio.h>

 // Function to perform Ternary Search

 int ternarySearch(int l, int r, int key, int ar[])
"
67971,"    }

     atexit(cleanup);  // register at-exit function

 #endif
"
91816,"        |     |

         v     v

   C --> D <-- E

   F --> G
"
47167,"    virtual void print() {

         cout << ""I am shape"" << endl;

     }
"
12022,"        {

             var tree = new AvlTree<int>();

             tree.GetKeysPostOrder().SequenceEqual(Array.Empty<int>()).Should().BeTrue();

         }
"
17893,"  rescue StandardError

     puts 'Error: Please provide number only!'

   end

   # fahrenheit -> celsius = (value of fahrenheit - 32) * 5 / 9 => °C

   def self.fahrenheit_to_celsius(fahrenheit_input)
"
12772,"        {

             printf("" + "");

         }

     }

 }
"
32292,"        return 0;

     }

 }"
31355," * (an excellent history is given in Simon Singhs 'the Code Book').

  * It basically consists of substituting every plaintext character for a different ciphertext character.

  * It differs from the Caesar cipher in that the cipher alphabet is not simply the alphabet shifted,

  * it is completely jumbled.

  */
"
29618,"      pIndex += 1

     }

   }

   [partitionList[pIndex], partitionList[high]] = [partitionList[high], partitionList[pIndex]]

   return pIndex
"
19554,"  public void preordercall() {

     preorder(root);

     System.out.println(""."");

   }

   private void preorder(Node node) {
"
32034,"                ARRAY[i + 1] = TEMPORARY_ELEMENT;

             }

         }
"
16730," * 3) For array size less than a threshold(16) directly

  *    does insertion sort on array

  * @param {Array} array the array to be sorted

  * @param {Function} compare the comparison function

  *
"
58532,"            foreach (var ch in sequence)

             {

                 if (ch == '1')

                 {

                     result += '0';
"
77422,"    1,2,4,5,3,6,7,

     """"""

     if not isinstance(node, TreeNode) or not node:
"
20120,"        @test is_armstrong(x) == true

         x = 225     # Not an armstrong number

         @test is_armstrong(x) == false

         x = -23     # Not an armstrong number

         @test is_armstrong(x) == false

         x = 153     # an armstrong number
"
99354,"   * Creates and returns a new Dynamic Array Iterator

    *

    * @return Iterator a Dynamic Array Iterator

    */
"
17067,"                    queue.Enqueue(vertex!);

                 }

                 action?.Invoke(currentVertex);

                 visited.Add(currentVertex);
"
17284,"    load_vector: np.ndarray,

     max_iterations: int = 1000,

     tol: float = 1e-8,

 ) -> Any:

     """"""
"
29440,"julia> M1 = [1 2 3; 4 5 6];

 julia> M2 = [1 2 3; 4 8 12];

 julia> @test gauss_jordan(M1) == [1 0 -1; 0 1 2]        # Test Passed

 julia> @test_throws AssertionError gauss_jordan(M2)     # Test Passed - Thrown: AssertionError
"
23628,"        }

     }

     
"
28809,"if __name__ == ""__main__"":

     n, m = 10, 9

     tree = defaultdict(list)

     visited: dict[int, bool] = {}
"
13932,"deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]

 git-tree-sha1 = ""7937eda4681660b4d6aeeecc2f7e1c81c8ee4e2f""

 uuid = ""e7412a2a-1a6e-54c0-be00-318e2571c051""
"
32338,"	} else {

 		root = root.Left

 	}
"
25004,"package ahocorasick

 import (

 	""reflect""
"
15824,"{

     int i = 0;

     char x;

     while (s[i] != '\0')  // loop for covering entire string of brackets

     {

         // printf(""\t s[i]=%c\n"", s[i]); //DEBUG
"
13992,"    ensureIndexWithinBounds(p, q)

     const i = this.find(p)

     const j = this.find(q)

     if (i === j) return
"
27022,"        return array;

     }

     public static void main(String[] args) {

         // ==== Int =======
"
59165,"int main()

 {

     int a[10], n, i, j, temp;
"
30896," * @returns n-th element of the Fbinacci's sequence

  */

 uint64_t fibonacci(uint64_t n) {
"
57265,"    build_maxheap(a, n);

     heapsort(a, n);

     printf(""Sorted Output\n"");

     for (i = 1; i <= n; i++)

     {
"
15095,"puts trie.include?('not presented')

 # => false
"
34022,"                              // the left child of the deleted node

         }

         if (temp == *root)

         {

             free(*root);

             *root = replacement;
"
20641,"    return number == 0 ? 1 : (int) Math.floor(Math.log10(Math.abs(number)) + 1);

   }

   /**

    * Find the number of digits in a number faster version.

    *
"
14837,"            }

             var chroma = value * saturation;

             var hueSection = hue / 60;

             var secondLargestComponent = chroma * (1 - Math.Abs(hueSection % 2 - 1));

             var matchValue = value - chroma;
"
17659,"        File ""<stdin>"", line 40, in <module>

     ValueError: Electron concentration cannot be negative in a semiconductor

     >>> carrier_concentration(electron_conc=0, hole_conc=-400, intrinsic_conc=1200)

     Traceback (most recent call last):

         File ""<stdin>"", line 44, in <module>
"
21043,"/**

  * @file

  * @brief Implements [Rat in a

  * Maze](https://www.codesdope.com/blog/article/backtracking-to-

  * solve-a-rat-in-a-maze-c-java-pytho/) algorithm
"
18778,"                throw new InvalidOperationException(""There are no items in the queue."");

             }

             var dequeueIndex = endIndex;

             endIndex++;

             if (endIndex >= queue.Length)

             {
"
24158,"    return sum(1 for n in count.values() if 1 <= n <= 10)

 if __name__ == ""__main__"":

     print(f""{solution() = }"")
"
68539,"                    }

                 }

                 // Change the colors
"
22506,"}

 type set struct {

 	elements map[interface{}]bool

 }
"
79918,"				},

 				{

 					Start:  0,
"
18307," * @param x mouse pointer position at event

  * @param y mouse pointer position at event

  */

 void keyboard_cb(unsigned char key, int x, int y)

 {

     switch (key)
"
14772,"              << std::endl;

     std::pair<matrix<int>, matrix<int>> p =

         ciphers::HillCipher::generate_keys(3, 0, 100);

     matrix<int> ekey = p.first;

     matrix<int> dkey = p.second;
"
15931,"                }

             }

             return multiplied;

         }

         /// <summary>

         ///     Given a list of vectors, returns a single array of elements.
"
29261,"    cout<<sizeof(B)<<endl; // 24

     cout<<sizeof(C)<<endl; // 12

     /**
"
32273,"{

     public static class GaleShapley

     {

         /// <summary>
"
56479,"    distance<-sqrt(sum((x-y)^2))

     return (distance)

   }

   

   rows.dataset<-nrow(dataset)
"
10660,"                return self.left.predict(x)

         else:

             print(""Error: Decision tree not yet trained"")

             return None
"
14890,"  })

   it('Triangular : should return true', () => {

     expect(isTriangular(171)).toEqual(true)
"
11053,"    print(reverse_long_words(""Hey wollef sroirraw""))
"
32437,"    private static int numberOfRows(String word) {

         if (word.length() / keyword.length() > word.length() / keyword.length()) {

             return (word.length() / keyword.length()) + 1;

         } else {
"
12534,"    // according to the type of pointer                                  

 } 

 int main(){
"
12354,"            var matrix = new float[,]

             {

                 { 0, 3, 2 },

                 { 3, 0, 2 },

                 { 2, 2, 0 }

             };
"
20130,"                        current = previous + i;

                     }

                     yield return current;

                     previous = current;
"
88401,"# Output: [1]

 # @param {Integer[]} nums

 # @return {Void} Do not return anything, modify nums in-place instead.

 def sort_colors(nums)

   bubble_sort(nums)

 end
"
27203,"    if (nums[mid] > key) alteredBinSearch(nums, key, left, mid - 1, range, goLeft);

     else if (nums[mid] < key) alteredBinSearch(nums, key, mid + 1, right, range, goLeft);

     else {

       if (goLeft) {

         if (mid == 0 || nums[mid - 1] != key) range[0] = mid;

         else alteredBinSearch(nums, key, left, mid - 1, range, goLeft);
"
22782,"  public void displayLink() {

     System.out.print(value + "" "");

   }

   /**

    * Main Method

    *
"
22158,"# ╠═717cf919-fab5-48ef-be88-f6aa50c35851

 # ╠═794388a1-a3d5-4196-a108-f693b2dde5cb

 # ╠═0c0cefc5-2d3f-4b99-81ec-881dd553d01c

 # ╠═42666425-bed5-4007-8405-6178d840fdea
"
15312,"        return 1;

 }

 int size(Heap *heap) { return heap->count; }
"
14616,"    return filt

 def make_lowshelf(

     frequency: int, samplerate: int, gain_db: float, q_factor: float = 1 / sqrt(2)

 ) -> IIRFilter:

     """"""

     Creates a low-shelf filter
"
24575,"    return 0;

 }
"
17254,"            else if (hueSection > 3 && hueSection <= 4)

             {

                 red = ConvertToByte(matchValue);

                 green = ConvertToByte(secondLargestComponent + matchValue);

                 blue = ConvertToByte(chroma + matchValue);
"
24450,"      for (Vertex v2 : v.adjacentVerticies) {

         sb.append(v2.data);

         sb.append("" "");

       }
"
23231,"    /* Main loop of the algorithm */

     for (int len = 2; len <= N; len *= 2) {

       double angle = -2 * Math.PI / len * direction;

       Complex wlen = new Complex(Math.cos(angle), Math.sin(angle));

       for (int i = 0; i < N; i += len) {

         Complex w = new Complex(1, 0);
"
23130,"  }

   /**

    * Check for exact vector equality.

    *

    * @param vector The vector to compare to.

    * @returns Whether they are exactly equal or not.
"
84057,"            else

             {

                 return 0;

             }

         }

         else if (d == 1)
"
34015,"import { Vector2 } from '../Vector2.js'

 describe('Vector2', () => {

   describe('#equalsExactly', () => {

     it('should compare equality correctly', () => {

       expect(new Vector2(1, 0).equalsExactly(new Vector2(1, 0))).toBe(true)

       expect(new Vector2(1.23, 4.56).equalsExactly(new Vector2(0, 0))).toBe(false)
"
28976,"    }

     cout << ""main() after"" << endl;

     return 0;
"
31578,"})

 test('.count(), should return the number of disparate groups:', () => {

   expect(uf.count()).toBe(2)

 })

 test('should check if two components are connected, .connected(num1, num2):', () => {
"
15875,"#

 queue = SizedQueue.new(5)

 # When the queue is full, the push (same as <<) operation

 # will suspend the current thread until an item is taken off the queue.

 queue.push(:oranges)
"
12684,"        month = newMonth;

         day = newDay;

     }

 };

 /*

  * @brief Function that finds the month and day of Easter
"
99596,"            poly2 = poly2->next;

         }

         /* If both of them have same power then sum the coefficients

           place both the summed coefficient and the power in temp

           increase both the pointers poly1 and poly2
"
15462,"            if (bitmap.GetPixel(currentLocation.x, currentLocation.y) == targetColor)

             {

                 bitmap.SetPixel(currentLocation.x, currentLocation.y, replacementColor);

                 for (int i = 0; i < neighbors.Count; i++)

                 {

                     int x = currentLocation.x + neighbors[i].xOffset;
"
21953,"    {

         [Test]

         public static void TestOnMergeSorter(

             [Random(0, 1000, 100, Distinct = true)]

             int n)

         {
"
32261,"{

     Tptr p;

     p = root;

     while (p)
"
14204,"    sc.close();

   }

 }
"
17859,"{

     while($i-- > 0 && $set->valid())

     {

         yield $set->current();
"
30509,"/**

   *  @function Timsort is a hybrid stable sorting algorithm, derived from merge sort and insertion sort,

   *  designed to perform well on many kinds of real-world data.

   *  It was implemented by Tim Peters in 2002 for use in the Python programming language.

   *  It is also used to sort arrays of non-primitive type in Java SE 7,

   *  on the Android platform, in GNU Octave, on V8, Swift and Rust.
"
20211,"int sentinel_linear_search( int arr[], int len, int key ){

 	if(key == arr[len-1]){

 		return len-1;

 	}

 	

 	int temp = arr[len-1]; 
"
20950,"    return(4 * sum(inUnitCircle) / numSims)

 }

 set.seed(1)

 estimatePi(3000)
"
17725,"      // then this node is in top view

       if (!set.contains(hd)) {

         set.add(hd);
"
13838,"        /// <summary>

         ///     Gets Fibonacci sequence.

         /// </summary>

         public IEnumerable<BigInteger> Sequence

         {
"
12916,"        for (int i = 0; i < message.length(); i++) {

             if (Character.isAlphabetic(message.charAt(i)))

                 encoded += cipherMap.get(message.charAt(i));

             else
"
19758,"# Example

 ```julia

 floor_val(1.3)  # 1

 floor_val(2.0)  # returns 2.0

 floor_val(-1.7) # returns -2.0
"
32693,"  })

   describe('Variations of input array elements', () => {

     it('should correctly sort an input list that contains only positive numbers', () => {

       expect(cycleSort([50, 33, 11, 2])).toEqual([2, 11, 33, 50])

     })
"
36998,"};

 /** Main function

  * @returns `0` always

  */

 int main() {
"
26630,"/**

  * @addtogroup hash Hash algorithms

  * @{
"
13652,"    nums.count(num) == 1

   end

 end

 nums = [2, 2, 1]

 puts(single_number(nums))

 # Output: 1
"
27037,"            Assert.AreEqual(5, tree.Count);

         }

         [Test]

         public static void Remove_NodesWithOneChild_CorrectlyRemovesNodes()

         {
"
25544,"  Node<T> get _newUpperRight => Node<T>._(_center.x, top, width / 2.0,

       height / 2.0, maxDepth, maxItems, _depth + 1);

   Node<T> get _newLowerLeft => Node<T>._(left, _center.y, width / 2.0,
"
16346,"      if (array[i] > array[i + 1]) return false

     }

     return true

   }

   Timsort(data)

   if (isSorted(data)) {
"
20502,"        """"""

         return [

             self.padded_data[i : i + 64] for i in range(0, len(self.padded_data), 64)

         ]

     # @staticmethod
"
27468,"   * @param c hypotenuse length of a right triangle

    * @return boolean <tt>true</tt> if a, b, c satisfy the Pythagorean theorem, otherwise

    *     <tt>false</tt>

    */

   public static boolean isPythagTriple(int a, int b, int c) {
"
37095," * @tparam T typename of the array

  * @tparam N length of array

  * @param arr array to sort

  * @returns new array with elements sorted from a given array

  */
"
23933,"    /// The Knuth-Morris-Pratt Algorithm for finding a pattern within a piece of text

     /// with complexity O(n + m)

     /// </summary>

     /// <param name=""pattern""></param>

     /// <param name=""text""></param>
"
76419," * ### Algorithm

  * What is Swap?

  * Swapping two numbers means that we interchange their values.

  * Often, an additional variable is required for this operation. 

  * This is further illustrated in the following:

  * void swap(int x, int y){
"
68076,"  test("".add is adding elements in order"", () {

     LinkedList<double> linkedList = new LinkedList();

     linkedList.add(1);

     linkedList.add(2);
"
22613,"    {

         p_dic->number_of_elements = 0;

         /* initializes the elemens of the array with NULL-pointer */

         for (int i = 0; i < MAXELEMENTS; i++)
"
11080,"    B, inversions_q = count_inversions_recursive(Q)

     C, cross_inversions = _count_cross_inversions(A, B)

     num_inversions = inversion_p + inversions_q + cross_inversions

     return C, num_inversions
"
14053,"vector<string> * read_lines_from_file1_1(string &file_name) {

     vector<string> * lines=new vector<string>;

     string line;

     ifstream file_handle (file_name.c_str());
"
28711,"        operations_on_datastructures::inorder_traversal_of_bst::Node *root =

             nullptr;

         std::vector<int64_t> node_data{

             20, 3, 5, 6, 2, 23, 45, 78, 21};  ///< Data to make nodes in BST

         root = operations_on_datastructures::inorder_traversal_of_bst::makeBST(

             root,
"
26198,"    int maximumindex = high;

     for (int i = low; i <= high; i++) {

         if ((*vec)[i] >= maximum) {
"
41768,"    def __sub__(self, other: Vector) -> Vector:

         """"""

         input: other vector

         assumes: other vector has the same size

         returns a new vector that represents the difference.
"
19683,"                {

                     node = node.Left;

                 }
"
28230,"      } else {

         // subtract upcoming number until upcoming number not greater then prev max

         sum -= currentNum;
"
22903,"  })

 })

 describe('rgbToHsv', () => {
"
32623,"func TemplateBenchmarkExtendedGCD(b *testing.B, f testExtendedFunction) {

 	for i := 0; i < b.N; i++ {

 		f(98, 56)

 	}

 }

 func BenchmarkExtendedGCDRecursive(b *testing.B) {
"
13871,"        return result

     }

     /// Inserts a new item into this heap
"
10895,"      sum += 2 * f(a + i * step);

     } else {

       sum += 4 * f(a + i * step);

     }
"
28990,"    return(s_sq)

 end
"
15057,"                    force_y += (

                         self.gravitation_constant * body2.mass * dif_y / distance ** 3

                     )

             # Update the body's velocity once all the force components have been added

             body1.update_velocity(force_x, force_y, delta_time * self.time_factor)
"
30392,"#include <iostream>

 #include <limits>

 #define EPSILON \

     1e-6  // std::numeric_limits<double>::epsilon()  ///< system accuracy limit
"
15267,"//     j = Math.floor(Math.random() * uniques)

 //     if (!newAVL.find(array[j])) {

 //       throw new Error('inserted elements not found')

 //     }
"
15304,"  result = '0b'

   binary_x.each_char.with_index do |x_char, i|

     y_char = binary_y[i]

     result += if (x_char == '1' && y_char != '1') || (x_char != '1' && y_char == '1')

                 '1'
"
29292,"            tree.GetKeysPreOrder().SequenceEqual(new[] { 3, 2, 6, 5, 9 }).Should().BeTrue();

         }

         [Test]
"
15491,"        }

     }

     else

     {  // exceptions when no actual angle is present

         if (y > 0)

         {
"
10072,"            double yCurrent,

             Func<double, double, double> yDerivative)

         {

             var yNext = yCurrent + stepSize * yDerivative(xCurrent, yCurrent);
"
11466,"      result_hash[num] += 1

     else

       result_hash[num] = 1
"
15089,"      return new Vector2(x, y);

     }

     /**

      * Vector subtraction

      *

      * @param vector The vector to be subtracted.
"
51416,"    a = rand() % n;

     swap(0, a);

     v = i2c(0);
"
16774,"        while(t-- > 0) {

             String[] S = read.readLine().trim().split("" "");

             int V = Integer.parseInt(S[0]);

             int E = Integer.parseInt(S[1]);

             

             ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
"
50121,"int main() {

     struct Base base;

     base.v1=1;

     //base.print();
"
23479," * @brief Test implementations

  * @param ncrObj object which contains the precomputed factorial values and

  * ncr function

  * @returns void

  */
"
73339,"    {

         p->link = start;

         start = p;

     }

 }
"
33603,"// Package binary describes algorithms that use binary operations for different calculations.

 package binary

 func MeanUsingAndXor(a int, b int) int {
"
74430,"  if ((middleIndex === 0 || array[middleIndex - 1] <= array[middleIndex]) &&

         (middleIndex === originalLength - 1 || array[middleIndex + 1] <= array[middleIndex])) {

     return middleIndex
"
53452," * @param {*} text a big text in which pattern string is to find

  * @param {*} pattern the string to find

  */

 const KMPSearch = (text, pattern) => {
"
11830,"#define max(a, b) (((a) > (b)) ? (a) : (b))

 #endif

 #ifndef min
"
13636,"        table = tableBuilder(word);

         Object[][] sortedTable = sortTable(table);

         StringBuilder wordEncrypted = new StringBuilder();

         for (int i = 0; i < sortedTable[i].length; i++) {

             for (int j = 1; j < sortedTable.length; j++) {

                 wordEncrypted.append(sortedTable[j][i]);
"
15343,"                swap(&arr[j], &arr[j + 1]);

                 swapped = true; /* set flag */

             }

         }

         if (!swapped)

         {
"
20877,"        /// <returns>New node with rotation applied.</returns>

         private AvlTreeNode<TKey> RotateLeft(AvlTreeNode<TKey> node)

         {

             var temp1 = node;

             var temp2 = node!.Right!.Left;

             node = node.Right;
"
23073,"        newInputString <- newInputString + (string) inputString.[^1]

         // We will store the starting and ending of previous furthest ending palindromic

         // substring

         let mutable l, r = 0, 0

         // length.[i] shows the length of palindromic substring with center i
"
19584,"        ...

     ValueError: math domain error

     >>> gamma(9)

     40320.0
"
21977,"            val = 3;

             break;

         case 100:
"
12194,"        }

         [Test]

         public static void FindIndex_ItemMissing_MinusOneReturned(
"
27512,"   * @return the value {@code a}<sup>{@code b}</sup>.

    */

   public static long pow(int a, int b) {
"
15548,"    struct ListNode *list = NULL;

     struct ListNode *tmp = NULL;

     if (!l1)

         return l2;

     if (!l2)
"
38144,"from typing import Optional

 class Node:

     def __init__(self, data: int) -> None:

         self.data = data

         self.next = None

 class LinkedList:
"
32475,"#include <string.h>

 // a structure to represent a weighted edge in graph

 struct Edge

 {
"
33478,"    }

   }

   return false

 }
"
18535,"#include <iostream>

 #include <cstring>

 using namespace std;
"
31792,"                       -1, 1,  1, 1,  -1};  // corresponding y-values

     for (int i = 0; i < N; i++)

     {

         X[i] = (double *)saved_X[i];

     }

     printf(""------- Test 1 -------\n"");
"
11317,"    @param precision: number of terms in the second summation to calculate.

     A higher number reduces the chance of an error but increases the runtime.

     @return: a hexadecimal digit representing the digit at the nth position

     in pi's decimal expansion.

     >>> """".join(bailey_borwein_plouffe(i) for i in range(1, 11))

     '243f6a8885'
"
17742,"        };

         [Test]

         public void Multiply_ShouldThrowInvalidOperationException_WhenOperandsAreNotCompatible()
"
11931," *

  * The algorithm uses the Euclidean method of getting remainder:

  * r_i+1 = r_i-1 - qi*ri

  * and applies it to series s and t (with same quotient q at each stage)

  * When r_n reaches 0, the value r_n-1 gives the gcd, and s_n-1 and t_n-1 give the coefficients
"
30315,"}

 export { findHCF }
"
19030,"    3

     >>> solution(10)

     23

     >>> solution(600)

     83700
"
32362,"        }

         [Test]

         public static void PopTest()
"
12742,"        int m = 0, n = 0;

         std::vector<std::vector<int> > adj(a + 1);

         for (int i = 0; i < b; i++)  // take total b inputs of 2 vertices each

                                      // required to form an edge.

         {

             std::cin >> m >> n;  // take input m,n denoting edge from m->n.
"
90488,"    hexadecnum = scan.nextLine();

     // first convert hexadecimal to decimal

     decnum =

         hex2decimal(

             hexadecnum); // Pass the string to the hex2decimal function and get the decimal form in

     // variable decnum
"
22691," *

  * There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.

  */

 function problem9(): int

 {

     for ($i = 0; $i <= 300; $i++) {
"
25120,"    }

     /**

      * Server Address Information
"
17925,"    array (list[int]) : given array

     Returns :

     max_sum (int) : maximum contiguous sum of array from 0 index
"
17098,"import java.util.Objects;

 import java.util.Optional;

 import java.util.stream.Stream;
"
18320," * @brief Function validEntryLineColumn

  * Responsible for validating entries, for positioning boats

  * @param line matrix row
"
25565,"typedef struct

 {

     int *values;

     int CurrentIndex;
"
18877,"            445,

             1336,

             668,

             334,

             167,

             502,
"
26766,"    letters += traverse_tree(treenode.right, bitstring + ""1"")

     return letters

 def huffman(file_path: str) -> None:

     """"""

     Parse the file, build the tree, then run through the file
"
22583,"                root = node;

             }

             return node;

         }

         /// <summary>

         ///     Perform a right (clockwise) rotation.
"
10893,"export reverse_complement

 # Exports: searches

 export binary_search

 export exponential_search
"
19722,"}

 // Functions that builds Aho Corasick automaton.

 func BuildAc(p []string) (acToReturn map[int]map[uint8]int, f map[int][]int, s []int) {

 	acTrie, stateIsTerminal, f := ConstructTrie(p)

 	s = make([]int, len(stateIsTerminal)) //supply function

 	i := 0                                //root of acTrie
"
33202,"  }

   /** To call postorder traversal on tree */

   public void postorder() {

     System.out.println(""Postorder traversal of this tree is:"");

     postOrder(this.root);
"
26856,"    test(new int[]{});

     test(new int[]{1, 2, 3});

     test(new int[]{1, 2, 3, 4, 5});

     test(new int[]{1, 2, 3, 4, 5, 6, 7});
"
20035,"    expect(merge([5, 4], [1, 2, 3])).toEqual([1, 2, 3, 5, 4])

     expect(merge([], [1, 2])).toEqual([1, 2])

     expect(merge([1, 2, 3], [1])).toEqual([1, 1, 2, 3])
"
16379,"puts roman_to_int(s)

 # Output: 9

 s = 'LVIII'

 puts roman_to_int(s)
"
14774,"    /// </summary>

     public static class PerfectNumberChecker

     {

         /// <summary>
"
90670,"}

 void resize(hash_set_t *set)

 {

     void **keys_resized = calloc((set->capacity <<= 1), sizeof(void **));

     for (int i = 0; i < set->length; i++)
"
28837,"    return distance

 if __name__ == ""__main__"":

     import doctest

     doctest.testmod()

     V = int(input(""Enter number of vertices: "").strip())
"
17544,"    if (start == null) {

       start = new Node(startNode);

       nodeList.add(start);

     }
"
13675,"def oct_to_decimal(oct_string: str) -> int:

     """"""

     Convert a octal value to its decimal equivalent

     >>> oct_to_decimal(""12"")

     10
"
22789,"            right_sum = summ

             max_right = i

     return max_left, max_right, (left_sum + right_sum)

 def max_sub_array(nums: list[int]) -> int:
"
28537,"      // Uncomment the below line to see the state of combinations for each coin

       // printAmount(combinations);

     }

     return combinations[amount];

   }

   /**
"
88598,"struct queue q;

 /* This function initializes the queue to empty by making both front and rear as

  * NULL */

 void createqueue() { q.front = q.rear = NULL; }
"
29542,"    return sum;

 }

 /** Main function */

 int main(int argc, char **argv)

 {

     unsigned long sum = 0;
"
26752,"{

     /// <summary>

     ///     Class for NYSIIS encoding strings.

     /// </summary>
"
33076,"    assert isAllCharactersSame(""aaa"");

     assert isAllCharactersSame(""11111"");

   }

   /**

    * check if all the characters of a string are same

    *
"
12060,"  const graph = [[0, 3, -1], [0, 2, 4],

     [3, 2, 2], [3, 1, 5],

     [2, 1, -1]]

   const dist = BellmanFord(graph, V, E, 0, destination)

   expect(dist).toBe(0)

 })
"
24328,"        }

         /// <summary>

         ///     Return elements to original array.

         /// </summary>

         /// <param name=""data"">Input array.</param>

         /// <param name=""buckets"">Array of buckets.</param>
"
31651,"    arrivals = new HashMap<>();

     System.out.print(""Enter the no. of processes: "");

     noOfProcess = in.nextInt();

     System.out.println(""Enter the arrival, burst and priority of processes"");

     for (int i = 0; i < noOfProcess; i++) {

       Process p = new Process();
"
60678,"/** \namespace search

  * \brief Algorithms for searching

  */

 namespace search {

 /** \namespace saddleback
"
18974,"      if (memAllocation.get(i) != NO_ALLOCATION) System.out.print(memAllocation.get(i));

       else System.out.print(""Not Allocated"");

       System.out.println();

     }

   }

 }
"
35519,"        const tmp = array[left]

         array[left] = array[right]

         array[right] = tmp

         --right
"
10952,"      }

     }

     return min;
"
25746,"    assert(math::binomial::calculate(1, 1) == 1);

     assert(math::binomial::calculate(57, 57) == 1);

     assert(math::binomial::calculate(6, 3) == 20);

     assert(math::binomial::calculate(10, 5) == 252);
"
26983,"        // Else discard the next_edge

     }

     // print the contents of result[] to display the
"
16250,"[[ManualMemory]]

 git-tree-sha1 = ""71c64ebe61a12bad0911f8fc4f91df8a448c604c""

 uuid = ""d125e4d3-2237-4719-b19c-fa641b8a4667""

 version = ""0.1.4""

 [[Markdown]]
"
23226,"        g_output.append(f""{md_prefix(indent)} [{filename}]({url})"")

     return ""# List of all files\n"" + ""\n"".join(g_output)

 with open(""DIRECTORY.md"", ""w"") as out_file:
"
11397,"  print(""4! = ${permutations([1, 2, 3, 4]).length}"");

   print(""5! = ${permutations([1, 2, 3, 4, 5]).length}"");

   print(""6! = ${permutations([1, 2, 3, 4, 5, 6]).length}"");

 }
"
23611,"        public static void GetValuesByDayOfYearTest()

         {

             var timeline = new Timeline<string>

             {

                 { new DateTime(1985, 1, 3), ""TestTime1"" }, //3rd day of year

                 { new DateTime(1990, 1, 7), ""TestTime2"" }, //7th day of year
"
25902,"    binary_number = str(bin(number))

     binary_number += ""0"" * shift_amount

     return binary_number

 def logical_right_shift(number: int, shift_amount: int) -> str:

     """"""

     Take in positive 2 integers.
"
28131,"    graph->visited[vertex] = 1;

     struct node *adjList = graph->adjLists[vertex];

     struct node *temp = adjList;

     // First add all dependents (that is, children) to stack
"
28072,"const areaCircle = (radius) => {

   validateNumericParam(radius, 'Radius')

   return (Math.PI * radius ** 2)
"
17420,"            toDelete = toDelete->right;

         }

     }

     else if (toDelete->right != NULL)

     {

         toDelete = toDelete->right;
"
10288,"// Bin2 function

 func Bin2(n int, k int) int {

 	var i, j int

 	B := make([][]int, (n + 1))

 	for i := range B {
"
14128,"/**

  * A Dynamic Programming based solution for calculating Zero One Knapsack

  * https://en.wikipedia.org/wiki/Knapsack_problem

  */

 const zeroOneKnapsack = (arr, n, cap, cache) => {
"
32442,"                    $""{nameof(stepSize)} should be greater than zero"");

             }

             List<double[]> points = new();

             double[] firstPoint = { xStart, yStart };

             points.Add(firstPoint);

             var yCurrent = yStart;
"
20785,"# => """"

 #

 # Approach 2: Regex

 #
"
25269,"    std::priority_queue<std::pair<int, std::string> >

         suggestions;  // max heap to store (frequency, word) in descending order

                       // of freq

     std::priority_queue<std::pair<int, std::string> > *Suggestions =

         &suggestions;

     for (auto &i : key) {
"
25703," * @brief Main function

  * @return 0 on exit

  */

 int main() {

     std::srand(std::time(nullptr));
"
21619,"git-tree-sha1 = ""45c9940cec79dedcdccc73cc6dd09ea8b8ab142c""

 uuid = ""102ac46a-7ee4-5c85-9060-abc95bfdeaa3""

 version = ""0.3.18""
"
26618,"                String[] s = read.readLine().trim().split("" "");

                 int u = Integer.parseInt(s[0]);

                 int v = Integer.parseInt(s[1]);

                 adj.get(u).add(v);
"
32361,"                    z_num = (

                         x_num * x_num * y_den * y_den + x_den * x_den * y_num * y_num

                     )

                     z_den = x_den * x_den * y_den * y_den

                     if is_sq(z_num) and is_sq(z_den):
"
75918,"      if (left.get(i).x == left.get(i + 1).x && left.get(i).y > left.get(i + 1).y) {

         left.remove(i);

         i--;
"
23545,"  // Checks if max capacity of queue has been reached or not

   checkOverflow () {

     if ((this.front === 1 && this.rear === this.maxLength) || (this.front === this.rear + 1)) {
"
86256,"            // Corresponding shift distance

             int[] s = new int[p.Length + 1];

             // Start of suffix including border of the pattern
"
10477,"	//      1---2

 	//      | / |

 	//  4---3---0
"
20038,"        private static void GappedBubbleSort(T[] array, IComparer<T> comparer, int start, int step)

         {

             for (var j = start; j < array.Length - step; j += step)
"
15076,"    int maxSoFar = nums[0], maxEndingHere = nums[0];

     for (int i = 1; i < numsSize; i++)

     {
"
17631,"  return answer;

 }

 void main() {

   test(('Test case 1:'), () {

     List<int> nodes = [0, 1, 2, 3];
"
21541,"}
"
17223,"    int V = 6;

     Graph g = newGraph(V);

     Edge e;

     e.v = 0;

     e.w = 1;
"
76399," * @details The integration domain [a,b] is given by the pdf.

  * The pdf has to fulfill the following conditions:

  * 1) for all x \in [a,b] : p(x) > 0
"
30010,"            c = a - b; // Subtraction of numbers

             others::postfix_expression::push(c, stack);

             break;

         case '*':
"
27113,"            comparer = new PairingNodeComparer<T>(sortDirection, Comparer<T>.Default);

         }

         /// <summary>

         /// Insert a new Node [O(1)].

         /// </summary>

         public void Insert(T newItem)
"
51235,"    for (int i = 0, limit = len / 2; i < limit; ++i)

     {

         char t = dest[i];

         dest[i] = dest[len - 1 - i];

         dest[len - 1 - i] = t;
"
20339,"            np.mat(-1 * np.random.rand(self.conv1[0], self.conv1[0]) + 0.5)

             for i in range(self.conv1[1])

         ]

         self.wkj = np.mat(-1 * np.random.rand(self.num_bp3, self.num_bp2) + 0.5)

         self.vji = np.mat(-1 * np.random.rand(self.num_bp2, self.num_bp1) + 0.5)

         self.thre_conv1 = -2 * np.random.rand(self.conv1[1]) + 1
"
30796,"    return result;

 }

 }  // namespace modular_division

 }  // namespace math

 /**

  * Function for testing power function.
"
14813,"{

     public class FactorialSequenceTest

     {

         [Test]

         public void First10ItemsCorrect()

         {
"
11380,"func (n *Node) Compact() (remove bool) {

 	for r, c := range n.children {

 		if c.Compact() {
"
44986,"    for (i = 0; i < range; i++)

     {

         holes[i] = 0;

     }

     for (i = 0; i < size; i++)
"
19982,"		return NULL;

 	}

 	newMemInfo->ptr = ptrToReturn;

 	newMemInfo->bytes = bytes;

 	newMemInfo->line = line;

 	newMemInfo->fileName = filename;
"
28780,"    {

         /// <summary>

         ///     Gets sequence of Catalan numbers.

         /// </summary>
"
18568,"      end = 0;

       queue[0] = element;

       return;
"
25927,"        else

             return digitalRoot(single(n));

     }

     // This function is used for finding the sum of digits of number
"
76760,"        if (curr->word_end && curr->children.empty()) {

             result.push_back(prefix);

             return result;
"
20653,"    displayCArray(carray);

     printf(""\nInsertion Sort:"");

     clock_t begin3 = clock();

     // Timing insertion sort

     insertionSortCArray(darray);

     clock_t end3 = clock();
"
30355,"        // Pushing `arr[i]` to the heap

         /*heapifyUp Adjusts arr[i] to the correct position in the heap*/

         heapifyUp(arr, i);

     }

     for (uint8_t i = size - 1; i >= 1; i--)

     {
"
20144," * @param column matrix column

  * @returns if the row and column are valid

  */
"
24291," * @author straiffix

  * @author beingmartinbmc

  */

 public class Vigenere {
"
26423,"        return 1;

     }

     else if (no % 2 == 0)

     {

         return 0;
"
14254,"/**

  * @brief Count func counts the number of 

  * prime numbers.

  * @param arr contains the prime numbers
"
26228,"  public static void main(String[] args) {

     String a = ""BBABCBCAB"";

     String b = ""BABCBAB"";

     String aLPS = LPS(a);

     String bLPS = LPS(b);
"
27319,"}

 /**

  * @brief Function to pop from the stack

  * @returns popped character

  */

 char pop() {
"
24792,"    let count = 0

     while (count < index) {

       count++

       currentNode = currentNode.next

     }
"
33057,"                  parent = child                                # Move parent pointer to this child 

                   child = parent*2+1                            #  find the next child

               else

                   break # t's place is found 

               end

           end
"
31459,"export { quickSort }
"
26087,"    ValueError: find_min() arg is an empty sequence

     """"""

     if len(nums) == 0:

         raise ValueError(""find_min() arg is an empty sequence"")
"
13382,"	}

 	return -1, ErrNotFound

 }
"
17254,"package power

 import (

 	""math""

 )

 func UsingLog(a float64, b float64) float64 {

 	var p float64
"
30474,"// func stateExists(state int, at map[int]map[uint8]int) bool {

 // 	_, ok := at[state]

 // 	if !ok || state == -1 || at[state] == nil {

 // 		return false

 // 	}

 // 	return true
"
18695,"        /* Get sign bit */

         sign = (pcm & 0x8000) >> 8;

         /* Turn negative pcm to positive */
"
21921,"// 		fmt.Printf(""%c"", t[a])

 // 	}

 // 	if getTransition(current, t[pos+j-1], oracle) == -1 {

 // 		fmt.Printf("" FAIL on the character[%c]"", t[pos+j-1])

 // 	}

 // }
"
19008,"deps = [""LinearAlgebra"", ""LoopVectorization""]

 git-tree-sha1 = ""2e1a88c083ebe8ba69bc0b0084d4b4ba4aa35ae0""

 uuid = ""f2c3362d-daeb-58d1-803e-2bc74f2840b4""

 version = ""0.1.13""
"
24119,"                switch (a[mid]) {

                     case 0: {

                         temp = a[l];

                         a[l] = a[mid];
"
15236,"{

     int reversedNumber = 0;

     int originalNumber = number;

     while (number != 0)

     {
"
28348,"    >>> solution(20)

     31

     >>> solution(15)

     26

     """"""

     n = 2 ** power
"
28909,"    ""f"": ""AABAB"",

     ""g"": ""AABBA"",

     ""h"": ""AABBB"",

     ""i"": ""ABAAA"",

     ""j"": ""BBBAA"",

     ""k"": ""ABAAB"",
"
11820,"    printf(""encode: "");

     for (size_t i = 0; i < LEN; i++)

     {

         printf(""%u "", coded[i]);
"
81105,"        ///     Go through the number of iterations determined by the argument ""steps"".

         ///     Be careful with high values (above 5) since the time to calculate increases

         ///     exponentially.
"
28870,"# Radix sort in R:

 radix.sort <- function(elements.vec) {

     x <- nchar(max(elements.vec))

     for (i in 1:x)

         elements.vec <- elements.vec[order(elements.vec %% (10 ^ i))]

     return(elements.vec)
"
22186,"[1]: https://github.com/TheAlgorithms/Python/blob/master/other/two_sum.py

 """"""

 from __future__ import annotations

 def two_pointer(nums: list[int], target: int) -> list[int]:

     """"""

     >>> two_pointer([2, 7, 11, 15], 9)
"
28105,"            // if new index's result gives us more right interval,

             // we've to update left_pointer and right_pointer

             if i + zResult.[i] - 1 > rightPointer then

                 leftPointer <- i
"
19233,"package DataStructures.Trees;

 import java.util.HashMap;

 import java.util.Map;

 import DataStructures.Trees.BinaryTree.Node;
"
95107,"test('should return the index of a string in an array of strings:', () => {

   const indexNumber = ternarySearchRecursive(['Ali', 'Cathrynli', 'Josuke', 'Thomas'], 'Angela')

   expect(indexNumber).toBe(-1)

 })
"
68436,"        {

             var values = GetValues(count);

             var value = values[TestContext.CurrentContext.Random.Next(count - 1)];

             var list = new SortedList<int>();

             foreach (var i in values)
"
67674,"            if level > self.level:

                 # After level increase we have to add additional nodes to head.

                 for i in range(self.level - 1, level):
"
55720,"    }

     ;

   }
"
24359,"public int[] BruteForce(int[] nums, int target) {

 	     //Brute Force Approach 

 	        int ans[]=new int[2];

 	        for (int i=0;i<nums.length;i++)
"
28764,"  if (Number.isNaN(result)) { throw Error('Result is NaN. The input interval does not belong to the functions domain') }

   return result

 }

 export { integralEvaluation }
"
33673,"    if n > 2:

         count += 1

     return count

 if __name__ == ""__main__"":
"
82106,"}
"
48049,"    int64_t distance = INF;

     for (uint64_t i : workset_) {

         if (distance_[0][i] + distance_[1][i] < distance) {

             distance = distance_[0][i] + distance_[1][i];
"
15607,"            int to_y = std::min<int>(W[0].size(), j + R + 1);

             int l = 0, m = 0;

 #ifdef _OPENMP

 #pragma omp parallel for reduction(+ : distance)

 #endif
"
79781,"ܽ᣺ʹǰʱֻʹñķţ漰κϸڡ

 */"
32508,"/**

  * Converts an integer value to a null-terminated string using the specified

  * base and stores the result in the array given by str parameter.

  * @param value Value to be converted to a string.

  * @param dest pointer to array in memory to store the resulting null-terminated
"
14118,"		}

 		else if(inf[i] == '(') {		// if scanned element is opening parentheses

 			push(inf[i]);				// push on stack.

 		}
"
83912,"using System;

 using Algorithms.Knapsack;

 using NUnit.Framework;

 using FluentAssertions;

 namespace Algorithms.Tests.Knapsack
"
29792,"    place the rest of the other polynomial as it is in temp

     by creating nodes dynamically

     */

     while (poly1 || poly2)
"
18374,"    int range = 500;          // sample points full-range

     int range2 = range >> 1;  // sample points half-range

     for (int i = 0; i < N; i++)

     {
"
16225,"        {

             var index = new InvertedIndex();

             var source1 = ""one star is sparkling bright"";
"
32721,"# @param {Integer[]} nums

 # @return {Integer}

 def max_product(nums)

   return nums[0] if nums.length == 1

   cur_min = 1
"
17805,"# brackets.

 # Complexity Analysis

 #

 # Time Complexity: O(4^n/sqrt(n)). Each valid sequence has at most n steps during the backtracking procedure.

 # Space Complexity: O(4^n/sqrt(n)), as described above, and using O(n) space to store the sequence.

 # Refer to the attached diagram for recursion,
"
31103,"julia> vol_cuboid(1, 2, 3)

 6

 ```
"
12058,"    case 11: return 'B'

     case 12: return 'C'

     case 13: return 'D'
"
35147,"  return 0;

 }
"
22595,"version = ""0.3.0""

 [[Compat]]

 deps = [""Base64"", ""Dates"", ""DelimitedFiles"", ""Distributed"", ""InteractiveUtils"", ""LibGit2"", ""Libdl"", ""LinearAlgebra"", ""Markdown"", ""Mmap"", ""Pkg"", ""Printf"", ""REPL"", ""Random"", ""SHA"", ""Serialization"", ""SharedArrays"", ""Sockets"", ""SparseArrays"", ""Statistics"", ""Test"", ""UUIDs"", ""Unicode""]

 git-tree-sha1 = ""344f143fa0ec67e47917848795ab19c6a455f32c""

 uuid = ""34da2185-b29b-5c13-b0c7-acf172513d20""

 version = ""3.32.0""
"
56887,"                }

             }

         }

         /// <summary>

         ///     Checks whether current queen can be placed in current position,

         ///     outside attacking range of another queen.
"
42737," */

 std::string tolowerRoman(int n) {

     if (n < 4)

         return fill('i', n);

     if (n < 6)
"
18647,"﻿namespace Algorithms.Search

 open System

 module BinarySearch =

     let rec byRecursion (sortedData: IComparable [], item: int, left: int, right: int) =

         let middle = left + (right - left) / 2

         match sortedData.[middle] with
"
15414,"            else

                 lim_b = u;

             if (fu <= fw || x == w) {

                 v = w;

                 fv = fw;
"
14684,"    )

     expect(undefinedFactorial).toBe(

       'Sorry, factorial does not exist for null or undefined numbers.'

     )

   })
"
21076,"git-tree-sha1 = ""215a9aa4a1f23fbd05b92769fdd62559488d70e9""

 uuid = ""fa961155-64e5-5f13-b03f-caf6b980ea82""

 version = ""0.4.1""

 [[CSTParser]]

 deps = [""Tokenize""]

 git-tree-sha1 = ""9723e1c07c1727082e169ca50789644a552fb023""
"
29686,"  def add_at_index(index, val)

     case index

     when 0 then insert_head(val)

     when @size then insert_tail(val)

     when 1...@size
"
18877," * @brief BFS and DFS algorithms to check for cycle in a directed graph.

  *

  * @author [Anmol3299](mailto:mittalanmol22@gmail.com)
"
18930,"            Assert.AreEqual(new[] { 0, 1, 2, 3, 4 }, arr);

         }

         [Test]

         public static void TestRemove()

         {

             var dll = new DoublyLinkedList<int>(new[] { 0, 1, 2, 3, 4 });
"
28705,"﻿using System;

 namespace Algorithms.Numeric

 {

     /// <summary>

     ///     A perfect square is an element of algebraic structure that is equal to the square of another element.

     /// </summary>
"
17027,"export const shuffle = (array) => {

   let maxLength = array.length

   let temp

   let idx
"
14419,"/* Ascending priority queue using Linked List - Program to implement Ascending

  * priority queue using Linked List */

 /*A priority queue is a special type of queue in which each element is

 associated with a priority and is served according to its priority. If elements

 with the same priority occur, they are served according to their order in the

 queue.
"
33253,"    {

         // TODO: Use partial sorter

         private readonly IComparisonSorter<ListNode> sorter;

         private readonly Translator translator;

         public HuffmanCompressor(IComparisonSorter<ListNode> sorter, Translator translator)

         {
"
28398,"//   'India',

 //   'Juliet',

 //   'Kilo',
"
29672,"package graph

 import (

 	""testing""

 )

 func TestBreadthFirstSearch(t *testing.T) {
"
25020,"            // If supplied activation is invalid

             std::cerr << ""ERROR ("" << __func__ << "") : "";

             std::cerr << ""Invalid argument. Expected {none, sigmoid, relu, ""

                          ""tanh} got "";

             std::cerr << activation << std::endl;

             std::exit(EXIT_FAILURE);
"
27063,"    assert str(linked_list) == ""->"".join(str(i) for i in range(-8, 1))

 def test_singly_linked_list_2() -> None:

     """"""

     This section of the test used varying data types for input.

     >>> test_singly_linked_list_2()

     """"""
"
18806,"    [0, 1, true],

     [0, 2, true],

     [1, 1, true],
"
69321,"            ""Column must be a list containing all ints and/or floats""

         )

         if not isinstance(column, list):
"
36797," * the child process can send data and the parent process can receive data. It

  * runs an infinite loop and can send and receive messages indefinitely until

  * the user exits the loop. In this way, the Full Duplex Form of communication
"
33801,"# in this case, 0 will be returned for Julia with start index of 1

 # reason is that -1 is for language with start index of 0

 # Should be convenient for others as most programming language use -1 if the string does not contain the sub-string given

 const NO_SUBSTRING_INDEX = 0

 # 1 is the first index, unlike others, where 0 is the first index
"
15756,"    })

     it('should correctly sort an input list of an odd length', () => {

       expect(combSort([101, -10, 321])).toEqual([-10, 101, 321])

     })

     it('should correctly sort an input list of an even length', () => {

       expect(combSort([40, 42, 56, 45, 12, 3])).toEqual([3, 12, 40, 42, 45, 56])
"
54925,"            '""%s_pubkey.txt"" or ""%s_privkey.txt"" already exists. \n'

             ""Use a different name or delete these files and re-run this program.""

             % (name, name)
"
29892,"  }

   // Returning the value

   if (is_negative) {

     return ""-"" + oct_val;
"
13731,"#include <stdio.h>

 struct node

 {

     int info;

     struct node *link;
"
93545,"  def initialize

     @head = nil

   end
"
20031,"    tree2.left.right = Node(9)

     tree2.right.right = Node(5)

     print(""Tree1 is: "")

     print_preorder(tree1)

     print(""Tree2 is: "")
"
29177,"    >>> min_arr.query_range(2, 2)

     5

     >>> min_arr.query_range(1, 3)

     3

     >>>
"
33053,"            v = visited[v];

         }

         printf(""%d\n"", src);
"
27389,"if __name__ == ""__main__"":

     import doctest

     doctest.testmod()
"
29956,"    20

     2000

     >>> new_linked_list.is_empty()

     False
"
14739,"version = ""0.11.1""

 [[ParameterizedFunctions]]

 deps = [""DataStructures"", ""DiffEqBase"", ""DocStringExtensions"", ""Latexify"", ""LinearAlgebra"", ""ModelingToolkit"", ""Reexport"", ""SciMLBase""]
"
30423,"        /// <param name=""x"">Given point.</param>

         /// <param name=""n"">The number of terms in polynomial.</param>

         /// <returns>Approximated value of the function in the given point.</returns>
"
26377,"        current = current.next;

       } else { // If we reach the tail and the element is still not found

         throw new RuntimeException(""The element to be deleted does not exist!"");
"
63580,"        let zResult = zFunction (pattern + inputString)

         for value in zResult do

             // If value is greater then length of the pattern string

             // that means this index is starting position of substring

             // which is equal to pattern string

             if value >= pattern.Length then
"
82552,"        while idx >= 0:

             self.max_heapify(idx)

             idx = (idx - 1) // 2
"
32943,"      mid1 = l + (r - l) / 3

       mid2 = r - (r - l) / 3

       # check if key is equal to mid1
"
15799,"      }

     }

     /* copy left element of listA to listC */

     while (pa < listA.size()) {
"
12423,"            75709, 75721, 75731, 75743, 75767, 75773, 75781, 75787, 75793, 75797, 75821, 75833, 75853, 75869, 75883,

             75913, 75931, 75937, 75941, 75967, 75979, 75983, 75989, 75991, 75997, 76001, 76003, 76031, 76039, 76079,

             76081, 76091, 76099, 76103, 76123, 76129, 76147, 76157, 76159, 76163, 76207, 76213, 76231, 76243, 76249,

             76253, 76259, 76261, 76283, 76289, 76303, 76333, 76343, 76367, 76369, 76379, 76387, 76403, 76421, 76423,

             76441, 76463, 76471, 76481, 76487, 76493, 76507, 76511, 76519, 76537, 76541, 76543, 76561, 76579, 76597,
"
15104,"		} else if (chp == '*') {

 			boolean blank = regexRecursion(src, rop);

 			boolean multiple = regexRecursion(ros, pat);
"
28351,"    expect(powerDigitSum()).toBe(1366)

     expect(powerDigitSum(2, 1000)).toBe(1366)

   })
"
13581,"  })

 })

 describe('Testing Conversion of Reamur to Celsius', () => {

   it('with Reamur value', () => {
"
22856,"  @override

   bool moveNext() => _current != null;

   @override

   T get current {

     T currentValue = this._current.value;

     this._current = this._current.next;
"
10874,"};

 class C:virtual public A{

     int x;

 public:

     C(int i):A(i){
"
27353,"            if (MinItem == null)

             {

                 throw new InvalidOperationException(""The heap is empty"");
"
26043,"  public static long pow(int a, int b) {

     return b == 0 ? 1 : a * pow(a, b - 1);

   }

 }
"
26692,"  }

   printGraph (output = value => console.log(value)) {

     const keys = Object.keys(this.adjacencyMap)
"
19312,"  'Six',

   'Seven',

   'Eight',

   'Nine',

   'Ten'
"
73474,"    Decompresses given data_bits using Lempel–Ziv–Welch compression algorithm

     and returns the result as a string

     """"""
"
29798,"        ""https://www.horoscope.com/us/horoscopes/general/""

         f""horoscope-general-daily-{day}.aspx?sign={zodiac_sign}""

     )

     soup = BeautifulSoup(requests.get(url).content, ""html.parser"")
"
21013,"    }

     prev.next = this.head

     this.size--

   }

   printData (output = value => console.log(value)) {

     let count = 0
"
26801,"    int hash_s = 0; /* hash value for string text */

     int hash_p = 0; /* hash value for pattern */

     /* h = pow(d, len_pat - 1) % q */

     for (i = 0; i < len_pat - 1; i++) h = d * h % q;

     /* Calculating hashing of pattern and the 1st window of text */

     for (i = 0; i < len_pat; i++)
"
13813,"                2 * index + 1,

                 2 * index + 2,

                 4 * index + 3,

                 4 * index + 4,

                 4 * index + 5,

                 4 * index + 6,
"
97710,"/**

  * @brief   Self-test implementation

  *

  * @returns void
"
16905,"void main() {

   ArrayStack<String> array_stack = new ArrayStack<String>(6);

   array_stack.push('1');

   array_stack.push(""2"");
"
29398,"    /* 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 0.6 + 0.7 + 0.8 + 0.9 + 1.0 */

     assert Double.compare(5.5, sumOfSeries(0.1, 0.1, 10)) == 0;

     assert Double.compare(49600.0, sumOfSeries(1, 10, 100)) == 0;

   }

   /**

    * Calculate sum of arithmetic series
"
68762,"            node_1 = self.head

             while node_1 is not None and node_1.data != node_data_1:

                 node_1 = node_1.next

             node_2 = self.head

             while node_2 is not None and node_2.data != node_data_2:

                 node_2 = node_2.next
"
24478,"        /// <summary>

         ///     Method to find a linear equation system using gaussian elimination.

         /// </summary>

         /// <param name=""matrix"">The key matrix to solve via algorithm.</param>

         /// <returns>
"
33765,"        data |> Array.iter (printf ""%d "")

         printfn """"

     let split (data: int []) pos = data.[0..pos], data.[(pos + 1)..]
"
18690," * @author Pratik Padalia (https://github.com/15pratik)

  * @see SearchAlgorithm

  * @see BinarySearch

  */

 class LowerBound implements SearchAlgorithm {
"
18184,"			array:       []int{1, 2, 3, 4, 5},

 			updates: []update{{firstIndex: 1, lastIndex: 1, value: 2},

 				{firstIndex: 2, lastIndex: 2, value: 3}},

 			queries:  []query{{0, 5}, {0, 2}, {2, 4}},
"
15689,"// rsa_test.go

 // description: Test for RSA Encrypt and Decrypt algorithms

 // author(s) [Taj](https://github.com/tjgurwara99)
"
21514,"    {

         public PathfindingException(string message)

             : base(message)
"
68583,"    while stack2:  # pop up from stack2 will be the post order

         print(stack2.pop().data, end="","")

 def prompt(s: str = """", width=50, char=""*"") -> str:
"
14059,"    return sum;

   }

   /**

    * Calculate the sum of digits of a number using recursion

    *

    * @param number the number contains digits
"
27902,"    /// </summary>

     /// <remarks>

     ///     A binary heap is a complete binary tree that satisfies the heap property;

     ///     that is every node in the tree compares greater/less than or equal to its left and right

     ///     child nodes. Note that this is different from a binary search tree, where every node

     ///     must be the largest/smallest node of all of its children.
"
11086,"}

 /** @} */

 /** Main function */

 int main()
"
31625,"					Weight: 1,

 				},

 				{

 					Start:  1,

 					End:    3,
"
75056,"    assert(fabsf(c.x - (-1.f)) < 0.01);

     assert(fabsf(c.y - (2.f)) < 0.01);

     assert(fabsf(c.z - (-1.f)) < 0.01);

     double alpha = get_angle(&a, &b);
"
15294,"	for i := range g.edges {

 		if colors[i] == 0 {

 			colors[i] = 1
"
26790,"    plt.plot(X, alg_product)

     plt.title(""alg_product"")

     plt.grid(True)
"
55033,"        int temp = a[i][j];

         a[i][j] = a[k][j];

         a[k][j] = temp;

       }

       i++;

       k--;
"
26400,"        <method Matrix.__neg__>

         Return -self.

         Example:

         >>> a = Matrix(2, 2, 3)
"
12018,"    10 8

     On removing edges (1,3) and (1,6), we can get the desired result 2.

     """"""

     dfs(1)
"
13189,"        SortUtils.print(integerArray);

         String[] stringArray = {""g"", ""d"", ""a"", ""b"", ""f"", ""c"", ""e""};

         // Print stringArray unsorted
"
22863,"        temp = temp->next;

     }

     // and then add itself

     push(stack, vertex);

 }
"
31089,"    return NodeStack.head;

   }

   private static void setHead(NodeStack<?> ns) {
"
12611,"    

     Given a N*N board with the Knight placed on the first block of an empty board. Moving according to the rules of

     chess knight must visit each square exactly once. Print the order of each cell in which they are visited.

     Example: -
"
12799,"    int n, i;

     printf(""Enter number of elements of array\n"");

     scanf(""%d"", &n);

     int a[20];

     for (i = 1; i <= n; i++)
"
23956," * CoPrimeCheck function return the boolean in respect of the given number is co-prime or not.

  * @param {Number} firstNumber first number for checking is prime or not.

  * @param {Number} secondNumber second number for checking is prime or not.

  * @returns return correspond boolean value, if both number are co-prime return `true`, else return `false`.

  */

 const CoPrimeCheck = (firstNumber, secondNumber) => {
"
17652,"    {

         temp->next = (struct term *)malloc(

             sizeof(struct term));  // Dynamic node creation

         temp = temp->next;         // Increasing the pointer
"
29868,"#include <vector>

 /**

  * @addtogroup open_addressing Open Addressing

  * @{

  * @namespace linear_probing
"
32209,"    return path

   }

   // did we step on a 0 cell or outside the grid?

   if (!isSafe(grid, x, y)) return false

   // are we walking onto an already-marked solution coordinate?
"
29364,"    >>> fahrenheit_to_kelvin(40.0)

     277.59

     >>> fahrenheit_to_kelvin(60)

     288.71

     >>> fahrenheit_to_kelvin(80)
"
17288,"- `a`: start in the integration limits.

 - `b`: endin the integration limits.

 - `N`: Number of points to sample. For most simple functions, 1000 to 10,000 should be okay.

 # Examples

 ```julia

 julia> monte_carlo_integration(x -> 3*x^2, 0, 1, 100000) # integrate a polynomial
"
20788,"            return Solution.NO_SOLUTION;

         }

         final var toReturn = new Solution(0, 0);

         var xToSet = stub.getSolution().getX() * (equation.c() / stub.getGcd());

         var yToSet = stub.getSolution().getY() * (equation.c() / stub.getGcd());

         toReturn.setX(xToSet);
"
48489,"            phi[n] *= 1 - 1 / p

     return int(sum(phi[2:]))

 if __name__ == ""__main__"":

     print(f""{solution() = }"")
"
26934,"    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));

     /* put in the data */

     new_node->data = new_data;
"
65736,"{

     int mat_size = 5;

     double X[][5] = {{-4, 4, 2, 0, -3},
"
32753,"  if (num < 0) {

     return 'Sorry, factorial does not exist for negative numbers.'

   }

   if (!num) {
"
29994,"            tree.AddRange(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });

             tree.GetMin().Should().Be(1);

         }

         [Test]
"
29211,"        until iter.nil?

           return insert(iter, Node.new(val)) if cnt == index - 1

           iter = iter.prev

           cnt -= 1
"
27891,"        // color the corresponding pixel based on the selected coloring-function

         image.setRGB(

             imageX,

             imageY,

             useDistanceColorCoding

                 ? colorCodedColorMap(distance).getRGB()
"
65927,"    /**

      * @return ciphertext XOR key

      */

     public static BigInteger addRoundKey(BigInteger ciphertext, BigInteger key) {
"
13313," * @returns void

  */

 static void test() {
"
25934,"                sorter.Sort(nodes, comparer);

                 var left = nodes[0];

                 var right = nodes[1];

                 var newNodes = new ListNode[nodes.Length - 1];
"
97167,"	fmt.Println(node.Find(""nikola"")) // true

 	// remove a word, and check it is gone

 	node.Remove(""tesla"")

 	fmt.Println(node.Find(""tesla"")) // false

 	// size and capacity have changed

 	fmt.Println(node.Size())     // 1 word left
"
31112,"    split_words = []

     last_index = 0

     for index, char in enumerate(string):
"
59046,"  return (baseLength * baseWidth * height) / 3.0

 }

 /*

   Calculate the volume for a Cylinder

   Reference: https://www.cuemath.com/measurement/volume-of-cylinder/
"
13546,"      }

     }

     return false

   }

   printBoard (output = value => console.log(value)) {

     if (!output._isMockFunction) {
"
93450,"        return a;

     }

     /**
"
10514,"    it('should correctly sort an input list that contains only a mix of whole and decimal', () => {

       expect(combSort([32.40, 12.42, 56, 45, 12, 3])).toEqual([3, 12, 12.42, 32.40, 45, 56])

     })

     it('should correctly sort an input list that contains only fractional numbers', () => {
"
15089,"        if i <= right_pointer:

             min_edge = min(right_pointer - i + 1, z_result[i - left_pointer])

             z_result[i] = min_edge
"
10379,"        //Find a^-1 (the multiplicative inverse of a

         //in the group of integers modulo m.)

         for (int i = 0; i < 26; i++) {

             flag = (a * i) % 26;

             // Check if (a*i)%26 == 1,

             // then i will be the multiplicative inverse of a
"
28044,"    // basic cases

     if (k > (n / 2))

         k = n - k;
"
20705,"            }

             else

             {

                 return;

             }

         }
"
28999,"  true

 end

 board = [['5', '3', '.', '.', '7', '.', '.', '.', '.'],

          ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
"
11758," * that closely follows the given data points. This thus creates a topological

  * map of the given data i.e., it maintains the relationship between varipus

  * data points in a much higher dimesional space by creating an equivalent in a

  * 2-dimensional space.

  * <img alt=""Trained topological maps for the test cases in the program""

  * src=""https://raw.githubusercontent.com/TheAlgorithms/C-Plus-Plus/docs/images/machine_learning/2D_Kohonen_SOM.svg""
"
33058,"            var result = new StringBuilder();

             // Act

             for (var i = 0; i < 3; i++)
"
18535,"version = ""1.19.0+0""

 [[Wayland_protocols_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg"", ""Wayland_jll""]

 git-tree-sha1 = ""2839f1c1296940218e35df0bbb220f2a79686670""

 uuid = ""2381bf8a-dfd0-557d-9999-79630e7b1b91""

 version = ""1.18.0+4""
"
14100,"        /// <param name=""node"">The node to check.</param>

         /// <returns>true if node passes check, false otherwise.</returns>

         private static bool CheckRightGrandChild<T>(AATreeNode<T> node)

         {

             var condition = node.Right?.Right is not null && node.Right.Level < node.Right.Right.Level;

             return !condition;
"
42479,"    }

     int index = 0;  // initialize some variables.

     while (index < size) {

         // check for swap

         if ((index == 0) || (arr[index] >= arr[index - 1])) {
"
14172,"    {

         // points to the start of the list

         private SinglyLinkedListNode<T>? Head { get; set; }

         /// <summary>

         ///     Adds new node to the start of the list,
"
21242,"        leaves of the tree, or None if there isn't one such value (the

         tree is color incorrectly).

         """"""

         if self is None:
"
33411,"A = B. The permitted operations are removal,  insertion, and substitution.

 """"""

 class EditDistance:
"
34776," * @param[in,out] 	y	    take \f$y_n\f$ and compute \f$y_{n+1}\f$

  * @param[in] save_to_file	flag to save results to a CSV file (1) or not (0)

  * @returns time taken for computation in seconds

  */

 double semi_implicit_euler(double dx, double x0, double x_max, double *y,

                            char save_to_file)
"
19770,"      int y1 = (int) vectors.get(i).y;

       int x2 = (int) vectors.get(i + 1).x;

       int y2 = (int) vectors.get(i + 1).y;

       g2d.drawLine(x1, y1, x2, y2);
"
24581,"        });

     // AUTOMATIC PLAY BUTTON ACTION LISTENER

     auto_button.addActionListener(

         new ActionListener() {

           @Override

           public void actionPerformed(ActionEvent e) {
"
88156,"  [partitionList[pIndex], partitionList[high]] = [partitionList[high], partitionList[pIndex]]

   return pIndex

 }
"
68054,"    {

         /// <summary>

         ///     Sorts array in ascending order.

         /// </summary>

         /// <param name=""array"">Array to sort.</param>

         void Sort(string[] array);
"
36917,"        if (nodeList->data > k->data)

         {

             struct Node *tmp;

             tmp = k;

             k = k->next;  // important for the while

             tmp->next = nodeList;
"
19893,"        }

         [TestCase(null, ""abc"")]

         [TestCase(new[] { ""abc"", ""def"", ""ghi"" }, null)]
"
32136,"    150.79644737231007

     """"""

     return pi * pow(radius, 2) * height

 def main():

     """"""Print the Results of Various Volume Calculations.""""""
"
45312,"        

         for(int level = 0; level < key.length(); level++) 

         { 

             int index = (key.charAt(level) - 'a');

             if (pCrawl.children[index] == null) 
"
96534,"    >>> solution(5)

     6

     >>> solution(3)
"
15668,"    return bit_string

 def reverse_bit(number: int) -> str:

     """"""

     Take in an 32 bit integer, reverse its bits,

     return a string of reverse bits

     result of a reverse_bit and operation on the integer provided.
"
32848,"  for (const num of nums.slice(1)) {

     const temp = maxIncluding

     maxIncluding = maxExcluding + num

     maxExcluding = Math.max(temp, maxExcluding)

   }

   return Math.max(maxExcluding, maxIncluding)
"
21834,"version = ""0.8.4""

 [[Fontconfig_jll]]

 deps = [""Artifacts"", ""Bzip2_jll"", ""Expat_jll"", ""FreeType2_jll"", ""JLLWrappers"", ""Libdl"", ""Libuuid_jll"", ""Pkg"", ""Zlib_jll""]

 git-tree-sha1 = ""35895cf184ceaab11fd778b4590144034a167a2f""
"
11714,"end

 def totient

   @totient ||= (p - 1) * (q - 1)

 end

 def e

   @e ||= totient.downto(2).find do |i|
"
93182,"  /**

    * Check if a string is alphabetical order or not

    *

    * @param s a string

    * @return {@code true} if given string is alphabetical order, otherwise {@code false}
"
33376,"                    LONGEST_SUB[0] = ARRAY[i];

                     for (i = 1; i < LONGEST_SUB_LENGTH; i++)

                         LONGEST_SUB[i] = TEMPORARY_ARRAY[i - 1];

                 }

             }
"
14117,"        // use this to find desire position of element in desire array

         std::cout << ""The element is "" << ar[r1][q1] << std::endl;

     }

 }
"
24041,"        ///     Sorts array elements using BucketSort Algorithm.

         /// </summary>

         /// <param name=""array"">Array to sort.</param>

         public void Sort(int[] array)

         {
"
63616,"# Return a list of all uncommon words.

 # You may return the list in any order.

 #
"
62389," * Common variables used:

  * p - The success probability

  * k - The number of tries

  *

  * @author [Domenic Zingsheim](https://github.com/DerAndereDomenic)
"
67584," */

 uint64_t toLittleEndian64(uint64_t n) {

     if (!isBigEndian()) {
"
13835,"    }

     eigen_vals[0] = A[0][0];

     double dtime = (double)(clock() - t1) / CLOCKS_PER_SEC;
"
15491,"    if (num2 == 0) num1

     else gcd(num2, num1 % num2)

   }
"
27946,"  /*

    * Binary search algorithm in PHP

    *
"
65195,"            }

         }

         return parents.size();
"
66520,"        assert(strcmp(str1, int_to_string(value, str2, 16)) == 0);

     }

     free(str1);

     free(str2);
"
32449,"        for tail in self.adjacency:

             for head in self.adjacency[tail]:

                 weight = self.adjacency[head][tail]
"
18656,"     */

     public static int[] calculateMaxOfMin(int[] arr, int n) {

         Stack<Integer> s = new Stack<>();

         int left[] = new int[n + 1];

         int right[] = new int[n + 1];

         for (int i = 0; i < n; i++) {
"
15437,"        public GcdSolutionWrapper(int gcd, Solution solution) {

             this.gcd = gcd;

             this.solution = solution;

         }

         @Override

         public boolean equals(Object obj) {
"
12185,"    def final_hash(self):

         """"""

         Calls all the other methods to process the input. Pads the data, then splits

         into blocks and then does a series of operations for each block (including

         expansion).
"
10468,"func TestMoserDeBruijnSequence(t *testing.T) {

 	for _, test := range testCases {

 		t.Run(test.name, func(t *testing.T) {

 			if output := MoserDeBruijnSequence(test.inputNum); !reflect.DeepEqual(output, test.expected) {

 				t.Errorf(""For input: %d, expected: %v, but got: %v"", test.inputNum, test.expected, output)

 			}
"
85229,"            node.Next = Head;

             Head = node;

             Count++;

             return node;
"
30150,"        /// <summary>

         ///     Computes the dot product of two vectors.

         /// </summary>

         /// <param name=""lhs"">The LHS vector.</param>

         /// <param name=""rhs"">The RHS vector.</param>
"
19631,"    }

   }

   return dist

 }
"
24454,"    {

         private readonly double[] data;

         /// <summary>
"
28916,"    // Exponentiation matrix for Fibonacci sequence

     private static final int [][] fibMatrix = {{1,1}, {1,0}};

     private static final int [][] identityMatrix = {{1,0}, {0,1}};

     //First 2 fibonacci numbers

     private static final int [][] baseFibNumbers = {{1}, {0}};

     /**
"
32056,"# => [1,1]

 #

 # Approach 2: Dynamic Programming

 #
"
12129,"//    10...0

 //  & 01...1

 //    00...0 -> 0

 // This is also true for 0, which is not a power of 2, for which we

 // have to add and extra condition.

 func IsPowerOfTwo(x int) bool {
"
52462,"#include ""add.h""

 int add(int x,int y) {

     return x+y;

 }
"
19840,"export { zeroOneKnapsack, example }
"
18511,"    public:     //显示声明public

         int v2;

     void print(){       

         printf(""%s\n"",""hello world"");

     };    

 };
"
28978,"        [TestCase(""247894109041876714378152933343208766493"", ExpectedResult = true)] // true

         [TestCase(""315757551269487563269454472438030700351"", ExpectedResult = true)] // true

         [TestCase(""2476099"", ExpectedResult = false)]       // false 19^5

         // false 247894109041876714378152933343208766493*315757551269487563269454472438030700351

         [TestCase(""78274436845194327170519855212507883195883737501141260366253362532531612139043"", ExpectedResult = false)]

         public static bool MillerRabinPrimalityWork(String testcase)
"
14653,"  public static void main(String args[]) {

     BellmanFord obj = new BellmanFord(0, 0); // Dummy object to call nonstatic variables

     obj.go();

   }

   public void
"
33090,"/*

 Conway's Game of Life

 The Game of Life is a cellular automaton devised by the British mathematician John Horton Conway in 1970. The universe of the Game of Life is an infinite, two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, live or dead, (or populated and unpopulated, respectively). Every cell interacts with its eight neighbours, which are the cells that are horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur:

   1. Any live cell with two or three live neighbours survives.
"
15144," *

  * <p>we start from bottom left corner if the current element is greater than the given element then

  * we move up else we move right Sample Input: 5 5 ->Dimensions -10 -5 -3 4 9 -6 -2 0 5 10 -4 -1 1 6

  * 12 2 3 7 8 13 100 120 130 140 150 140 ->element to be searched output: 4 3 // first value is row,

  * second one is column
"
31183,"#

 #

 # Complexity Analysis

 #

 # Time Complexity: O(1).
"
26699,"    val: 2, start: 0, end: 0

     val: 5, start: 1, end: 1

     >>>
"
22169,"    # The ratio of the area for circle to square is pi/4.

     pi_estimate = proportion * 4

     print(f""The estimated value of pi is {pi_estimate}"")

     print(f""The numpy value of pi is {pi}"")
"
62346,"        return leftRotate(node);

     /*Left Right */

     if (balance > 1 && key > (node->left->key))

     {
"
30405,"struct node

 {

     int data;

     struct node *next;

     struct node *pre;

 } * head, *tmp;
"
18726,"    print(solution())
"
30410,"package Maths;

 import java.util.Objects;

 public final class LinearDiophantineEquationsSolver {

     public static void main(String[] args) {

         // 3x + 4y = 7

         final var toSolve = new Equation(3, 4, 7);
"
21001,"            15737, 15739, 15749, 15761, 15767, 15773, 15787, 15791, 15797, 15803, 15809, 15817, 15823, 15859, 15877,

             15881, 15887, 15889, 15901, 15907, 15913, 15919, 15923, 15937, 15959, 15971, 15973, 15991, 16001, 16007,

             16033, 16057, 16061, 16063, 16067, 16069, 16073, 16087, 16091, 16097, 16103, 16111, 16127, 16139, 16141,

             16183, 16187, 16189, 16193, 16217, 16223, 16229, 16231, 16249, 16253, 16267, 16273, 16301, 16319, 16333,

             16339, 16349, 16361, 16363, 16369, 16381, 16411, 16417, 16421, 16427, 16433, 16447, 16451, 16453, 16477,

             16481, 16487, 16493, 16519, 16529, 16547, 16553, 16561, 16567, 16573, 16603, 16607, 16619, 16631, 16633,
"
27671,"    }

     StringBuilder str = new StringBuilder(charArr.size());

     for (Character ch : charArr) {

       str.append(ch);

     }

     return str.reverse().toString();
"
16937,"49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00

 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65

 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91

 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
"
11046,"/*

 ѧϰ֪ʶ

 ̬ݳԱ

 ùؼstatic

 жάóԱͬһ

 ⶨͳʼ(::)ָࡣ
"
17217,"            // Case 1: Node has one child.

             if (node.Left is null || node.Right is null)

             {
"
28141,"      // The columns in this array are not equal

     } else {

       return columnNumb

     }

   }
"
15924,"            void Act(double[,] source) => LU.Decompose(source);

             // Assert

             Assert.Throws<ArgumentException>(() => Act(nonSquareMatrix));

         }

         [Test]

         public void EliminateIdentityEquation()
"
57505,"		}

 	})

 	t.Run(""Stack Peak"", func(t *testing.T) {

 		stackList.Push(2)

 		stackList.Push(83)

 		peak, _ := stackList.Peak()
"
21253,"        }

     }

     modifiedBinarySearch(mat, n, m, x);
"
32081,"    const SUT = checkAnagram('abcdef', 'fedcab')

     expect(SUT).toBe(true)

   })

   it('expects to return false if either argument is an empty string while the other is not', () => {

     const SUT = checkAnagram('', 'edcab')

     expect(SUT).toBe(false)
"
28121,"    r""""""

             A              A                    Br

            / \            / \                  /  \

           B   C    LR    Br  C       RR       B    A

          / \       -->  /  \         -->    /     / \

         Bl  Br         B   UB              Bl    UB  C
"
99081,"                break

     else:

         # would be too small a jump, just compute sequential terms instead

         _diff, terms_jumped = compute(a_i, k, i + dn, n)

         diff += _diff
"
99729,"        case mv if (mv < elem)  => lowerBound(arr, elem, m + 1, hi)

         case mv if (mv >= elem) => lowerBound(arr, elem, lo, m)

       }
"
12536,"        if (prev == min(step, n))

         {

             return -1;

         }
"
19076,"            var vertexA = graph.AddVertex('A');

             var vertexB = graph.AddVertex('B');

             graph.AddEdge(vertexA, vertexB, 5);

             graph.RemoveEdge(vertexA, vertexB);
"
19867," *

  * @details

  * Sudoku (数独, sūdoku, digit-single) (/suːˈdoʊkuː/, /-ˈdɒk-/, /sə-/, originally called
"
30345,"    int m_a;

     int m_b;

 };

 class X {

 private:

     int __x, __y;
"
10667,"        {

             return -2;

         }

     }
"
50736,"    return unsortedArray;

   }

   private <T extends Comparable<T>> List<T> doTreeSortList(List<T> unsortedList) {
"
20306,"        r = N % i;  // get reminder

         // reminder = 0 if 'i' is a divisor of 'N'

         if (r == 0)

         {

             q = N / i;
"
30458,"      }

     if (neg == 0) // Go ahead and show results of computation

     {

       System.out.println(""Distances are: "");
"
14243,"    for index, item in enumerate(sequence):

         if item == target:

             return index

     return -1

 def rec_linear_search(sequence: list, low: int, high: int, target: int) -> int:

     """"""
"
16417,"    test_function(test_data1, sizeof(test_data1) / sizeof(test_data1[0]));

     float s1_mean = 0.f, s1_variance = 0.f, s1_std = 0.f;

     float s2_mean = 0.f, s2_variance = 0.f, s2_std = 0.f;

     printf(""Enter data. Any non-numeric data will terminate the data input.\n"");
"
25469,"            // Act

             testObj.Compile(number);

             testObj >>= 2;

             // Assert

             Assert.AreEqual(expected, testObj.ToString());
"
22856,"        ->

            [40,   75,    100,   999,   10000]

     """"""

     is_last_odd_item_inserted_before_this_index = False

     for i in range(len(sorted_list_2d) - 1):
"
87162,"            var decompressedText = translator.Translate(compressedText, decompressionKeys);

             //Assert

             Assert.AreEqual(expectedCompressedText, compressedText);

             Assert.AreEqual(uncompressedText, decompressedText);

         }
"
21348,"      }

 }

 /**
"
25199,"        {

             free(*root);

             *root = replacement;
"
59602,"				lis[i] = lis[j] + 1

 			}

 		}
"
33709,"#

 # Example 1:

 # Input: nums = [2,5,1,3,4,7], n = 3

 # Output: [2,3,5,4,1,7]

 # Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].
"
47956,"    copy_nums = nums.copy()

     copy_nums.sort()

     return copy_nums[-1] < sum(copy_nums[:-1])

 if __name__ == ""__main__"":

     import doctest
"
13360,"    if (numsSize == 0)

         return 0;

     for (i = 1; i < numsSize; i++)
"
84942,"        self.clear()

     }

     public mutating func clear() {

         self.table = Array(repeating: Array(repeating: PlayerSymbol.empty, count: size), count: size)
"
18791,"#include <valarray>

 #ifdef _OPENMP

 #include <omp.h>
"
72263,"export perfect_cube

 export perfect_number

 export perfect_square

 export permutation
"
10329,"        public void GraphAddEdgeTest_ShouldThrowEdgeExists()

         {

             var graph = new DirectedWeightedGraph<char>(10);

             var vertexA = graph.AddVertex('A');
"
21014,"            0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c,

             0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc,

             0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b,

             0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb,

             0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0,

             0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20,
"
15906,"    if (position >= 0 && position < array->size)

     {

         if (array->array[position] != 0)

         {

         }
"
33161,"            if (i == N)

                 /*

                  * sum digits on the last iteration

                  * this avoid having another loop over all digits

                  */
"
14936,"      // Check whether it shall swap the element with its left child or its right one if any.

       if ((2 * elementIndex < maxHeap.size())

           && (getElementKey(elementIndex * 2 + 1) > getElementKey(elementIndex * 2))) {

         swap(elementIndex, 2 * elementIndex + 1);

         elementIndex = 2 * elementIndex + 1;
"
16665,"        // and the root is the ceil otherwise the returned node is the ceil.

         return result == null ? root : result;

     }

 }
"
24130,"    return stack;

 }

 // Pushes element into stack

 void push(struct Stack *stack, int element)

 {
"
33077,"void vecswap(int i, int j, int n, char *x[])

 {

     while (n-- > 0)

     {
"
33130,"			if newQueue.frontQueue() != 2 && newQueue.backQueue() != 45 {

 				t.Errorf(""Test EnQueue is wrong the result must be %v and %v but got %v and %v"", 2, 45, newQueue.frontQueue(), newQueue.backQueue())

 			}

 		})

 		t.Run(""Test DeQueue"", func(t *testing.T) {

 			var newQueue Queue
"
46035,"	})

 }
"
30952,"{

     struct Stack s;  // initialze object reference of stack

     s.tos = -1;      // initalize the tos

     int i, j = 0, pr;
"
20547,"        upperPoints.pop()

         upLen = upperPoints.length

       }

       upperPoints.push(points[i])

     }
"
31412,"// 		{false, false, false, false, true, false},

 // 	}

 // 	start := 1

 // 	end := 6

 // 	route, _ := dfs(start, end, nodes, edges)

 // 	fmt.Println(route)
"
14551,"   *

    * @return wrongMessCaught, the number of wrong messages, which are caught by the CRC algoriithm

    */

   public int getWrongMessCaught() {

     return wrongMessCaught;
"
29705,"  }

 }
"
30594," * Given parent node, and the pivot item index, the right rotate operation

  * is uniquely identified. The function assume the requirements are

  * fulfilled and won't do any extra check. This function is call by

  * TryRightRotate(), and the condition checking should be done before call

  * it.
"
25006," * \see Faster: problem_5/sol3.c

  */

 #include <stdio.h>

 #include <stdlib.h>

 /**
"
74811,"/** Structure to hold the matrix and dimensions

  */

 struct sudoku

 {

     uint8_t *a; /**< matrix as a flattened 1D row-major array */
"
33482,"        while (j >= 0 && key < arr[j])

         {

             arr[j + 1] = arr[j];

             j = j - 1;

         }

         /* Find a correct position for key */
"
13622,"package Maths;

 /**

  * @file
"
20611,"            }

             ReconstructHeap(a);

         }

         /// <summary>

         ///     Reconstructs the heap based on the array of node degrees created by the consolidate step.
"
22839,"   * @param p the parent of node u

    * @returns void

    */

   void dfs_hc(int u, int p = -1) {
"
29178,"        }

         [Test]

         public void Compare_CheckAscending_ReturnPositive()

         {
"
68348,"  if (year % 4 === 0) return true

   return false

 }
"
21176,"    assert (!isArmStrong(200));

   }

   /**

    * Checks whether a given number is an armstrong number or not.

    *
"
21775,"        Node<T> nx = FindSet(x);

         Node<T> ny = FindSet(y);

         if (nx == ny) {

             return;
"
38787,"//find the max number

 find_max(List numbers) {

   var max = numbers[0];

   for (var x in numbers) {

     if (x > max) {
"
17390,"  }

 }

 main() {
"
29886,"        max_heapify(a, i, n);

     }

 }

 int main()

 {

     int n, i;
"
62907,"        {

             if (queue.First is null)

             {

                 throw new InvalidOperationException(""There are no items in the queue."");

             }

             var item = queue.First;
"
71276,"    assert sumOfDigits(12345) == 15

         && sumOfDigitsRecursion(12345) == 15

         && sumOfDigitsFast(12345) == 15;

   }

   /**
"
29822,"@testset ""Statistics"" begin

     @testset ""Statistics: Pearson Correlation"" begin

         a = 1:10
"
31340,"        // i--;

       } else removeleaves(node.child.get(i));

     }
"
65253,"    {

         /// <summary>

         ///     Gets sequence of prime numbers.
"
10675,"Enter your choice: 2

 Element removed is: 14

 Queue empty. No data to display

 */
"
32401,"      buckets[n] << j

     end

     array = buckets.flatten

   end

   array
"
41617,"        for (int i=0; i<n; ++i) 

             b[i][i] = 1;

  
"
16290,"            var counterZeros = 0;

             foreach (var bit in testObj1)

             {

                 if (bit)

                 {
"
26914,"char findTheDifference(char *s, char *t)

 {

     int sum1 = 0, sum2 = 0;

     int i;

     for (i = 0; i < strlen(s); i++) sum1 += s[i];
"
29724,"# ╔═╡ Cell order:

 # ╟─b342dd2f-dd63-4688-a94f-9f7653979cde

 # ╠═b676eebe-f036-11eb-3362-c768806de296

 # ╠═c6d5b7d1-7a20-439d-9d4a-45d0a01f7a96

 # ╠═22f073eb-d01d-4c11-9af9-dcac9acc1524
"
49109,"// An implementation of a Stack using a Linked List

 class StackOfLinkedList {

   public static void main(String[] args) {
"
17919,"  }

   /**

    * Measure angle between two vectors
"
62763,"#

 # Input: row_index = 1

 # Output: [1,1]
"
10230,"		while (q.size() > 1) { 

 			// first min extract. 

 			HuffmanNode x = q.peek(); 
"
30300,"*/

 const isPythagoreanTriplet = (a, b, c) => Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)

 export const findSpecialPythagoreanTriplet = () => {
"
12455," * basic explicit method for numerical integration of ordinary differential equations. The method proceeds in a series

  * of steps. At each step the y-value is calculated by evaluating the differential equation at the previous step,

  * multiplying the result with the step-size and adding it to the last y-value: y_n+1 = y_n + stepSize * f(x_n, y_n).
"
25682,"    root.right = createBst(array, mid + 1, end);

     return root;

   }

 }
"
12778,"        /// <summary>

         ///     Perform a right (clockwise) rotation.

         /// </summary>

         /// <param name=""node"">Node to rotate about.</param>
"
98731,"    public static void main(String[] args) {

         UnionFind uf = new UnionFind(5);

         System.out.println(""init /w 5 (should print 'p [0, 1, 2, 3, 4] r [0, 0, 0, 0, 0]'):"");

         System.out.println(uf);

         
"
52348,"    char[] turkishChars =

         new char[] {0x131, 0x130, 0xFC, 0xDC, 0xF6, 0xD6, 0x15F, 0x15E, 0xE7, 0xC7, 0x11F, 0x11E};

     char[] latinChars = new char[] {'i', 'I', 'u', 'U', 'o', 'O', 's', 'S', 'c', 'C', 'g', 'G'};
"
45567,"	t.Run(""Remove in Dynamic Array"", func(t *testing.T) {

 		if numbers.IsEmpty() != false {

 			t.Errorf(""Expected be false but got %v"", numbers.IsEmpty())
"
29392,"import (

 	""errors""

 	""math/rand""

 	""strings""

 	""testing""
"
33828,"        @test weight_conversion(""gram"", ""carrat"", 2) ≈ 10.0

         @test weight_conversion(""gram"", ""atomic-mass-unit"", 1) ≈ 6.022136652e+23

         @test weight_conversion(""milligram"", ""kilogram"", 1) ≈ 1e-06

         @test weight_conversion(""milligram"", ""gram"", 2) ≈ 0.002

         @test weight_conversion(""milligram"", ""milligram"", 3) ≈ 3.0
"
10117,"package Maths;

 import java.util.Random;

 public class Floor {

   public static void main(String[] args) {
"
17709,"    expect(() => selectionSort([1, 'x', 2])).toThrow('One of the items in your array is not a number')

   })

 })
"
90590,"        [TestCase(15, ""01111"")]

         [TestCase(17, ""10001"")]

         [TestCase(4, ""00100"")]

         public static void TestCompileLong(int number, string expected)
"
25458,"namespace Algorithms.Tests.Other

 {

     public static class RgbHsvConversionTest

     {
"
16614,"        buffer_size = self.block_size / (num_blocks + 1)

         merger.merge(splitter.get_block_filenames(), filename + "".out"", buffer_size)

         splitter.cleanup()

     def get_number_blocks(self, filename, block_size):

         return (os.stat(filename).st_size / block_size) + 1
"
16833,"# Challenge name: Isomorphic Strings

 #

 # Given two strings s and t, determine if they are isomorphic.

 # Two strings s and t are isomorphic if the characters in s can be replaced to get t.

 # All occurrences of a character must be replaced with another character while preserving the order of characters.

 # No two characters may map to the same character, but a character may map to itself.
"
20698,"     */

     public static String encrpyter(String word, String keyword, String abecedarium) {

         ColumnarTranspositionCipher.keyword = keyword;

         ColumnarTranspositionCipher.abecedarium = Objects.requireNonNullElse(abecedarium, ABECEDARIUM);

         table = tableBuilder(word);

         Object[][] sortedTable = sortTable(table);
"
30716,"    e.w = 2;

     insertEdge(g, e);

     e.v = 0;
"
11786,"        /// <summary>

         ///     Combine the linked list that <c>otherList</c> sits inside, with the

         ///     linked list this is in. Do this by cutting the link between this node,

         ///     and the node to the right of this, and inserting the contents of the

         ///     otherList in between.

         /// </summary>
"
30168,"        public static void FindIndex_ItemPresent_IndexCorrect([Random(1, 1000, 100)] int n)

         {

             // Arrange

             var searcher = new BinarySearcher<int>();

             var random = Randomizer.CreateRandomizer();
"
33552,"        code4 += currbit * Math.pow(2, i);

       }

       hex = hm.get(code4) + hex;
"
46214,"        [TestCase(17, 0, 17)]

         [TestCase(17, 17, 17)]

         [TestCase(2 * 17, 17, 17)]

         [TestCase(0, 0, int.MaxValue)]

         [TestCase(2 * 13 * 17, 4 * 9 * 13, 2 * 13)]
"
32763,"            tree.AddRange(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });

             tree.GetKeysInOrder().SequenceEqual(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).Should().BeTrue();

         }

         [Test]

         public void GetKeysInOrder_EmptyTree_CorrectReturn()
"
33094,"            // perform necessary rotations.

             node.UpdateBalanceFactor();

             return Rebalance(node);

         }

         /// <summary>

         ///     Helper function to rebalance the tree so that all nodes have a
"
21745,"    y->height = (max(nodeHeight(y->left), nodeHeight(y->right)) + 1);

     return y;

 }

 avlNode *leftRotate(avlNode *z)

 {

     avlNode *y = z->right;
"
28314,"public:

     Time(int h=0,int m=0,int s=0):hh(h),mm(m),ss(s){}

     void operator()(int h,int m,int s) {

         hh=h;

         mm=m;
"
84085,"    adjacencyMatrix.add(neigbourDistances);

   }

   return Graph(nodes, adjacencyMatrix);

 }

 void main() {

   Graph graph = Graph([
"
12210,"    alg_sum = young + middle_aged - (young * middle_aged)

     # 6. Algebraic Product = (µA(x) * µB(x))

     alg_product = young * middle_aged

     # 7. Bounded Sum = min[1,(µA(x), µB(x))]

     bdd_sum = fuzz.fuzzy_and(X, one, X, young + middle_aged)[1]
"
14169,"    ///     Branch and bound Knapsack solver.

     /// </summary>

     /// <typeparam name=""T"">Type of items in knapsack.</typeparam>

     public class BranchAndBoundKnapsackSolver<T>

     {

         /// <summary>
"
23593,"        {

             var timeline = new Timeline<string>

             {

                 { new DateTime(1995, 1, 1), ""TestTime1"" },

                 { new DateTime(2000, 1, 1), ""TestTime2"" },

                 { new DateTime(2005, 1, 1), ""TestTime3"" },
"
16217," */

 import 'dart:math' as Math;

 import 'dart:math' show Random;

 import 'package:test/test.dart';

 main() {

   test(""Sorting of empty list returns empty list"", () {
"
25793,"                    break;

                 }

             }

             romanToInt += 100;

             break;
"
59128,"    More on the caesar cipher

     =========================

     The caesar cipher is named after Julius Caesar who used it when sending

     secret military messages to his troops. This is a simple substitution cipher
"
31013,"	}

 }

 func getTests() []struct {

 	name   string

 	a      int
"
96622,"  public static void main(String[] args) {

     Integer[] integers = {4, 23, 6, 78, 1, 54, 231, 9, 12};

     InsertionSort sort = new InsertionSort();

     sort.sort(integers);
"
84121,"                kernel * image_padded[y : y + kernel.shape[0], x : x + kernel.shape[1]]

             ).sum()

             output[y, x] = int(summation > 0)

     return output
"
23666,"    test1();

     end_clk = clock();

     printf(""Test 1 completed in %.4g sec\n"",
"
60667,"# Sort nums, and init ans array

 # For each |val, index| in nums:

 # if the current value is the same as last, then go to next iteration

 # init left and right pointers for two pointer search of the two sum in remaining elements of array
"
31180,"          stack.push(neighbour)

         }

       }

     }
"
16697,"    ///     <para>

     ///         Van Eck's sequence. For n >= 1, if there exists an m &lt; n such that a(m) = a(n), take the largest such m and set a(n+1) = n-m; otherwise a(n+1) = 0. Start with a(1)=0.

     ///     </para>

     ///     <para>

     ///         OEIS: http://oeis.org/A181391.
"
98535,"unsigned int get_digits(unsigned char *number)

 {

     unsigned int digits = MAX_DIGITS;
"
17910,"  private var elements: [T] = []

   mutating func push(_ value: T) {

     elements.append(value)
"
29047,"}
"
92315,"    else if (op2 == '*' || op2 == '/' || op2 == '%')

     {

         return 0;

     }

     else if (op1 == '*' || op1 == '/' || op1 == '%')
"
30054,"    for (var j = 0; j < n; j++) {

       board[i][j] = 1;

       if (openKnightTourHelper(board, [i, j], 1)) {

         return board;

       }
"
15422,"// Implementing KMP Search Algorithm to search all the instances of pattern in

 // given text

 // Reference Book: Introduction to Algorithms, CLRS

 // Explanation: https://www.topcoder.com/community/competitive-programming/tutorials/introduction-to-string-searching-algorithms/

 const computeLPS = (pattern) => {

   const lps = Array(pattern.length)
"
29594,"    bubbleSortCArray(barray);

     clock_t end1 = clock();

     double time_spent1 = (double)(end1 - begin1) / CLOCKS_PER_SEC;

     displayCArray(barray);
"
11022,"        {

             temp->coef = poly1->coef;

             temp->pow = poly1->pow;
"
29640,"  return array

 }
"
41234,"    k = list->next;

     nodeList->next = NULL; /* 1st node is new list */

     while (k != NULL)

     {
"
31077,"    if (root->right)

     {

         if (root->right->val != root->val)

             return 0;

     }

     return isUnivalTree(root->left) && isUnivalTree(root->right);
"
61295,"git-tree-sha1 = ""b2667530e42347b10c10ba6623cfebc09ac5c7b6""

 uuid = ""00ebfdb7-1f24-5e51-bd34-a7502290713f""

 version = ""3.2.4""

 [[Cairo_jll]]

 deps = [""Artifacts"", ""Bzip2_jll"", ""Fontconfig_jll"", ""FreeType2_jll"", ""Glib_jll"", ""JLLWrappers"", ""LZO_jll"", ""Libdl"", ""Pixman_jll"", ""Pkg"", ""Xorg_libXext_jll"", ""Xorg_libXrender_jll"", ""Zlib_jll"", ""libpng_jll""]

 git-tree-sha1 = ""e2f47f6d8337369411569fd45ae5753ca10394c6""
"
65082," * - Deletion

  * - Listing of node keys inorder,preorder,postorder

  *
"
23481,"          rotateRight(w);

           w = x.p.right;

         }
"
15018,"                if (isValid(s, i, j) == true) {

                     if (j - i + 1 > maxStr.length()) { // update maxStr

                         maxStr = s.substring(i, j + 1);
"
27964,"      int hd = qi.hd;

       TreeNode n = qi.node;

       // If this is the first node at its horizontal distance,

       // then this node is in top view
"
17853,"    return lis;

   }

   // O(logn)

   private static int binarySearchBetween(int[] t, int end, int key) {

     int left = 0;
"
11361,"/**

  * @addtogroup machine_learning Machine learning algorithms

  * @{
"
23568,"            96281, 96289, 96293, 96323, 96329, 96331, 96337, 96353, 96377, 96401, 96419, 96431, 96443, 96451, 96457,

             96461, 96469, 96479, 96487, 96493, 96497, 96517, 96527, 96553, 96557, 96581, 96587, 96589, 96601, 96643,

             96661, 96667, 96671, 96697, 96703, 96731, 96737, 96739, 96749, 96757, 96763, 96769, 96779, 96787, 96797,

             96799, 96821, 96823, 96827, 96847, 96851, 96857, 96893, 96907, 96911, 96931, 96953, 96959, 96973, 96979,

             96989, 96997, 97001, 97003, 97007, 97021, 97039, 97073, 97081, 97103, 97117, 97127, 97151, 97157, 97159,
"
96086,"int pop(struct Stack *);

 int main()

 {

     int vertices, edges, i, src, dst;

     printf(""Enter the number of vertices\n"");
"
71916,"* for which it applies that xi = x0 + i*h, where h is a step defined as h = (b-a)/N where a and b are the

 * first and last points of the interval of the integration [a, b].

 *
"
24746," *   than 1

  * - Best case Time complexity O(n)

  *   Worst case Time complexity O(n^2)
"
61975,"            break;

         case 3:

             std::cout

                 << ""The linked list contains the following element in order""
"
82852,"		expected int

 	}{

 		{

 			name:     ""Empty slice"",

 			slice:    []int{},
"
93045,"    0: ""Sunday"",

     1: ""Monday"",

     2: ""Tuesday"",

     3: ""Wednesday"",

     4: ""Thursday"",
"
23451,"    expect(() => quickSort(55, 0, 2)).toThrow('Please input a valid list or array.')

   })

   it('Expectedly, the quickSort method will sort the unsorted list in ascending order', () => {

     const unSortArray = [5, 9, 3, 4, 6, 2, 0, 1, 7, 8]

     const sortedExpectedArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
"
65663,"                    }

                     if (m != first.get_size()) {

                         ret += (std::max(m, i) - std::min(m, i)) +

                                (std::max(n, j) - std::min(n, j));
"
46217,"int decimal_to_octal(int decimal)

 {

     if ((decimal < 8) && (decimal > 0))

     {
"
12324,"type PrefixFunctionTests () =

     [<TestMethod>]

     [<DataRow(""aabcdaabc"", 4)>]

     [<DataRow(""asdasdad"", 4)>]
"
85195,"    }

     public static int nearestRightKey(NRKTree root, int x0) {

         //Check whether tree is empty

         if(root == null){

            return 0;
"
84911,"                .Be(eventName);

         }

         [Test]
"
42227,"                var newNodes = new ListNode[nodes.Length - 1];

                 Array.Copy(nodes, 2, newNodes, 1, nodes.Length - 2);

                 newNodes[0] = new ListNode(left, right);
"
18423,"package Others;

 import java.util.BitSet;

 /** Generates a crc32 checksum for a given string or byte array */

 public class CRC32 {
"
24085,"package dynamic

 import (

 	""fmt""

 	""testing""

 )
"
15127,"      temp = ROM_NUMS[el]

     else

       # Else this is NOT the subtractive case.

       res += (ROM_NUMS[el] - temp)

       temp = 0
"
15653," * @namespace abbreviation

  * @brief Functions for

  * [Abbreviation](https://www.hackerrank.com/challenges/abbr/problem)

  * implementation

  */

 namespace abbreviation {
"
24749,"        if (isupper(word[i]) && !isAllUpper(word))

             return 0;

     }
"
94944,"  it('test boundary maximum points - first element', () => {

     const Array = [13, 6, 5, 4, 3, 2, 1]

     expect(NumberOfLocalMaximumPoints(Array)).toEqual(1)

   })

   it('test boundary maximum points - both boundaries have maximum points', () => {

     // Test a mix of number types (i.e., positive/negative, numbers with decimals, fractions)
"
22653,"	std::vector<int> A{25,21,98,100,76,22,43,60,89,87};

 	int i = 3;

 	assert(A[6] == search::median_search::median_of_medians(A, i));		// A[6]  = 43, is the fourth smallest element.
"
95294,"function vol_cube(side)

     if side<0

         throw(DomainError(""vol_cube() only works for non negative values.""))

     end
"
16494,"    clusterproportion[

         ""Type""

     ] = ""% of Customers""  # rename created cluster df to match report column names

     clusterproportion[""Features""] = ""ClusterProportion""
"
81619,"/** Creates a random set of points distributed in four clusters in

  * 3D space with centroids at the points

  * * \f$(0,5, 0.5, 0.5)\f$
"
12880,"        :param l: left element index

         :param r: right element index

         :return: element combined in the range [l, r]
"
23414,"  public static class Point {

     private int x;

     private int y;

     /**
"
91078,"    return f""0o{int(octal)}""

 def main() -> None:

     """"""Print octal equivalents of decimal numbers.""""""

     print(""\n2 in octal is:"")

     print(decimal_to_octal(2))  # = 2
"
22806,"    server_addr.sin_family = AF_INET;    /// Domain/Family to be used

     server_addr.sin_port = htons(PORT);  /// Port to be used

     server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
"
28978,"double binomial_expected(double n, double p) { return n * p; }

 /** finds the variance of the binomial distribution

  * \param [in] n

  * \param [in] p
"
27146,"    while (number > 0)

     {

         remainder = number % 10;

         number = number / 10;

         decimal_number += remainder * temp;

         temp = temp * 2;  // used as power of 2
"
32156,"		for j := i + 1; j < 4; j++ {

 			g4.Graph.AddEdge(i, j)

 		}

 	}

 	return
"
26953,"    }

   })

   it('should work for a single-cell maze', () => {

     const maze = new RatInAMaze([[1]])
"
25370,"#

 # For eg. If we are checking for the number 15, the steps would be:

 #
"
24959,"            tree.Remove(5);

             tree.Remove(6);

             tree.Remove(8);

             tree.Remove(10);

             tree.Count.Should().Be(0);
"
25459,"/* This function initializes the queue to empty by making both front and rear as

  * NULL */

 void createqueue() { front = rear = NULL; }
"
24766,"        return node

 class LFUCache:

     """"""

     LFU Cache to store a given capacity of data. Can be used as a stand-alone object

     or as a function decorator.
"
81513,"}
"
23843,"/**

  * Cocktail Shaker Sort is an algorithm that is a Bidirectional Bubble Sort.

  *

  * The algorithm extends bubble sort by operating in two directions.

  * While it improves on bubble sort by more quickly moving items to the beginning of the list, it provides only marginal

  * performance improvements.
"
88273,"    assert(double_area == double_expected);

     std::cout << ""TEST PASSED"" << std::endl << std::endl;

     // 5th test

     int_base = 10;

     int_height = 3;
"
25146,"    for (i = 0; i < N; i++)

     {

         A[i][i] = (rand() % LIMS) - lim2;
"
31893,"	public List<List<Integer>> Hashmap(int[] nums, int target) {

 		 Arrays.sort(nums);

 	        Set<List<Integer>> ts = new HashSet();

 	        HashMap<Integer,Integer> hm = new HashMap<>();
"
83373,"            return ternarySearch(mid1 + 1, mid2 - 1, key, ar);

         }

     }

     // Key not found

     return -1;
"
91597,"		}

 	}

 }

 // Delete the current item.

 func (cl *Cyclic) Delete() bool {

 	var deleted bool
"
22515,"            if (u == 0 || v == 0)

             {

                 return u + v;

             }

             // GCD(-a, -b) = GCD(-a, b) = GCD(a, -b) = GCD(a, b)
"
29497,"            tmp->next = l1;

         if (l2)

             tmp->next = l2;

         return list;

     }
"
31168,"            }

             return merged;

         }

         /// <summary>

         ///     Splits the input text message as chunks of words.
"
75967,"		// from the heap each time until 

 		// its size reduces to 1, extract until 

 		// all the nodes are extracted. 
"
22101,"                }

                 solution[i] = (upperTransform[i, 0] - pivotPointSum) / u[i, i];

             }

             return solution;

         }
"
17570,"}

 void insert(int x)

 {

     struct node *pnode;
"
83875,"                .Insert(0, (string) ((char) ((int) s.[0] - 32)))

         | _ -> sentence
"
10623,"    cout << While_t<Sum_t<6>>::type::value << endl;

     return 0;

 }
"
29576,"/**

  * @file c_examp.c

  * @brief C实现多态

  * @author 光城

  * @version v1

  * @date 2019-08-06
"
26720,"int main()

 {

     /* Let us create following weighted graph

             10

         0--------1

         | \	 |
"
14711,"# flake8: noqa

 """"""The following implementation assumes that the activities

 are already sorted according to their finish time""""""

 """"""Prints a maximum set of activities that can be done by a

 single person, one at a time""""""

 # n --> Total number of activities
"
20667,"        characters.

 */

 /**

  * upperCaseConversion takes any case-style string and converts it to the uppercase-style string.

  * @param {string} inputString Any case style string

  * @returns {string} Uppercase string
"
14402,"deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg"", ""Xorg_libX11_jll""]

 git-tree-sha1 = ""b7c0aa8c376b31e4852b360222848637f481f8c3""

 uuid = ""1082639a-0dae-5f34-9b06-72781eeb8cb3""

 version = ""1.3.4+4""

 [[Xorg_libXfixes_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg"", ""Xorg_libX11_jll""]
"
24469,"}

 /** \brief Main function */

 int main()
"
30428,"        [Test]

         public static void GetTimesBeforeTest()

         {

             var timeline = new Timeline<string>

             {

                 { new DateTime(1995, 1, 1), ""TestTime1"" },
"
28837,"  }

   for (int size = RUN; size < n; size = 2 * size) {

     for (int left = 0; left < n; left += 2 * size) {
"
35965,"    long value = 3000;           // vector 测试结果的MCtor与CCtor结果大于3000000,是因为vector的动态扩容,当容量不够的时候,会动态分配并进行拷贝。

 //    test_moveable(vector<MyString>(), vector<MyStringNoMove>(), value);

 //    test_moveable(list<MyString>(), list<MyStringNoMove>(), value);

 //    test_moveable(deque<MyString>(), deque<MyStringNoMove>(), value);

 //    test_moveable(multiset<MyString>(), multiset<MyStringNoMove>(), value);
"
25335,"                p.EngagedTo is not null

                 && Score(p, p.EngagedTo) <= accepters

                     .Where(a => a.PrefersOverCurrent(p))

                     .Min(a => Score(p, a)));

         private static int Score(Proposer proposer, Accepter accepter) =>
"
39352,"};

 /**

  * 子类对父类成员的访问权限跟如何继承没有任何关系，

  * “子类可以访问父类的public和protected成员，不可以访问父类的private成员”——这句话对任何一种继承都是成立的。

  *
"
25108,"    for (int i = 1; i <= 21; i++) {

       if (number % i != 0) {

         isSolution = false;

         break; // Break if have a remainder
"
14471,"/**

  * Project Euler Problem 10: https://projecteuler.net/problem=10

  * Summation of primes
"
17269,"    if not isinstance(n, int) or n < 1:

         return False

     # Initialization of sum and number of digits.

     sum = 0

     number_of_digits = 0
"
13198,"package Mathematics

 import org.scalatest.flatspec.AnyFlatSpec

 class FindMaxSpec extends AnyFlatSpec {

   ""FindMaxSpec 1"" should ""output the correct Integer as a result from the list of elements"" in {

     assert(FindMax.findMax(List(-1000, -1, 999, 72, 65, -56, -767)) === 999)
"
11138,"    Benchmark code for comparing above 2 functions

     """"""

     print(""\nFor string = "", input_str, "":"")

     print(

         ""> can_string_be_rearranged_as_palindrome_counter()"",

         ""\tans ="",
"
34011,"                else if (compareResult > 0)

                 {

                     node = node.Right;
"
25741,"    while (map[i])

     {

         if (map[i] == map[i + 1])

             return 0;
"
24820," * page</a><br>

  * <br>

  *

  * <p>An explanation:<br>

  *
"
17744,"    }

     return -1;

 }
"
37443,"  private static NodeStack<?> head;

   private NodeStack<?> next;

   private NodeStack<?> previous;

   private static int size = 0;

   /** Constructors for the NodeStack. */

   public NodeStack() {}
"
14955,"#include <assert.h>

 #include <stdbool.h>

 #include <stdio.h>

 /**

  * Check if given number is strong number or not
"
16432,"                // extract the singular value

                 var s = u.Magnitude();

                 // v and u should be unit vectors
"
32501,"      return true;

     }

     return false;

   }

   /**
"
27079,"  public TimSort(int[] array) {

     this.array = array;

     this.array_length = array.length;
"
60299,"            // Assert

             Assert.True(result);

         }

         [Test]

         public static void NonEqualMatricesShouldReturnFalse()
"
28956,"library(arules)

 groceries <- read.transactions(""groceries.csv"", sep="","")

 summary(groceries)

 itemFrequencyPlot(groceries, topN=20)

 #sample for randomly extracting samples, image function for visualing sparse matrix
"
48273,"struct TreeNode *invertTree(struct TreeNode *root)

 {

     struct TreeNode *tmp;

     if (root == NULL)

         return NULL;

     tmp = root->left;
"
96763,"    int j = i - 1;

     while (j >= left && list[j] > temp) {

       list[j + 1] = list[j];

       j--;

     }
"
27481,"            t=arr[l_pos]

             arr[l_pos]=arr[r_pos]

             arr[r_pos]=t
"
16577,"      result = 31 * result + dist;

       result = 31 * result + (previous != null ? previous.hashCode() : 0);

       result = 31 * result + (neighbours != null ? neighbours.hashCode() : 0);

       return result;
"
23336,"namespace house_robber {

 /**

  * @brief The main function that implements the House Robber algorithm using

  * dynamic programming

  * @param money array containing money in the ith house
"
24053,"    >>> factorial_sum(69)

     363600

     """"""

     if a in factorial_sum_cache:

         return factorial_sum_cache[a]

     # Prepare a variable to hold the computation
"
31960,"def test_totient() -> None:

     """"""

     >>> n = 10

     >>> totient_calculation = totient(n)

     >>> for i in range(1, n):
"
16432,"        ///     weights/capacity by a factor of 10.

         /// </param>

         /// <param name=""weightSelector"">

         ///     A function that returns the value of the specified item

         ///     from the <paramref name=""items"">items</paramref> list.
"
31534,"    >>> get_color_coded_rgb(0.5)

     (0, 255, 255)

     >>> get_color_coded_rgb(1)

     (0, 0, 0)

     """"""
"
18041,"    /* Search the first (1/3) rd part of the array.*/

     else if (key.compareTo(arr[mid1]) < 0) {

       return ternarySearch(arr, key, start, --mid1);
"
18716,"export { bufferToBase64 }
"
25020,"            // skip all duplicates

             if (head.next != null && head.value == head.next.value) {

                 // move till the end of duplicates sublist

                 while (head.next != null && head.value == head.next.value) {
"
16049,"                CascadingCut(y);

             }

             if (x.Key.CompareTo(MinItem.Key) < 0)
"
85276,"    std::cout << ""---------------------- Test deQueue ----------------------""

               << std::endl;

     q.display();

     q.deQueue();

     q.deQueue();

     std::cout << ""After Hai, Jeff left the queue: "" << std::endl;
"
16188,"        ///     True: Number is valid.

         ///     False: Number isn`t valid.

         /// </returns>

         public static bool Validate(string number) => GetSum(number) % 10 == 0;
"
48239,"    expect(countVowels).toBe(5)

   })

 })
"
26876,"```julia

 surfarea_cube(1)  # returns 6

 surfarea_cube(3)  # returns 54

 surfarea_cube(-1) # returns DomainError

 ```

 """"""
"
89558,"""""""

 If we are presented with the first k terms of a sequence it is impossible to say with

 certainty the value of the next term, as there are infinitely many polynomial functions

 that can model the sequence.
"
15639,"                    l.erase(x);

                 } else {

                     std::cout << ""Wrong Input!\n"";

                 }

                 break;
"
97848,"		}

 		if(sscanf(input,""%d"",&n1) != 1){

 			fprintf(stderr,""Invalid move, Enter number 1 - 9: "");

 			continue;
"
11671,"        for (int j = 0; j < 3; j++)

             data[i][j] = _random(centres[class][j] - R, centres[class][j] + R);

         */

     }

 }
"
13488,"            {

                 // Nothing to dispose here

             }

         }
"
29715,"﻿using System;

 using Algorithms.Sorters.Comparison;

 using Algorithms.Tests.Helpers;

 using NUnit.Framework;

 namespace Algorithms.Tests.Sorters.Comparison

 {
"
51894,"		0,

 		""hello world"",

 	},

 	{
"
21075," *

  * @param {Array} list1 Sublist to break down.

  * @param {Array} list2 Sublist to break down.
"
30079,"}

 // Decrypt decrypts by left shift of ""key"" each character of ""input""

 func Decrypt(input string, key int) string {

 	// left shift of ""key"" is same as right shift of 26-""key""

 	return Encrypt(input, 26-key)
"
30472,"        }

     return minInd;

 }
"
19029,"            plainText = subBytes(plainText);

             plainText = shiftRows(plainText);

             plainText = mixColumns(plainText);

             plainText = addRoundKey(plainText, roundKeys[i]);

         }
"
19757,"        update_step(&s, &s0, quotient);

         update_step(&t, &t0, quotient);

     }
"
22292,"        for op in ShuntingYard.Operator.allCases {

             if scanString(op.rawValue) != nil {

                 return op

             }

         }

         return nil
"
75507,"#include<iostream>

 #include<cstring>

 using namespace std;
"
69458,"		if colorsUsed < int(cr) {

 			colorsUsed = int(cr)

 		}

 	}

 	return vertexColors, colorsUsed

 }
"
16647,"        else

         {

             for (j = column; j < (column + boat); j++)
"
14873,"                    .Should().BeTrue();

         }

     }

 }
"
12634,"class DisjointSetTreeNode {

   // Disjoint Set Node to store the parent and rank

   constructor (key) {
"
54238,"    """"""

     return sum(int(digit) for digit in str(n))

 def solution(n: int = 30) -> int:

     """"""
"
18090,"    // Printing the result storing inorder.

     std::cout << ""\nInOrder Traversal Is : "" << std::endl;

     for (auto i : result) {
"
18335,"            previous_node.parent = next_node

             # Update bottom_root and search for min_node below

             self.bottom_root = previous_node

             self.min_node = previous_node

             while self.bottom_root.left:

                 self.bottom_root = self.bottom_root.left
"
72830,"      for (i = 0; i < V; ++i)

       {

           printf(""\n"");

           for (j = 0; j < V; ++j)

           {

               printf(""%d\t"", MST[i][j]);
"
19942,"  it('should return an all-uppercase string when input is an mixed-case string with spaces', () => {

     expect(upperCaseConversion('mixeD CaSe INPuT')).toEqual('MIXED CASE INPUT')

   })

   it('should return an all-uppercase string when input is an mixed-case string with punctuation', () => {

     expect(upperCaseConversion('mixeD-CaSe INPuT!')).toEqual('MIXED-CASE INPUT!')
"
18867,"        // Recursively calling

         std::array<int64_t, arr.size()> rightSortingLeft =

             quickSortRP(arr, start, pivotIndex - 1);

         std::array<int64_t, arr.size()> full_sorted =

             quickSortRP(rightSortingLeft, pivotIndex + 1, end);

         arr = full_sorted;
"
27832,"  }

   /** Function to print generic tree in level-order */

   public void levelorder() {
"
33514,"    Traceback (most recent call last):

     ...

     ValueError: factorial() not defined for negative values

     """"""

     if n < 0:
"
50356,"   * @brief Utility function to compute sub-tree sizes

    * @param u current dfs node

    * @param p the parent of node @param u
"
14455,"from typing import Callable, TypeVar

 # Make a training dataset drawn from a gaussian distribution

 def gaussian_distribution(mean: float, std_dev: float, instance_count: int) -> list:

     """"""

     Generate gaussian distribution instances based-on given mean and standard deviation
"
19050,"    sum += a

     n /= 10

   end
"
22280,"    }

 }

 /** Test that creates a random set of points distributed in 4 clusters in
"
56291,"from matplotlib import animation

 from matplotlib import pyplot as plt

 class Body:

     def __init__(

         self,
"
21512,"    if (low == high) {

       return array[low]; // or array[high]

     }

     int mid = (low + high) >>> 1;

     int leftMax = max(array, low, mid); // get max in [low, mid]

     int rightMax = max(array, mid + 1, high); // get max in [mid+1, high]
"
21801,"};

 class Trianle:public Figure{

     public:

         void area(){

             cout<<""""<<x*y*0.5<<endl;

         }
"
18555,"<?php

 /**

  * Problem:

  *

  * The prime factors of 13195 are 5, 7, 13 and 29.
"
32752,"* respect of their parents, can either be greater

 * or less than the parent. This makes it a min priority queue

 * or max priority queue.

 */

 // Functions: insert, delete, peek, isEmpty, print, heapSort, sink
"
19471,"                    if (side[neighbour] == -1) {

                         side[neighbour] = (1 ^ side[current]);

                         q.push(neighbour);

                     } else {

                         check &= (side[neighbour] != side[current]);
"
21871,"    ///     <para>

     ///         Sequence of the number of divisors of n, starting with 1.

     ///     </para>

     ///     <para>

     ///         OEIS: https://oeis.org/A000005.
"
14842," * (ODEs)](https://en.wikipedia.org/wiki/Ordinary_differential_equation) using

  * [forward Euler

  * method](https://en.wikipedia.org/wiki/Numerical_methods_for_ordinary_differential_equations#Euler_method)

  *
"
11370,"////////////////////////////////////////////////////////////////////////////////

 // GLOBAL VARIABLES

 int count;
"
15382,"        /// <param name=""graph"">graph upon which to run.</param>

         /// <returns>

         /// a 2D array of shortest paths between any two vertices.

         /// where there is no path between two vertices - double.PositiveInfinity is placed.

         /// </returns>

         public double[,] Run(DirectedWeightedGraph<T> graph)
"
30110,"                    double *w = kohonen_data_3d(&W, i, k, j);

                     w[0] = _random(-5, 5);

                 }

             }

         }
"
28047,"        for (w = 0; w < nV; w++)

             if (adjacent(g, v, w) && visited[w] == -1)

             {

                 visited[w] = v;
"
30875,"// Package rot13 is a simple letter substitution cipher that replaces a letter with the 13th letter after it in the alphabet.

 // ref: https://en.wikipedia.org/wiki/ROT13

 package rot13

 import (

 	""github.com/TheAlgorithms/Go/cipher/caesar""
"
11039,"  // Toggle an element down to its right place as long as its key is higher

   // than any of its children's

   private void toggleDown(int elementIndex) {

     double key = minHeap.get(elementIndex - 1).getKey();
"
32950,"	}

 	toState, ok := at[fromState][overChar]

 	if !ok {

 		return -1
"
10962,"        /// <returns>True if is a perfect number; False otherwise.</returns>

         /// <exception cref=""ArgumentException"">Error number is not on interval (0.0; int.MaxValue).</exception>

         public static bool IsPerfectNumber(int number)

         {
"
18144,"    expected = cnum1 / cnum2;

     assert(((void)""(1 + 1i) / (1 + 1i) is equal to 1 but the program says ""

                   ""otherwise.\n"",

             (result.real() == expected.real() &&

              result.imag() == expected.imag())));

     std::cout << ""Fourth test passes."" << std::endl;
"
13068,"    * @return

     */

   def lowerBound(arr: List[Int], elem: Int): Int = {

     lowerBound(arr, elem, 0, arr.length - 1)
"
12562,"            {

                 throw new ArgumentNullException(""searchItem"");

             }

             int jumpStep = (int)Math.Floor(Math.Sqrt(sortedArray.Length));

             int currentIndex = 0;

             int nextIndex = jumpStep;
"
17938,"using NUnit.Framework;

 namespace Algorithms.Tests.Sequences

 {

     public class NaturalSequenceTests
"
15587,"        if (isdigit(number[i]))

             number[i] -= '0';

         else if (isupper(number[i]))

             number[i] -= 'A' - 10;

         else if (islower(number[i]))

             number[i] -= 'a' - 10;
"
19801,"#!/usr/bin/env python3

 """"""

 This is pure Python implementation of binary search algorithms

 For doctests run following command:

 python3 -m doctest -v binary_search.py
"
14358,"        /// <returns>List of keys in in-order order.</returns>

         private IList<TKey> GetKeysInOrder(BinarySearchTreeNode<TKey>? node)

         {

             if (node is null)

             {

                 return new List<TKey>();
"
26047,"        for j in i ..< right {

             // If the element is smaller than the pivot, move it to the left.

             if self[j] <= pivot {
"
32300,"        MST[v][u] = E_t[u];

         MST[u][v] = E_t[u];

         no_of_edges--;

         V_t[u] = 1;

         for (uint16_t i = 1; i < V; i++)
"
20693,"template<typename T>

 void swap(scoped_ptr<T> &lhs, scoped_ptr<T> &rhs) noexcept {

     lhs.swap(rhs);

 }

 int main() {
"
15480,"end

 n = 3

 print(generate_parenthesis(n))

 # Output: [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]
"
21059,"package kmp

 import (

 	""reflect""
"
21755,"def newton_raphson(

     func: str, a: float | Decimal, precision: float = 10 ** -10

 ) -> float:

     """"""Finds root from the point 'a' onwards by Newton-Raphson method
"
17498,"    re = interpolation_search(array, value, n);

     if (re == -1)

         std::cout << ""Entered value is not in the array"" << std::endl;
"
16141,"""""""

 Created on Fri Sep 28 15:22:29 2018

 @author: Binish125

 """"""
"
35193,"    (*adj1)[u - 1].push_back(std::make_pair(v - 1, w));

     (*adj2)[v - 1].push_back(std::make_pair(u - 1, w));

     // (*adj)[v - 1].push_back(std::make_pair(u - 1, w));
"
64288,"            Assert.IsTrue(tree.Contains(2));

             Assert.IsTrue(tree.Contains(3));

             Assert.IsTrue(tree.Contains(4));

             Assert.IsTrue(tree.Contains(5));

             Assert.IsTrue(tree.Contains(6));

             Assert.IsTrue(tree.Contains(7));
"
14700,"                break;

             remainders[index] = rem;

             rem_ptr = remainders;

             index++;
"
19115,")

 func TestDiffieHellmanKeyExchange(t *testing.T) {

 	t.Run(""Test 1: modularExponentiation"", func(t *testing.T) {

 		var want int64 = 9 // (3^5)mod13 = 243mod13 = 9

 		var prvKey int64 = 5
"
16647,"    ///     The RGB color model is an additive color model in which red, green, and

     ///     blue light are added together in various ways to reproduce a broad array of

     ///     colors. The name of the model comes from the initials of the three additive

     ///     primary colors, red, green, and blue. Meanwhile, the HSV representation
"
17131,"    17866458359124566529476545682848912883142607690042

     24219022671055626321111109370544217506941658960408

     07198403850962455444362981230987879927244284909188

     84580156166097919133875499200524063689912560717606

     05886116467109405077541002256983155200055935729725

     71636269561882670428252483600823257530420752963450
"
21793,"    True

     """"""

     tests = [2, 3, 5, 7, 11, 13, 17]

     for i, test in enumerate(tests):

         if (num[i + 1] * 100 + num[i + 2] * 10 + num[i + 3]) % test != 0:

             return False
"
29655,"   * Method to find the index of the memory block that is going to fit the given process based on

    * the best fit algorithm.

    *
"
26370,"def solution():

     """"""Returns the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and

     6x, contain the same digits.
"
24179,"/**

  * the main function take one argument of type char*

  * example : ./program 123
"
26846,"     *

      * AF_INET (Family) - it is an address family that is used to designate the

      * type of addresses that your socket can communicate with
"
82112,"    def cycle_nodes(self):

         stack = []

         visited = []
"
32938,"    for (i = 0; i < g->nV; i++)

         for (j = i + 1; j < g->nV; j++)

             if (g->edges[i][j])

                 printf(""Edge %d - %d\n"", i, j);

 }

 void freeGraph(Graph g)
"
11335,"        for j in range(nRows - 3):

             vertProduct = grid[j][i] * grid[j + 1][i] * grid[j + 2][i] * grid[j + 3][i]

             horzProduct = grid[i][j] * grid[i][j + 1] * grid[i][j + 2] * grid[i][j + 3]

             # Left-to-right diagonal (\) product

             if i < nColumns - 3:

                 lrDiagProduct = (
"
32411,"void lazy_sort(char data[][MAX_NAME_LEN], int LEN)

 {

     int i, j;

     for (i = 0; i < LEN; i++)
"
39865,"            tree.GetKeysInOrder().SequenceEqual(new[] { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }).Should().BeTrue();

         }

         [Test]

         public void Add_Case3_FormsCorrectTree()
"
30435,"// Sieve Sieving the numbers that are not prime from the channel - basically removing them from the channels

 func Sieve(in <-chan int, out chan<- int, prime int) {

 	for {

 		i := <-in

 		if i%prime != 0 {

 			out <- i
"
28973,"}

 int main() {

     vector<int> v{3,4,5,6};

     int res=0;
"
21174,"    while (true) {

       try {

         System.out.print(""Enter number: "");

         n = in.nextInt();

         break;

       } catch (InputMismatchException e) {
"
10793,"      }

     }

     if (current == head) deleteHead();
"
88280,"    if (l1->val < l2->val)

     {

         l1->next = mergeTwoLists(l1->next, l2);

         return l1;
"
22676,"        # There is no convex hull

         raise ValueError(""graham_scan: argument must contain more than 3 points."")

     if len(points) == 3:
"
25271,"    int

         The index of the element in the array.

         -1 if the element is not found.

     >>> fibonacci_search([4, 5, 6, 7], 4)

     0

     >>> fibonacci_search([4, 5, 6, 7], -10)
"
98067,"    True

     """"""

     if number % 2 == 0 and number > 2:

         return False
"
33102,"julia> vol_right_circ_cone(2, 3)

 12.566370614359172

 ```
"
21717,"// Structure for storing edge

 struct Edge

 {

     int src, dst, weight;
"
18248,"    public static class BogoSorterTests

     {

         [Test]

         public static void ArraySorted([Random(0, 10, 10, Distinct = true)] int n)

         {

             // Arrange
"
28742,"                neighbour_count += cells[i][j - 1]

             if j < len(cells[i]) - 1:

                 neighbour_count += cells[i][j + 1]

             if i < len(cells) - 1 and j > 0:
"
30548,"        System.out.println(""Enter key matrix size"");

         int n = in.nextInt();

         System.out.println(""Enter Key/encryptionKey matrix "");

         int keyMatrix[][] = new int[n][n];

         for (int i = 0; i < n; i++) {
"
29487,"    if (items[j] <= x) {

       pivotIndex++

       Swap(items, pivotIndex, j)

     }

   }
"
29494,"   * Calculate combinations

    *

    * @param n first number

    * @param k second number

    * @return combinations of given {@code n} and {@code k}

    */
"
15636,"    std::cout << ""function: log(x) + e^x + x"" << std::endl;

     std::cout << ""range: [3.24, 7.56]"" << std::endl;

     std::cout << ""value: "" << test_1 << std::endl;
"
14996,"  private static Node createTree(final Integer[] preorder, final Integer[] inorder,

                      final int preStart, final int inStart, final int size) {

     if (size == 0) {

       return null;

     }

     Node root = new Node(preorder[preStart]);
"
26486,"      }

     }

     /**

      * Makes heap with root as root

      *

      * @param root index of root of heap
"
82261,"  public <T extends Comparable<T>> List<T> sort(List<T> list) {

     Map<T, Integer> frequency = new TreeMap<>();

     // The final output array

     List<T> sortedArray = new ArrayList<>(list.size());

     // Counting the frequency of @param array elements

     list.forEach(v -> frequency.put(v, frequency.getOrDefault(v, 0) + 1));
"
42345,"# Example 1:

 #

 # Input: nums = [2,0,2,1,1,0]

 # Output: [0,0,1,1,2,2]
"
30285,"}
"
27378,"    const int N = 10;  // number of sample points

     const double saved_X[10][2] = {{0, 1},  {1, -2},   {2, 3},   {3, -1},

                                    {4, 1},  {6, -5},   {-7, -3}, {-8, 5},
"
10785,"        }

         historyX[0] = sample;

         historyY[0] = result;

         return result;

     }

 }
"
27635,"    )

   })

   it('should return the mean square error of two equal length arrays', () => {

     const firstArr = [1, 2, 3, 4, 5]

     const secondArr = [1, 3, 5, 6, 7]

     expect(meanSquaredError(firstArr, secondArr)).toBe(2.6)
"
26070,"    return 0;

 }
"
23664,"   * @return Node the updated value of root parameter after delete operation

    */

   private Node<T> delete(Node<T> node, T data) {

     if (node == null) {

       System.out.println(""No such data present in BST."");

     } else if (node.data.compareTo(data) > 0) {
"
21085,"            x.Mark = false;

             x.Parent = null;

         }

         /// <summary>
"
25793,"[[libpng_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg"", ""Zlib_jll""]

 git-tree-sha1 = ""94d180a6d2b5e55e447e2d27a29ed04fe79eb30c""

 uuid = ""b53b4c65-9356-5827-b1ea-8c7a1a84506f""
"
18924,"            low++;

             high--;

         }

         
"
33748,"        Stream.of(4, 23, 6, 78, 1, 54, 23, 1, 9, 231, 9, 12).collect(toList());

     CountingSort countingSort = new CountingSort();

     System.out.println(""Before Sorting:"");

     print(unsortedInts);

     // Output => 1 1 4 6 9 9 12 23 23 54 78 231
"
20262,"         << static_cast<void*>(v.data())

          << endl;

     auto hs = hash<string>();

     cout << ""hash(\""hello\"")  = ""

          << hs(string(""hello"")) << endl;
"
17088,"            thisHeap.Union(otherHeap);

             Assert.AreEqual(thisHeap.Count, previousCount);

             Assert.AreEqual(thisHeap.Peek(), previousMin);

         }
"
12204,"            {

                 red = ConvertToByte(matchValue);

                 green = ConvertToByte(chroma + matchValue);

                 blue = ConvertToByte(secondLargestComponent + matchValue);
"
31025,"            }

             Assert.Zero(oddHeap.Count);

             Assert.Zero(evenHeap.Count);
"
75207,"using System.Linq;

 using System.Numerics;

 using Algorithms.Sequences;

 using FluentAssertions;

 using NUnit.Framework;
"
12942,"      const swapIdx = childTwoIdx !== -1 && heap[childTwoIdx] < heap[childOneIdx]

         ? childTwoIdx

         : childOneIdx
"
25693,"    return false unless v == 0

   end

   true

 end

 s = 'anagram'

 t = 'nagaram'
"
31620,"  }

   return multMatrix

 }

 // const firstMatrix = [

 //   [1, 2],

 //   [3, 4]
"
30328,"    expect(numberOfDigit(-2346243)).toBe(7)

   })

 })
"
80483,"package DivideAndConquer;

 /**

  * For a set of points in a coordinates system (10000 maximum), ClosestPair class calculates the two
"
22179,"      if sum > 0

         right -= 1

       elsif sum < 0

         left += 1

       # if it's zero, then add the answer to array and set left pointer to next valid value

       else
"
78712,"   * prevent further collisions

    */

   public void checkLoadFactor() {

     double factor = (double) size / hsize;

     if (factor > .7) {

       System.out.println(""Load factor is "" + factor + "",  lengthening table"");
"
29810,"	mutationProb := conf.MutationProb

 	if mutationProb == .0 {

 		mutationProb = .4

 	}
"
12749,"                }

             }

             return output.Pop();

         }

         /// <summary>

         ///     Returns a boolean indicating whether the queue is empty.
"
66405,"  const coins = [2]

   const amount = 3

   expect(change(coins, amount)).toBe(0)

   expect(coinChangeMin(coins, amount)).toBe(-1)

 })

 test('Test Case 4', () => {
"
14342,"    System.out.println(myQueue.remove()); // Will print 1

     System.out.println((myQueue.isInStackEmpty()) ? ""null"" : myQueue.peekBack()); // Will print NULL

     // instack: []
"
48033,"﻿using System;

 using System.Linq;

 using Algorithms.Numeric;

 namespace Algorithms.Encoders

 {

     /// <summary>
"
10807,"    int h = 1;

     int j = 0;

     int i = 0;

     h = (int) Math.pow(d, m - 1) % q;

     for (i = 0; i < m; i++) {

       // hash value is calculated for each character and then added with the hash value of the next
"
21408,"  // returns the constructor

   return LinkedList

 }())

 export { LinkedList }
"
29236,"    >>> chain(10)

     True

     >>> chain(58)
"
29628,"            tree = new RedBlackTree<int>();

             tree.AddRange(new[] { 5, 4, 6, 8, 7 });

             tree.GetKeysPreOrder().SequenceEqual(new[] { 5, 4, 7, 6, 8 }).Should().BeTrue();

         }

         [Test]
"
11274,"        # Remaining cases

         # Construct heap of right subtree

         newHeap = BinomialHeap(

             bottom_root=bottom_of_new, min_node=min_of_new, heap_size=size_of_new

         )

         # Update size
"
26537," * The Mandelbrot set is black.

  *

  * @param {number} distance Distance until divergence threshold
"
15802,"  let red

   let green

   let blue

   if (hueSection >= 0 && hueSection <= 1) {

     red = convertToInt(chroma + matchValue)

     green = convertToInt(secondLargestComponent + matchValue)
"
55368,"/**

  * @file

  * @author [Carlos Rafael](https://github.com/CarlosZoft)

  * @author [Herick Lima](https://github.com/hericklima22)

  * @brief [naval_battle](https://en.wikipedia.org/wiki/Battleship_(game))

  * implementation in C using only the stdio.h for Standard Input and Output.
"
15045,"  //Key to be searched in the array

   key = 5;

   //Search the key using ternarySearch

   p = ternarySearch(l, r, key, arr);
"
18893,"    number = Math.floor(number / 10)

   }

   return reverseNumber
"
12207,"    }

     /**

      * Decrypt message by replacing each element with its opposite character in cipher.

      *

      * @return message

      */
"
96961,"    static float K = 0.f;

     if (n == 0)

         K = x;

     n++;
"
23708,"const surfaceAreaSphere = (radius) => {

   validateNumericParam(radius, 'radius')

   return (4.0 * Math.PI * radius ** 2.0)

 }

 /*

   Calculate the area of a rectangle
"
93067,"  private static int numberOfDigitsRecursion(int number) {

     return number / 10 == 0 ? 1 : 1 + numberOfDigitsRecursion(number / 10);

   }

 }
"
95661," * b*i"": ""a"" is the real component, usually drawn on the x-axis, and ""b*i"" is the imaginary

  * component, usually drawn on the y-axis. Most visualizations of the Mandelbrot set use a

  * color-coding to indicate after how many steps in the series the numbers outside the set cross the

  * divergence threshold. Images of the Mandelbrot set exhibit an elaborate and infinitely

  * complicated boundary that reveals progressively ever-finer recursive detail at increasing

  * magnifications, making the boundary of the Mandelbrot set a fractal curve. (description adapted
"
19483,"    long L = strlen(buffer);

     for (int i = 0; i < L; i++)

     {
"
17313,"    {

         struct Node *node;

         node = buckets[i];

         while (node)

         {
"
15764,"        [TestCase(""Griffith"", 'f', 2)]

         [TestCase(""Randomwoooord"", 'o', 4)]

         [TestCase(""Control"", 'C', 1)]

         public static void MaxCountCharIsObtained(string text, char expectedSymbol, int expectedCount)
"
22442,"        std::cout << ""copy assignment"" << std::endl;

         return *this;

     }
"
10298,"                if (child->left != NULL)

                 {

                     (child->left)->par = parent;
"
76843,"    {

         printf(""\n1.add value at first location"");

         printf(""\n2.delete value from first location"");

         printf(""\n3.view value"");
"
15529,"    """"""

     >>> k = Node(0, 0, 4, 5, 0, None)

     >>> k.calculate_heuristic()

     9

     >>> n = Node(1, 4, 3, 4, 2, None)

     >>> n.calculate_heuristic()
"
28457,"namespace ciphers {

 /**

  * @namespace a1z26

  * @brief Functions for [A1Z26](https://www.dcode.fr/letter-number-cipher)

  * encryption and decryption implementation

  */
"
19338,"    squarefrees = get_squarefree(unique_coefficients, primes)

     return sum(squarefrees)

 if __name__ == ""__main__"":

     print(f""{solution() = }"")
"
20228,"}

 const DateDayDifference = (date1, date2) => {

   // firstly, check that both input are string or not.
"
14568,"	""fmt""

 )

 func ExampleSet() {

 	set := New(1, 2, 3)

 	fmt.Println(set.Len()) // 3

 	set.Add(3)
"
31604,"        self.target = Node(goal[1], goal[0], goal[1], goal[0], 99999, None)

         self.open_nodes = [self.start]

         self.closed_nodes: list[Node] = []

         self.reached = False
"
66444,"   * Constructor initializes buckets array, hsize, and creates dummy object for AVAILABLE

    *

    * @param hsize the desired size of the hash map
"
12910,"		s1     Set

 		s2     Set

 		expSet Set
"
29786,"# calling `find_amicable_numbers` method and finding sum of all such numbers

 # below 10000, and printing the result on the console

 puts find_amicable_numbers(10_000).sum
"
79132,"﻿using Algorithms.Numeric;

 using NUnit.Framework;

 namespace Algorithms.Tests.Numeric

 {

     public static class NarcissisticNumberTest
"
33844,"            self.unblockViewForUser()

         }

     }

     private func setupResetButton() {
"
22346,"git-tree-sha1 = ""44d018211a56626288b5d3f8c6497d28c26dc850""

 uuid = ""e409e4f3-bfea-5376-8464-e040bb5c01ab""

 version = ""0.4.0""

 [[Polyester]]
"
10244,"    [i + 1, j + 2],

     [i - 1, j + 2],

     [i + 1, j - 2],

     [i - 1, j - 2],

     [i + 2, j + 1],

     [i + 2, j - 1],
"
14758,"  it('Check All : should return all true,true,false', () => {

     expect(checkAll(15)).toEqual({

       isTriangular: true,

       isTetrahedral: false,

       isPentatope: true

     })
"
10007," */

 public class RodCutting {

   private static int cutRod(int[] price, int n) {

     int val[] = new int[n + 1];
"
58793,"      power += 1;

       remain ~/= primes[i];

     }

     nod *= power;
"
26983,"    test1();

     clock_t end_clk = clock();

     printf(""Test 1 completed in %.4g sec\n"",

            get_clock_diff(start_clk, end_clk));

     start_clk = clock();
"
25623,"    */

     private <T extends Comparable<T>> Boolean doSort(T[] array, int left, int right) {

         Boolean swapped = false;
"
25630,"    int i;

     for (i = 0; i < array->size / 2; i++)

     {
"
11185,"       place rest of that polynomial in temp

        */

         else if (poly2)
"
50018,"            Assert.False(result);

         }

         [Test]
"
85683,"namespace DataStructures.Tests.Heap.PairingHeap

 {

     internal class PairingHeapTests
"
28167,"        {

             var taken = new bool[array.Length];

             var newArray = new T[array.Length];

             for (var i = 0; i < array.Length; i++)

             {

                 int nextPos;
"
28709,"        {

             var tree = new BinarySearchTree<int>();

             tree.AddRange(new List<int> { 5, 3, 4, 2, 7, 6, 8 });

             var keys = tree.GetKeysPostOrder();

             var expected = new List<int> { 2, 4, 3, 6, 8, 7, 5 };
"
28457,"	}

 	return y;

 }
"
23698,"	vertexColors := make(map[int]Color, g.vertices)

 	// Start with a color and assign the color to all possible vertices in the degreeOfVertex slice

 	// and then, re-iterate with new color for all those which are left
"
31593,"    }

 }

 void Post(node *n) {
"
12496,"    }

   }

   private HeapElement extractMax() {

     HeapElement result = maxHeap.get(0);
"
11152,"namespace DataStructures.Tests.Heap

 {

     internal static class BinaryHeapTests

     {
"
29595,"    for (int64_t i = 0; i < nelement; i++) {

         current_sum += in_arr[i];

         if (current_sum == sum) {

             count_of_subset++;

         }

         // If in case current_sum is greater than the required sum
"
31013,"    public class FeistelCipher : IEncoder<uint>

     {

         // number of rounds to transform data block, each round a new ""round"" key is generated.

         private const int Rounds = 32;
"
97391,"            PostOrderWalk(root);

             return result;

             void PostOrderWalk(RedBlackTreeNode<TKey>? node)

             {

                 if (node is null)
"
21786,"        and add its factorial to fact_sum.

     """"""

     for i in str(a):

         fact_sum += factorial(int(i))

     factorial_sum_cache[a] = fact_sum

     return fact_sum
"
32355,"   */

   private <T extends Comparable<T>> int search(T array[], T key, int left, int right) {

     if (right < left) return -1; // this means that the key not found

     // find median
"
83852,"  }

   return stack.isEmpty;

 }

 void main() {
"
12434,"}
"
12278,"    public static class BucketSorterTests

     {

         [Test]

         public static void ArraySorted(

             [Random(0, 1000, 1000, Distinct = true)]

             int n)
"
14352,"    }

     /**

      * gets the AES encryption key. In your actual programs, this should be safely stored.

      *

      * @return secKey (Secret key that we encrypt using it)

      * @throws NoSuchAlgorithmException (from KeyGenrator)
"
29842,"            x.set(i, 1);

           }

         }

         for (int i = 0; i < x.size() && x.get(i) != 1; i++) {

           x.remove(0);

         }
"
33752,"      while (pos != j) {

         pos = j;

         // Find position where we put the element

         for (int i = j + 1; i < n; i++)

           if (less(arr[i], item)) {

             pos += 1;
"
52752,"    >>> solution(3)

     12

     """"""

     answer = 1
"
27587,"        /// </summary>

         /// <param name=""x"">A child of y we just decreased the value of.</param>

         /// <param name=""y"">The now former parent of x.</param>

         protected void Cut(FHeapNode<T> x, FHeapNode<T> y)
"
27444,"    return ""-"" + oct_val;

   }

   return oct_val;
"
12656,"package DataStructures.Trees;

 public class ValidBSTOrNot {

   class Node {
"
31884,"            has the same number of black nodes.

         This function runs in O(n) time, because properties 4 and 5 take

         that long to check.

         """"""
"
33631,"[<TestClass>]

 type UpperTests () =

     [<TestMethod>]
"
10588,"  /**

    * Finds the index of location based on an inputed key

    *

    * @param key the desired key to be found
"
28386,"    return 0;

 }

 int rolldice()

 {   

     int sum=0;

     int dim1 = rand()%6+1;
"
92066,"            filter.Insert(simpleObjectInserted);

             Assert.IsTrue(filter.Search(simpleObjectInserted));

             Assert.IsTrue(filter.Search(simpleObjectInserted2));

             Assert.IsFalse(filter.Search(simpleObjectNotInserted));
"
28863,"    } else if (val > this.value && this.right !== null) {

       return this.right.search(val)

     }
"
32331,"        ...

         >>> u = Matrix(3, 1, 0)

         >>> u[0,0], u[1,0], u[2,0] = 1, 2, -3

         >>> v = Matrix(3, 1, 0)

         >>> v[0,0], v[1,0], v[2,0] = 4, -2, 5

         >>> ainv.ShermanMorrison(u, v)
"
21281,"def rotate(

     x: float, y: float, z: float, axis: str, angle: float

 ) -> tuple[float, float, float]:
"
27773,"/*

  * Problem Statement: Find all distinct, non-empty subsequence of given string in lexicographical order using recursive approach.

  *

  * What is subsequence?
"
33934,"    while ((2 * elementIndex <= minHeap.size()) && wrongOrder) {

       // Check whether it shall swap the element with its left child or its right one if any.

       if ((2 * elementIndex < minHeap.size())

           && (getElementKey(elementIndex * 2 + 1) < getElementKey(elementIndex * 2))) {
"
84074,"    /* random size */

     int size = random.nextInt(100) + 1;

     int[] array = new int[size];
"
17897,"  Example: surfaceAreaCube(1) will return 6

   More about: https://en.wikipedia.org/wiki/Area#Surface_area

  */
"
32378,"/**

  * \file

  * \brief [Problem 9](https://projecteuler.net/problem=9) solution

  * \author [Krishna Vedala](https://github.com/kvedala)
"
25120,"    expect(validateEmail('icristianbaciu@.helsinki.edu')).toEqual(true)

   })

   it('expects to throw a type error', () => {

     expect(() => { validateEmail('') }).toThrow('Email Address String Null or Empty.')
"
28242,"end

 nums1 = [1, 2, 2, 1]

 nums2 = [2, 2]

 intersect(nums1, nums2)

 nums1 = [1, 2, 2, 1]
"
14875,"}

 class LinkedList<T> extends Iterable<T> {

   int _length = 0;

   int get length => this._length;

   Node<T> _head;

   @override
"
32386,"            }

             // Assert

             Assert.AreEqual(typeof(InvalidOperationException), exception?.GetType());

         }

         [Test]

         public static void ClearWorksCorrectly()
"
28983,"                    lower(word);  // convert std::string paragraph to lowercase

                                   // and store it in std::string lowerCase

                 std::cout << ""Hello, your word is "" << word << ""!\n"";

                 if (lowerCase.find(lowerCaseWord) == std::string::npos) {

                     std::cout << word << "" does not exist in the sentence""

                               << std::endl;
"
88160,"                    prods = [

                         self.__matrix[i][j] * other.component(j)

                         for j in range(self.__width)

                     ]
"
20238,"      } else {

         return n.getKey() + ""->"" + display(n.getNext());

       }

     }

     public boolean isEmpty() {
"
10878,"		node *y = p->left;

 		if (y->right != NULL)

 		{

 			p->left = y->right;
"
30045," * @author Unknown author

  * @author [Gabriel Fioravante](https://github.com/northernSage)

  */

 #include <stdlib.h>   /// for rand() calls
"
11528,"  });

   test(""ocatal_to_hex rasies error when number is invalid"", () {

     expect(() => ocatal_to_hex(""84""), throwsFormatException);
"
26171,"            foreach (var (key, value) in dictionary)

             {

                 dictionaryList.Add((key, value));

             }

             timelineList.OrderBy(pair => pair.Time);
"
65982,"                low = mid-1;

             }

         }

         
"
17934,"}

 /** Print sets in the current range to `stdout`

  * @param head pointer to first set in the current level

  */

 void print(CantorSet *head)

 {
"
24066,"include(""factorial.jl"")

 """"""

     krishnamurthy(number)

 Check if a number is a Krishnamurthy number or not
"
25219,"  const h = (b - a) / N

   // Find interpolation points

   let xi = a // initialize xi = x0

   const pointsArray = []

   // Find the sum {f(x0+h/2) + f(x1+h/2) + ... + f(xN-1+h/2)}
"
90486,"    The entries in 0th row and 0th column are never used. */

     long[][] table = new long[n+1][x+1];

         

     /* Table entries for only one dice */
"
29292,"   */

   static ArrayList<Integer> bestFit(int[] sizeOfBlocks, int[] sizeOfProcesses) {

     // The array list responsible for saving the memory allocations done by the best-fit algorithm

     ArrayList<Integer> memAlloc = new ArrayList<>();

     // Do this for every process
"
59856,"		log.Fatalf(""failed Decrypt: %v"", err)

 	}

 	fmt.Printf(""Decrypt=> encryptedText: %s, decryptedText: %s\n"", encryptedText, decryptedText)

 	// Output:

 	// Encrypt=> plainText: HogeFugaPiyoSpam, encryptedText: OGGFOOHFOHFHOOHHEHOEFFGFEEEHHHGG

 	// Decrypt=> encryptedText: OGGFOOHFOHFHOOHHEHOEFFGFEEEHHHGG, decryptedText: HOGEFUGAPIYOSPAM
"
31060,"                    .Contain(query);

             }

         }
"
33906,"            int[] f = new int[p.Length + 1];

             // Suffix of p[m] has no border --> f[m] = m+1

             f[m] = m + 1;

             // Corresponding shift distance

             int[] s = new int[p.Length + 1];
"
16222,"			if i == k

 				L[i,i] = 1

     			else

 				s = 0
"
30945,"}

 class Point {

   double x;

   double y;

   @override
"
15457,"/**

  * \file

  * \brief A simple tree implementation using structured nodes
"
66122,"                throw new ArgumentException(nameof(n));

             }

             return BacktrackSolve(new bool[n, n], 0);

         }

         private static IEnumerable<bool[,]> BacktrackSolve(bool[,] board, int col)

         {
"
22861,"				rightStartIndex += 1

 			}

 			currentIndex += 1

 		}
"
19352,"            var pow = (int)Math.Pow(2, Math.Ceiling(Math.Log(arr.Length, 2)));

             Tree = new int[2 * pow];

             // Transfers the input array into the last half of the segment tree array

             Array.Copy(arr, 0, Tree, pow, arr.Length);
"
32804,"const gridGetY = (columns, index) => {

   return Math.floor(index / columns) + 1

 }

 export { gridGetX, gridGetY }
"
15082,"    .join('') + '1'

   // extend message by adding empty bits (0)

   while (m.length % 512 !== 448) {

     m += '0'
"
22304,"deps = [""ArrayInterface"", ""LinearAlgebra"", ""Printf"", ""Requires"", ""SparseArrays""]

 git-tree-sha1 = ""ad435656c49da7615152b856c0f9abe75b0b5dc9""

 uuid = ""d4d017d3-3776-5f7e-afef-a10c40355c18""

 version = ""1.8.4""

 [[ExprTools]]
"
30603," *

  * The outputs can be readily plotted in [gnuplot](https:://gnuplot.info) using

  * the following snippet

  * ```gnuplot
"
32042,"        ""journal"": ""Chem. Mater."",

         ""volume"": 30,

         ""pages"": ""3979-3990"",
"
17582,"function SIR(du, u, p, t)

 	s, i, r = u

 	β, k = p
"
10860,"   *

    *   if there is no swap, it means the children indices and the parent index satisfy heap conditions and can exit the function.

   */

   sinkDown (currIdx, endIdx, heap) {

     let childOneIdx = currIdx * 2 + 1
"
26040,"#define __STDC_FORMAT_MACROS

 #include <inttypes.h>

 #ifdef _OPENMP

 #include <omp.h>
"
21280,"    /**

      * @brief Getting the number of versions after updates so far which is equal

      * to the size of the pointers vector

      * @returns the number of versions

      */

     uint32_t size()  // returns the number of segment trees (versions) , the
"
23137,"        while let parent = x.parent {

             x.parent = parent.parent ?? parent

             x = parent

         }

         return x
"
29137,"        } else if (w.left.color == B) {

           w.right.color = B;

           w.color = R;

           rotateLeft(w);
"
33858,"}
"
10665,"                    14,

                     float.PositiveInfinity,

                     float.PositiveInfinity,

                     float.PositiveInfinity,
"
31017,"    int wt[] = new int[] {10, 20, 40};

     int W = 50;

     System.out.println(knapSack(W, wt, val, val.length));
"
84306,"// 	}

 // 	elapsed := time.Since(startTime)

 // 	fmt.Printf(""\n\nElapsed %f secs\n"", elapsed.Seconds())

 // 	fmt.Printf(""\n\n"")

 // 	if currentOcc > 0 {

 // 		fmt.Printf(""Word %q was found %d times at positions: "", p, currentOcc)
"
55217,"        /// <param name=""value"">Value with which each element of the interval is calculated.</param>

         public void Apply(int l, int r, int value)

         {
"
10934,"[[Logging]]

 uuid = ""56ddb016-857b-54e1-b83d-db4d58db5568""

 [[LoopVectorization]]

 deps = [""ArrayInterface"", ""DocStringExtensions"", ""IfElse"", ""LinearAlgebra"", ""OffsetArrays"", ""Polyester"", ""Requires"", ""SLEEFPirates"", ""Static"", ""StrideArraysCore"", ""ThreadingUtilities"", ""UnPack"", ""VectorizationBase""]
"
26767,"            tree.Remove(0);

             tree.Remove(3);

             tree.Remove(2);
"
15077,"      output(this.stack[i])

     }

   }

   return Stack

 }())

 export { Stack }
"
31502,"	return Reverse(result), nil

 }
"
29054,"                        return a * b * c

     return -1

 def solution_fast() -> int:
"
24459,"		}

 		return

 	}

 	if (*root).Key < key {

 		Insert(&(*root).Right, key)
"
31816,"            if (output.Count == 0)

             {

                 while (input.Count > 0)
"
25711," * 2D space and trains an SOM that finds the topological pattern.

  * The following [CSV](https://en.wikipedia.org/wiki/Comma-separated_values)

  * files are created to validate the execution:

  * * `test1.csv`: random test samples points with a circular pattern

  * * `w11.csv`: initial random U-matrix
"
97932,"﻿using System.Linq;

 using System.Numerics;

 using Algorithms.Sequences;

 using FluentAssertions;

 using NUnit.Framework;

 namespace Algorithms.Tests.Sequences
"
76714,"    0.375

     >>> jaccard_similariy(setA,setA)

     1.0

     >>> jaccard_similariy(setA,setA,True)

     0.5
"
29021,"            Assert.IsTrue(result);

         }

         [Test]
"
13797,"    def get_private_key(self) -> str:

         return hex(self.__private_key)[2:]

     def generate_public_key(self) -> str:

         public_key = pow(self.generator, self.__private_key, self.prime)
"
32956,"Surprisingly, there are palindromic numbers that are themselves Lychrel numbers;

 the first example is 4994.

 How many Lychrel numbers are there below ten-thousand?
"
27423,"                    if (toDelete->right != NULL)

                     {

                         toDelete->right->par = parent->left;
"
20225,"		}

 	}

 	// returning the length of longest common subsequence
"
17205,"  end

   # return keys

   result_array

 end

 Benchmark.bmbm do |x|

   x.report('execute algorithm 3') do
"
12318,"As the shapes get smaller and smaller, the sum approaches the Riemann integral.

 # Arguments

 - `f`: the function to integrate. (at the momment only single variable is suported)

 - `a`: Start of the integration limit.

 - `b`: End of the integration limit.

 - `n`: Number of points to sample. (as n increase, error decrease)
"
27341,"    ArrayList<Integer> completed = new ArrayList<Integer>();

     for (int i = 0; i < remainingProcess.size(); i++) {

       if (remainingProcess.get(i).remainingTime == 0) {

         completed.add(i);

       }
"
74214," * If the same, returns the index. If the index is the index of the sentinel, it means it was not found. 

  * Of course, if the value to be found is the last element, we return the index of the last element.

  * @author [Regan Yue](https://github.com/ReganYue)

  * Time Complexity: O(N)
"
10004,"	if (pos == -1)

 	{

 		// Add a new element in the mem_info list

 		memoryInformation = addMemInfo(memoryInformation, ptrToReturn, bytes, line, filename, functionName);

 		if (!memoryInformation)
"
17783,"git-tree-sha1 = ""56ead4aaafc41d83694e17b0dd89d3e929d01a14""

 uuid = ""e6cf234a-135c-5ec9-84dd-332b85af5143""

 version = ""1.5.0""

 [[RecipesBase]]

 git-tree-sha1 = ""b3fb709f3c97bfc6e948be68beeecb55a0b340ae""

 uuid = ""3cdcf5f2-1ef4-517c-9805-6587b60abb01""
"
11932," *    <p><i>The numbers that remain are Prime.</i></p>

  *

  * @see <a href=""https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"">Wiki</a>
"
98983,"            new ArrayList<>(

                     Arrays.asList(

                             0, 19, 75, null, 0, 15, 140, null, 0, 16, 118, null, 19, 12, 71, null, 12, 15, 151,
"
28913,"# Complexity analysis:

 #

 # Time complexity: O(n).

 # Space complexity: O(1).

 #
"
32307,"		{

 			""Encrypt sentence with key 10"",

 			""the quick brown fox jumps over the lazy dog."",
"
29211,"  if (hex_string == null || hex_string == """") {

     throw Exception(""An empty value was passed to the function"");

   }

   bool is_negative = hex_string[0] == ""-"";

   if (is_negative) hex_string = hex_string.substring(1);
"
71076,"    std::cout << ""First test passes."" << std::endl;

     // Test for subtraction

     result = num1 - num2;
"
20502,"	}

 }

 func NewSegmentTree(Array []int) *SegmentTree {
"
26561,"        """"""Function to encrypt text using pseudo-random numbers""""""

         plain = [ord(i) for i in text]

         key = []

         cipher = []
"
30914,"   * @param color8Bit 8-bit representation of a color component value.

    * @return A percentile value of the color component.

    */

   private double getColorSRgb(double color8Bit) {

     return color8Bit / 255.0;

   }
"
31057,"        String beginWord = ""hit"";

         String endWord = ""cog"";

         String words[] = {""hot"",""dot"",""dog"",""lot"",""log"",""cog""}; 

         List<String> wordList = Arrays.asList(words);

         System.out.println(""Ladder Length: "" + ladderLength(beginWord,endWord,wordList));

     }
"
21448,"      throw new FormatException(""An invalid value was passed to the function"");

     }

     bin_val += bin_table[hex_cur];

     i++;

   }

   // returning the value
"
84308," * Problem 18 - Maximum path sum I

  *

  * @see {@link https://projecteuler.net/problem=18}

  *

  * By starting at the top of the triangle below and moving to adjacent numbers

  * on the row below, the maximum total from top to bottom is 23 :
"
27495,"        ʌ     |

         |     |

         v     v

   C --> D <-- E

   F --> G
"
27175,"  /* Compute the ""height"" of a tree -- the number of

   nodes along the longest path from the root node

   down to the farthest leaf node.*/
"
23663," * gets user input adj. matrix and finds MST of that graph

  * @returns void

  */

 void user_graph(uint16_t G[][MAX], uint16_t MST[][MAX], uint16_t V)

 {

       printf(""Enter the number of vertices: "");
"
78661," * * \f$(-0,5,-0.5, -0.5)\f$

  *

  * \param[out] data matrix to store data in

  * \param[in] N number of points required
"
17191,"    problem(x, y, dy);

     double tmp_x = (*x) + 0.5 * dx;

     double tmp_y[order];

     int o;

     for (o = 0; o < order; o++) tmp_y[o] = y[o] + 0.5 * dx * dy[o];
"
30191,"    expect(LocalMaximomPoint(Array2)).toEqual(3)

   })

 })
"
33544,"﻿namespace Algorithms.Tests.Strings

 open Microsoft.VisualStudio.TestTools.UnitTesting

 open Algorithms.Strings

 [<TestClass>]

 type CapitalizeTests () =

     
"
16885,"    initializeGraph(graph, graphData);

     PathAndDistance solution = aStar(3, 1, graph, heuristic);

     solution.printSolution();
"
24656,"  ans

 end

 nums = [-1, 0, 1, 2, -1, -4]
"
24564,"                }

             }

         }

     }

 }
"
92748,"[[Libdl]]

 uuid = ""8f399da3-3557-5675-b5ff-fb832c97cbdb""

 [[Libffi_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]

 git-tree-sha1 = ""761a393aeccd6aa92ec3515e428c26bf99575b3b""
"
20816,"    try {

         D& dobj = dynamic_cast<D&>(obj);  

         cout << ""works""<<endl; 

     } catch (bad_cast bc) { // ERROR
"
19750,"package Ciphers;

 import java.util.Scanner;

 class ProductCipher {

     public static void main(String args[]) {

         Scanner sc = new Scanner(System.in);

         System.out.println(""Enter the input to be encrypted: "");
"
18429,"    if idx == 0 and squared_primes[idx] > num_to_look:

         return -1

     if idx == len(squared_primes) and squared_primes[-1] > num_to_look:

         return -1

     return idx
"
23404,"            cout << ""Base::fun1()"" << endl;

         }

         virtual void fun2()

         {

             cout << ""Base::fun2()"" << endl;
"
21295,"        self.indicator.translatesAutoresizingMaskIntoConstraints = false

         self.indicator.backgroundColor = .lightGray

         self.addSubview(self.indicator)
"
18142,"        public void Add(T item)

         {

             var x = item.GetHashCode();
"
16354,"        /// <summary>

         ///     Return the pseudoinverse of a matrix based on the Moore-Penrose Algorithm.

         ///     using Singular Value Decomposition (SVD).

         /// </summary>

         /// <param name=""inMat"">Input matrix to find its inverse to.</param>
"
20505,"            }

             return bitmap;

         }

         /// <summary>

         ///     Black and white color-coding that ignores the relative distance. The Mandelbrot
"
24146,"import Foundation

 enum ShuntingYard {

     enum Operator: String, CaseIterable {
"
10631,"    L[m][n]: int, the length of the longest subsequence. Also equal to len(seq)

     Seq: str, the subsequence found

     >>> longest_common_subsequence(""programming"", ""gaming"")
"
16378,"    Locates the first element in a sorted array that is larger or equal to a given

     value.

     It has the same interface as

     https://docs.python.org/3/library/bisect.html#bisect.bisect_left .
"
79122,"        /// <param name=""time"">The date at which the event occurred.</param>

         /// <param name=""value"">The event value.</param>

         /// <returns>True if the event was removed, false otherwise.</returns>

         public bool Remove(DateTime time, TValue value)

             => timeline.Remove((time, value));

         /// <summary>
"
32577,"        };

         private static readonly string[] _expected =

         {

             ""JY"", ""JAN"", ""JAN"", ""ZAYN"", ""GAR"", ""IG"", ""CAN"", ""LAS"", ""ARNY"", ""OLSAN"", ""CARBAN"", ""NAV"", ""CYNTANALAN"",

             ""ANANACY"", ""MCGYVAR"", ""YASNANADG"",

         };
"
17784,"version = ""6.36.0""

 [[StrideArraysCore]]

 deps = [""ArrayInterface"", ""ManualMemory"", ""Requires"", ""ThreadingUtilities"", ""VectorizationBase""]

 git-tree-sha1 = ""e1c37dd3022ba6aaf536541dd607e8d5fb534377""

 uuid = ""7792a7ef-975c-4747-a70f-980b88e8d1da""
"
12466,"    // 如果不想编译器进行隐式转换,可以在前面添加explicit关键字

     // c++2.0之前explicit只禁止""存在单一实参""转换

     // c++2.0之后explicit可以进制""多个实参""转换

 //    Fraction1 f1(3,5);
"
23102,"        // apply merge sort to both parts of this

         mergeSort(array, min, mid, threshold);

         mergeSort(array, mid, max, threshold);

         // and finally merge all that sorted stuff

         merge(array, min, max, mid);

     }
"
14532,"{

     Node *root = NULL;

     int scanValue, choice = 1;
"
48564,"    // find an element in an array of length n

     int64_t arr_middle[] = {-1, 2, 4, 6, 8};

     assert(exponential_search(arr_middle, 5, 6) == 3);

 }
"
78924,"                1, 2, 2, 1, 1, 2, 1, 1, 2, 2

             };

             var sequence = new KolakoskiSequence().Sequence.Take(100);

             sequence.Should().Equal(expected);

         }
"
24687,"    // final skyline found and returned

     left.addAll(right);

     return left;

   }

   public static class Point {
"
29184,"    }

     printf(""\n"");

 }

 /**

  * Utility for test
"
32259,"#include ""structData.h""

 // Equivalent to:

 struct l5UnamedType {

     template<typename T>
"
14484,"#include <math.h>

 #include <stdio.h>

 #include <stdlib.h>

 /**

  * @brief Function to convert cartesian coordinates to polar.

  *\f{eqnarray*}{
"
25046,"""""""

 for vertex in range(5, 9):

     graph.add_edge(vertex, sink, 1)
"
25362,"        createGraph(g->numVertices);  // Number of vertices is same

     int i = 0;

     for (i = 0; i < g->numVertices; i++)

     {

         struct node *temp = g->adjLists[i];
"
28580,"{

     double minD = DBL_MAX;

     double dist = 0;

     int index = -1;
"
31477,"        ///     rotation matrix.

         /// </summary>

         /// <param name=""s"">Input string.</param>

         public (string encoded, int index) Encode(string s)
"
20947," * conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture)

  *

  * Collatz conjecture: a series for a number \f$n\f$ in which if \f$n\f$ even

  * then the next number is \f$\frac{n}{2}\f$ ,but if n is odd then the next
"
17351,"    }

     

     public mutating func pop() -> T? {
"
30660,"    int z;

     //Default constructor, initialises all three Direction Ratios to 0

     VectorCrossProduct(){

         x=0;
"
51579," * details). The algorithm will then update its 160-bit state (here represented

  * used 5 32-bits integer) using partial hashes computed using special functions

  * on the blocks previously built. Please take a look at the [wikipedia

  * article](https://en.wikipedia.org/wiki/SHA-1#SHA-1_pseudocode) for more
"
26272,"  public static void main(String[] args) {

     final String haystack = ""AAAAABAAABA""; // This is the full string

     final String needle = ""AAAA""; // This is the substring that we want to find

     KMPmatcher(haystack, needle);
"
11757,"        else

         {

             return 'A';

         }

     }

 }
"
33332," */

 void swap(int *a, int *b)

 {

     int t;
"
37186,"# of all characters that show up in all strings within the list

 # (including duplicates).  For example, if a character occurs 3 times in all

 # strings but not 4 times, you need to include that character three times in
"
25017,"void update(std::vector<int64_t> *segtree, std::vector<int64_t> *lazy,

             int64_t start, int64_t end, int64_t delta, uint64_t low,

             uint64_t high, uint64_t pos) {
"
15115,"    // Step 0: Initial Data (Those are decided in the MD5 protocol)

     // s is the shift used in the leftrotate each round

     std::array<uint32_t, 64> s = {

         7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
"
27643,"        else

             end = end - 1;

     }

     return res;
"
48905,"        label_size = max(label_size, 4) + 4

         node = self.head

         lines = []

         forwards = node.forward.copy()

         lines.append(f""[{node.key}]"".ljust(label_size, ""-"") + ""* "" * len(forwards))

         lines.append("" "" * label_size + ""| "" * len(forwards))
"
11510,"        /**

          * Decrypt given text using vigenere cipher.

          * @param text text to be decrypted
"
23695,"Benchmark.bmbm do |x|

   x.report('execute algorithm 2') do

     print(find_duplicates(array))

     print(find_duplicates(long_array))

   end

 end
"
17970,"/**

  * Problem statement and explanation: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm

  *

  * This algorithm plays an important role for modular arithmetic, and by extension for cyptography algorithms
"
12037,"    expect(swapbits(23), equals(43));

   });

 }
"
21267,"        /// <param name=""array"">TODO. 2.</param>

         /// <param name=""comparer"">TODO. 3.</param>

         public void Sort(T[] array, IComparer<T> comparer)

         {

             while (!IsSorted(array, comparer))
"
11317,"		{""gcd of 30 and 50"", 30, 50, 10, 2, -1},

 	}

 	for _, tc := range testCasesExtended {

 		t.Run(tc.name, func(t *testing.T) {
"
27107,"        // First layer should not have activation

         if (config.begin()->second != ""none"") {

             std::cerr << ""ERROR ("" << __func__ << "") : "";
"
28615,"    {

         temp = num->digits[i] * n;

         temp += carry;

         if (temp < 10)

             carry = 0;

         else
"
23323,"void main() {

   MinHeap minheap = new MinHeap();

   List<int> array = [48, 12, 24, 7, 8, -5, 24, 391, 24, 56, 2, 6, 8, 41];

   minheap.buildHeap(array);

   test(('Test case 1'), () {

     expect(minheap.remove(), equals(-5));
"
18903,"-> Wikipedia reference: https://en.wikipedia.org/wiki/Pascal_(unit)

 -> Wikipedia reference: https://en.wikipedia.org/wiki/Pound_per_square_inch

 -> Wikipedia reference: https://en.wikipedia.org/wiki/Inch_of_mercury

 -> Wikipedia reference: https://en.wikipedia.org/wiki/Torr

 -> https://en.wikipedia.org/wiki/Standard_atmosphere_(unit)

 -> https://msestudent.com/what-are-the-units-of-pressure/
"
16016,"            var one = dll.Add(1);

             dll.Add(3);

             dll.AddAfter(2, one);
"
29213,"    selectionSort(arr + 1, size - 1);

 }

 /**

  * @brief Self-test implementations

  * @returns void
"
33071,"     */

     public Vector2 rotate(double angleInDegrees) {

       double radians = angleInDegrees * Math.PI / 180;
"
28213,"	in.close();		

     system(""pause"");					

 }
"
29816,"     * [QuickSort](https://en.wikipedia.org/wiki/Quicksort)

      * @param {Number} start the start index of array segment to be sorted

      * @param {Number} last  one more than the last index of array segment
"
12660,"class B

 {

     virtual void fun2() {}

 };
"
24856,"/*

   Calculate the area of various shapes

   Calculate the Surface Area of a Cube.

   Example: surfaceAreaCube(1) will return 6
"
27234,"    //使用c++11标准编译

     static const int apple_number=10;

     //const int apple_number=10;

     void take(int num) const;

     int add(int num);

     int add(int num) const;
"
22091,"    if (!list1.find_item(30))

         cout << ""PASS"" << endl;

     else
"
30819,"        /// <param name=""a"">An array of FHeapNodes where a[i] represents a node of degree i.</param>

         private void ReconstructHeap(FHeapNode<T>?[] a)

         {

             // Once all items are in A, empty out the root list

             MinItem = null;

             for (var i = 0; i < a.Length; i++)
"
56910,"# A ruby program for 3N plus 1

 # 3N plus 1 is also called as Collatz Conjecture

 #

 # f(n) => n / 2 (if n = 0 (mod 2))

 # f(n) => (3n + 1) (if n = 1 (mod 2))

 #
"
24443,"                    costs.[i].[j] <- costs.[i - 1].[j] + deleteCost

                     ops.[i].[j] <- sprintf ""D%s"" (sourceSeq.[i - 1])

                 if costs.[i].[j - 1] + insertCost < costs.[i].[j] then

                     costs.[i].[j] <- costs.[i].[j - 1] + insertCost

                     ops.[i].[j] <- sprintf ""I%s"" (destinationSeq.[j - 1])

         costs |> Seq.cast<int> |> Seq.toList, ops |> Seq.cast<string> |> Seq.toList
"
38362,"   * @return represented digit of given character

    * @throws NumberFormatException if {@code ch} is not UpperCase or Digit character.

    */
"
27618,"        bp1 = model_dic.get(""num_bp1"")

         bp2 = model_dic.get(""num_bp2"")

         bp3 = model_dic.get(""num_bp3"")

         r_w = model_dic.get(""rate_weight"")

         r_t = model_dic.get(""rate_thre"")

         # create model instance
"
26542,"        public BinarySearchTreeNode<TKey>? Search(TKey key) => Search(root, key);

         /// <summary>

         ///     Checks if the specified key is in the BST.
"
21294,"    }

     // counts the zero's

     for (int i = 0; i < m; i++) {
"
29240,"  /** Driver Code */

   public static void main(String[] args) {

     Random random = new Random();

     /* random size */
"
61761,"rearranges a character string into runs of similar characters. This is useful

 for compression, since it tends to be easy to compress a string that has runs

 of repeated characters by techniques such as move-to-front transform and
"
34233,"  }

   /**

    * This method finds the partition index for an array
"
14839,"    ///         [1] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest,

     ///         and Clifford Stein. 2009. Introduction to Algorithms, Third Edition (3rd. ed.).

     ///         The MIT Press.
"
19780,"     */

     bool find_min(T& ret_value) { return find_min(root_, ret_value); }

     /**
"
16934,"#     @val = val

 #     @left, @right = nil, nil

 #   end

 # end
"
95640,"            addZeroEdge.Should().Throw<InvalidOperationException>()

                 .WithMessage($""Vertex does not belong to graph: {vertexB}."");

         }

         [Test]

         public void GraphAddEdgeTest_ShouldThrowEdgeExists()

         {
"
32663,"def remove_elements(nums, val)

   result_length = nums.length

   shift_length = 0

   nums.each_with_index do |num, i|

     next unless num == val

     nums.delete_at(i)
"
10155,"          // Difference between x coordinates

           xGap = (arrayParam[i].x - arrayParam[j].x);

           // Difference between y coordinates

           yGap = (arrayParam[i].y - arrayParam[j].y);

           // distance between coordinates
"
30806," * @brief Function validatePosition

  * Responsible for checking if the position can receive the boat.

  * @param mat board

  * @param boat boat
"
19874,"end

 nums = [2, 5, 1, 3, 4, 7]

 n = 3
"
22343,"#

 # Input: nums = [3, 3], target = 6

 # Output: [0,1]

 # Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
"
84455,"  #记录每一个点到每一个类的距离

   error.matrix<-matrix(0,nrow=rows.dataset,ncol=k)

   while(continue.change){

     #记录每个点所属的类是哪一个

     cluster.matrix<-matrix(0,nrow=rows.dataset,ncol=k)
"
26452,"    return MatMult(tmp, mat)

   } else {

     // tmp = mat ^ m/2

     const tmp = MatrixExponentiationRecursive(mat, m >> 1)
"
49748,"                    node.Right = newNode;

                 }

                 else
"
11007,"            prod /= num_prev; /* divide first to avoid over-flows */

             prod *= num;

         }

         else

         {
"
16799,"                { 3, 0, 5, 6, 2 },

                 { 4, 5, 0, float.PositiveInfinity, float.PositiveInfinity },

                 { float.PositiveInfinity, 6, float.PositiveInfinity, 0, float.PositiveInfinity },

                 { float.PositiveInfinity, 2, float.PositiveInfinity, float.PositiveInfinity, 0 }
"
79046,"                    return;

                 }

                 // process of reheaping / swapping

                 var temp = input[rIndex];

                 input[rIndex] = input[largest];
"
12922,"// Queue Array

 // description: based on `geeksforgeeks` description A Queue is a linear structure which follows a particular order in which the operations are performed.

 // 	The order is First In First Out (FIFO).
"
15599,"import 'dart:math' show sqrt;

 min(X, Y) {

   if (X < Y) {

     return X;

   } else {

     return Y;
"
14567,"    return this.rightNode;

   }

   TreeNode(this.data);

 }

 List<int> inOrder(TreeNode root, List<int> result) {

   if (root != null) {
"
24066,"		expected    []int

 	}{

 		{
"
22607,"""""""

 Find Volumes of Various Shapes.

 Wikipedia reference: https://en.wikipedia.org/wiki/Volume
"
20947,"  // If num = 0 OR 1, the factorial will return 1

   if (num === 0 || num === 1) { return 1 }

   // Step 2. WHILE loop

   while (num > 1) {

     num-- // decrement 1 at each iteration

     result = result * num // or result = result * num;
"
11541,"*/

 const modularBinaryExponentiation = (a, n, m) => {

   // input: a: int, n: int, m: int

   // returns: (a^n) % m: int

   if (n === 0) {
"
25222,"    // provided interval gap.

     while (i <= range) {

         b = numerical_methods::false_position::eq(i);
"
27499,"            {

                 addCase = GetAddCase(node);

                 switch(addCase)

                 {
"
30651,"﻿namespace Algorithms.Strings

 open System.Collections.Generic

 module WordOccurrence =

     let wordOccurrence (sentence: string): Map<string, int> =
"
13369,"  if (a > b) { throw Error('a must be less or equal than b') }

   if (a === b) return 0

   // Calculate the step h
"
19339,"            return std::make_pair(left_index+1, right_index+1);

         } else if (element >

                    matrix[left_index]

                          [right_index]) {  // Else if value on this position of

                                            // matrix is less than the element,

                                            // move left.
"
31119,"		}

 		else if(isdigit(post[i])) {

 			number = 0;
"
30079,"      for (let k = 0; k < n; k++) {

         matrixC[i][j] += matrixA[i][k] * matrixB[k][j]

       }
"
18773,"class MergeSort implements SortAlgorithm {

   /**

    * Generic merge sort algorithm implements.
"
23005,"            for (var i = 0; i < Length; i++)

             {

                 if (field[i] != otherBitArray[i])

                 {

                     return false;

                 }
"
10475,"        ///     Decodes the input string and returns original string.

         /// </summary>

         /// <param name=""s"">Encoded string.</param>

         /// <param name=""index"">Index  of original string in the sorted rotation matrix.</param>

         public string Decode(string s, int index)

         {
"
74190,"     */

     static std::pair<matrix<int>, matrix<int>> generate_keys(size_t size,

                                                              int limit1 = 0,
"
26569,"        >>> collections_popped

         15182

         >>> deque_collections

         deque([1, 2, 3])
"
16046,"  for (let i = 0; i < len1; i++) {

     larr[i] = array[left + i]

   }

   for (let i = 0; i < len2; i++) {

     rarr[i] = array[mid + 1 + i]
"
21549,"  pop () {

     // Removing the element with least priority (equivalent to extractMin)

     this._swap(0, this._heap.length - 1)
"
27092,"    expect(eulerStep(0, 0.1, 0, function (x, y) { return x })).toBe(0)

     expect(eulerStep(2, 1, 1, function (x, y) { return x * x })).toBe(5)

   })
"
12930,"     * Returns whether the queue is empty.

      */

     bool empty() const;

 };

 /**
"
30470,"	usedLettersMap := make(map[rune]int)

 	wordLength := len(word)

 	resultKey := make([]int, wordLength)
"
16429,"/**

  * Copyright 2020 @author tjgurwara99

  * @file
"
21268,"    {

         /// <summary>

         ///     Determine the minimum spanning tree for a given weighted undirected graph.

         /// </summary>
"
24542,"    // Check if index is present in list

     if (index < 0 || index >= this.length) {

       return null

     }

     // Check if element is the first element

     if (index === 0) {
"
25428,"		{""Is 2 a power of 2? - YES"", 2, true},

 		{""Is 5 a power of 2? - NO"", 5, false},

 		{""Is 1023 a power of 2? - NO"", 1023, false},

 		{""Is 1024 a power of 2? - YES"", 1024, true},

 		{""Is 0 a power of 2? - NO"", 0, false},
"
26591,"                input[rIndex] = input[largest];

                 input[largest] = temp;

                 rIndex = largest;

             }
"
24925,"deps = [""Compat"", ""InteractiveUtils"", ""OrderedCollections""]

 git-tree-sha1 = ""4437b64df1e0adccc3e5d1adbc3ac741095e4677""

 uuid = ""864edb3b-99cc-5e75-8d2d-829cb0a9cfe8""

 version = ""0.18.9""

 [[DataValueInterfaces]]

 git-tree-sha1 = ""bfc1187b79289637fa0ef6d4436ebdfe6905cbd6""
"
58408,"            curr_row[j] += max(last_row[j], last_row[j + 1])

     return triangle[0][0]

 if __name__ == ""__main__"":

     print(solution())
"
11742,"    const double R = 0.75, dr = 0.3;

     double a_t = 0., b_t = 2.f * M_PI;  // theta random between 0 and 2*pi

     double a_r = R - dr, b_r = R + dr;  // radius random between R-dr and R+dr

     int i;
"
72522,"    /// </summary>

     public class CaesarEncoder : IEncoder<int>

     {

         /// <summary>

         ///     Encodes text using specified key,
"
23425,"    case index

     when 0

       return unless @head

       return @head, @tail, @size = nil, nil, 0 if @size == 1

       remove(@head)
"
66903,"print(is_valid_sudoku(board))

 # => false

 # explanation: duplicated value in row
"
27104,"    if (i < board.length - 1) neighbors.add(new Integer[] {i + 1, j});

     if (j > 0) neighbors.add(new Integer[] {i, j - 1});

     if (j < board[0].length - 1) neighbors.add(new Integer[] {i, j + 1});

     return neighbors;

   }
"
25224,"﻿using System;

 namespace DataStructures.Probabilistic

 {

     public class CountMinSketch<T> where T : notnull
"
14856,"        return;

     printf(""  %d  "", (node->key));

     printPreOrder(node->left);

     printPreOrder(node->right);

 }
"
24605,"            for (int j = 0; j < num; j++) {

                 if (magic_square[i][j] < 10)  System.out.print("" "");

                 if (magic_square[i][j] < 100) System.out.print("" "");

                 System.out.print(magic_square[i][j] + "" "");

             }

             System.out.println();
"
20497,"/**

  * \file

  * \brief [Problem 14](https://projecteuler.net/problem=14) solution

  * \author [Krishna Vedala](https://github.com/kvedala)
"
21528,"  public static void main(String[] arg) {

     SinglyLinkedList list = new SinglyLinkedList();

     assert list.isEmpty();
"
14485,"      from offset to i */

     if (arr[i] < x) {

       fibK = fib1

       fib1 = fib2

       fib2 = fibK - fib1

       offset = i
"
24576,"        }

         free(poly);  // delete the current term

     }

 }
"
21625,"How many chains, with a starting number below one million, contain exactly sixty

 non-repeating terms?

 """"""

 DIGIT_FACTORIALS = {
"
13640,"function merge_sort!(arr::Vector{T},l::Int=1,r::Int=length(arr),temp::Vector{T}=Vector{T}(undef,r-l+1))where T

     if l>=r

         return

     end

     # split
"
24793,"    """"""

     # Creates a list to store x vertices.

     >>> x = 5
"
18414,"      }

     } else if (n.value > this.value) {

       if (this.right === null) {
"
33059,"		elements.vec[i:(j - t)] = stooge.sort(elements.vec[i:(j - t)])

 		elements.vec[(i + t):j] = stooge.sort(elements.vec[(i + t):j])

 		elements.vec[i:(j - t)] = stooge.sort(elements.vec[i:(j - t)])

 	}
"
27306,"      hue = 0;

     } else if (value == dRed) {

       hue = 60 * (0 + (dGreen - dBlue) / chroma);
"
25924,"void duplicateZeros(int *arr, int arrSize)

 {

     int i, start = 0;

     int *tmp = malloc(arrSize * sizeof(int));
"
48923,"/* demo.c -- Implementations of multikey quicksort and ternary search trees

    Usage

     demo                  Run basic timings on /usr/dict/words
"
25594,"}

 const example = () => {

   const g = new Graph()

   g.addVertex(1)

   g.addVertex(2)
"
17643,"  })

 })
"
22912,"      end

     end

     break unless swapped
"
55050,"        node.right = null;

         node = temp;

       } else if (node.right == null) { // Only left node is present
"
13884,"  /* II */

   integer_to_roman(2);

   /* M */

   integer_to_roman(1000);
"
23885,"struct TreeNode *buildBST(struct ListNode *head, struct ListNode *tail)

 {

     if (head == tail)
"
29590,"    Ex += tmp;

     Ex2 += tmp * tmp;

     /* return sample mean computed till last sample */

     if (mean != NULL)

         *mean = K + Ex / n;
"
17273,"    let right = to

     const pivot = array[Math.ceil((left + right) * 0.5)]

     while (left < right) {

       if (array[left] >= pivot) {

         const tmp = array[left]
"
25547,"    double test_x[2];

     for (int i = 0; i < N_test_cases; i++)

     {

         double x0 = ((rand() % range) - range2) / 100.f;

         double x1 = ((rand() % range) - range2) / 100.f;

         test_x[0] = x0;
"
23034,"    return x == revertedNumber || x == revertedNumber / 10;

 }
"
29936,"        // If element is present at middle

         if (arr[mid] == x)

             return mid;

         // If element is smaller than middle

         if (arr[mid] > x)

             return binarysearch1(arr, l, mid - 1, x);
"
99563,"        $characterCountTable[$character] = $currentCharacterCount;

     }

     arsort($characterCountTable);

     return array_keys($characterCountTable)[0];

 }
"
57625,"        new int[][] {

           {0, 2, 0, 6, 0}, {2, 0, 3, 8, 5}, {0, 3, 0, 0, 7}, {6, 8, 0, 0, 9}, {0, 5, 7, 9, 0},

         };

     // Print the solution
"
18547,"            tree.GetKeysPreOrder().SequenceEqual(new[] { 15, 8, 1, 0, 6, 11, 22, 17, 25 }).Should().BeTrue();

             tree = new RedBlackTree<int>();

             tree.AddRange(new[] { 7, 0, 1, 4, 8, 2, 3, 6, 5, 9 });
"
27985,"        [Test]

         [TestCase(-1)]

         [TestCase(-2)]

         [TestCase(-3)]
"
22315,"			if output := NaiveApproach(test.input); output != test.expected {

 				t.Errorf(""For input: %d, expected: %v, but got: %v"", test.input, test.expected, output)

 			}
"
27954,"   * Inserts an element at the rear of the queue

    *

    * @param x element to be added

    * @return True if the element was added successfully
"
28459,"void FunA() 

 {

     printf(""%s\n"",""Base A::fun()"");

 }

 void FunB() 

 {
"
23277,"using System.Collections.Generic;

 using System.Linq;

 using Algorithms.Encoders;
"
19026,"        /// <param name=""m"">Modulus.</param>

         /// <returns>Modular Exponential.</returns>

         public int ModularPow(int b, int e, int m)
"
68099,"arr = [1, 2, 40, 30, 20, 15, 323, 12, 3, 4]

 puts fisher_yates_shuffle(arr)
"
18050,"            result = result.Trim();

             ans.Compile(result);

             return ans;

         }

         /// <summary>
"
25487,"        setCapacity(DEFAULT_CAP);

     }

     public LRUCache(int cap) {
"
15635,"{

     if (x == 2)

     {

         return true;
"
10312,"        } 

 }; 

 // We can also declare ""Create"" outside Base. 

 // But is more relevant to limit it's scope to Base 

 Base *Base::Create(int id) 
"
16961,"			}

 		}

 	}

 	for i := range g.edges {
"
16792,"        printAVL(node->right, level + 1);

         printf(""\n\n"");

         for (i = 0; i < level; i++) printf(""\t"");

         printf(""%d"", node->key);

         printAVL(node->left, level + 1);

     }
"
26122,"        https://www.indexdatabase.de/db/i-single.php?id=12

         :return: index

         """"""
"
12804,"                    key[i] = adjacencyMatrix[node, i];

                     parent[i] = node;

                 }

             }

         }
"
27440,"int main() {

     X x;

 }
"
28782,"uuid = ""b964fa9f-0449-5b57-a5c2-d3ea65f4040f""

 version = ""1.2.1""

 [[LabelledArrays]]

 deps = [""ArrayInterface"", ""LinearAlgebra"", ""MacroTools"", ""StaticArrays""]

 git-tree-sha1 = ""41fc666d11a346e55f7fb70318e7078bfc0ae7cb""
"
25352,"		if err != nil {

 			t.Errorf(""IntToRoman(%d) returned an error %s"", input, err.Error())

 		}

 		if out != expected {

 			t.Errorf(""IntToRoman(%d) = %s; want %s"", input, out, expected)
"
12116,"    """"""

     >>> f(5)

     39.98652410600183
"
61528,"    0.upto(array.length - gap - 1) do |i|

       if array[i] > array[i + gap]

         array[i], array[i + gap] = array[i + gap], array[i]

         swaps = true

       end

     end
"
17861,"    {

         sign *= -1;

     }

     else

     {
"
21624,"  root.left = invert_tree(root.right)

   root.right = invert_tree(temp)

   root

 end
"
26280,"            action.Should().Throw<ArgumentException>()

                 .WithMessage(""Dimensions of matrices must be the same"");

         }

         [Test]

         public static void EqualMatricesShouldReturnTrue()
"
30803,"  // default radix is then because we usually count to base 10

   if (RADIX === undefined || RADIX < 1) {

     RADIX = 10
"
24885,"    """"""

     return (

         int("""".join(combination[0:2])) * int("""".join(combination[2:5]))
"
30469,"            while (cpy->next != NULL && index < pos)

             {

                 flag++;
"
22690,"    

     /**

      * Calculates the in degree of all vertices
"
18509,"                k = compare_string(binary[i], binary[j])

                 if k != ""X"":

                     check1[i] = ""*""
"
28589,"        [TestCase(234, 0.14, 0.88, 193, 196, 224)]

         [TestCase(330, 0.75, 0.5, 128, 32, 80)]

         public static void TestRgbOutput(
"
23589,"//  .----------------.  .----------------.  .----------------.

 //  .-----------------.  .----------------.  .----------------.

 // | .--------------. || .--------------. || .--------------. ||

 // .--------------. | | .--------------. || .--------------. | | |  _________ |

 // || | _____  _____ | || |      __      | || | ____  _____  | | | |  ____  ____
"
28013,"    }

     return eggFloor[n][m];

   }

   public static void main(String args[]) {
"
11580,"        /// <summary>

         ///     Initializes a new instance of the <see cref=""BinaryHeap{T}"" /> class.

         /// </summary>

         public BinaryHeap()

         {
"
21069,"    {

         [Test]

         public static void SortsArray(
"
29497,"#include <iostream>

 #include <complex>

 using namespace std;
"
28409,"func TestLongestIncreasingSubsequence(t *testing.T) {

 	td := []struct {

 		elements    []int

 		expectedLen int

 	}{

 		{[]int{1, 2, 3, 4, 5, 10}, 6},
"
27728,"        log(""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"");

         log(""This is test case 3 : "");

         operations_on_datastructures::inorder_traversal_of_bst::Node *root =

             nullptr;

         std::vector<int64_t> node_data{
"
12295,"import (

 	""errors""

 	""fmt""

 	""math/rand""

 	""sort""
"
19842,"      const maj = ((a & b) ^ (a & c) ^ (b & c)) >>> 0

       const temp2 = (S0 + maj) >>> 0

       h = g
"
17882,"#!/usr/bin/env python

 #

 # Sort large text files in a minimum amount of memory

 #
"
28926,"		if prev >= len(array) {

 			return -1, ErrNotFound

 		}

 		curr += step
"
31518," */

 static void test() {

     data_structures::list_array::list L;

     // Insert testing
"
71551,"    return binNum;

   }

   public static void main(String[] args) {

     // Testing Numbers:

     String[] hexNums = {""1"", ""A1"", ""ef"", ""BA"", ""AA"", ""BB"", ""19"", ""01"", ""02"", ""03"", ""04""};
"
22031,"        self.b_coeffs = b_coeffs

     def process(self, sample: float) -> float:

         """"""
"
26645,"#endif

 /** Binary Search Algorithm (used by ::struzik_search)\n

  * * Time Complexity O(log n) where 'n' is the number of elements

  * * Worst Time Complexity O(log n)

  * * Best Time Complexity Ω(1)
"
16333,"        // centres of each class cluster

         {.5, .5, .5},    // centre of class 1

         {.5, .5, -.5},   // centre of class 2

         {.5, -.5, .5},   // centre of class 3

         {.5, -.5, -.5},  // centre of class 4

         {-.5, .5, .5},   // centre of class 5
"
29808,"{

     long n = 100;

     long long sum = 0;

     char *sieve = NULL;
"
14545,"    }

   }

   /** A method for inorder traversal of BST. */

   public void inorder() {
"
52673,"  const replace = x => index(x) > -1 ? toBeMappedCharaterList[index(x)] : x

   return text.split('').map(replace).join('')

 }

 export { ROT13 }
"
18199,"})
"
89923,"            Assert.AreEqual(testArray, correctArray);

         }

     }

 }
"
19755,"    case '5': return '0101'

     case '6': return '0110'

     case '7': return '0111'
"
23986,"    while left <= right:

         midpoint = left + (right - left) // 2

         current_item = sorted_collection[midpoint]

         if current_item == item:

             return midpoint
"
96676,"        [TestCase(2, 0)]

         [TestCase(3, 0)]

         [TestCase(4, 2)]

         [TestCase(5, 10)]

         [TestCase(6, 4)]

         [TestCase(7, 40)]
"
23899,"            return Convert.ToInt32(sequence, 2);

         }

         /// <summary>

         ///     Sets all bits on false.

         /// </summary>

         public void ResetField()
"
28752,"    file_length_binary = bin(file_length)[2:]

     length_length = len(file_length_binary)

     return ""0"" * (length_length - 1) + file_length_binary + compressed

 def write_file_binary(file_path: str, to_write: str) -> None:

     """"""
"
25054,"""""""

     count_nucleotides(s::AbstractString)

 Given: A DNA string s

 of length at most 1000 nt.

 Return: Four integers (separated by spaces) counting the respective number of times that the symbols 'A', 'C', 'G', and 'T' occur in s
"
19568,"    int[][] grid = {

       {1, 3, 1},

       {1, 5, 1},
"
52309,"#include <stdio.h>

 #include <stdlib.h>

 #include ""dynamic_array.h""

 int main()

 {

     dynamic_array_t *da = init_dynamic_array();
"
22574,"/**

  * \file

  * \brief [Problem 5](https://projecteuler.net/problem=5) solution - Naive

  * algorithm (Improved over problem_5/sol1.c)

  * @details Little bit improved version of the naive `problem_5/sol1.c`. Since

  * the number has to be divisable by 20, we can start at 20 and go in 20 steps.
"
20061,"            for (var i = 0; i < lhs.Length; i++)

             {

                 for (var j = 0; j < rhs.Length; j++)

                 {

                     result[i, j] = lhs[i] * rhs[j];

                 }
"
19861,"﻿using System;

 using System.Collections.Generic;

 using System.Linq;
"
21676," * \param l_index start index of the array (arr) to apply the algorithm

  * \param r_index end index of the array (arr) to apply the algorithm

  * \param n element to find in the array (arr)

  *

  * \returns the index of the element (n) in the array (arr)

  * \returns -1 if the n element wasn't found
"
11925,"  List a = [-2, -3, 4, -1, -2, 1, 5, -3];

   int n = a.length;

   int max_sum = maxSubArraySum(a, n);

   print(""Maximum contiguous sum is "" + max_sum.toString());
"
32150,"//

 // Created by light on 19-12-12.

 //
"
16967," * 3D weiths matrix and save to disk.

  *

  * \param [in] fname filename to save in (gets overwriten without

  * confirmation)

  * \param [in] W model matrix to save

  * \returns 0 if all ok
"
16293,"  expect(Number(result.toPrecision(12))).toBe(15809.9141543)

 })
"
23765,"        triangle_number += i;

         num_divisors = count_divisors(triangle_number);

         if (num_divisors > MAX_DIVISORS)

             break;

     }
"
21895,"            }

             return encoded_text.ToString();

         }

         /// <summary>

         ///     Decodes text that was encoded using specified key.
"
21571,"            Sort(right, comparer);

             Merge(array, left, right, comparer);

         }

         private static void Merge(T[] array, T[] left, T[] right, IComparer<T> comparer)
"
31227,"      return this.heap.pop()

     }

     const min = this.heap[1]

     this.heap[1] = this.heap.pop()

     this.size--

     this.sink()
"
30311,"two terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed

 four million, find the sum of the even-valued terms.
"
81410,"    {

         R[i] = (double *)malloc(sizeof(double) * COLUMNS);

         Q[i] = (double *)malloc(sizeof(double) * ROWS);

         if (!Q[i] || !R[i])
"
21648,"            SinglyLinkedListNode<T>? previousElement = null;

             // iterates through all elements

             while (currentElement is not null)

             {
"
78949,"        testCase_3();

         log(""Test Cases over!"");

         std::cout << std::endl;

     }
"
28894,"package min_test

 import (

 	""testing""

 	""github.com/TheAlgorithms/Go/math/min""
"
12677,"    float diff = x1 - x2;

     if (diff < 0) {

         diff = (-1) * diff;

     }
"
16205,"    ///     (description adapted from https://en.wikipedia.org/wiki/Mandelbrot_set)

     ///     (see also https://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set).

     /// </summary>

     public static class Mandelbrot

     {
"
88463,"                    }

                     theSameSymbolsInSlantCount = 0

                 }

                 theSameSymbolsInSlantCount = 0
"
30888,"    std::cout << ""Test implementation passed!\n"";

 }

 /**

  * @brief Main function
"
80326,"[[Xorg_xcb_util_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg"", ""Xorg_libxcb_jll""]

 git-tree-sha1 = ""e7fd7b2881fa2eaa72717420894d3938177862d1""

 uuid = ""2def613f-5ad1-5310-b15b-b15d46f528f5""

 version = ""0.4.0+1""
"
14365,"    std::vector<std::string> inputs = {

         ""abcde"", ""sss"",    ""ssss"",  ""ssst"", ""sssu"", ""sssv"",

         ""sst"",   ""ssts"",   ""sstt"",  ""sstu"", ""tutu"", ""tutuv"",

         ""tutuu"", ""tutuvs"", ""tutus"", ""tvst"", ""tvsu"", ""vvvv""};

     for (auto &i : inputs) {
"
12698,"            if (row2 == row) {

                 continue;

             }
"
33112,"		},

 		{

 			""Decrypt a simple string with key 13"",

 			""hello"",

 			13,
"
33342,"        [Test]

         public void Remove_EmptyTree_Throws()

         {
"
33617,"#include <cassert>   /// for assert

 #include <iostream>  /// for IO operations

 #include <vector>    /// for std::vector STL
"
15601,"        std::vector<Puzzle> answer;

         while (current_state != nullptr) {

             answer.emplace_back(*current_state->state);

             current_state = parent_of.find(current_state)->second;

         }
"
93207,"        /// </summary>

         /// <param name=""parent"">The parent node of <paramref name=""node"" />.</param>

         /// <param name=""node"">The node to check/search from.</param>

         /// <param name=""key"">The key to remove.</param>

         /// <returns>true if the operation was successful, false otherwise.</returns>

         /// <remarks>
"
15161,"            postfix.append(char)

         elif char == ""("":

             stack.push(char)

         elif char == "")"":

             while not stack.is_empty() and stack.peek() != ""("":

                 postfix.append(stack.pop())
"
30913,"The sum of the squares of the first ten natural numbers is,

     1^2 + 2^2 + ... + 10^2 = 385

 The square of the sum of the first ten natural numbers is,
"
24020,"  private PriorityQueue<Integer> p1;

   private PriorityQueue<Integer> p2;

   // Constructor

   public MedianOfRunningArray() {

     this.p1 = new PriorityQueue<>(Collections.reverseOrder()); // Max Heap
"
39721,"        }

         int[][] magic_square = new int[num][num];

         int row_num = num/2;

         int col_num = num-1;

         magic_square[row_num][col_num] = 1;

         for (int i = 2; i <= num*num; i++) {
"
23900,"    } // namespace XOR

 } // namespace ciphers

 /**

  * Function to test above algorithm

  */
"
97446,"    /// some matching attribute. It is used in the ""bucket"" fill tool of paint

     /// programs to fill connected, similarly-colored areas with a different color.

     /// (description adapted from https://en.wikipedia.org/wiki/Flood_fill)

     /// (see also: https://www.techiedelight.com/flood-fill-algorithm/).
"
13566,"        prev = prev + 1

         if prev == min(step, n):

             return -1

     if arr[prev] == x:

         return prev

     return -1
"
65239,"	jump := n

 	for i := 0; i < l-n+1; {

 		skip = skips[jump]

 		for k := n - 1; k > -1; k-- {

 			if text[i+k] != pattern[k] {

 				jump, ok := bcr[text[i+k]]
"
20181,"}
"
10445,"    value_in_meters = value * METER_CONVERSION[from_type_norm]

     return value_in_meters * TYPE_CONVERSION[to_type_norm]

 end
"
74702,"    f3 = factorial(n);

     C = f1 / (f2 * f3);  // formula for catalan number for n

     printf(""%0.2f"", C);

     return 0;
"
23542,"    assert(

       StreamSieve.getPrimeNumbers(100) === Seq(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,

         67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,

         181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293,
"
18528,"/*

 *

 * @file
"
29970,"    /// <summary>

     ///     Implementation of a list based queue. FIFO style.

     /// </summary>

     /// <typeparam name=""T"">Generic Type.</typeparam>

     public class ListBasedQueue<T>
"
14497,"/**

  * @brief inList function is used to know if an element is already in the memoryInfo list.

  * @details This function is used to know if an allocation in a specific file at a specific line already exists in the list.

  * @param filename File in which malloc or calloc has been called
"
23926,"/**

  * \file

  * \authors [Krishna Vedala](https://github.com/kvedala)

  * \brief Solve a multivariable first order [ordinary differential equation

  * (ODEs)](https://en.wikipedia.org/wiki/Ordinary_differential_equation) using
"
25385,"	for i := 1; i < len(arr); i++ {

 		for j := 0; j < len(arr)-1; j++ {

 			if arr[i] < arr[j] {
"
77420,"    std::cout << ""\nInitial approximation: "" << c;

     // start iterations

     for (i = 0; i < MAX_ITERATIONS; i++) {

         m = eq(c);
"
30852,"    /// 4

     /// longest_prefix ""abcab""

     /// 2

     /// </code>

     /// </example>
"
16643,"    void bar() override final; // OK

     //void foobar() override;

     //  非虚函数不能  override

 };

 class C final : public B {

 public:
"
83589,"{

     const double omega = 1.F;       // some const for the problem

     dy[0] = y[1];                   // x dot

     dy[1] = -omega * omega * y[0];  // y dot
"
24637,"}

 /** @return whether we have a next smallest number */

 bool bSTIteratorHasNext(BSTIterator *obj)

 {

     if (!obj->NumberOfNodes)
"
23830,"                swap2(pa, pb);

                 pa++;

             }

             pb++;

         }

         while (pb <= pc && (r = ptr2char(pc) - partval) >= 0)
"
34641,"    output('The element was found at ' + (position + 1))

   } else {

     output('The element not found')

   }

 }

 // Search “theArray” for the specified “key” value
"
30809,"  List<int> stack = List.generate(collection.length, (x) => 0);

   List<T> currentPermutation = List.from(collection);

   List<List<T>> output = [collection];

   int i = 0;
"
24058,"#

 # Example:

 # Input:

 # [4,3,2,7,8,2,3,1]

 #
"
76548,"      return false if self[i - 1] > self[i]

     end

     true

   end
"
29468,"    }

     //Find XOR of the 2 non repeating elements

     for(i = 0 ; i < n; i++)
"
10210,"﻿using System.Collections.Generic;

 using System.Linq;

 using System.Numerics;

 namespace Algorithms.Sequences

 {
"
86588,"if __name__ == ""__main__"":

     print(""Program to check whether a number is a Perfect number or not..."")

     number = int(input(""Enter number: "").strip())

     print(f""{number} is {'' if perfect(number) else 'not '}a Perfect Number."")
"
16916,"        sr = sqrt(i)

         if sr - floor(sr) != 0:

             if continuous_fraction_period(i) % 2 == 1:

                 count_odd_periods += 1

     return count_odd_periods

 if __name__ == ""__main__"":
"
30251,"        if (r & 1)

         {

             tree->combine(res, root + r * elem_size, res);

         }

         r = (r >> 1) - 1;
"
12131,"        }

         char* getId(){

             return Id;

         }
"
88097,"        }

         cin >> x;

         cout << ans(x) << endl;
"
41954,"     */

     static unsigned int n = 0;

     static float mu = 0, M = 0;

     n++;

     float delta = x - mu;

     mu += delta / n;
"
24953,"            Action act = () => new BacktrackingNQueensSolver().BacktrackSolve(n);

             act.Should().Throw<ArgumentException>();

         }

         private static void ValidateOneQueenPerRow(bool[,] solution)
"
61174,"    }

     double **R = (double **)malloc(sizeof(double *) * mat_size);

     double **Q = (double **)malloc(sizeof(double *) * mat_size);

     if (!Q || !R)

     {
"
20377,"void createqueue() { q.front = q.rear = NULL; }

 int empty()

 {
"
18528,"    # precondition

     assert isinstance(N, int) and (N > 2), ""'N' must been an int and > 2""

     # beginList: contains all natural numbers from 2 up to N

     beginList = [x for x in range(2, N + 1)]

     ans = []  # this list will be returns.
"
41231,"            var items = new[] { 'A', 'B', 'C' };

             var val = new[] { 50, 100, 130 };

             var wt = new[] { 10, 20, 40 };

             var capacity = 50;

             Func<char, int> weightSelector = x => wt[Array.IndexOf(items, x)];
"
17625,"void main() {

   var n = 5;

   var fac = factorial(n);

   print(""$n! = $fac""); /* output: 5! = 120 */

 }

 /* calculate factorial of n*/
"
72744,"            var oRemoveSucess = testObj.DeleteElement(""O"");

             var eRemoveSucess = testObj.DeleteElement(""E"");

             var lRemoveSucess = testObj.DeleteElement(""L"");
"
24797,"                    A[n, :] = L

                     break

                 end

             end
"
21034,"            std::cerr << ""ERROR ("" << __func__ << "") : "";

             std::cerr << ""X and Y in fit have different sizes"" << std::endl;

             std::exit(EXIT_FAILURE);
"
70200,"    }

     endProgramAbruptly(

         ""\nA problem occurred while reserving memory for the structure\n"");

     return NULL;

 }
"
18088,"			// color as that of front, change their color

 			for nb := range g.edges[front] {

 				if vertexColors[nb] == vertexColors[front] {

 					vertexColors[nb]++
"
18586,"        public TValue[] this[DateTime time]

         {

             get => GetValuesByTime(time);
"
16068,"            // Initilizes and fills ""operand"" array with neutral element (in this case 1, because value * 1 = value)

             Operand = new int[Tree.Length];

             Array.Fill(Operand, 1);

         }
"
23312,"} // namespace geometry

 /**

  * Test function
"
10798,"class CycleSort implements SortAlgorithm {

   @Override

   public <T extends Comparable<T>> T[] sort(T[] arr) {

     int n = arr.length;
"
17993,"end

 s = 'anagram'

 t = 'nagaram'
"
18165,"            }

             public ListNode(ListNode leftChild, ListNode rightChild)

             {

                 LeftChild = leftChild;

                 RightChild = rightChild;

                 Frequency = leftChild.Frequency + rightChild.Frequency;
"
24982,"// [42, 55, 124, 205, 1002]
"
27839,"            sequence.Should().Equal(expected);

         }

     }
"
21000,"    printf(""Array: \n"");

     printArray(arr, size);

     partitionSort(arr, 0, size - 1);

     printf(""Sorted Array: \n"");

     printArray(arr, size);

     return 0;
"
74563,"	})

 	t.Run(""Testing(64bit) a = -6 and m = -6: "", func(t *testing.T) {

 		max := BitwiseMax(-6, -6, base64)
"
69921,"   * Normalization sets the vector to length 1 while maintaining its direction.

    *

    * @returns The normalized vector.

    */
"
19049," * @version v1

  * @date 2019-08-07

  */

 #include <iostream>
"
52064," * the character which is

  * repeated maximum no. of

  * times in the given string.
"
25146,"   * binarySearchIterative([0, 5, 7, 10, 15], 6);

    *

    */

     $first = 0;

     $last = count($list)-1;

     while ($first <= $last) {
"
24161,"        /// <param name=""node"">Current node.</param>

         /// <returns>Index of the parent node.</returns>

         protected int Parent(int node) => node / 2;

         /// <summary>

         ///     Edits a query.

         /// </summary>
"
54430,"        // initialize rcon iteration

         int rconCounter = 1;

         for (int i = 1; i < 11; i++) {
"
16616," * centroid

  */

 void calculateCentroid(observation observations[], size_t size,

                        cluster* centroid)

 {
"
18926,"		}

 	})

 	numbers.Add(10)

 	numbers.Add(20)

 	numbers.Add(30)
"
47934,"  }

   void insert(int value) {

     this.heap.add(value);

     _siftUp(this.heap.length - 1);

   }

   int remove() {
"
10522,"﻿namespace Algorithms.Strings

 /// wiki: https://en.wikipedia.org/wiki/Pangram

 module CheckPangram =

     type System.Char with
"
26263,"            match this with

             | c when c >= 'A' && c <= 'Z' -> (char) ((int) this + 32)

             | _ -> this
"
84002,"    # encoded the input (we need a bytes like object)

     # then, b32encoded the bytes-like object

     return base64.b32encode(string.encode(""utf-8""))

 def base32_decode(encoded_bytes: bytes) -> str:

     """"""

     Decodes a given bytes-like object to a string, returning a string
"
24901,"     * socket. Specifying a protocol of 0 causes socket() to use an unspecified

      * default protocol appropriate for the requested socket type

      */

     if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)

     {
"
14197,"  let result = ''

   for (let i = 0, j = 0; i < message.length; i++) {

     const c = message.charAt(i)

     if (isLetter(c)) {
"
27485,"                }

             }

         }

     }
"
14000,"            break;

         //dosomething

     }while(0);
"
17681,"  T dequeue() {

     if (_dataStore.isNotEmpty) {

       return _dataStore.removeAt(0).item;

     }

     return null;
"
17299,"        insert(root, words[i]);

     }

     while (1)

     {
"
17660,"def binary_count_trailing_zeroes(x)

   raise 'Input must be a positive integer' if x < 0

   binary = x.to_s(2)
"
45466,"    }

     /**

      * Simulates a random play from a nodes current state

      * and back propagates the result.

      * 

      * @param promisingNode Node that will be simulated.
"
63172,"/**

  * \file

  * \brief [Problem 8](https://projecteuler.net/problem=8) solution

  * \author [Krishna Vedala](https://github.com/kvedala)

  */

 #include <stdio.h>
"
68568,"}

 // Driver program to test above function

 int main()

 {

     int n;  // Size of array elements

     printf(""Enter size of array:\n"");
"
32481,"        ch = getc(fp);

         /* the ASCII codes of digits is between 0x30 and 0x39.

          * any character not in this range implies an invalid character
"
33172,"    {

         if (i < N)  // only add new arrays if i < N

             X[i] = (double *)malloc(features * sizeof(double));

         if (i < num_out)  // only add new arrays if i < num_out
"
15942,"/* This function will delete a node with value k from the Linked List if such a node exists */

 void  deletenode(int  k)

 {

   struct  node  *p , *follow ;

   /* searching the required node */

   p=first ;
"
29736,"# You are climbing a staircase. It takes n steps to reach the top.

 # Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 # Example 1:
"
22956,"    ValueError: could not convert string to float: 'kelvin'

     """"""

     return round((float(kelvin) * 9 / 5), ndigits)

 def rankine_to_celsius(rankine: float, ndigits: int = 2) -> float:

     """"""
"
33662,"            pointer = pointer->next;

     }

     return 0;

 }

 /** main function */
"
41515,"            self.resetButton.bottomAnchor.constraint(equalTo: self.bottomAnchor),

             self.resetButton.widthAnchor.constraint(equalTo: self.widthAnchor)

         ]

         NSLayoutConstraint.activate(constraints)
"
14946,"            // Arrange

             var q = new StackBasedQueue<int>();

             q.Enqueue(1);

             q.Enqueue(2);
"
10239,"                else

                     temp[k++] = x[j++];

             while (i <= ub1) temp[k++] = x[i++];
"
51863,"        # Found something not in there

         return False

     if not (11 in tree and 12 in tree and -8 in tree and 0 in tree):

         # Didn't find something in there

         return False

     return True
"
15978,"    for (int i = 0; i < mat_size; i++)

     {

         printf(""%d/5 Checking for %.3g --> "", i + 1, y[i]);

         char result = 0;
"
19109,"      key[i] = Integer.MAX_VALUE;

       mstSet[i] = false;

     }

     // Always include first 1st vertex in MST.

     key[0] = 0; // Make key 0 so that this vertex is
"
92871,"puts sort_colors(nums)

 # Output: [0]

 nums = [1]

 puts sort_colors(nums)
"
10196,"// bitwiseMax_test.go

 // description: Test for BitwiseMax

 // author(s) [red_byte](https://github.com/i-redbyte)

 // see bitwiseMax.go
"
29953,"            {

                 sketch[i] = new int[width];

             }

             this.numHashes = numHashes;
"
21097,"    return eigen_vals;

 }

 }  // namespace qr_algorithm

 /**

  * test function to compute eigen values of a 2x2 matrix

  * \f[\begin{bmatrix}
"
18579,"                // skip all duplicates

                 pred.next = head.next;

                 // otherwise, move predecessor

             } else {

                 pred = pred.next;

             }
"
26338,"        /// <returns>Minimum value in node's subtree.</returns>

         private RedBlackTreeNode<TKey> GetMin(RedBlackTreeNode<TKey> node)

         {

             while (node.Left is not null)

             {

                 node = node.Left;
"
27181,"    display(tree.left);

   }

   print(tree.data);
"
22415,"int srchtop;

 void pmsearch(Tptr p, char *s)

 {

     if (!p)

         return;
"
86871,"        n->next = start;

     }

 }

 void remove(int x) {
"
30088,"      for (int j = 0; j < numberOfRuns; j++) {

         // test consists of setting up x items, distributing them randomly

         // within a space, and then searching for a small subset of those

         // using simple rect comparison on all items, or a quad tree query

         final tree = Node(0, 0, width, height);

         final numberOfItems = 50000;
"
55260,"{

     /* offset address points to the top element */

     return array[offset];

 }
"
41434,"/// Approximate definite integral of f in [a, b] interval

 double simpson(double Function(double) f, double a, double b, int n) {

   if (n <= 0) {

     throw ArgumentError(""n have to be greater than 0"");

   }
"
64587,"			b:      5,

 			output: 10,

 		}, {
"
24665,"      left.right = root;

       left.p = nil;

       root = left;

     }
"
16102,"	z := a - b

 	i := (z >> base) & 1

 	return a - (i * z)
"
28339,"def text_from_bits(bits, encoding=""utf-8"", errors=""surrogatepass""):

     """"""

     >>> text_from_bits('011011010111001101100111')

     'msg'

     """"""
"
33066,"  dist[src][0] = 0

   for (let i = 0; i < V - 1; i++) {

     let mn = -1

     for (let j = 0; j < V; j++) {

       if (vis[j] === 0) {

         if (mn === -1 || dist[j][0] < dist[mn][0]) mn = j
"
22476,"from __future__ import annotations

 def abs_max(x: list[int]) -> int:

     """"""

     >>> abs_max([0,5,1,11])
"
63751,"public:

     static size_t DCtor;    // default-ctor

     static size_t Ctor;     // ctor

     static size_t CCtor;    // copy-ctor
"
11954,"""""""

 Implementation of finding nth fibonacci number using matrix exponentiation.

 Time Complexity is about O(log(n)*8), where 8 is the complexity of matrix
"
32628,"    // by continuously dividing by the base and recording

     // the remainder until the quotient is zero. The number in the

     // new base is the remainders, with the last remainder

     // being the left-most digit.
"
70600,"        /// <param name=""text"">text message.</param>

         /// <returns>array of words.</returns>

         private static string[] ChunkTextToArray(string text)

         {

             // To split the message into chunks
"
31184,"  end

   res

 end

 s = 'III'

 puts roman_to_int(s)

 # Output: 3
"
85123,"{

     test();

     struct sudoku a;  // store the matrix as a 1D array
"
19884,"    {

         printf(""%d "", union_set[i]);

     }

     printf(""\n"");

     // Now 3, 5 and are groupped together, find(3) = find(5) = find(8)
"
26407,"        for (int num = 1; num <= n; num++)

         {

             if (isSafe(board, row, col, num))
"
29799,"        }

         [Test]

         public void DecomposeMatrix_Case3X3()

         {

             // Arrange
"
31827,"            // null

             else if (temp->right == curr) {

                 cout << curr->data << "" "";

                 temp->right = NULL;
"
22977,"        { 

             cout << ""Derived3 created by deep copy"" << endl; 

         } 
"
83592,"        # update the pos{}

         self.pos[self.array[i][1]] = j

         self.pos[self.array[j][1]] = i
"
23616,"            parent.right = new Node(key, parent);

           }

           rebalance(parent);

           break;

         }

       }
"
47283,"		}

 		if actualError != test.expectedError {

 			t.Errorf(""test '%s' failed: input array '%v' with key '%d', expected error '%s', get error '%s'"", test.name, test.data, test.key, test.expectedError, actualError)
"
70042,"            }

         }

         else if (boat == 2)

         {

             if (nm == 1)

             {
"
14432," * @param key key value to search

  * @returns `true` if found

  * @returns `false` if not found

  */

 bool searchingProber(const Entry& entry, int key) {

     if (entry.key == key) {
"
27270,"    }

  public:

     trie() = default;  ///< Class default constructor
"
12721,"            get

             {

                 while (true)

                 {

                     yield return 0;

                 }
"
26149,"package Sorts;

 import static Sorts.SortUtils.*;

 /**

  * @author Varun Upadhyay (https://github.com/varunu28)

  * @author Podshivalov Nikita (https://github.com/nikitap492)

  * @see SortAlgorithm
"
21809,"                    // Make a new root list with just this item. Make sure to make

                     // it its own list.

                     MinItem.SetSiblings(MinItem, MinItem);

                     MinItem.Parent = null;

                 }
"
14808,"  // Call binary search for the range found above

   return binarySearch(arr, value, i / 2, Math.min(i, length))

 }
"
25748,"    return (b << 16) | a;

 }

 unsigned retrieve_index_from_hash(const long long hash, const unsigned capacity)
"
24731,"            var message = random.GetString();

             var key = new double[,] { { 0, 4, 5 }, { 9, 2, -1 }, { 3, 17, 7 } };

             // Act

             var encodedText = encoder.Encode(message, key);
"
33997,"    };    

 };

 typedef struct Base1 {         

     int v1;

 //    private:   //error!

         int v3;
"
29713,"                    Matrix[a][c] + Matrix[c + 1][b] + array[a - 1] * array[c] * array[b]

                 )

                 if cost < Matrix[a][b]:

                     Matrix[a][b] = cost
"
19166,"            var actualItem = searcher.FindIndexes(str, pat);

             // Assert

             CollectionAssert.AreEqual(expectedItem, actualItem);

         }

         [Test]

         public static void FindIndexes_ItemsMissing_NoIndexesReturned()
"
20182,"    myQueue.insert(5);

     myQueue.insert(3);

     // [2, 3, 5, 10] Here higher numbers have higher priority, so they are on the top

     for (int i = 3; i >= 0; i--)

       System.out.print(
"
25069,"        max /= 10;

     }

 }

 void display(int *arr, int N)

 {

     for (int i = 0; i < N; i++) printf(""%d, "", arr[i]);
"
21133,"        std::cout<<""+"";

     if(i!=0)

         std::cout<<i<<""i""<<std::endl;

 }

 int main(void) {

     Complex c1(1,2),c2(3,4),c3,c4,c5,c6; 
"
84652,"    }

     public function testDecimalToBinary()

     {

         assertEquals(decimalToBinary(7), 111);

         assertEquals(decimalToBinary(5), 101);

         $this->expectException(\Exception::class);
"
29810,"def column_based_sort(array, column=0):

     """"""

     >>> column_based_sort([(5, 1), (4, 2), (3, 0)], 1)

     [(3, 0), (5, 1), (4, 2)]

     """"""
"
72938,"            if (o == -2)

             {

                 printf(""Player 2 WIN\n"");

             }
"
25085,"int main(){

     int x=7;

     assert(x==5);

     return 0;

 }
"
14964,"      }

     }

     finishingTimeList.push({
"
29838,"  private static <T extends Comparable<T>> void doSort(T[] arr, int left, int right) {

     if (left < right) {

       int mid = (left + right) >>> 1;

       doSort(arr, left, mid);

       doSort(arr, mid + 1, right);

       merge(arr, left, mid, right);
"
29755,"    end

     @testset ""Math: Trapezoid Integration"" begin

         @test isapprox(trapezoid_integration(x -> 3*x^2, 0, 1, 100000), 1, atol = 0.01)
"
31875,"// mutualKey = (shareKey^prvKey)%primeNumber

 func GenerateMutualKey(prvKey, shareKey int64) int64 {

 	return modularExponentiation(shareKey, prvKey, primeNumber)

 }

 // r = (b^e)%mod
"
10170,"*/

 // brute force method

 function fibonacciIndex (t = 1000) {

   const digits = 10n ** BigInt(t - 1)

   let fib0 = BigInt(0)
"
20445,"    ///         Wikipedia: https://en.wikipedia.org/wiki/Kolakoski_sequence.

     ///     </para>

     ///     <para>
"
17025,"    arr.sort()

     n = len(arr)

     for i in range(n - 1):
"
23435,"                    free(toDelete);

                 }

             }

         }

         else
"
27968,"      this.root = newNode;

     } else {

       /* Check if insertion is to be made in
"
33098," * @file

  * @brief Implements [Palindrome

  * Partitioning](https://leetcode.com/problems/palindrome-partitioning-ii/)
"
24455,"        System.out.println(""Please enter the shift number"");

         int shift = input.nextInt() % 26;

         System.out.println(""(E)ncode or (D)ecode ?"");

         char choice = input.next().charAt(0);
"
21450,"        /// </summary>

         /// <param name=""item"">An element to insert.</param>

         public void Add(T item)

         {

             var index = IndexFor(item, out _);

             memory.Insert(index, item);
"
21132,"        return [t, p, v]

       default:

         return [v, p, q]
"
93563,"  const offsetX = canvasWidth / 10.0

   const offsetY = canvasWidth / 3.7

   const vector1 = new Vector2(offsetX, offsetY)

   const vector2 = new Vector2(canvasWidth / 2, Math.sin(Math.PI / 3) * canvasWidth * 0.8 + offsetY)

   const vector3 = new Vector2(canvasWidth - offsetX, offsetY)

   const initialVectors = []
"
56829,"// author(s) [Taj](https://github.com/tjgurwara99)

 // see exponentiation_test.go

 package modular

 import (
"
14537,"    return reverse;

   }

   private static String base2base(String n, int b1, int b2) {

     // Declare variables: decimal value of n,

     // character of base b1, character of base b2,

     // and the string that will be returned.
"
11809," * than root node, both left and right childs must themselves be a BST.

  *

  * <p>I have made public functions as methods and to actually implement recursive approach I have
"
12075,"[[SHA]]

 uuid = ""ea8e919c-243c-51af-8825-aaa63cd721ce""

 [[SLEEFPirates]]

 deps = [""IfElse"", ""Static"", ""VectorizationBase""]

 git-tree-sha1 = ""bfdf9532c33db35d2ce9df4828330f0e92344a52""

 uuid = ""476501e8-09a2-5ece-8869-fb82de89a1fa""
"
33395,"    double test_1 = math::integral_approx(

         3.24, 7.56, [](const double x) { return log(x) + exp(x) + x; });

     std::cout << ""Test Case 1"" << std::endl;

     std::cout << ""function: log(x) + e^x + x"" << std::endl;

     std::cout << ""range: [3.24, 7.56]"" << std::endl;
"
20924,"        /// Cipher Text initially empty

         String cipher = """";

         for (int i = 0; i < msg.length; i++) {

             // Avoid space to be encrypted

             /* applying encryption formula ( a x + b ) mod m

             {here x is msg[i] and m is 26} and added 'A' to
"
10344,"            Assert.Zero(otherHeap.Count);

             Assert.AreEqual(thisHeap.Peek(), minNode);

             Assert.Throws<InvalidOperationException>(() => otherHeap.Peek());
"
11619,"int power(int x, unsigned int y)

 {

     if (y == 0)

         return 1;

     if (y % 2 == 0)
"
76941,"            }

         }

         if ($swape)break;

     }

     return $array;
"
75842,"""""""

     function length_conversion(value, from_type, to_type)

 A function that converts a value from a measurement unit to another one
"
11401,"        $this->assertSame(104743, problem7());

     }

     public function testProblem9(): void

     {

         $this->assertSame(31875000, problem9());
"
32121,"                return 4;

             }

             else

             {

                 return 1;
"
18276,"	}

 }
"
26838,"    if (!ada.weights)

     {

         perror(""Unable to allocate error for weights!"");

         return ada;

     }

     // initialize with random weights in the range [-50, 49]
"
11303,"}

 func TestNewPolybius(t *testing.T) {

 	t.Parallel()

 	cases := []struct {

 		name       string

 		size       int
"
32075,"		key := """"

 		for x := 0; x < utf8.RuneCountInString(target); x++ {

 			choice := rand.Intn(len(charmap))
"
57651,"    int toCheck = Arrays.binarySearch(integers, shouldBeFound);

     System.out.println(

         format(

             ""Found by system method at an index: %d. Is equal: %b"", toCheck, toCheck == atIndex));

   }
"
10998,"// https://en.wikipedia.org/wiki/Binary_number

 // Function receives a integer as a Decimal number and returns the Binary number.

 // Supported integer value range is 0 to 2^(31 -1).

 // Package name.

 package conversion

 // Importing necessary package.
"
18525,"            delete_node = self.tail

             self.tail = self.tail.previous

             self.tail.next = None

         else:
"
86403,"        }

     }

     return true;

 }
"
18458,"        /// </summary>

         /// <param name=""array"">Span of sorted numbers which will be used to find the item.</param>

         /// <param name=""item"">Term to check against.</param>

         /// <returns>Index of first item that satisfies term.</returns>

         /// <exception cref=""ItemNotFoundException""> Gets thrown when the given item couldn't be found in the array.</exception>
"
16720,"namespace Algorithms.Tests.Sorters.Integer

 {

     public static class RadixSorterTests

     {
"
80872,"                { new DateTime(1995, 1, 1), ""TestTime1"" },

                 { new DateTime(2000, 1, 1), ""TestTime2"" },

                 { new DateTime(2005, 1, 1), ""TestTime3"" },

                 { new DateTime(2010, 1, 1), ""TestTime4"" },

                 { new DateTime(2015, 1, 1), ""TestTime5"" },

             };
"
27144,"        @test length_conversion(10, ""mi"", ""km"") ≈ 16.0934

     end

 end
"
19564,"      System.out.print(""-------"");

     }

     System.out.println();

     printArray(s);

     for (int i = 0; i < size; i++) {
"
68118,"        """"""return the parent index of given child""""""

         if child_idx > 0:

             return (child_idx - 1) // 2

         return None

     def left_child_idx(self, parent_idx: int) -> int | None:
"
18721,"        stat.new_val(val);

         return input;

     }
"
15983,"// --------------- helper functions ---------------------------

 // verify if provided words are present

 func (n *Node) verify(t *testing.T, checkWords map[string]bool) {
"
19822,"    return(1)

   }

   else

   {
"
13587,"        ll x = edges[i].second.first;

         ll y = edges[i].second.second;

         if (root(x) != root(y)) {

             mincost += edges[i].first;

             join(x, y);
"
32037,"	testFramework(t, Mergesort)

 }

 func TestHeap(t *testing.T) {
"
18007,"""""""

 function celsius_to_kelvin(celsius, ndigits::Int = 2)

 Converts celsius to kelvin and round to 2 decimal places

 # Example
"
16181,"                       else

                          num

                        end

   end
"
28674,"  return perms

 }

 export { createPermutations }
"
25860,"    if (charCount < secondStringLength) {

       outStr += str2[charCount]

     }

   }

   // return the output string.

   return outStr
"
18368," */

 /**

  * Unlike Array.prototype.reverse, flipArray reverses only a subarray of the given

  * array, determined by the parameters startIndex and endIndex

  *
"
14188,"        }

       }

       if (2 * k + 1 > this.size) {

         minIndex = this.heap[2 * k] < this.heap[k] ? 2 * k : k

       } else {
"
29363,"}
"
17732,"	if l < h.size() && h.slice[l] > h.slice[max] {

 		max = l

 	}
"
12800,"    if (grandParent != NULL)

     {

         if (grandParent->right == parent)

         {

             grandParent->right = node;
"
20073,"			if endState == state {

 				return c, beginState

 			}

 		}

 	}

 	return 0, 0 //unreachable
"
16495,"  recursive_double_linear_search(data, key, left + 1, right - 1)

 end

 puts(recursive_double_linear_search([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 5))
"
40824,"  dp = Array.new(coins.length + 1) { Array.new(amount + 1, 0) }

   dp[0][0] = 1

   (1..coins.length).each do |i|

     (0..amount).each do |j|
"
29506,"int fib(int n)

 {

     // Out of Range checking

     if (n < 0)

     {

         printf(""\nNo Such term !\n"");
"
30808,"    int toCheck = Arrays.binarySearch(integers, shouldBeFound);

     System.out.println(

         format(

             ""Found by system method at an index: %d. Is equal: %b"", toCheck, toCheck == atIndex));

   }

 }
"
31487,"    do

     {

         fprintf(fp, ""%.4g,%.4g,%.4g\n"", x, y[0], y[1]);  // write to file
"
78974,"    }

     else

     {

         printf(""server acccept the client...\n"");

     }
"
28602,"    }

     return quickSort(less) + [pivot] + quickSort(greater);

   }

 }
"
30458,"#

 def decimal_to_binary(d)

   binary = (d % 2).to_s

   return binary if d == 0

   return 1.to_s if d == 1
"
25702,"        std::cout << ""\n"";

         std::cin >> arr[i];

     }

     SlowSort(arr, 0, size);

     std::cout << ""Sorted array\n"";

     for (int i = 0; i < size; ++i) {
"
10519,"divisors?

 """"""

 def triangle_number_generator():
"
10650,"        int element = stack.peek();

         //Remove the topmost element

         stack.pop();

         //Reverse the stack for the leftover elements

         reverseStack(stack);
"
30595,"    return i;

 }

 /** Print a large number */

 int print_number(unsigned char *number, int N)

 {

     int start_pos = N - 1;
"
98632,"    euler eul = euler_from_quat(&quat);

     printf(""Euler: %.4g, %.4g, %.4g\n"", eul.pitch, eul.roll, eul.yaw);

     quaternion test_quat = quat_from_euler(&eul);

     printf(""Quaternion: %.4g %+.4g %+.4g %+.4g\n"", test_quat.w,

            test_quat.dual.x, test_quat.dual.y, test_quat.dual.z);

     assert(fabsf(test_quat.w - quat.w) < .01);
"
11258,"class result {

 public:

     result() { puts(""result()""); }

     ~result() { puts(""~result()""); }

 };
"
30187,"    // Create a queue and add root to it

     Queue<QItem> Q = new LinkedList<QItem>();

     Q.add(new QItem(root, 0)); // Horizontal distance of root is 0
"
29442,"            Count = 0;

             comparer = customComparer;

         }

         /// <summary>

         ///     Gets the number nodes currently in the BST.
"
27474,"}

 /**

  * @brief The main function implements Karatsuba's algorithm for fast

  * multiplication
"
33470,"/*

     author: PatOnTheBack

     license: GPL-3.0 or later

     Modified from:
"
37772,"            88177, 88211, 88223, 88237, 88241, 88259, 88261, 88289, 88301, 88321, 88327, 88337, 88339, 88379, 88397,

             88411, 88423, 88427, 88463, 88469, 88471, 88493, 88499, 88513, 88523, 88547, 88589, 88591, 88607, 88609,

             88643, 88651, 88657, 88661, 88663, 88667, 88681, 88721, 88729, 88741, 88747, 88771, 88789, 88793, 88799,

             88801, 88807, 88811, 88813, 88817, 88819, 88843, 88853, 88861, 88867, 88873, 88883, 88897, 88903, 88919,
"
32064,"            if ($placeValue < 0) { // Handling case where remainder is negative 

                 $placeValue += 26;

             }

             $placeValue += ord(ctype_upper($c) ? 'A' : 'a');

             $newChar = chr($placeValue); // Getting new character from new value (i.e. A-Z)

             $decryptedText .= $newChar; // Appending decrypted character
"
17806,"    public Complex subtract(Complex z) {

       Complex temp = new Complex();

       temp.real = this.real - z.real;

       temp.img = this.img - z.img;

       return temp;

     }
"
58416,"    // get approximate solution

     double total_time = forward_euler(step_size, X0, X_MAX, Y0, 1);

     printf(""\tTime = %.6g ms\n"", total_time);
"
28262,"             * because this '0' will repeat in the next 'num_digit'

              * multiplications. Hence, we also do not update the file position

              */

             /* NOTE: this is not needed but helps get results faster :) */

             return 0;
"
32853,"    // heuristic function optimistic values

     int[] heuristic = {

       366, 0, 160, 242, 161, 178, 77, 151, 226, 244, 241, 234, 380, 98, 193, 253, 329, 80, 199, 374
"
80076," * Modified by: Leonardo Vencovsky

  * Last modified: 19/03/2018

  *

  * Array Implementations in C

  *

  * Compiled in Visual Studio 2017
"
13450,"    }

     // search till sqrt(N)

     // because after this, the pair of divisors will repeat themselves

     for (i = 1; i * i <= N + 1; i++)
"
20586,"//   'Foxtrot',

 //   'Golf',

 //   'Hotel',

 //   'India',

 //   'Juliet',
"
19613,"                                   /// O(1)

         }

     }

     /**
"
31665,"   * Main method

    *

    * @param args Command line arguments

    */

   public static void main(String args[]) {
"
20437,"                {

                     return true;

                 }

             }

         }

     }
"
18879,"    if (balance > 1 && key < (node->left->key))

         return rightRotate(node);

     /*Right Right */

     if (balance < -1 && key > (node->right->key))

         return leftRotate(node);

     /*Left Right */
"
29088,"// function that takes 10 digits and returns a string of the formatted phone number

 // e.g.: 1234567890 -> (123) 456-7890

 const formatPhoneNumber = (numbers) => {
"
19242,"""""""

 # Interpolation Search

 Used for sorted array which is uniformly distributed.
"
17524,"package DataStructures.Trees;

 /**

  *

  *

  * <h1>Binary Search Tree (Recursive)</h1>

  *
"
26851,"// 		m[l] = c

 // 	}

 // 	return string(m)
"
20270,"     *

      * @param M pointer to matrix to be filled with random numbers

      * @param a lower limit of interval
"
28358,"    assert stack.isEmpty();

     try {

       stack.pop();

       assert false; /* this should not happen */
"
19535," * @returns Node* Pointer to the found node

  * */

 Node *findMinNode(Node *root) {

     if (root == nullptr) {

         return root;

     }
"
13339,"            s.push(i);

         }

         int ans[] = new int[n + 1];

         for (int i = 0; i <= n; i++)
"
90072,"			return true

 		}

 	}

 	return false
"
28278,"  const triangle = [[1], [1, 1]]

   if (numRows === 0) {

     return []

   } else if (numRows === 1) {

     return [[1]]

   } else if (numRows === 2) {
"
31676,"        $distanceVectorInit[] = 0;

         $distanceVectorFinal[] = 0;

     }
"
25828,"//        3   4   9

 //       /       / \

 //      2       8   10

 //     /

 //    1
"
48615,"                { new DateTime(2010, 1, 1), ""TestTime4"" },

                 { new DateTime(2015, 1, 1), ""TestTime5"" },

             };
"
21086,"}

 assert(binarySearchIterative([0, 5, 7, 10, 15], 0) == 0);

 assert(binarySearchIterative([0, 5, 7, 10, 15], 7) == 2);
"
30466,"#include <netinet/in.h>          /// For in_addr and sockaddr_in structures

 #include <stdint.h>             /// For specific bit size values of variables

 #include <stdio.h>             /// Variable types, several macros, and various functions for performing input and output

 #include <stdlib.h>           /// Variable types, several macros, and various functions for performing general functions
"
90015,"                TEMPORARY_ARRAY = (int *)realloc(

                     TEMPORARY_ARRAY, TEMPORARY_ARRAY_LENGTH * sizeof(int));

                 TEMPORARY_ARRAY[TEMPORARY_ARRAY_LENGTH - 1] = ARRAY[i];

             }

         }

         longestSub(TEMPORARY_ARRAY, TEMPORARY_ARRAY_LENGTH, &TEMPORARY_ARRAY,
"
31509,"}

 function searchDFS (tree, value) {

   const stack = []

   stack.push(tree[0])
"
21262,"        self.head: Optional[Node] = None

         self.size = 0

     def add(self, item: Any) -> None:

         self.head = Node(item, self.head)

         self.size += 1
"
18238,"    System.out.println(LIS(arr));

     System.out.println(findLISLen(arr));

     sc.close();

   }

   private static int upperBound(int[] ar, int l, int r, int key) {
"
25884,"    )

 if __name__ == ""__main__"":

     import doctest
"
25645,"    location[0] >= rgbData.length ||

     location[1] < 0 ||

     location[1] >= rgbData[0].length) {

     throw new Error('location should point to a pixel within the rgbData')
"
20368,"    }

     public function testAbsoluteMax()

     {
"
95609,"4x^2 + y^2 = 100

 The section corresponding to −0.01 ≤ x ≤ +0.01 at the top is missing, allowing the

 light to enter and exit through the hole.

 ￼￼

 The light beam in this problem starts at the point (0.0,10.1) just outside the white
"
30815,"{

     char buff[MAX];

     int n;

     // infinite loop for chat

     for (;;)
"
85464,"such value of k; for example, A(7) = 6 and A(41) = 5.

 The least value of n for which A(n) first exceeds ten is 17.

 Find the least value of n for which A(n) first exceeds one-million.
"
31854,"# @return {Boolean}

 #

 # Approach: Sort and Compare

 #

 # Complexity analysis:
"
57856,"  /**

    * Discrete circular convolution function. It uses the convolution theorem for discrete signals:

    * convolved = IDFT(DFT(a)*DFT(b)). Then we use the FFT algorithm for faster calculations of the

    * two DFTs and the final IDFT.

    *

    * <p>More info: https://en.wikipedia.org/wiki/Convolution_theorem
"
78915,"      throw new IllegalArgumentException(""brackets is null"");

     }

     Stack<Character> bracketsStack = new Stack<>();

     for (char bracket : brackets.toCharArray()) {

       switch (bracket) {
"
33220,"            if (pts[j].group != i)

             {

                 continue;
"
10379,"        /// <param name=""startVertex"">Vertex that search starts from.</param>

         /// <param name=""action"">Action that needs to be executed on each graph vertex.</param>

         public void VisitAll(IDirectedWeightedGraph<T> graph, Vertex<T> startVertex, Action<Vertex<T>>? action = default)

         {

             Dfs(graph, startVertex, action, new HashSet<Vertex<T>>());

         }
"
22491,"                fprintf(fp, "","");          // suffix comma

         }

         if (i < num_points - 1)  // if not the last row

             fprintf(fp, ""\n"");   // start a new line
"
13524,"        [TestCase(26, 2)]

         public static void TestNumberOfZeroBits(int number, int expected)

         {

             // Arrange
"
11821,"      else charB2 = charB1 - '0';

       // Convert the digit to decimal and add it to the

       // decimalValue of n

       decimalValue = decimalValue * b1 + charB2;

     }
"
30264,"    int N = 1000, sum = 0;

     if (argc == 2)

         N = atoi(argv[1]);

     MAX_NUM_DIGITS = (N + tmp) / tmp;

     digits = calloc(MAX_NUM_DIGITS, sizeof(uint8_t));

     digits[0] = 1;
"
29053,"        max_value, index = findmax(values)

         while capacity >= weights[index] 

             total_max_value += max_value 
"
11192,"    singleton() {}

 public:

     singleton *instance();
"
24093,"      char ch = word.charAt(i);

       TrieNode node = currentNode.child[ch - 'a'];

       if (node == null) {
"
22157,"    private T[] heap;

     /**

      * Constructor
"
89479,"        byte = 0

       end

     end

     msg.join
"
23154,"            walk = walk->next;

         }

     }

     return head;
"
18419,"    } else if (z == head) {

       deleteHead();

     } else { // before <-- 1 <--> 2(z) <--> 3 -->

       z.previous.next = z.next; // 1 --> 3

       z.next.previous = z.previous; // 1 <--> 3

     }
"
18861,"package DataStructures.Lists;

 import java.util.StringJoiner;

 /** https://en.wikipedia.org/wiki/Linked_list */

 public class SinglyLinkedList {

   /** Head refer to the front of the list */
"
13194,"char *abbreviate(const char *phrase)

 {

     char str[80];
"
32516,"    printf(""----------------------------\n"");

     for (i = 0; i < n; i++)

     {

         printf(""%f\t"", x[i]);
"
75880,"    {

         [Test]

         public static void DecodedStringIsTheSame([Random(100)] int key)
"
23779,}
77775,"  public static String rotation(String s, int n) {

     return s.substring(n) + s.substring(0, n);

   }

   /**
"
22122,"    """"""

     answer = 0

     for i in range(999, 99, -1):  # 3 digit numbers range from 999 down to 100

         for j in range(999, 99, -1):

             product_string = str(i * j)
"
56367,"        let secondPlayer = Player(type: .computer, symbol: .cross)

         sut.clear()

         XCTAssertEqual(sut.check(player: firstPlayer), BoardStatus.continues)

         XCTAssertEqual(sut.check(player: secondPlayer), BoardStatus.continues)

         sut.clear()

         sut.makeMove(player: firstPlayer, position: Position(0, 0))
"
87312,"package Sort

 object QuickSort {

   /** @param array

     *   - a sequence of unsorted integers

     * @return

     *   - sequence of sorted integers @array
"
12216,}
18118,"# SortTests provides general test cases for sorting function.

 # By using this module, tests can be implemented like this:

 #

 #   class TestBuiltinSort < Minitest::Test

 #     # SortTests adds some test_* methods.

 #     include SortTests
"
11994,"    const SUT = checkAnagram('abcs', 'abds')

     expect(SUT).toBe(false)

   })

   it('expects to return true if the arguments are anagrams', () => {
"
32351,"package linkedlist

 import ""fmt""

 // Doubly structure with just the Head Node

 // We call it `Doubly` to make it easier to

 // understand when calling this in peoples

 // own local code to understand and experiment
"
15653,"		return """", &NoTextToEncryptError{}

 	}

 	n := textLength % keyLength

 	for i := 0; i < keyLength-n; i++ {
"
20139,"    head->next = swapPairs(head->next->next);

     tmp->next = head;

     return tmp;

 }
"
17719,"        /// <param name=""bitmapHeight"">The height of the rendered bitmap.</param>

         /// <param name=""figureCenterX"">The x-coordinate of the center of the figure.</param>

         /// <param name=""figureCenterY"">The y-coordinate of the center of the figure.</param>

         /// <param name=""figureWidth"">The width of the figure.</param>

         /// <param name=""maxStep"">Maximum number of steps to check for divergent behavior.</param>
"
18373,"    that n = p*p*r, then the number is non-squarefree.

     >>> get_squarefree({1}, [])

     set()

     >>> get_squarefree({1, 2}, [])
"
92718,"    1 <= beginWord.length <= 10

     endWord.length == beginWord.length

     1 <= wordList.length <= 5000

     wordList[i].length == beginWord.length
"
17304,"    clock_t t1 = clock();

     double x = x0;

     do  // iterate for each step of independent variable

     {

         if (save_to_file && fp)

             fprintf(fp, ""%.4g,%.4g,%.4g\n"", x, y[0], y[1]);  // write to file
"
22527," * @param o  observation

  * @param clusters  array of cluster having centroids coordinates

  * @param k  size of clusters array
"
27425,"         ['6', '.', '.', '1', '9', '5', '.', '.', '.'],

          ['.', '9', '8', '.', '.', '.', '.', '6', '.'],

          ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
"
23056,"TemperatureConversion.celsius_to_fahrenheit(-20)

 TemperatureConversion.fahrenheit_to_celsius(68)

 # Invalid input

 TemperatureConversion.celsius_to_fahrenheit('abc')

 # fahrenheit <-> kelvin
"
64093," * Example: Given a string = ""abcd""

  * 1. ""abc"" will come before ""abcd"".

  * 2. ""abd"" will come before ""ac"".
"
17300,"#include <map>

 #include <queue>

 #include <string>

 #include <vector>

 /**

  * \namespace graph
"
27392,"export class RatInAMaze {

   constructor (grid) {

     // first, let's do some error checking on the input

     validateGrid(grid)
"
12625,"                newVectors.Add(startVector);

                 var differenceVector = endVector - startVector;

                 newVectors.Add(startVector + differenceVector / 3);

                 newVectors.Add(startVector + differenceVector / 3 + Rotate(differenceVector / 3, 60));

                 newVectors.Add(startVector + differenceVector * 2 / 3);

             }
"
33565,"    int arr[1000005]={0};   /* array to store prime numbers */

     prime(arr);

     assert(count(arr,size)==4);

     printf(""Passed\n"");
"
25167,"  end

   str

 end

 n = 15

 puts(fizz_buzz(n))
"
37334,"func (sl *SList) Peak() (interface{}, error) {

 	if !sl.Empty() {

 		element := sl.stack.Front()

 		return element.Value, nil

 	}
"
11798," * @brief area of a [square](https://en.wikipedia.org/wiki/Square) (l * l)

  * @param length is the length of the square

  * @returns area of square
"
30273,"            for (int a = line - 1; a < (line + boat); a++)

             {

                 for (int b = aux - 1; b < (aux + boat + 1); b++)

                 {

                     if (a >= 0 && a <= 9 && b >= 0 && b <= 9)

                     {
"
17591,"    if (r < heap_size && harr[r] < harr[smallest])

         smallest = r;

     if (smallest != i) {

         std::swap(harr[i], harr[smallest]);

         MinHeapify(smallest);
"
11517,"        public void TestOptimalInitializer()

         {

             var obj1 = new SimpleObject(""foo"", 5);

             var obj2 = new SimpleObject(""bar"", 6);
"
21701,"        }

     }

     return root;
"
93498,"    [[-3. -6. -3.]

      [-6. -12. -6.]

      [-3. -6. -3.]]

     >>> print(matrix.cofactors())

     [[-3. 6. -3.]
"
99155,"# Approach 1: Two Pointers

 #

 # Complexity Analysis:

 #

 # Time Complexity: O(n)

 # Space Complexity: O(1)
"
65341," */

 namespace others {

 /**

  * @namespace postfix_expression

  * @brief Functions for Postfix Expression algorithm

  */
"
21186,"    assert(c_atoi(""999999999"") == atoi(""999999999""));

     printf(""<<<< TEST DONE >>>>\n"");

 }

 /**
"
28965,"        if (i < num_out) {  // only add new arrays if i < num_out

             W[i] = std::vector<std::valarray<double>>(num_out);

             for (int k = 0; k < num_out; k++) {

                 W[i][k] = std::valarray<double>(features);
"
23342,"        }

         return maxStr;

     }

     private boolean isValid(String s, int lo, int hi) {

         int n = hi - lo + 1;

         for (int i = 0; i < n / 2; ++i) {
"
24354,"import os

 def solution():

     """"""
"
10721,"        [Test]

         public void Remove_EmptyTree_ThrowsException()

         {
"
33299,"    else

     {

         printf(""The number %d exist in array at position : %d \n"", 5, position);
"
17887,"import { haversineDistance } from '../Haversine'

 describe('Testing the haversine distance calculator', () => {

   it('Calculate distance', () => {
"
19026,"    merge_sort!(arr,mid+1,r)

     # merge

     l_pos=l # pos of the left part
"
15192,"void push(struct node *);

 void pop(struct node *);

 void display(struct node *);
"
18675,"*/

 const volPyramid = (baseLength, baseWidth, height) => {

   isNumber(baseLength, 'BaseLength')

   isNumber(baseWidth, 'BaseWidth')

   isNumber(height, 'Height')
"
97784,"        {

             var result = new List<TKey>();

             PostOrderWalk(root);

             return result;

             void PostOrderWalk(AvlTreeNode<TKey>? node)

             {
"
42516,"  end

   divisors

 end

 # get list of all proper divisors of `number` i.e. removing `number` from

 # the list of divisors

 def get_proper_divisors(number)
"
17811,"//  '----------------'  '----------------'  '----------------'

 //  '----------------'   '----------------'  '----------------'

 //  Email :    z5261243@unsw.edu.au

 //             hhoanhtuann@gmail.com
"
75256,"    result.push(get_num(row_index, i))

   end

   result

 end

 row_index = 3

 print(get_row(row_index))
"
14174,"@testset ""Strings"" begin

     @testset ""Strings: Is Palindrome"" begin

         s = ""AA""     # A palindrome

         @test is_palindrome(s) == true

         s = ""ABC""     # Not a palindrome

         @test is_palindrome(s) == false
"
11686,"                    var y1 = vectors[i].Y;

                     var x2 = vectors[i + 1].X;

                     var y2 = vectors[i + 1].Y;

                     graphics.DrawLine(blackPen, x1, y1, x2, y2);

                 }
"
31895,"                return 0;

             i--;

             continue;

         }
"
21556," * @param y vector 2

  * @param c dimension of the vectors

  *
"
21233,"    assert(fabsf(d - 6.f) < 0.01);

     vec_3d c = vector_prod(&a, &b);

     // printf(""Vector product "");

     // printf(""%s"", print_vector(&c, ""c""));

     assert(fabsf(c.x - (-1.f)) < 0.01);
"
43775,"        }

         /// <summary>

         ///     Gets Number of enqueued items.
"
29668,"import { lucas } from '../LucasSeries'

 describe('Nth Lucas Number', () => {

   it('should return the 20th Lucas Number', () => {

     expect(lucas(20)).toBe(15127)

   })

   it('should return the 20th Lucas Number', () => {
"
16177," * @brief Sorting algorithms

  */

 namespace sorting {

 /**

  * @namespace wave_sort
"
73189,"/**

  * @file

  * @brief [Minimum coins](https://leetcode.com/problems/coin-change/) change

  * problem is a problem used to find the minimum number of coins required to

  * completely reach a target amount.
"
27608,"    exec_time = timeit.timeit(setup=setup, stmt=code, number=100)

     print(""With matrix exponentiation the average execution time is "", exec_time / 100)

     return exec_time

 def simple_fibonacci_time():
"
48637," * print median_of_medians(A, 0) #should be 1

  * print median_of_medians(A,7) #should be 99

  * print median_of_medians(B,4) #should be 5

  *

  * @author Unknown author
"
55353,"  return str.length === 1 && str.match(/[a-zA-Z]/i)

 }

 /**

  * Check if is Uppercase or Lowercase

  * @param {String} character - character to check

  * @return {Boolean} result of the checking
"
30487,"word2 = 'practice'

 puts(shortest_distance(words, word1, word2))

 # Output: 3
"
33907,"			if err != expectedError {

 				t.Errorf(""Expected %dth Catalan Number error: %d\nFound: %d\n"", nthCatalanNumber, expectedError, err)

 			}

 			if result != expectedCatalanNumber {
"
10170,"                f""-order filter, got {len(a_coeffs)}""

             )

         self.a_coeffs = a_coeffs

         self.b_coeffs = b_coeffs

     def process(self, sample: float) -> float:

         """"""
"
14027,"    public class FastSearcher

     {

         /// <summary>

         ///     Finds index of first item in array that satisfies specified term
"
16939,"var ErrorFailedToEncrypt = errors.New(""failed to Encrypt"")

 // ErrorFailedToDecrypt Raised when Decrypt function fails to decrypt the encrypted message

 var ErrorFailedToDecrypt = errors.New(""failed to Decrypt"")

 // Encrypt encrypts based on the RSA algorithm - uses modular exponentitation in math directory

 func Encrypt(message []rune, publicExponent, modulus int64) ([]rune, error) {
"
68852,"    // value was not found, return -1

     return -1;

 }

 /**
"
29611,"        /// </summary>

         /// <param name=""array"">Array to sort.</param>

         /// <param name=""comparer"">Compares elements.</param>

         public void Sort(T[] array, IComparer<T> comparer)

         {

             var gap = array.Length;
"
12913,"    }

 };

 class Person {

 public:

     string firstname;

     string lastname;
"
31705,"static void test1() {

     /* checks the parents in the resultant structures */

     uint64_t n = 10;   ///< number of elements

     dsu d(n + 1);      ///< object of class disjoint sets
"
16409,"                TEMPORARY_ELEMENT = ARRAY[i];  // and we switch these elements

                                                // using TEMPORARY_ELEMENT

                 ARRAY[i] = ARRAY[i + 1];
"
21715,"    CircularBuffer _buffer;

     public TestWriteWorker(CircularBuffer cb) {

       this._buffer = cb;
"
18253,"    printf(""contains %d ? %d\n"", v1, contains(set, &v1));

     printf(""Value %d was add ? %d\n"", v2, add(set, &v2));

     printf(""Value %d was add ? %d\n"", v2, add(set, &v2));

     printf(""contains %d ? %d\n"", v2, contains(set, &v2));
"
18996,"        }

         [Test]

         public static void Peek_NonEmptyHeap_ReturnsCorrectAnswer()

         {

             var heap = BuildTestHeap();

             Assert.AreEqual(10, heap.Peek());
"
17215,"    >>> solution(20)

     71

     >>> solution(50)

     229

     >>> solution(100)
"
32217,"                    : 0;

             }

         }

         private IEnumerable<int> OmitVowels(IEnumerable<int> numbers) => numbers.Where(i => i != 0);
"
23950,"            tree.AddRange(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });

             Remove(4).Should().NotThrow();

             tree.Contains(4).Should().BeFalse();

             tree.Count.Should().Be(9);

             Remove(8).Should().NotThrow();
"
14358,"using System.Collections.Generic;

 using System.Linq;

 using Algorithms.Knapsack;

 using Utilities.Extensions;

 namespace Algorithms.DataCompression
"
28505,"        @test exponential_search(arr, 100) == ""Element not present in array""

     end

     @testset ""Searches: Interpolation"" begin
"
19013,"    System.arraycopy(divideArray, 0, leftArray, 0, divideX);

     // divide-right array

     System.arraycopy(divideArray, divideX, rightArray, 0, indexNum - divideX);

     double minLeftArea; // Minimum length of left array

     double minRightArea; // Minimum length of right array

     double minValue; // Minimum lengt
"
19789,"}  // namespace sorting

 using sorting::quickSort;

 // prints the array after sorting

 void show(int arr[], int size) {

     for (int i = 0; i < size; i++) std::cout << arr[i] << "" "";

     std::cout << ""\n"";
"
12087,"uuid = ""0bca4576-84f4-4d90-8ffe-ffa030f20462""

 version = ""1.18.2""

 [[Scratch]]
"
65169,"Contributed By: [Aru Bhardwaj](https://github.com/arubhardwaj)

 """"""

 # ╔═╡ a1e773b3-ca82-4fa8-899d-e3ccdfdba234

 function SIR(du, u, p, t)
"
23626,"    {

         x[dk] = R * (k1 * cos(t) + l * k * cos(k1 * t / k));

         y[dk] = R * (k1 * sin(t) - l * k * sin(k1 * t / k));

     }
"
22452," * Heap-sort is a comparison-based sorting algorithm.

  * Heap-sort can be thought of as an improved selection sort:

  * like selection sort, heap sort divides its input into a sorted

  * and an unsorted region, and it iteratively shrinks the unsorted

  * region by extracting the largest element from it and inserting
"
18861,"// 1 - if this bit-array is greater.

 // assumes: bit-array lentgh must been smaller or equal to 64 bit

 //

 // Clone () : object

 // returns a copy of this bit-array

 //
"
23440,"        }

         abecedarium = t.toString();

     }
"
21292,"        std::cout << std::endl;

     }

     return 0;

 }
"
17613,"      const x = location[0] + neighbors[i][0]

       const y = location[1] + neighbors[i][1]

       if (x >= 0 && x < rgbData.length && y >= 0 && y < rgbData[0].length) {

         depthFirstFill(rgbData, [x, y], targetColor, replacementColor)

       }
"
19854,"}

 func TestDecrypt(t *testing.T) {

 	for _, s := range getTexts() {

 		keyWord := getRandomString()

 		encrypt, errEncrypt := Encrypt([]rune(s), keyWord)

 		if errEncrypt != nil &&
"
15553,"    def call(number)

       return number if number.is_a?(Integer) || number == number.to_i

       number.to_i + 1
"
22657,"        current_node = node

         path = []

         while current_node is not None:

             path.append((current_node.pos_y, current_node.pos_x))

             current_node = current_node.parent
"
22397,"      hm.put(i, String.valueOf(i));

     }

     for (i = 10; i < 16; i++) hm.put(i, String.valueOf((char) ('A' + i - 10)));

     int currbit;

     while (binary != 0) {
"
33900,"  attr_reader :max_size, :queue

   def empty?

     size == 0
"
27186,"   * @return n in base b2.

    */

   public static String base2base(String n, int b1, int b2) {

     // Declare variables: decimal value of n,

     // character of base b1, character of base b2,
"
30877,"/**

  * Function for testing the sum_of_digits() with

  * all the test cases.

  */

 void test() {

     // First test.
"
21709,"        [Test]

         public void GraphRemoveEdgeTest_Success()

         {

             var graph = new DirectedWeightedGraph<char>(10);

             var vertexA = graph.AddVertex('A');
"
74702,"		})

 	})

 	// Handle Queue Array

 	t.Run(""Test Queue Array"", func(t *testing.T) {

 		t.Run(""Test EnQueue"", func(t *testing.T) {
"
11734,"                else

                 {

                     invertedIndex[word].Add(sourceName);

                 }

             }
"
14844,"namespace DataStructures.LinkedList.DoublyLinkedList

 {

     /// <summary>

     ///     Generic node class for Doubly Linked List.

     /// </summary>
"
83649,"      output(currentNode.element)

       currentNode = currentNode.next

     }

   }

   // returns the constructor
"
17124,"    void testCase_2() {

         const int expectedOutput = 21;  ///< Expected output of this test

         log(""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"");

         log(""This is test case 2 : "");

         operations_on_datastructures::inorder_traversal_of_bst::Node *root =
"
28624,"puts ""Enter a value to be searched:""

 key = gets.chomp.to_i

 puts if ternary_search(0, arr.length - 1, key, arr) != nil

   ""Found at index #{ternary_search(0, arr.length - 1, key, arr)}""

 else

   ""Not found""
"
96427,"		}

 		if right < left {

 			s = append(s, "")"")

 			recursiveComputation(s, left, right+1)
"
14704,"   * @return {@code true} if given string has vowels, otherwise {@code false}

    */

   public static boolean hasVowels(String input) {

     if (input.matches(""[AEIOUaeiou]"")) {
"
29666,"		got := mp.Get(""test"")

 		if got != 10 {

 			t.Errorf(""Put: %v, Got: %v"", 10, got)

 		}
"
37189,"  }

   @Override

   public HeapElement getElement() throws EmptyHeapException {

     try {

       return extractMin();

     } catch (Exception e) {
"
25387,"        ///         d is the degree of <c>x</c>.

         ///         If there is already a node in <c>A[d]</c>, call it <c>y</c>, and make

         ///         <c>y</c> a child of <c>x</c>. (Swap <c>x</c> and <c>y</c> beforehand if

         ///         <c>x</c> is greater than <c>y</c>). Now that <c>x</c> has one more child,
"
46810,"        // Update the state with this chunk's hash

         a0 += A;

         b0 += B;

         c0 += C;

         d0 += D;
"
14204,"}

 void postOrderTraversal(struct node *node)

 {
"
33066,"                if (child->right != NULL)

                 {

                     (child->right)->par = grandParent;

                 }

                 child->right = grandParent;
"
23735,"ExchangeSort([1, 2, 3, 4, 5]) # returns [1, 2, 3, 4, 5]

 ExchangeSort(['5', '4', '3', '2', '1']) # returns ['1', '2', '3', '4', '5']

 ```

 Contributed By:- [Gervin Fung](https://github.com/GervinFung)

 """"""
"
32135,"  return 1 / 2 * baseLengthTriangle * heightTriangle * height

 */

 const volTriangularPrism = (baseLengthTriangle, heightTriangle, height) => {

   isNumber(baseLengthTriangle, 'BaseLengthTriangle')
"
29981,"}

 /**

  * @brief pop function
"
20297,"        public PairingNodeComparer(Sorting sortDirection, IComparer<T> comparer)

         {

             isMax = sortDirection == Sorting.Descending;
"
14673,"    // Swap the values

     buffRoot->val = toDelete->val;

     toDelete->val = val;

     // Checking for case 1
"
15334,"    scanf(""%d"", &E);

     createGraph(&G, V);

     for (int i = 0; i < E; i++)

     {

         printf(""\nEdge %d \nEnter source: "", i + 1);
"
43265,"            if (storestring)

                 pp->eqkid = (Tptr)instr;

             return;
"
26127,"                {

                     right.Read();

                 }

                 Merge(left, right, output, stripLength, Math.Min(stripLength, totalLength - stripLength), comparer);

                 var step = 2 * stripLength;

                 long rightStripStart;
"
18067,"        if isinstance(other, PokerHand):

             return self < other or self == other

         return NotImplemented
"
31841,"// returns a integer representation of the bit-array.

 // assumes: the bit-array length must been smaller or equal to 32 bit.

 //

 // ResetField() : void
"
11423,"}

 /**

  * @function performs insertion sort on the partition

  * @param {Array} array array to be sorted

  * @param {Number} left left index of partition

  * @param {Number} right right index of partition
"
22911,"        After that you can dereference it.

     */

     printf(""My age is %d\n"", *((int *)get_element_label(testObj1, ""age"")));
"
68422,"        /// </returns>

         public IList<(DateTime Time, TValue Value)> ToList()

             => timeline;

         /// <summary>

         ///     Convert the timeline to a dictionary.

         /// </summary>
"
31111,"            $lo = $mid + 1;

         }else{

             $hi = $mid;

         }
"
20943," * P x Q:

  *  	1	1	1

  *  	a	b	c
"
32046,"Requirements (pip):

     - matplotlib

     - numpy

 """"""

 from __future__ import annotations
"
31385,"# Eulerian Path is a path in graph that visits every edge exactly once.

 # Eulerian Circuit is an Eulerian Path which starts and ends on the same

 # vertex.
"
33559,"    {

         // If the input key matches the root's, check the following cases

         // termination condition

         if ((root->left == NULL) && (root->right == NULL))
"
76646,"  })

   it('should return true for single-element arrays', () => {

     expect(isSorted([1])).toBe(true)

   })
"
18572,"        /// <summary>

         /// Searches the Bloom Filter to determine if the item exists in the Bloom Filter.

         /// </summary>

         /// <param name=""item"">The item being searched for in the Bloom Filter.</param>
"
64657,"				}

 			}

 		}

 	}

 	colorsUsed := 0
"
14352," * [Problem 8](https://projecteuler.net/problem=8) solution

  * Problem Statement:

  * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
"
17838,"    >>> encode_to_b16('Hello World!')

     b'48656C6C6F20576F726C6421'

     >>> encode_to_b16('HELLO WORLD!')

     b'48454C4C4F20574F524C4421'
"
13515,"/*

 OUTPUT :

 Vertex   Distance 

 0            0

 1            4

 2            12
"
18122,"end

 # @param [Hash] parent

 # @param [Integer] dest

 # @return [Array] path
"
33887,"				}

 			} else if encrypted != tc.want {

 				t.Errorf(""Encrypt: %v, want: %v"", encrypted, tc.want)

 			}

 		})

 	}
"
84801,"deps = [""DiffResults"", ""Distributed"", ""FiniteDiff"", ""ForwardDiff""]

 git-tree-sha1 = ""50608f411a1e178e0129eab4110bd56efd08816f""

 uuid = ""d41bc354-129a-5804-8e4c-c37616107c6c""
"
29051,"	})

 	t.Run(""Testing(64bit) a = -4223372036854775809 and m = -4223372036854775808: "", func(t *testing.T) {

 		max := BitwiseMax(-4223372036854775809, -4223372036854775808, base64)
"
63319,"# => 9999
"
17649,"            var msb = uint.MaxValue / 2 + 1;

             var output = new StringBuilder();

             for (var i = 0; i < 32; i++)
"
29217,"      return ternarySearch(arr, key, ++mid2, end);

     }

     /* Search middle (1/3)rd part of the array */

     else {

       return ternarySearch(arr, key, mid1, mid2);

     }
"
12839,"        else:

             raise Exception(""change_component: indices out of bounds"")

     def minor(self, x: int, y: int) -> float:
"
58873,"   *

    * @param list, the initial list of points

    * @return leftSkyLine, the combination of first half's and second half's skyline
"
31753,"          replacement = temp;

           temp.right = temp.right.right;

         } else {

           Node parent2 = temp.right;

           Node child = temp.right.left;
"
10139,"    int vertices, edges, i, src, dst;

     printf(""Enter the number of vertices\n"");

     scanf(""%d"", &vertices);
"
17211,"git-tree-sha1 = ""2276ac65f1e236e0a6ea70baff3f62ad4c625345""

 uuid = ""d96e819e-fc66-5662-9728-84c9c7592b0a""

 version = ""0.12.2""

 [[Parsers]]

 deps = [""Dates""]
"
15369,"     */

     ns2::func(); // 会根据当前环境定义宏的不同来调用不同命名空间下的func()函数

     return 0;

 }
"
31680,"using string_search::rabin_karp;

 /** Main function */

 int main(void) {

     assert(rabin_karp(""helloWorld"", ""world"") == -1);

     assert(rabin_karp(""helloWorld"", ""World"") == 5);

     assert(rabin_karp(""this_is_c++"", ""c++"") == 8);
"
12281,"  private void dfs(Integer start, Integer curr, ArrayList<Integer> temp) {

     temp.add(curr);

     visited[curr] = true;

     for (int i = 0; i < nodes; i++) {
"
23402,"	for _, tv := range tests {

 		t.Run(strconv.Itoa(tv.n)+"":""+tv.result, func(t *testing.T) {

 			result := Spigot(tv.n)

 			if result != tv.result {

 				t.Errorf(""Bad result %d:%s"", tv.n, tv.result)
"
29670,"    RED='r',

     BLUE

 };

 int main() 

 {
"
44312,"  }

   String output = """";

   while (value > 0) {

     int remainder = value % base;

     value = value ~/ base;
"
18382,"        {

             if (comparer.Compare(a, b) <= 0)

             {

                 // a <= b <= c
"
23431,"    expect(() => selectionSort(null)).toThrow('Given input is not an array')

     expect(() => selectionSort()).toThrow('Given input is not an array')

   })

   it('expects to throw if one of the elements in the array is not a number', () => {
"
79508,"    for (int i = 0; i < len1; i++) {

       char c1 = word1.charAt(i);

       for (int j = 0; j < len2; j++) {

         char c2 = word2.charAt(j);

         // if last two chars equal
"
19124,"            // Pixel inside the Mandelbrot set should be black.

             Assert.AreEqual(bitmap.GetPixel(400, 300), Color.FromArgb(255, 0, 0, 0));

         }

         [Test]

         public static void TestColorCoded()
"
70265,"	(*root).Right = bl

 	(*root).Height = height(*root)

 	b.Height = height(b)
"
21077,"  expect(compareStringsOfDifferentLength).toThrowError()

 })

 test('should calculate difference between two strings', () => {

   expect(hammingDistance('a', 'a')).toBe(0)

 })
"
89081,"package DynamicProgramming;

 /** @author Varun Upadhyay (https://github.com/varunu28) */

 public class CoinChange {

   // Driver Program
"
92307,"        ///     Comparer to use when comparing key values.

         /// </summary>

         private readonly Comparer<TKey> comparer;
"
12345,"            theSameSymbolsInSlantCount = 0

         }

         return false

     }

 }
"
32232,"/**

  * Function for testing the lcm() functions with some assert statements.

  */

 void tests() {

     // First test on lcm(5,10) == 10
"
37344,"    sum = numbers[i] + numbers[j]

     if target < sum

       j -= 1

     elsif target > sum
"
27743,"    // [&] &表示默认以by reference传递外部所有变量

     auto f3 = [&]() {

         cout << ""id="" << id << endl;

         cout << ""id1="" << id1 << endl;

         cout << ""id2="" << id2 << endl;
"
76774,"                + s * H * h1 * K(i1, i2)

             )

             """"""

             # way 2
"
32418,"    // Seven nodes are created

     head1 = one;

     head2 = two;

     // head1 points to first node of first linked list

     // head2 points to first node of second linked list
"
12358,"   * Returns the value of the first argument raised to the power of the second argument

    *

    * @param a the base.
"
14681,"		{""Is 5 a power of 2? - NO"", 5, false},

 		{""Is 1023 a power of 2? - NO"", 1023, false},

 		{""Is 1024 a power of 2? - YES"", 1024, true},
"
45160,"}
"
65371," * @brief isOprnd function

  * @param ch : this is the element from the infix array

  * @returns 1 or 0 on exit

  */
"
24414,"﻿using System;

 using System.Linq;

 using Algorithms.Problems.NQueens;
"
31445,"package Maths;

 import java.util.Random;

 public class MinValue {

   /** Driver Code */

   public static void main(String[] args) {
"
18910,"    }

     /*free the memory */

     free(array);

     array = tmp;
"
24380,"    assert !tree.find(1) : ""Since 1 was not present so find deleting would do no change"";

     tree.add(30);

     tree.add(40);
"
19778,"    {

         fprintf(stderr, ""%s: Invalid input."", __func__);

         return out_quat;

     }

     out_quat.w = in_quat1->w * in_quat2->w - in_quat1->q1 * in_quat2->q1 -

                  in_quat1->q2 * in_quat2->q2 - in_quat1->q3 * in_quat2->q3;
"
13589,"                else

                 {

                     // two is greater

                     difference = two.Length - one.Length;

                     // fills up with 0's

                     for (var i = 0; i < difference; i++)
"
14078,"int main() {

     int size, temp;

     cout << ""\nEnter the number of elements : "";

     cin >> size;

     vector<int> arr;

     cout << ""\nEnter the unsorted elements : \n"";
"
72577,"     * @param word string to delete from trie

      */

     void delete_word(std::string word) {

         std::shared_ptr<Node> curr = root_node;
"
19127,"    CArray *resultArray = getCArray(total);

     for (i = 0; i < array->size; i++)

     {

         if (array->array[i] == value)

         {

             // Hopefully this won't overflow
"
28935,"            testObj.Compile(number);

             testObj <<= 3;

             // Assert

             Assert.AreEqual(expected, testObj.ToString());

         }
"
25544,"            // Dispose the created object 

             delete pNewBase; 

         } 

     private: 

         Base *pBase; 

 }; 
"
22688,"deploydocs(;

     repo=""github.com/TheAlgorithms/Julia"",

     devbranch=""main"",
"
32683,"        /// </summary>

         /// <param name=""matrix"">The matrix.</param>

         /// <param name=""vector"">The vector.</param>

         /// <returns>The product of the matrix and the vector, which is a vector.</returns>

         /// <exception cref=""ArgumentException"">Dimensions of matrix and vector do not match.</exception>

         public static double[] MultiplyVector(this double[,] matrix, double[] vector)
"
16977,"def create_state_space_tree(

     sequence: list[int | str],

     current_sequence: list[int | str],

     index: int,

     index_used: list[int],

 ) -> None:
"
36334,"            for x in range(self.width):

                 greyscale = int(self.get_greyscale(*self.input_img[y][x]))

                 if self.threshold > greyscale + self.error_table[y][x]:

                     self.output_img[y][x] = (0, 0, 0)

                     current_error = greyscale + self.error_table[x][y]
"
15484,"{

     *(int *)c = *(int *)a < *(int *)b ? *(int *)a : *(int *)b;

 }
"
25744,"        }

         /// initially all have depth are equals to zero

         depth.assign(n, 0);

         maxElement.assign(n, 0);

         minElement.assign(n, 0);

         for (uint64_t i = 0; i < n; i++) {
"
33897,"    ]

     return new_matrix

 def matrix_addition(matrix_a: list, matrix_b: list):
"
23234,"        @test complete_pack!(10, [1,3,11], [20,5,80], dp) == 200

     end

     @testset ""Knapsack: GaZeroOnePack!"" begin

         dp = zeros(Int, 30)

         @test zero_one_pack!(20, [1,3,11], [2,5,30]) == 37
"
31182,"     * i + j = N   where both i and j should be abundant

      * hence we can simply check for j = N - i as we loop through i

      */

     for (unsigned long i = get_next_abundant(1); i <= (N >> 1);
"
15074,"    Node cycleNode = findCyclicNode(linkedList.head);

     expect(cycleNode, equals(allNodes[randomIndex]));

   });
"
15059,"  equalsExactly (vector) {

     return this.x === vector.x && this.y === vector.y

   }
"
10814,"*/

 int main()

 {

     int n = 0; /* for user input */

     printf(""\t\tPrim factoriziation\n\n"");

     printf(""positive integer (> 1) ? "");
"
52597,"  queue.add(startNode);

   while (queue.isNotEmpty) {

     int node = queue.removeFirst();

     answer.add(node);
"
26453,"}

 export { octalToDecimal }

 // > octalToDecimal(56)

 // 46

 // > octalToDecimal(2365)
"
12341,"import { trap } from '../TrappingRainWater'

 describe('TrappingRainWater', () => {

   it('expects 6 units of rain water are being trapped', () => {

     expect(trap([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1])).toBe(6)

   })

   it('expects 9 units of rain water are being trapped', () => {
"
21777,"        }

         return true;

     }

     public static void main(String[] args) throws IOException {
"
29606,"        /// <summary>

         ///     Return the longest prefix suffix values for pattern.

         /// </summary>

         /// <param name=""pat"">pattern to seek.</param>

         /// <returns>The longest prefix suffix values for <paramref name=""pat"" />.</returns>
"
16807,"}

 void create()

 {

     head = NULL;

     tail = NULL;

 }
"
22204,"      [1, 0, 1, 1, 1, 0, 0],

       [1, 0, 0, 0, 0, 0, 0],

       [1, 1, 1, 1, 1, 1, 1]

     ])
"
11718,"        

         return fact

     end

     
"
27896,"    }

   }

   return 0 // return 0 if found nothing

 }
"
72794,"// Creates a unidirectional graph

 void addEdge(struct Graph *graph, int src, int dest)

 {

     // Add edge from src to dest

     struct node *newNode = createNode(dest);

     newNode->next = graph->adjLists[src];
"
24456,"        /// <summary>

         /// Queries the count of the given item that have been inserted into the sketch.

         /// </summary>
"
27875,"{ 

     // static variable 

     static int count = 0; 

     cout << count << "" ""; 

     // value is updated and 

     // will be carried to next 
"
21513,"                p=j;

         }

         char* t=array[i];

         array[i]=array[p];

         array[p]=t;

     }
"
15030,"  }

   // index-swapping helper method

   swap (idx1, idx2, heap) {

     const temp = heap[idx1]

     heap[idx1] = heap[idx2]
"
10151,"        System.out.println(cq.isEmpty());

         cq.enQueue(6);

         cq.enQueue(7);

         cq.enQueue(8);

         System.out.println(cq.peek());
"
26939,"    cout << ""此时2个shared_ptr指向同一个资源"" << endl;

     ptr2 = std::move(ptr1);

     if (!ptr1 && ptr2) {      // 调用的是bool重载操作符

         cout << ""ptr1 move to ptr2"" << endl;

         cout << ""use count of ptr1 is now "" << ptr1.use_count() << endl;

         cout << ""use count of ptr2 is now "" << ptr2.use_count() << endl;
"
12538,"        Check if linked list is empty.

         >>> linked_list = LinkedList()

         >>> linked_list.is_empty()

         True

         >>> linked_list.insert_head(""first"")
"
22873,"            <input type=""text"" name=""username"" required=""required"">

         </div>

         <div class=""form-group"">

             <input type=""password"" name=""password"" required=""required"">

         </div>
"
85330,"/**

  * @file

  * @brief Implementation of the
"
35198,"}

 func BenchmarkCount(b *testing.B) {

 	benchmarkFramework(b, Count)
"
14408,"        /// <returns>Node with smallest value.</returns>

         private BinarySearchTreeNode<TKey> GetMin(BinarySearchTreeNode<TKey> node)

         {

             if (node.Left is null)

             {
"
12101,"double **mat_mul(double **A, double **B, double **OUT, int R1, int C1, int R2,

                  int C2)

 {

     if (C1 != R2)
"
10488," * * `w12.csv`: trained SOM U-matrix

  */

 void test1()

 {

     int j, N = 300;
"
15639,"uuid = ""ccf2f8ad-2431-5c83-bf29-c5338b663b6a""

 version = ""2.0.1""

 [[PlotUtils]]

 deps = [""ColorSchemes"", ""Colors"", ""Dates"", ""Printf"", ""Random"", ""Reexport"", ""Statistics""]

 git-tree-sha1 = ""501c20a63a34ac1d015d5304da0e645f42d91c9f""

 uuid = ""995b91a9-d308-5afd-9ec6-746e21dbc043""
"
52050,"    var start = count / 2 - 1

     var end   = count - 1

     while (start >= 0) {

       sift(start, count)

       start -= 1

     }
"
16077,"            {

                 System.out.print(board[r][d]);

                 System.out.print("" "");

             }
"
86483,"            var isequal = rounded.IsEqual(inMatCopy);

             // Assert

             Assert.IsTrue(isequal);

         }

         [Test]

         public static void NonSquaredMatrixPseudoInverseMatrixWorks()
"
17266,"package rot13

 import (

 	""testing""
"
31968,"                $swapped = true;

             }

         }

     }

     while($swapped);

     return $input;
"
20872,"    >>> search_in_a_sorted_matrix(

     ...     [[2.1, 5, 7], [4, 8, 13], [9, 11, 15], [12, 17, 20]], 3, 3, 2.2)

     Key 2.2 not found
"
12526,"    [<DataRow(2, 4, 16)>]

     [<DataRow(2, 8, 256)>]

     [<DataRow(2, 16, 65536)>]

     [<DataRow(3, 5, 243)>]

     [<DataRow(5, 3, 125)>]

     [<DataRow(10, 4, 10000)>]
"
30712,"struct TreeNode *newNode(int item)

 {

     struct TreeNode *node = (struct TreeNode *)malloc(sizeof(struct TreeNode));

     node->val = item;
"
32637,"    >>> sum_of_digits_recursion(123)

     6

     >>> sum_of_digits_recursion(-123)

     6

     >>> sum_of_digits_recursion(0)
"
26574,"        /// <summary>

         ///     Returns a node with the largest key.

         /// </summary>

         /// <returns>The node if possible, a default value otherwise.</returns>

         public BinarySearchTreeNode<TKey>? GetMax()
"
27040,"        delete[] edges;

     }

     // Adds the given edge to the graph

     void addEdge(int src, int dst, int weight) {

         this->edges[src][dst] = weight;
"
90505,"      const x = currentLocation[0] + neighbors[i][0]

       const y = currentLocation[1] + neighbors[i][1]

       if (x >= 0 && x < rgbData.length && y >= 0 && y < rgbData[0].length) {

         queue.push([x, y])
"
12842,"                    return;

                 }

                 PostOrderWalk(node.Left);

                 PostOrderWalk(node.Right);

                 result.Add(node.Key);
"
26646,"  }

   return result

 }
"
27690,"        minIndex = this.heap[2 * k] < this.heap[k] ? 2 * k : k;

       } else {

         if (this.heap[k] > this.heap[2 * k] || this.heap[k] > this.heap[2 * k + 1]) {

           minIndex = this.heap[2 * k] < this.heap[2 * k + 1] ? 2 * k : 2 * k + 1;

         } else {

           minIndex = k;
"
85775,"            }

         }

         return det;

     }

     //Driver Method
"
25029,"        /// </summary>

         /// <param name=""x"">Given point.</param>

         /// <param name=""error"">Last term error value.</param>

         /// <returns>Approximated value of the function in the given point.</returns>

         /// <exception cref=""ArgumentException"">Error value is not on interval (0.0; 1.0).</exception>
"
51567,"    expect(levenshteinDistance('abc', '')).toBe(3)

     expect(levenshteinDistance('', 'abc')).toBe(3)

     // Should just add I to the beginning.

     expect(levenshteinDistance('igloo', 'gloo')).toBe(1)

     // Should just substitute i with o, m with g and insert e at end

     expect(levenshteinDistance('firm', 'forge')).toBe(3)
"
16780,"        }

     }

 }
"
18461,"﻿using NUnit.Framework;

 namespace Algorithms.Tests.Helpers

 {

     internal static class RandomHelper

     {
"
21122,"//  -> 5: [7, 5]   (dist:2)

 //  -> 6: [7, 5, 4, 3, 6]   (dist:5)

 //  -> 7: [7]   (dist:1)

 //  -> 8: [7, 5, 4, 8]   (dist:4)
"
12403,"        result = Matrix(self.row, self.column)

         for r in range(self.row):

             for c in range(self.column):

                 result[r, c] = self[r, c] + another[r, c]
"
40894,"	for i := 0; i < b.N; i++ {

 		IsPowOfTwoUseLog(1024)

 	}

 }
"
31117,"        /// <summary>

         ///  Initializes a new instance of the <see cref=""RedBlackTreeNode{TKey}""/> class.

         /// </summary>

         /// <param name=""key"">Key value for node.</param>

         /// <param name=""parent"">Parent of node.</param>
"
24760,"    if debug == 1:

         collection = [10, 30, 40, 45, 50, 66, 77, 93]

         try:

             __assert_sorted(collection)

         except ValueError:

             sys.exit(""Sequence must be ascending sorted to apply interpolation search"")
"
16603,"                tree.Add(elem);

                 tree.Count.Should().Be(elem);

                 tree.Contains(elem).Should().BeTrue();
"
27270,"        Exception: UNDERFLOW

         >>> cq.enqueue(""A"").enqueue(""B"").dequeue()

         'A'
"
30818,"    assert isPythagTriple(5, 12, 13);

     assert isPythagTriple(6, 8, 10);

     assert !isPythagTriple(10, 20, 30);

     assert !isPythagTriple(6, 8, 100);

     assert !isPythagTriple(-1, -1, 1);
"
62487,"/**

  * \file

  * \brief [Problem 7](https://projecteuler.net/problem=7) solution.
"
16470," * @author [Himani Negi](https://github.com/Himani2000)

  * @author [David Leal](https://github.com/Panquesito7)

  *

  */

 #include <iostream>
"
64332,"import 'dart:collection';

 import 'package:test/test.dart';

 /// Implementation of Breadth First Search

 /// https://en.wikipedia.org/wiki/Breadth-first_search
"
16764,"                    .Should()

                     .Be(new DateTime(1995, 1, 1));

                 times[1]
"
12333,"            cout << ""Derived1 created"" << endl; 

         } 

         Derived1(const Derived1& rhs) 

         { 

             cout << ""Derived1 created by deep copy"" << endl; 
"
44715,"    } else {

       // if the last chars match, then remove it from both strings and recur

       if (original.charAt(original.length() - 1) == reverse.charAt(reverse.length() - 1)) {

         String bestSubResult =

             recursiveLPS(

                 original.substring(0, original.length() - 1),
"
15829,"  

 /*  

  *  ʱһ루غ׺++  

  */  
"
12814,"            graph.AddEdge(vertex5, vertex6, 1);

             var dfsSearcher = new BreadthFirstSearch<int>();

             long countOfVisitedVerticesPerFirstGraph = 0;
"
27355,"{

     public static class BinomialCoefficientTests

     {

         [TestCase(4, 2, 6)]
"
15738,"package Maths;

 public class FactorialRecursion {

   /* Driver Code */
"
12152,"    fast = slow = head;

     while (fast && fast->next)

     {

         slow = slow->next;

         fast = fast->next->next;
"
10336,"    std::cout << ""\nThe result is: "" << dynamic_programming::LIS(a, n)

               << std::endl;

     test();  // run self-test implementations
"
80746,"    List<String> unsortedStrings =

         Stream.of(""c"", ""a"", ""e"", ""b"", ""d"", ""a"", ""f"", ""g"", ""c"").collect(toList());

     System.out.println(""Before Sorting:"");
"
23285,"        char msg10[60] = ""Player 2 - Position the size boat 2 (4/4)"";

         char msg11[60] = ""Player 2 - Position the size boat 3 (1/2)"";

         char msg12[60] = ""Player 2 - Position the size boat 3 (2/2)"";
"
14031,"     * 

      * @param rootNode Root node of the tree.

      * @return The most promising node according to UCT.

      */

     public Node getPromisingNode(Node rootNode) {
"
30989,"  while (oct != 0) {

     dec_val = dec_val + ((oct % 10) * pow(8, i));

     i++;

     oct = oct ~/ 10;

   }
"
16362,"                }

             }

             return lps;

         }

     }

 }
"
61076,"        - Peek (return min without deleting it): O(1)

     Example:

     Create a random permutation of 30 integers to be inserted and 19 of them deleted
"
27489,"{

     test();

     return 0;

 }
"
30487,"		t.Run(test.description, func(t *testing.T) {

 			r1, r2 := BreadthFirstSearch(test.start, test.end,

 				test.nodes, test.edges)

 			if r1 != test.expected1 || r2 != test.expected2 {
"
20389,"    int *p = (int *)malloc(sizeof(int));

     *p = 10;

     cout<<*p<<endl;

 #ifndef DEBUG

     int error=1;

 #endif
"
12658,"      for (const j of getValues) {

         conc += j + ' '

       }

       // print the vertex and its adjacency list

       output(i + ' -> ' + conc)

     }
"
23614,"    return romanToInt;

 }"
23357,"	/// Test 3

 	std::cout << ""Case 3: "" << std::endl;

 	start_pos = 2;
"
10988,"            i += 1

     _msd_radix_sort_inplace(list_of_ints, bit_position, begin_index, i)

     _msd_radix_sort_inplace(list_of_ints, bit_position, i, end_index)

 if __name__ == ""__main__"":

     import doctest

     doctest.testmod()
"
22205,"    ++list1;

     cout << ""After ++list1: "" << endl;

     list1.display();
"
23279,"      if (!connectedGroups[captain[edge.from]].contains(edge.to)

           && !connectedGroups[captain[edge.to]].contains(edge.from)) {

         // merge sets of the captains of each point connected by the edge
"
33949,"        if (l1)

         {

             val1 = l1->val;
"
23602,"    assert factorial(5) == 120;

   }

   /**

    * Recursive FactorialRecursion Method
"
27384,"    location[1] < 0 ||

     location[1] >= rgbData[0].length) {

     throw new Error('location should point to a pixel within the rgbData')

   }
"
12265,"    print(f""{solution() = }"")
"
30759,"		int s=0;

 		//storing the number n in a temporary variable tmp

 		int tmp=n;

 		//Krishnamurthy numbers are positive

 		if(n<=0)

 		{
"
21130,"        return result(""power"", float(round(abs(voltage * current), 2)))

     else:

         raise ValueError(""Exactly one argument must be 0"")
"
24597,"		})

 	}

 }

 func TestRecursivePower(t *testing.T) {

 	for _, tc := range testCases {
"
16038,"            return result;

             void InOrderWalk(RedBlackTreeNode<TKey>? node)

             {

                 if (node is null)

                 {

                     return;
"
18438,"			push(inf[i]);				// push the scanned operator

 		}

 	}
"
22682,"    return (top + 1 == maxSize);

   }

   /**

    * Deletes everything in the Stack

    *
"
31575,"        public static void IndexerSetTest()

         {

             var eventDate = new DateTime(2000, 1, 1);
"
10087,"    >>> twos_complement(-1)

     '0b11'

     >>> twos_complement(-5)
"
26499,"    System.out.print(""Octal Input: "");

     String inputOctal = sc.nextLine();

     int result = convertOctalToDecimal(inputOctal);

     if (result != -1) System.out.println(""Result convertOctalToDecimal : "" + result);
"
11656,"   * @param localRoot The local root of the binary tree

    */

   public void inOrder(Node localRoot) {

     if (localRoot != null) {

       inOrder(localRoot.left);
"
11908,"                while (true)

                 {

                     var next = previous + current;

                     previous = current;

                     current = next;
"
49268,"    True

     >>> contains_origin(-175, 41, -421, -714, 574, -645)

     False
"
19052,"		s      string

 		result string

 	}{

 		{""olokazakabba"", ""kazak""},

 		{""abaacakkkkk"", ""kkkkk""},

 		{""qqqq C++ groovy mom pooop"", ""pooop""},
"
19995,"using System.Collections.Generic;

 using System.Linq;

 using Algorithms.Encoders;
"
30778,"    std::cout << ""Input Length: "" << double_length << std::endl;

     std::cout << ""Expected Output: "" << double_expected << std::endl;

     std::cout << ""Output: "" << double_area << std::endl;

     assert(double_area == double_expected);

     std::cout << ""TEST PASSED"" << std::endl << std::endl;

     // 9th test
"
21331,"end

 private

 def p

   @p ||= random_prime_number

 end
"
18438,"  }

   public void insert(int value) {

     if (value < data) {

       if (left == null) {

         left = new Node(value);
"
11316,"/**

  * Breadth-first search is an algorithm for traversing a graph.

  *

  * It discovers all nodes reachable from the starting position by exploring all of the neighbor nodes at the present

  * depth prior to moving on to the nodes at the next depth level.

  *
"
32744,"// https://en.wikipedia.org/wiki/Binary_search_algorithm

 // Search the integer inside the sorted integers array using Binary Search Algorithm

 export const BinarySearch = (intArr, searchQuery) => {
"
29547,"      return Y;

     }

     friend float Distance(Point &a,Point &b);

   private:
"
79736,"        counter[0]++;

         std::cout << ""data["" << pointer->key << ""]:"";

         if (pointer->key == key)
"
32196,"  for (let i = 0; i < strLen; i++) {

     rest = Object.create(arr)

     picked = rest.splice(i, 1)
"
20421,"                               P[k].x * (P[i].y - P[j].y)));

                 C.y = 0.5 * ((P[i].x * (P[j].x * P[j].x + P[j].y * P[j].y -

                                         P[k].x * P[k].x - P[k].y * P[k].y) +

                               P[j].x * (P[k].x * P[k].x + P[k].y * P[k].y -
"
66332,"        next_prime_gt = (

             next_prime(value % self.size_table)

             if not check_prime(value % self.size_table)

             else value % self.size_table
"
29905,"        if tail == nil {

             tail = head

         }

     }

     

     public mutating func append(_ value: Value) {
"
17751," * 1 2

  * 1 3

  * 2 4

  * which can be represented as

  *   1

  *  / \
"
12099,"            Action action = () => node.Get(-1);

             action.Should().Throw<ArgumentException>();

         }

         [Test]

         public void Get_GetHighIndex_ThrowArgumentException()

         {
"
10294,"            var rgb = RgbHsvConversion.HsvToRgb(hue, saturation, value);

             rgb.Item1.Should().Be(expectedRed);

             rgb.Item2.Should().Be(exptectedGreen);

             rgb.Item3.Should().Be(exptectedBlue);

         }

         // Parameters of test-cases for TestRGBOutput reversed
"
21003,"                }

                 else

                 {

                     // if the singular value is zero, then the basis vector in u should be zeroed out
"
28928," * three properties: left child is less than root node, right child is grater than root node, both

  * left and right childs must themselves be a BST.

  *

  * @author [Lakhan Nad](https://github.com/Lakhan-Nad)
"
29727,"            Compile(sequence);

         }

         /// <summary>

         ///     Initializes a new instance of the <see cref=""BitArray"" /> class.

         ///     Setups the bit-array with the input array.

         /// </summary>
"
11740,"import { LocalMaximomPoint } from '../LocalMaximomPoint'

 describe('LocalMaximumPoint tests', () => {

   it('test boundary maximum points - last element', () => {

     const Array = [1, 2, 3, 4, 5, 6, 12]

     expect(LocalMaximomPoint(Array)).toEqual(6)

   })
"
26226,"    return dateOb

   }

   isLeapYear (year) {

     if (((year % 400) === 0) || (((year % 100) !== 0) && ((year % 4) === 0))) return true
"
20229,"    :param item: item to insert

     :param lo: lowest index to consider (as in sorted_collection[lo:hi])

     :param hi: past the highest index to consider (as in sorted_collection[lo:hi])

     Examples:
"
10723,"    :return:  Integer Value

     >>> binomial_coefficient(4, 2)

     6

     """"""
"
68788,"          equals(

               ""[0]([]:[[1]([a]:[]), [1]([b]:[]), [1]([c]:[]), [1]([]:[[2]([]:[]), [2]([]:[]), [2]([]:[]), [2]([d, e, f, g, h]:[])])])""));

     });

     test(
"
10491,"    } else if (hueSection > 2 && hueSection <= 3) {

       red = convertToInt(matchValue);

       green = convertToInt(chroma + matchValue);

       blue = convertToInt(secondLargestComponent + matchValue);
"
21753,"    {

         /// <summary>

         ///     Initializes a new instance of the <see cref=""FHeapNode{T}"" /> class.

         /// </summary>

         /// <param name=""key"">An item in the Fibonacci heap.</param>
"
10268,"    expect(bogoSort([5, 6, 7, 8, 1, 2, 12, 14])).toEqual([1, 2, 5, 6, 7, 8, 12, 14])

   })

 })
"
20112,"//     print(""Element found on index: \(searchIndex)"")

 // }

 // else {

 // print(""Element not found"")
"
18139,"            R.append(P[i])

             i += 1

     if i < len(P):

         R.extend(P[i:])

     else:

         R.extend(Q[j:])
"
32762,"    {

         writeContentOfTreeToFile(

             node->left,

             file);  // calls `writeContentOfTreeToFile` for left sub tree

         fprintf(file, ""%-5lu \t %-9lu \t %s \n"", i++, node->frequency,
"
31466,"    public class CocktailSorter<T> : IComparisonSorter<T>

     {

         /// <summary>
"
79653,"                        self.weight[j] = (

                             self.weight[j]

                             + self.learning_rate

                             * (self.target[i] - y)

                             * self.sample[i][j]

                         )
"
51358,"deps = [""LinearAlgebra"", ""SparseArrays"", ""SuiteSparse""]

 git-tree-sha1 = ""4dd403333bcf0909341cfe57ec115152f937d7d8""

 uuid = ""90014a1f-27ba-587c-ab20-58faa44d9150""

 version = ""0.11.1""

 [[ParameterizedFunctions]]

 deps = [""DataStructures"", ""DiffEqBase"", ""DocStringExtensions"", ""Latexify"", ""LinearAlgebra"", ""ModelingToolkit"", ""Reexport"", ""SciMLBase""]
"
25842,"# Thus, the effective run-time complexity is linear.

 #

 # Space Complexity: O(n), in length n of the string. We need O(n) additional

 # space to store the filtered string and the reversed string.
"
23634,"  return binary if d == 0

   return 1.to_s if d == 1

   decimal_to_binary(d / 2).to_s + binary
"
28521,"package Ciphers;

 import java.util.Objects;

 /**

  * Columnar Transposition Cipher Encryption and Decryption.
"
24800,"      } else {

         ans = ans + num1;

       }

     } else {
"
58588,"  }

   print(""MAX $max"");

 }

 bool isPanlindrome(String word) {

   for (int i = 0; i < word.length ~/ 2; i++) {

     if (word[i] != word[word.length - i - 1]) return false;
"
61964,"            if (root != NULL)

             {

                 scanf(""%d"", &data);

                 root = delete (root, data);
"
23394,"        // If there is any problem in opening file

         if (!out_file.is_open()) {

             std::cerr << ""ERROR ("" << __func__ << "") : "";

             std::cerr << ""Unable to open file: "" << file_name << std::endl;

             std::exit(EXIT_FAILURE);
"
99797,"                    .Should()

                     .Be(2);

                 times[0]
"
46505,"    endIndex--

   }

   return array

 }

 /**

  * Returns the index of the maximum number of a subarray in a given array
"
13444,"    int parentIndex = (currentIndex - 1) ~/ 2;

     while (

         parentIndex >= 0 && this.heap[parentIndex] > this.heap[currentIndex]) {

       _swap(parentIndex, currentIndex, this.heap);
"
33483," */

 export const isEven = (number) => {

   return number % 2 === 0

 }
"
29688,"    } else if ((char > 77 && char <= 90) || (char > 109 && char <= 122)) {

       response.push(String.fromCharCode(str.charCodeAt(i) - 13))

     } else {

       response.push(String.fromCharCode(str.charCodeAt(i) + 13))

     }

   }
"
12669,"      else

         puts ""Provide the required #{n} elements properly!""

       end
"
28158,"        [TestCase(""00001111222233334444555566667"",      (uint)0x12345678)]

         [TestCase(""000011112222333344445555666677"",     (uint)0x12345678)]

         [TestCase(""0000111122223333444455556666777"",    (uint)0x12345678)]

         // The plain text will be padded to fill the size of block (16 bytes), so the encoded message should be aligned with the rule

         // (text.Length % 16 == 0)

         public static void TestEncodedMessageSize(string TestCase, uint Key)
"
31078,"    )
"
12983,"    }

   }

   void _splitItemsBetweenChildren() {

     _children.addAll([

       _newUpperLeft, // _upperLeftIndex = 0

       _newUpperRight, // _upperRightIndex = 1
"
12580,"			t.Errorf(""Key '1' exists but couldn't be retrieved"")

 		}

 	})
"
31865,"Find the product of the coefficients, a and b, for the quadratic expression that

 produces the maximum number of primes for consecutive values of n, starting with

 n = 0.

 """"""

 import math

 def is_prime(k: int) -> bool:
"
15539,"            sorting::random_pivot_quick_sort::generateUnsortedArray<inputSize>(

                 1, 10000);

         int64_t start = 0;

         int64_t end = unsorted_arr.size() - 1;  // length - 1

         log(""Running algorithm..."");
"
29496,"        # Corner Case

         if len(inverseC[0]) <= 1:

             return inverseC[0]

         # Inverse DFT

         next_ncol = 2

         while next_ncol <= self.C_max_length:
"
16533,"        first->succ() = t;

     }

 }

 /**
"
31524,"    } else {

         cout << n << "" is not an armstrong number"";

     }

     return 0;

 }
"
49666,"// 	Queue Data Structure : https://www.geeksforgeeks.org/queue-data-structure/

 //  Queue (abstract data type) : https://en.wikipedia.org/wiki/Queue_(abstract_data_type)

 // author [Milad](https://github.com/miraddo)

 // see queuelinkedlist.go, queuelinkedlistwithlist.go, queue_test.go
"
99365,"#

 # Approach 1: Hash map

 #

 # Time Complexity: O(n)
"
22306,"	} else if array[mid] < target {

 		return Binary(array, target, mid+1, highIndex)

 	} else {
"
27212,"                new double[,] { { 1, 1 }, { 1, 1 }, { 1, 1 } },

                 new double[,] { { 0, 1 }, { 1, 2 }, { 2, 3 } },

             },

             new object[]

             {

                 new double[,] { { -1, -2, 0 }, { 2, -3, 2 }, { 3, 4, 1 } },
"
32273,"      print printNode.value

     end

     print ']'
"
84488," *    <p><i>Sift the Two's and Sift the Three's:</i></p>

  *    <p><i>The Sieve of Eratosthenes.</i></p>

  *    <p><i>When the multiples sublime,</i></p>

  *    <p><i>The numbers that remain are Prime.</i></p>

  *

  * @see <a href=""https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"">Wiki</a>
"
15876,"            tmp = tmp->next;

         }

         // first position case

         if (pos == 1)
"
25722,"            // Assert

             Assert.AreEqual(1, peeked);

             Assert.IsFalse(q.IsEmpty(), ""Queue is empty"");

             Assert.IsFalse(q.IsFull(), ""Queue is full"");
"
59361,"// Complexity O(n).

 func (cl *Cyclic) Rotate(places int) {

 	if cl.Size > 0 {
"
32629,"require(caret)

 require(catboost)

 tt <- titanic::titanic_train[complete.cases(titanic::titanic_train),]

 data <- as.data.frame(as.matrix(tt), stringsAsFactors = TRUE)
"
13114,"    assert min(array, 0, array.length - 1) == Arrays.stream(array).min().getAsInt();

     assert min(array, array.length) == Arrays.stream(array).min().getAsInt();

   }

   /**

    * Get min of array using divide and conquer algorithm
"
24421,"    long double complex *s0 = NULL;

     unsigned int degree = 0;

     unsigned int n, i;

     if (argc < 2)

     {

         printf(
"
26669,"/**

  * @brief Self-test implementations

  * @returns void

  */

 static void test() {

     assert(lower(""abcd"").compare(""abcd"") == 0);
"
33460,"            // Act

             sorter.Sort(testArray, intComparer);

             Array.Sort(correctArray, intComparer);

             // Assert

             Assert.AreEqual(testArray, correctArray);
"
29343,"    int len_needle = strlen(needle);

     int len_haystack = strlen(haystack);

     if (!len_needle)

         return 0;

     int overlap[len_needle];

     fill_overlap(needle, len_needle, overlap);
"
27924,"    if n.instance_of? Integer

       if n == array.size

         puts ""The average mean of the following elements #{array} is #{array.sum / array.size}.""

       else
"
10042,"# Output: false

 #

 # Constraints:

 # 1 <= s.length <= 105

 # s consists of lowercase English letters.
"
68562,"    srand(time(NULL));

     if (!coeffs || !s0)

     {

         perror(""Unable to allocate memory!"");

         if (coeffs)

             free(coeffs);
"
66456,"/*

  * String Search

  */
"
87517,"    }

 }
"
15138,"    l5UnamedType l5Equivalent = l5UnamedType();

     std::cout << l5Equivalent(b) << std::endl; // Output: I am a B!

 //    std::cout << l5Equivalent(a) << std::endl; // Error: no member named 'serialize' in 'A'.

 }
"
14312,"	""reflect""

 	""testing""

 )

 func TestSieve(t *testing.T) {

 	firstTenPrimes := [10]int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29}

 	t.Run(""First 10 primes test"", func(t *testing.T) {
"
26725,"{    public:

          R(int r1, int r2){R1=r1;R2=r2;}

          //constֳԱغ
"
26438,"        /// <returns>The tuple of RGB-components.</returns>

         public static (byte red, byte green, byte blue) HsvToRgb(

             double hue,

             double saturation,
"
25954,"    >>> surface_area_sphere(1)

     12.566370614359172

     >>> surface_area_sphere(-1)
"
33835,"			!errors.Is(errDecrypt, &KeyMissingError{}) {

 			t.Error(""Unexpected error "", errDecrypt)

 		}
"
22079,"    if (this.checkEmpty()) {

       this.front += 1

       this.rear += 1
"
11077,"            29443, 29453, 29473, 29483, 29501, 29527, 29531, 29537, 29567, 29569, 29573, 29581, 29587, 29599, 29611,

             29629, 29633, 29641, 29663, 29669, 29671, 29683, 29717, 29723, 29741, 29753, 29759, 29761, 29789, 29803,

             29819, 29833, 29837, 29851, 29863, 29867, 29873, 29879, 29881, 29917, 29921, 29927, 29947, 29959, 29983,
"
63215,"    for (n = 0; list; list = list->next) n++;

     return n;

 }

 /* Convert list to array */

 void **List_toArray(L list)
"
21330,"/*

  * Author: Surendra Kumar

  * DFS Algorithm implementation in JavaScript
"
27784,"    }

   } else {

     return NaN

   }

 }

 /**
"
15747,"        /// </summary>

         /// <param name=""sibling"">Sibling of removed node.</param>

         private void RemoveCase4(RedBlackTreeNode<TKey> sibling)

         {

             sibling.Color = NodeColor.Red;
"
15249,"	        

 	        for(int i=0;i<nums.length;i++)

 	        {

 	            hm.put(nums[i],i);
"
47876,"                start = mid

             mid = start + (end - start) / 2.0

         return mid

 def f(x: float) -> float:

     return x ** 3 - 2 * x - 5

 if __name__ == ""__main__"":
"
31656,"	Left, Right *Node

 }

 // NewTree create a new AVL tree
"
17447,"def fx_derivative(x: float) -> float:

     return 2 * x

 def get_initial_point(a: float) -> float:
"
30809,"                }

                 else

                 {
"
21818," * @param out std::ostream object to write to

  * @param arr array to write

  */

 template <typename T>

 std::ostream &operator<<(std::ostream &out, const std::vector<T> &arr) {

     for (size_t i = 0; i < arr.size(); ++i) {
"
19365,"﻿using Algorithms.Other;

 using NUnit.Framework;

 using NUnit.Framework.Internal;

 namespace Algorithms.Tests.Other

 {
"
12375,"/**

  * @brief Main function

  * @returns 0 on exit

  */

 int main() {
"
26939,"  public static void main(String[] args) {

     Scanner sc = new Scanner(System.in);

     System.out.println(""Enter binary number:"");

     int binary = sc.nextInt();

     String hex = binToHex(binary);
"
54812," * @param [in,out] array array to sort

  * @param [in] LEN length of the array

  */
"
28950," * @brief Function to join

  * @param [in,out] p array to join in

  * @param x value or index to join to
"
18170,"test.set<-diamonds[ind==2,]

 xgb.train<-bind_cols(select_if(train.set,is.numeric),model.matrix(~cut-1,train.set) %>% as.tibble(),model.matrix(~color-1,train.set) %>% as.tibble(),model.matrix(~clarity-1,train.set) %>% as.tibble())

 xgboost.train<-xgb.DMatrix(data = as.matrix(select(xgb.train,-price)),label=xgb.train$price)

 xgb.test<-bind_cols(select_if(test.set,is.numeric),model.matrix(~cut-1,test.set) %>% as.tibble(),model.matrix(~color-1,test.set) %>% as.tibble(),model.matrix(~clarity-1,test.set) %>% as.tibble())
"
24771,"    """"""

     for insert_index, insert_value in enumerate(collection[1:]):

         temp_index = insert_index

         while insert_index >= 0 and insert_value < collection[insert_index]:
"
14423,"/**

  * @brief Remove item from tree

  * @param item item to remove
"
29615,"            return -1;

         if (arr[mid] > x)

             // If element is smaller than middle

             r = mid - 1;

         else

             // Else element is in right subarray
"
37554,"        return 1;

     int countUpper = 0, i;

     for (i = 0; i < len; i++)

     {
"
33835,"			for i := range f[current] {

 				if p[f[current][i]] == GetWord(pos-len(p[f[current][i]])+1, pos, t) { //check for word match

 					newOccurrences := IntArrayCapUp(occurrences[f[current][i]])

 					occurrences[f[current][i]] = newOccurrences
"
20907,"	// let us do O(l) instead of O(ln)

 	skips := make(map[int]int)

 	for _, s := range bcr {
"
51048,"   */

   private boolean searchRecursion(Node node, int key) {

     return node != null && (node.value == key || searchRecursion(node.next, key));

   }

   @Override

   public boolean search(int key) {
"
23666,"    return false;

   }

   /**

    * Function to calculate depth of generic tree

    *

    * @param dep depth
"
30497,"                    {

                         yield return n;

                         primes.Add(n);

                     }

                     n += 2;
"
15485," 

   uint16_t test[4][4] = {{0,1,2,3},{1,0,4,6},{2,4,0,5},{3,6,5,0}};

   uint16_t solution[4][4] = {{0,1,2,3},{1,0,0,0},{2,0,0,0},{3,0,0,0}};
"
60269," */

 static void test() {

     std::cout << ""The Runge Kutta function will be tested on the basis of ""
"
29786,"    gram = kilogram_input * 1000

     ""#{kilogram_input} kg = #{gram} g""

   end

   # Gram -> Kilogram = (gram_value / 1000) kilograms

   def self.gram_to_kilogram(gram_input)
"
94103,"    member this.naivePatternSearch () =

         let actual = NaiveStringSearch.naivePatternSearch(""ABAAABCDBBABCDDEBCABC"", ""ABC"")

         let expected = [4; 10; 18]

         Assert.AreEqual(expected, actual)
"
30159,"    return this.top

   }

   // Returns true if stack is empty, false otherwise

   get isEmpty () {
"
33579,"    std::string activation;  // To store activation name (used in summary)

     std::vector<std::valarray<double>> kernel;  // To store kernel (aka weights)

     /**

      * Constructor for neural_network::layers::DenseLayer class

      * @param neurons number of neurons
"
20624,"    private static final String ENCRYPTION_FIELD = ""≈"";

     private static final char ENCRYPTION_FIELD_CHAR = '≈';

     /**
"
29753,"        add(a_i, k, addend)

     return diff, i - start_i

 def add(digits, k, addend):

     """"""

     adds addend to digit array given in digits

     starting at index k
"
26161,"    """"""

     distinct_edge = set()

     for row in edge_array:

         for item in row:

             distinct_edge.add(item[0])
"
28275,"                    direction2 = true;  // reverse direction of l_ratio

                 else

                     l_ratio -= step;

             }

         }

         else  // no min limit of k_ratio
"
23209," * Implements the flood fill algorithm through a breadth-first approach using a queue.

  *

  * @param rgbData The image to which the algorithm is applied.

  * @param location The start location on the image.
"
32744,"        printf(""Socket successfully binded..\n"");

     }

     // Now server is ready to listen and verification
"
11332,"    }

     public static void main(String[] args) {

         String keywordForExample = ""asd215"";

         String wordBeingEncrypted = ""This is a test of the Columnar Transposition Cipher"";

         System.out.println(""### Example of Columnar Transposition Cipher ###\n"");

         System.out.println(""Word being encryped ->>> "" + wordBeingEncrypted);
"
33472,"    }

     return $maxDigits;

 }

 function radixSort($nums){

     $maxDigitsCount=maxDigits($nums);
"
22979,"                return 1;

             }

             else
"
20736,"      }

     }

     // If all else fails, n is always a palindrome in base n-1. (""11"")

     return num - 1;

   }
"
88744,"        while (n % 2 == 0)

         {

             n = n / 2;

         }
"
12461,"		got := mp.Contains(2)

 		if got != want {

 			t.Errorf(""Key '2' doesn't exists in the map but it says otherwise"")

 		}

 	})
"
32607,"    array[0..index] = array[0..index].reverse

   end

   array
"
21302," n --- Array Size

  max --- Maximum element in Array

  */

 void radixsort2(int *arr, int n,

                 int max)  // max is the maximum element in the array
"
30439,"[[Tar]]

 deps = [""ArgTools"", ""SHA""]

 uuid = ""a4e569a6-e804-4fa4-b0f3-eef7a1d5b13e""

 [[Test]]

 deps = [""InteractiveUtils"", ""Logging"", ""Random"", ""Serialization""]

 uuid = ""8dfed614-e22c-5e08-85e1-65c5234f0b40""
"
22944,"void tests(){

      // Sample test case 1

 	     int v1a = 3, v1b = 5, e1 = 2;  // vertices of left side, right side and edges

 	     HKGraph g1(v1a, v1b); // execute the algorithm 

 	     g1.addEdge(0,1);
"
17029,"  # init current sum to 0

   current_sum = 0

   # iterate through array, reset current_sum to 0 if it ever goes below 0, track max_sum with highest current_sum

   nums.each do |num|
"
15901,"  for (let i = 1; i < count.length; i++) {

     count[i] += count[i - 1]

   }
"
17054,"			if stackPeak() != 83 {

 				t.Errorf(""Stack Peak is not work we expected %v but got %v"", 83, stackPeak())

 			}

 		})
"
11274,"{

     int temp = array->array[position1];

     array->array[position1] = array->array[position2];

     array->array[position2] = temp;

 }

 int bubbleSortCArray(CArray *array)
"
49945,"			""test 2 not connected"",

 			0,

 			5,

 			6,

 			[][]int{

 				{0, 1, 1, 0, 0, 0},
"
82981,"      if (col == 0) break;

       int row = Integer.parseInt(mSize[1]);

       Matrix matrix = new Matrix(count, col, row);

       mArray.add(matrix);
"
19319,"		}

 		if (y->color == 'b')

 			delfix(q);
"
52474," Sort](https://en.wikipedia.org/wiki/Merge_sort)

  *

  * @details
"
16557,"    (array_length - 1).times do |i|

       if array[i] > array[i + 1]

         array[i], array[i + 1] = array[i + 1], array[i]

         swapped = true

       end
"
91218," * @see https://www.techiedelight.com/flood-fill-algorithm/

  */

 const neighbors = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]
"
21011,"	for _, tc := range testCases {

 		t.Run(tc.name, func(t *testing.T) {

 			actual := BipartiteCheck(tc.N, tc.edges)

 			if tc.isBipartite != actual {

 				t.Errorf(""failed %s: %v"", tc.name, tc.edges)

 			}
"
98661,"const Identity = (size) => {

   const I = Array(size).fill(null).map(() => Array(size).fill())

   return I.map((row, rowIdx) => row.map((_col, colIdx) => {
"
29711,"        /// <returns>The new node created based on the new value.</returns>

         public DoublyLinkedListNode<T> Add(T data)

         {

             if (Head is null)
"
23952,"    stringTree.remove(""boy"");

     assert !stringTree.find(""boy"") : ""Since boy was not present so deleting would do no change"";

     stringTree.add(""india"");
"
30550,"        zero = ""0"";

         for (int64_t i = 0; i < len1 - len2; i++) {

             zero += second;

             second = zero;
"
82375,"     * @tparam T Type of the given message.

      * @returns void

      * */

     template <typename T>

     void log(T msg) {
"
17507,"    ///  In number theory, a Keith number or repfigit number is a natural number n in a given number base b with k digits such that

     ///  when a sequence is created such that the first k terms are the k digits of n and each subsequent term is the sum of the

     ///  previous k terms, n is part of the sequence.

     /// </summary>
"
26189,"// 	Stack Data Structure : https://www.geeksforgeeks.org/stack-data-structure-introduction-program/

 // 	Stack (abstract data type) : https://en.wikipedia.org/wiki/Stack_(abstract_data_type)

 // author [Milad](https://github.com/miraddo)

 // see stacklinkedlist.go, stacklinkedlistwithlist.go, stack_test.go
"
61898,"    private <T extends Comparable<T>> int getSmallerElementCount(T[] array, int index) {

         int counter = 0;

         for (int i = 0; i < array.length; i++) {

             if (less(array[i], array[index])) {

                 counter++;
"
16894,"                temp = temp / 10;

             }

         }

         for (i = counter; i >= 0; i--) printf(""%d"", a[i]);

     }

     return 0;
"
15754,"      throw new NumberFormatException(""invalid character :"" + c);

     }

     return Character.isDigit(c) ? c - '0' : c - 'A' + 10;

   }

 }
"
26743,"            {

                 if (Comparer.Compare(heap[minIndex], heap[index]) < 0)

                 {

                     SwapNodes(minIndex, index);

                 }
"
79450,"    newEdge.src = src;

     newEdge.dst = dst;

     newEdge.weight = weight;

     G->edges[ind++] = newEdge;

 }

 // Utility function to find minimum distance vertex in mdist
"
41046,"        public static void ClearWorksCorrectly()

         {

             // Arrange

             var q = new StackBasedQueue<int>();

             q.Enqueue(1);
"
11426,"            }

         }

         private static void ThrowIfEdgeExists(double currentEdgeWeight)
"
18243,"//Title:Ternary Search

 //Author:Shawn

 //Email:stepfencurryxiao@gmail.com

 int ternarySearch(var l, var r, var key, var arr) {

   if (r >= 1) {

     //Find the mid1 and mid2
"
22133,"        [TestCase(1, 0.00001)]

         [TestCase(1.57, 0.0001)]

         [TestCase(3.14, 0.0001)]

         public void Sin_ErrorForm_ValidCases(double point, double error)
"
25125,"	const char* functionName; ///< Function in which malloc or calloc has been called

 	size_t bytes; ///< Number of bytes allocated

 	int line; ///< Line number (in file) corresponding to the malloc / calloc call

 	struct MEMORY_INFORMATION* next; ///< Next element in the list

 	struct MEMORY_INFORMATION* previous; ///< Previous element in the list
"
18432," * the board.

  * To play - boats over size 1, need direction; V -> vertical and H ->

  * horizontal. Example Input 1 A H -> line 1, column A, direction H
"
22968,"            101363, 101377, 101383, 101399, 101411, 101419, 101429, 101449, 101467, 101477, 101483, 101489, 101501,

             101503, 101513, 101527, 101531, 101533, 101537, 101561, 101573, 101581, 101599, 101603, 101611, 101627,

             101641, 101653, 101663, 101681, 101693, 101701, 101719, 101723, 101737, 101741, 101747, 101749, 101771,

             101789, 101797, 101807, 101833, 101837, 101839, 101863, 101869, 101873, 101879, 101891, 101917, 101921,

             101929, 101939, 101957, 101963, 101977, 101987, 101999, 102001, 102013, 102019, 102023, 102031, 102043,

             102059, 102061, 102071, 102077, 102079, 102101, 102103, 102107, 102121, 102139, 102149, 102161, 102181,
"
25374,"        String maxStr = """";

         for (int i = 0; i < n; ++i) {

             for (int j = i; j < n; ++j) {
"
27238,"            return array.length;

         int range = 1;

         while (range < array.length && array[range].compareTo(key) <= -1) {

             range = range * 2;

         }
"
26420,"        // loop till max(N, num_out)

         if (i < N) {  // only add new arrays if i < N

             X[i] = std::valarray<double>(features);

         }
"
35114,"    [<TestMethod>]

     member this.wordOccurrence () =

         let mutable expected : Map<string,int> = Map.empty

         expected <- expected.Add(""Two"",1)

         expected <- expected.Add(""spaces"",1)
"
21441,"    if (game_table[0] == game_table[1] && game_table[1] == game_table[2])

     {

         if (game_table[0] == 'x' && game_table[1] == 'x' &&

             game_table[2] == 'x')

         {

             return -1;
"
23312,"  }

   addEdge (node1, node2) {

     // Function to add an edge (adds the node too if they are not present in the graph)

     if (!(node1 in this.connections)) { this.addNode(node1) }

     if (!(node2 in this.connections)) { this.addNode(node2) }
"
12153,"    print(points_to_polynomial([[1, 3], [2, 6], [3, 11]]))

     print(points_to_polynomial([[1, -3], [2, -6], [3, -11]]))

     print(points_to_polynomial([[1, 5], [2, 2], [3, 9]]))
"
35056,"            Graph = graph;

         }

         /// <summary>
"
24117,"    public static void main(String args[]) {

         Scanner np = new Scanner(System.in);

         int n = np.nextInt();

         int a[] = new int[n];

         for (int i = 0; i < n; i++) {
"
30360,"r""""""

 Problem:

 The n queens problem is: placing N queens on a N * N chess board such that no queen

 can attack any other queens placed on that chess board.  This means that one queen
"
14186,"    }

     return head;

 }
"
15092,"            istr1

             |> Seq.iteri

                 (fun i l ->

                     let left = int(max 0 (i - limit))

     
"
29483,"from __future__ import annotations

 from collections import Counter

 from random import random

 class MarkovChainGraphUndirectedUnweighted:

     """"""

     Undirected Unweighted Graph for running Markov Chain Algorithm
"
43371,"            temp->pow = poly1->pow;

             poly1 = poly1->next;

             poly2 = poly2->next;

         }

         /* If none of the polynomials are exhausted

          dynamically create a node in temp
"
29106," * @returns void

  */

 static void test() {
"
85990,"        for (int b = a + 1; b < 400; b++)

             for (int c = b + 1; c < 500; c++)

             {

                 if (a * a + b * b == c * c)
"
33611,"            }

             int[] cardNumbers = toIntArray(trimmedCardNumber);

             boolean isValid = luhnCheck(cardNumbers);

             if (!isValid) {

                 throw new IllegalArgumentException(""Credit card number {"" + cardNumber + ""} - have a typo"");

             }
"
31097,"//

 // Created by light on 19-12-16.

 //
"
79996,"        ugly_nums.append(next_num)

         if next_num == next_2:

             i2 += 1
"
18850,"                    && cmp a.[child] a.[child + 1] < 0

                 let child = if p then child + 1 else child

                 if cmp a.[root] a.[child] < 0 then

                     swap a root child

                     loop child (child * 2 + 1)
"
99889,"    """"""Returns the total of all the name scores in the file.

     >>> solution()

     871198282
"
20231,"      // If the key is smaller then it is in the lower part of the array

     } else {

       high = position - 1

     }

   }

   return -1
"
65507,"		}

 		r[j] = q

 	}

 	return r[length]

 }
"
33747,"    public static class PerfectNumberTests

     {

         [Test]

         [TestCase(6)]

         [TestCase(28)]
"
15530,"        {

             var timeline1 = new Timeline<string>

             {

                 { new DateTime(1995, 1, 1), ""TestTime1"" },
"
12071,"/**

  * @file static.cpp

  * @brief 静态数据成员

  * 静态数据成员被编译器放在程序的一个global data members中，它是类的一个数据成员，但不影响类的大小。不管这个类产生了多少个实例，还是派生了多少新的类，静态数据成员只有一个实例。静态数据成员，一旦被声明，就已经存在。 

  * @author 光城

  * @version v1
"
16600,"  // Input: mat: 2D Array of Numbers of size n x n

   // Output: mat^n: 2D Array of Numbers of size n x n

   // Complexity: O(n^3 log m)

   if (m === 0) {
"
26226,"//  Email :    z5261243@unsw.edu.au

 //             hhoanhtuann@gmail.com
"
72706,"  }

   /**

    * Calculate the area of a circle

    *

    * @param radius radius of circle

    * @return area of given circle
"
30930,"        opener = urllib.request.build_opener()

         opener.addheaders = [

             (

                 ""User-Agent"",
"
36601,"          while (child < n) 

               if (child + 1 < n  &&  gt(arr[idx_for(child + 1)], arr[idx_for(child)])) 

                   child += 1 # Choose the largest child

               end 
"
14605,"import { romanToDecimal } from '../RomanToDecimal'

 describe('romanToDecimal', () => {

   it('XXIIVV', () => {

     expect(romanToDecimal('XXIIVV')).toBe(28)

   })
"
20833,"  it('expects to return true', () => {

     expect(validateEmail('mahfoudh.arous@gmail.com')).toEqual(true)

   })

   it('expects to return true', () => {

     expect(validateEmail('icristianbaciu@.helsinki.edu')).toEqual(true)
"
12386,"    expect(LocalMaximomPoint(Array2)).toEqual(0)

   })

   it('test boundary maximum points - should find first maximom point from the top', () => {
"
13943,"        return value

 class FileMerger:

     def __init__(self, merge_strategy):

         self.merge_strategy = merge_strategy

     def merge(self, filenames, outfilename, buffer_size):

         buffers = FilesArray(self.get_file_handles(filenames, buffer_size))
"
33052,"public class MinimumSumPartition {

   public static int subSet(int[] arr) {

     int n = arr.length;

     int sum = getSum(arr);

     boolean[][] dp = new boolean[n + 1][sum + 1];
"
76522,"    /// <returns></returns>

     let kmp (pattern: string, text: string): bool =

         // 1) Construct the failure array

         let failure = getFailureArray pattern

         let mutable result = false
"
11516,"        /// <exception cref=""InvalidOperationException"">Thrown if heap is empty.</exception>

         /// <returns>Value of the removed minimum node.</returns>

         public T ExtractMin()
"
61095,"        p = p->next;

     }

     /* Deleting the node with min value */
"
25280,"        return right

     else:

         return search(list_data, key, left + 1, right - 1)

 if __name__ == ""__main__"":
"
15908,"  if (typeof compare !== 'function') {

     compare = defaultComparator // If compare is not a comparator function

   }

   /**

    * Use a closure to define the whole sort
"
45017,"typedef struct Node

 {

     int data;           /**< stores the number */

     struct Node *llink; /**< link to left child */
"
24811,"        """"""

         index1, index2 = np.where(self.SQUARE == letter)

         indexes = np.concatenate([index1 + 1, index2 + 1])

         return indexes
"
54801,"        

         return table[n][x];

     }
"
72760,"    uint32_t n = s.length();

     uint32_t m = p.length();

     // matching is successfull if both strings are done
"
32133,"As such, a detailed explanation can be found at https://towardsdatascience.com/pattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b

 Questions and answers

 1. Why KMP instead of naive search?
"
32527,"        printf(""passed\n"");

     }

 }
"
14467,"A Krishnamurthy Number is a number whose sum of the

 factorial of the digits equals to the original

 number itself.

 For example: 145 = 1! + 4! + 5!

     So, 145 is a Krishnamurthy Number

 # Example
"
96528,"    """"""

     def __init__(self, *args, **kwargs):

         super().__init__(*args, **kwargs)

     def __hash_function_2(self, value, data):

         next_prime_gt = (

             next_prime(value % self.size_table)
"
17150,"uuid = ""ae5879a3-cd67-5da8-be7f-38c6eb64a37b""

 version = ""1.1.1""

 [[Rmath]]

 deps = [""Random"", ""Rmath_jll""]

 git-tree-sha1 = ""bf3188feca147ce108c76ad82c2792c57abe7b1f""

 uuid = ""79098fc4-a85e-5d69-aa6a-4863f24498fa""
"
19890,"	static boolean regexRecursion(String src, String pat) {

 		if (src.length() == 0 && pat.length() == 0) {

 			return true;

 		}

 		if (src.length() != 0 && pat.length() == 0) {

 			return false;
"
14761,"using Algorithms.Search;

 using NUnit.Framework;

 using System;

 using System.Linq;

 namespace Algorithms.Tests.Search
"
15259,"dp array is what the function works on

 It returns the ans (dp[capacity])

 ```

 julia> dp=zeros(Int,30)

 julia> zero_one_pack!(20,[1,3,11],[2,5,30],dp)

 37
"
21037,"    const approx = fareyApproximation(0.7538385)

     expect(approx).toStrictEqual({ numerator: 52, denominator: 69 })

   })
"
56026,"    }

 }
"
23027,"  // Iterate the number and find the gcd of the number using the above explanation.

   for (less; less >= 2; less--) {

     if ((arg1 % less === 0) && (arg2 % less === 0)) return (less)

   }

   return (less)
"
23327,"}
"
20923,"/*

   odd–even sort or odd–even transposition sort

   is a relatively simple sorting algorithm, developed originally for use on parallel processors with local interconnections.

   It is a comparison sort related to bubble sort, with which it shares many characteristics.
"
23036,"        e = h4;

         // Main ""hashing"" loop

         for (uint8_t i = 0; i < 80; i++) {

             uint32_t F = 0, g = 0;

             if (i < 20) {

                 F = (b & c) | ((~b) & d);
"
25247,"}
"
93453," *

  * Find the maximum total from top to bottom of the triangle below :

  *

  *                            75

  *                           95 64
"
13623,"        sub_string = ""seems like ignore case work""

         @test contain_substring_with_kmp(string, sub_string, true) == true

         string = ""123 456 AbC""

         sub_string = ""123 456 ABC""

         @test contain_substring_with_kmp(string, sub_string, true) == true

         string = ""abcdefg""
"
73234,"/**

  * A Dynamic Programming based solution for calculation of the Levenshtein Distance

  * https://en.wikipedia.org/wiki/Levenshtein_distance

  */

 function minimum (a, b, c) {
"
26768,"# Approach 3: Two Pointers

 #

 # Time Complexity: O(N)

 #
"
22128," * \f}

  *

  * \param[out] data matrix to store data in

  */
"
14847,"            88937, 88951, 88969, 88993, 88997, 89003, 89009, 89017, 89021, 89041, 89051, 89057, 89069, 89071, 89083,

             89087, 89101, 89107, 89113, 89119, 89123, 89137, 89153, 89189, 89203, 89209, 89213, 89227, 89231, 89237,

             89261, 89269, 89273, 89293, 89303, 89317, 89329, 89363, 89371, 89381, 89387, 89393, 89399, 89413, 89417,

             89431, 89443, 89449, 89459, 89477, 89491, 89501, 89513, 89519, 89521, 89527, 89533, 89561, 89563, 89567,
"
13527,"    memo = std::vector<std::vector<bool>>(

         s.size() + 1, std::vector<bool>(t.size() + 1, false));

     visited = std::vector<std::vector<bool>>(
"
23590,"    Node<E> next;

     E value;

     private Node(E value, Node<E> next) {
"
84105,"        struct node *temp = g->adjLists[i];

         while (temp != NULL)

         {

             addEdge(graph, temp->vertex, i);  // Reverse all edges
"
26062,"    else { 

         return a2; 

     }

 }
"
10607,"#pragma omp for

 #endif

     for (i = 0; i < N; i++)

     {

         int class =

             rand() % num_classes;  // select a random class for the point
"
65220,"        std::cout << arr2[i] << "", "";

     }

     std::cout << std::endl;

     // example 3:vector of float

     const int size3 = 7;

     std::cout << ""\nTest 3- as std::vector<float>..."";
"
15113,"int main()

 {

     int i, n, a[10];

     printf(""Enter the number of elements :: "");

     scanf(""%d"", &n);
"
16400,"  printf(""Enter the data value of each node:\n"") ;

   for(i=1 ; i<=n ; i++)

   {

     pnode=(struct node*)malloc(sizeof(struct node)) ;
"
31379,"  return result

 }
"
24144,"    }

     FloydWarshall(&G);

     return 0;

 }
"
16520," * @author 光城

  * @version v1

  * @date 2019-08-09

  */
"
81119,"}
"
31902,"        /// <param name=""visited"">Hash set with visited vertices.</param>

         private void Dfs(IDirectedWeightedGraph<T> graph, Vertex<T> startVertex, Action<Vertex<T>>? action, HashSet<Vertex<T>> visited)

         {

             action?.Invoke(startVertex);

             visited.Add(startVertex);
"
22259,"// SearchArray(3, ar)

 // SearchArray(4, ar)

 // SearchArray(11, ar)
"
82990,"            std::cout << ""\t\tabsolute average change: "" << tol_condition

                       << ""\n"";

         }

 #endif
"
23596,"            : base(arr)

         {

         }

         /// <summary>
"
47037,"        stoogeSort.sort(integerArray);

         // Print integerArray sorted

         SortUtils.print(integerArray);

         String[] stringArray = {""g"", ""d"", ""a"", ""b"", ""f"", ""c"", ""e""};

         // Print stringArray unsorted

         SortUtils.print(stringArray);
"
36311,"        if (debug_print)

         {

             printf(""========================\n"");

             printf(""Eigen value: % g,\n"", last_eig);
"
92318,"   * @param differentialEquation The differential equation to be solved.

    * @return The next y-value.

    */

   public static double eulerStep(

       double xCurrent,

       double stepSize,
"
10220,"    {

         unsigned long long N, p = 0, sum = 0;

         printf(""Enter the value of N "");
"
26841,"//    unique_ptr<shape> ptr2{ptr1}; // error

     unique_ptr<shape> ptr2_2{std::move(ptr1)};    // ok

     if (ptr2_2.get() != nullptr && ptr1.get() == nullptr)
"
11594,"    } else if (number - (int) number > 0) {

       return (int) (number + 1);

     } else {

       return (int) number;

     }
"
27575,"            int size = queue.size();

             for(int i = 0; i < size; i++){

                 String curr = queue.poll();
"
31646,"  [rob(nums, i - 2) + nums[i], rob(nums, i - 1)].max

 end

 nums = [1, 2, 3, 1]

 puts rob(nums)

 # Output: 4

 nums = [2, 7, 9, 3, 1]
"
31578,"int main(int argc, char *argv[])

 {

     double X0 = 0.f;          /* initial value of x0 */

     double X_MAX = 10.F;      /* upper limit of integration */
"
55604,"}
"
11893,"             *     9   6         18

              *    /     \        |

              *  (6)     (7)     (8)
"
13076,"	// ex: [1,2,3] Intersection [3,4,5] -> [3]

 	Intersection(set2 Set) Set

 	// Difference: gives new difference set of both sets.

 	// ex: [1,2,3] Difference [3,4,5] -> [1,2]
"
10352,"  const width = longitude2 - longitude1

   const height = latitude2 - latitude1

   return (Math.sqrt(width * width + height * height))

 }
"
28903,"    19408891927

     """"""

     unique_s: set = set()

     hcf: int

     total: Fraction = Fraction(0)
"
19629,"        for j in range(len(chart)):

             if chart[j][i] == 1:

                 count += 1

                 rem = j

         if count == 1:

             select[rem] = 1
"
33894,"                j <- j - 1

             list.[j] <- item

         list
"
20295,"import Foundation

 func linearSearch<T: Equatable>(_ array: [T], _ object: T) -> Int? {

   for (index, obj) in array.enumerated() where obj == object {

     return index

   }
"
10262,"include(""math/ceil_floor.jl"") # needed by average_median

 include(""math/collatz_sequence.jl"")

 include(""math/combination.jl"")

 include(""math/euler_method.jl"")
"
69276,"    return 0;

 }
"
10009,"			if actual != test.expected {

 				t.Logf(""FAIL: %s"", test.description)

 				t.Fatalf(""With input string '%s' and key '%d' was expecting '%s' but actual was '%s'"",

 					test.input, test.key, test.expected, actual)

 			}

 		})
"
23917,"})
"
13401,"                data = in_file.read(1024)

         print(""Done sending"")

         conn.close()
"
55910,"  }

   /**

    * Utility-method to render the Koch snowflake to an image.

    *

    * @param vectors The vectors defining the edges to be rendered.

    * @param imageWidth The width of the rendered image.
"
21487,"        return 1.0 / fast_power_linear(a, -b);

     double result = 1;

     while (b) {

         if (b & 1)

             result = result * a;
"
34557,"  private static int findMaxElement(int[] array) {

     int max = -1;

     for (int value : array) {

       if (value > max) {

         max = value;
"
16179,"        def __init__(self, link_p, element, link_n):

             self._prev = link_p

             self._data = element

             self._next = link_n
"
31987,"    if (!get_next_unknown(a, &i, &j))

     {

         /* no more empty location found

            implies all good in the matrix
"
21318,"#include <assert.h>

 #include <stdio.h>

 #include <stdlib.h>

 #include <string.h>

 /* initial length of the dynamic array */

 #define LEN 10
"
79055,"    log10(N/df), where N is the number of documents in your

     corpus and df is the Document Frequency. If df is 0, a

     ZeroDivisionError will be thrown.

     Term-Frequency*Inverse-Document-Frequency is a measure

     of the originality of a term. It is mathematically written
"
30498,"        //Not allowing odd number of elements as we are expecting 2 non repeating numbers

         System.out.println(""Array should contain even number of elements"");

         return;
"
14057,"      array[i] = random.nextInt(100) - 50;

     }

     BubbleSortRecursion bubbleSortRecursion = new BubbleSortRecursion();

     bubbleSortRecursion.sort(array);
"
31988,"        /// </summary>

         /// <param name=""matrix"">The matrix.</param>

         /// <returns>A singular vector, with dimension equal to number of columns of the matrix.</returns>

         public static double[] Decompose1D(double[,] matrix) =>
"
12515,"          }

         }

       }

     }

   }
"
28485,"package ahocorasick

 // ConstructTrie Function that constructs Trie as an automaton for a set of reversed & trimmed strings.

 func ConstructTrie(p []string) (trie map[int]map[uint8]int, stateIsTerminal []bool, f map[int][]int) {
"
25619,"}

 export { firstTriangularWith500Divisors }
"
74840,"}

 /**

  * @brief Calculates the number of Combinations from the given data.
"
29772,"        {

             Assert.AreEqual(22, testTree.Query(1, 4));

             testTree.Apply(0, 3, 2);

             Assert.AreEqual(new[] { 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, testTree.Operand);

             Assert.AreEqual(36, testTree.Query(1, 4));

         }
"
32758,"export { XOR }

 // Nb: Node REPL might not output the null char '\x00' (charcode 0)

 // > XOR('test string', 32)
"
13502,"        {

             // To split the message into chunks

             var div = text.Length / 3;
"
17997,"            // Update smallest found edge weights and parent for adjacent nodes

             for (var i = 0; i < numNodes; i++)

             {
"
31574,"        /// <returns>A comparison between the costs.</returns>

         public int CompareTo(Node? other) => TotalCost.CompareTo(other?.TotalCost ?? 0);

         public bool Equals(Node? other) => CompareTo(other) == 0;

         public static bool operator ==(Node left, Node right) => left?.Equals(right) != false;

         public static bool operator >(Node left, Node right) => left.CompareTo(right) > 0;

         public static bool operator <(Node left, Node right) => left.CompareTo(right) < 0;
"
29908," * 5.静态成员函数

  */

 using ull = unsigned long long;

 ull OddSum = 0;

 ull EvenSum = 0;

 void findEven(ull start, ull end) {
"
66341,"        for i in matrix_s[1:]:

             _verify_matrix_sizes(matrix_s[0], i)

         return [[sum(t) for t in zip(*m)] for m in zip(*matrix_s)]

 def subtract(matrix_a: list[list], matrix_b: list[list]) -> list[list]:

     """"""
"
26669,"# Start a double loop with index to iterate through each plot (each value is a plot of either water or land in this case)

 # if the plot is land, dfs(grid, x, y)

 # num_of_islands += 1
"
17257,"                emails = re.findall(""[a-zA-Z0-9]+@"" + domain, read.text)

                 # If not in list then append it.

                 for email in emails:

                     valid_emails.add(email)
"
28928,"		}

 	}

 	return next.isLeaf

 }

 // Capacity returns the number of nodes in the Trie
"
25746,"/*

 protectedĳԱ

 ڲԷ
"
26663,"/** Main function */

 int main(int argc, char *argv[])

 {

     unsigned long n = 100;
"
19121,"            p = &(pp->eqkid);

         }

         else if (d < 0)
"
20094,"        {

             var tree = new AvlTree<char>();

             tree.AddRange(new[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g' });
"
21165,"    stack[count] = item;

     count++;

   }

   //Pop a item from the stack

   T pop() {

     if (count == 0) {
"
67555,"test('should convert degree to radian:', () => {

   const radianEqual = degreeToRadian(45)

   expect(radianEqual).toBe(Math.PI / 4)

 })

 test('should convert degree to radian:', () => {
"
19855," public:

     /**

      * @brief contructor for initialising all data members.

      * @param n number of elements
"
28066,"    2.0945514815423474

     >>> newton(lambda x: x ** 3 - 1, lambda x: 3 * x ** 2, -2)

     1.0

     >>> newton(lambda x: x ** 3 - 1, lambda x: 3 * x ** 2, -4)
"
43588,"      "" and "" +

       b.toString() +

       "" is "" +

       lcm(a, b).toString());

 }
"
13350,"    if (!log_file)

     {

         perror(""Unable to create a storage log file!"");

         free(coeffs);
"
30335," * @returns `true` if str is present in strSet

  * @returns `false` if str is not present in strSet

  */
"
84556,"    @value = value

     @next = nil

   end

 end
"
25319,"                        if (mat[a][b] != boat)

                         {

                             mat[a][b] = -1;

                         }
"
11073,"                   editDist(str1, str2, m - 1, n - 1));

 }

 /* A DP based program

  * O(m x n)

  */
"
23134,"deps = [""DataStructures"", ""Future"", ""LinearAlgebra"", ""MultivariatePolynomials"", ""MutableArithmetics"", ""Pkg"", ""Reexport"", ""Test""]

 git-tree-sha1 = ""e9d82a6f35d199d3821c069932115e19ca2a2b3d""

 uuid = ""7c1d4256-1411-5781-91ec-d7bc3513ac07""

 version = ""0.3.19""

 [[EarCut_jll]]
"
30562,"# The Min of the following elements [1, 2, 3] is 3.

 puts predefined_sort_first_min(-21, -52, -100, -1)

 # The Min of the following elements [-21, -52, -100, -1] is -1.

 # Invalid inputs
"
11054,"            [Random(1, 1000, 100, Distinct = true)]

             int count)

         {

             var values = GetValues(count);

             var list = new SortedList<int>();

             foreach (var value in values)
"
19880,"            }

         }

         return true;

     }
"
84767,"        final Entry<K, V> nextEntry = entry.getNextEntry();

         if (preEntry != null) {

             preEntry.setNextEntry(nextEntry);

         }

         if (nextEntry != null) {
"
24181,"lgbm.booster.save(handle.booster, filename = ""/tmp/model.txt"")
"
10969,"    System.out.println(""Inserting values 1 to 10"");

     for (int i = 1; i < 10; i++) tree.insert(i);

     System.out.print(""Printing balance: "");

     tree.printBalance();

   }

 }
"
50170,"    current_state = search_prob

     current_temp = start_temperate

     scores = []

     iterations = 0

     best_state = None
"
18667,"    for (i = 0; i < TotalBits; i++)

     {

         if (n &

             (UINT32_C(1)
"
30692,"            var bb = b;

             var cc = aa % bb;

             while (cc != 0)
"
14221,"        self._kernel = self._get_kernel(kernel_name=kernel)

         self._check()

     def _polynomial(self, v1, v2):

         return (self.gamma * np.inner(v1, v2) + self.coef0) ** self.degree

     def _linear(self, v1, v2):

         return np.inner(v1, v2) + self.coef0
"
24537,"﻿using System;

 using Algorithms.Sorters.External;

 using Algorithms.Sorters.External.Storages;

 using Algorithms.Tests.Helpers;

 using NUnit.Framework;
"
25059,"    if (!fp)  // error with fopen

     {

         char msg[120];
"
33324,"                {

                     double elementProduct = 0;

                     for (var k = 0; k < source.GetLength(1); k++)
"
16910,"    expect(linkedList.pop(), equals(2));

     expect(linkedList, equals([3]));

     expect(linkedList.pop(), equals(3));

     expect(linkedList, equals([]));

   });
"
69391,"from __future__ import annotations

 from typing import Iterable, Union

 import numpy as np

 Vector = Union[Iterable[float], Iterable[int], np.ndarray]
"
30308,"    int i;

 #ifdef _OPENMP

 #pragma omp for
"
28905," * @returns 0 on exit

  */

 int main() {

     test();  // run self-test implementations
"
22719,"  var lst = [5, 3, 6, 7, 3, 378, 3, 1, -1];

   print(lst);

   cocktailSort(lst);

   print(lst);

 }
"
31543,"end
"
37023,"        fibM = fibMMm2 + fibMMm1;

     }

     // Marks the eliminated range from front

     int offset = -1;
"
90567,"            foreach (var number in contest)

             {

                 linkedList.Insert(number);

             }
"
33901,"   * @return combinations of given {@code n} and {@code k}

    */

   public static long combinations(int n, int k) {

     return factorial(n) / (factorial(k) * factorial(n - k));
"
10346,"    {

         public void Sort(

             ISequentialStorage<T> mainMemory,

             ISequentialStorage<T> temporaryMemory,

             IComparer<T> comparer)
"
14809,"                if symbol != PlayerSymbol.empty {

                     self.buttons[buttonIndex].setTitle(symbol?.rawValue, for: .normal)

                     self.buttons[buttonIndex].isUserInteractionEnabled = false
"
66725,"		encrypt, err := Encrypt([]rune(text), keyWord)

 		if err != nil && !errors.Is(err, &NoTextToEncryptError{}) && !errors.Is(err, &KeyMissingError{}) {

 			t.Error(""Unexpected error "", err)

 		}

 		return text == encrypt, err

 	}
"
51888,"        ///     using huffman encoding.

         /// </summary>

         /// <param name=""uncompressedText"">Text message to compress.</param>
"
29507,"        {

             memory = new List<T>();

             this.comparer = comparer;

         }

         /// <summary>
"
17485,"        /// <summary>

         ///     Finds out the shift distance of the pattern if a mismatch at position i – 1 occurs

         ///     for each character of the pattern, i.e. if the suffix of the pattern starting at position i has matched.

         /// </summary>
"
24402,"    return value * KILOGRAM_CHART[to_type] * WEIGHT_TYPE_CHART[from_type]

 if __name__ == ""__main__"":

     import doctest

     doctest.testmod()
"
25642,"                {

                     tmp += '0';

                 }

                 tmp += binaryNumber;

                 binaryNumber = tmp;
"
13406,"    return fibonacci(number - 1) + fibonacci(number - 2)

 }

 fibonacci(5)
"
26058,"        array_push($result, $inp_string[$idx] ^ $key[$idx % $key_len]);

     }

     return join("""", $result);

 }
"
39995,"# @param {String} word1

 # @param {String} word2

 # @return {Integer}

 def shortest_distance(words, word1, word2)
"
13951,"            {

                 var cntarray = new int[1 << bits];

                 foreach (var t in array)
"
19202,"				break

 			}

 		}
"
15821,"	r := 0

 	for _, c := range n.children {

 		r += c.Capacity()

 	}

 	return 1 + r

 }
"
11009,"	for i := 0; i < len(insert); i++ {

 		insert[i] = fmt.Sprintf(""%f"", rand.Float64())

 	}

 	n := NewNode()

 	n.Insert(insert...)
"
29772,"import { rodCut } from '../RodCutting'

 test('Test Case 1', () => {

   expect(rodCut([1, 5, 8, 9, 10, 17, 17, 20], 8)).toBe(22)

 })

 test('Test Case 2', () => {

   expect(rodCut([1, 5, 4, 2, 1, 11, 19, 12], 8)).toBe(20)
"
29711,"        currentNode = currentNode.next

       }

       previousNode.next = currentNode.next

     }

     // Decrementing the length
"
27844,"- num_terms  : number of terms in the series till which we count sum

 # Example

 ```julia
"
10327," * \returns new adaline model

  */

 struct adaline new_adaline(const int num_features, const double eta)
"
31963,"package DataStructures.Stacks;

 import java.util.Arrays;

 import java.util.Stack;

 /**

  * Given an integer array. The task is to find the maximum of the minimum of every window size in the array.
"
10466,"            activation_function = neural_network::activations::relu;

             dactivation_function = neural_network::activations::drelu;

         } else if (activation == ""tanh"") {
"
31075,"		""palindrome string 3"",

 		""Was it a car or a cat I saw?"",

 		true,

 	},

 	{
"
62158,"        return INT_MIN;

 }

 int empty(Heap *heap)

 {

     if (heap->count != 0)

         return 0;
"
25757,"	if rightHeight > leftHeight {

 		max = rightHeight

 	}

 	return 1 + max

 }

 func min(root *Node) int {
"
10199,"        {

             var len = vector.Length;

             var result = new double[len, len];

             for (var i = 0; i < len; i++)

             {
"
15285," * sittin → sitting (insertion of ""g"" at the end).

  *

  * @author SUBHAM SANGHAI

  */
"
15977,"   *

    * @param args Command line arguments

    */

   public static void main(String[] args) {

     Queue myQueue = new Queue(4);
"
19197,"      }

     }

   }

   return res;

 }
"
11432,"    }

     Animal &operator=(const Animal & amimal) {

         std::cout << ""Animal & operator=(const Animal &) is called"" << std::endl;

         return *this;
"
18073,"      default:

         return -1;

     }
"
19898,"    }

     public void setNext(Node next) {

       this.next = next;

     }

   }

 }
"
13932,"  puts 'Enter a list of numbers separated by space'

   list = gets

   bubble_sort(list)
"
30794,"        board.makeMove(player: secondPlayer, position: Position(0, 2))

         board.makeMove(player: secondPlayer, position: Position(1, 0))

         board.makeMove(player: firstPlayer, position: Position(1, 1))

         board.makeMove(player: firstPlayer, position: Position(1, 2))
"
37203,"        self.m_edges.append([u_node, v_node, weight])

     def find_component(self, u_node: int) -> int:

         """"""Propagates a new component throughout a given component.""""""

         if self.m_component[u_node] == u_node:

             return u_node
"
14578,"        [Test]

         public void Add_MultipleKeys_FormsCorrectTree()

         {

             var tree = new RedBlackTree<int>();
"
40431,"            0x27B70A85,

             0x2E1B2138,

             0x4D2C6DFC,

             0x53380D13,

             0x650A7354,

             0x766A0ABB,
"
29765,"    {

         assert(arr[i] <= arr[i + 1]);

     }
"
31546,"    b_estimate: float

     # the largest integer less than b_estimate

     b_floor: int
"
29194,"    /// <typeparam name=""T"">generic type of data in graph.</typeparam>

     public class FloydWarshall<T>

     {

         /// <summary>
"
11998," * @param[in] b vector to subtract

  * @returns resultant vector

  */

 vec_3d vector_sub(const vec_3d *a, const vec_3d *b)

 {

     vec_3d out;
"
17968," *

  * To implement [Van der Pol

  * oscillator](https://en.wikipedia.org/wiki/Van_der_Pol_oscillator), change the
"
15185,"    struct queue *q = malloc(sizeof(struct queue));

     q->front = -1;

     q->rear = -1;

     return q;

 }
"
21789,"def add(*array)

   sum = 0

   array.each { |a| sum += a }
"
97134,"// OddParity() : bool

 // returns true if parity is odd, otherwise false.

 //

 // ToInt64() : long

 // returns a long integer representation of the bit-array.
"
61996,"                keyMatrix[i][j] = in.nextInt();

             }

         }

         //check if det = 0

         if (determinant(keyMatrix, n) % 26 == 0) {

             System.out.println(""Invalid key, as determinant = 0. Program Terminated"");
"
24875,"    }

     while (dividend <= divisor)

     {
"
19379,"    returns the side length of the square spiral of odd length greater

     than 1 for which the ratio of primes along both diagonals

     first falls below the given ratio.

     >>> solution(.5)
"
32288,"        (toDelete->left != NULL && toDelete->left->color == 1) ||

         (toDelete->right != NULL && toDelete->right->color == 1))

     {

         // if it is a leaf

         if (toDelete->left == NULL && toDelete->right == NULL)
"
33794,"    unsigned s1 = 0, s2 = 0, i;

     for (i = 1; i <= 100; i++)

     {

         s1 += i * i;

         s2 += i;
"
12088,"    }

 }
"
20297,"            84059, 84061, 84067, 84089, 84121, 84127, 84131, 84137, 84143, 84163, 84179, 84181, 84191, 84199, 84211,

             84221, 84223, 84229, 84239, 84247, 84263, 84299, 84307, 84313, 84317, 84319, 84347, 84349, 84377, 84389,

             84391, 84401, 84407, 84421, 84431, 84437, 84443, 84449, 84457, 84463, 84467, 84481, 84499, 84503, 84509,

             84521, 84523, 84533, 84551, 84559, 84589, 84629, 84631, 84649, 84653, 84659, 84673, 84691, 84697, 84701,

             84713, 84719, 84731, 84737, 84751, 84761, 84787, 84793, 84809, 84811, 84827, 84857, 84859, 84869, 84871,
"
33515,"        wordList = in_file.read().splitlines()

     all_patterns: dict = {}

     for word in wordList:

         pattern = get_word_pattern(word)

         if pattern in all_patterns:

             all_patterns[pattern].append(word)
"
98261,"    return n

   }

   return fibonacci(n - 2) + fibonacci(n - 1)
"
33106,"        if (index.compareTo(new BigDecimal(2)) < 0) {

             return Optional.of(BigDecimal.ONE);

         }
"
94553,"    print(df_boston.head())

     # Summary statistics

     print(df_boston.describe().T)

     # Feature selection

     X = df_boston.iloc[:, :-1]
"
26253,"}
"
65598,"    }

     else if (mat[line][column] == 30)

     {

         if (mat[line + 1][column] == 30)
"
17222,"// implementation of Spigot Algorithm for the Digits of Pi - [Spigot algorithm](https://en.wikipedia.org/wiki/Spigot_algorithm)

 // author(s) [red_byte](https://github.com/i-redbyte)

 // see spigotpi_test.go
"
12499,"[[PlotUtils]]

 deps = [""ColorSchemes"", ""Colors"", ""Dates"", ""Printf"", ""Random"", ""Reexport"", ""Statistics""]

 git-tree-sha1 = ""501c20a63a34ac1d015d5304da0e645f42d91c9f""

 uuid = ""995b91a9-d308-5afd-9ec6-746e21dbc043""
"
20791,"/**

  * A LinkedList based solution for Rotating a List to the right by k places

  */
"
20685,"/**

  * @brief parent class

  */ 
"
29050,"    Returns

     -------

     int

         index of element that is looked for.

     Examples
"
29939,"    {

         for (j = i + 1; j < LEN; j++)

         {

             if (strcmp(data[i], data[j]) > 0)
"
92886,"        return bridge;

     }

 };

 /**

  * Main function
"
10077,"{

     int i, n = List_length(list);

     void **array = (void **)malloc((n + 1) * sizeof(*array));

     for (i = 0; i < n; i++)

     {
"
25534,"            pow(5,

                 i);  // division of n by ith power of 5(storing in integer form)

         if (test !=
"
15220,"package Searches;

 import static java.lang.String.format;

 import java.util.Arrays;

 import java.util.Random;

 import java.util.stream.Stream;
"
19477,"    (1...1024).each do |num|

       assert_in_delta SquareRoot.call(num), Math.sqrt(num), 1E-12

     end
"
53395,"  continue.change=TRUE

   initPoint<-dataset[sample.int(rows.dataset,size = k),]

   formerPoint<-initPoint

   iterPoint<-matrix(0,nrow = k,ncol = ncol(dataset))

   
"
11939,"            i = failure[i - 1]

             continue

         j += 1

         failure.append(i)
"
24033,"using System;

 using System.Collections.Generic;

 namespace DataStructures.RedBlackTree

 {

     /// <summary>
"
16834,"        send(sockfd, clientResponse, strlen(clientResponse) + 1, 0);

     }

     /// Close Socket

     close(sockfd);

     printf(""Client is offline...\n"");

     return 0;
"
15190,"    int[][] dp = new int[m][n];

     dp[0][0] = grid[0][0];

     for (int i = 0; i < n - 1; i++) {
"
46006,"    for (i = 0; i < mat_size; i++) {

         for (j = 0; j <= mat_size; j++) {

             x[i][j] = mat[i][j];

             std::cout << mat[i][j] << "" "";

         }
"
24933,"            }

             return true;

         }
"
19318,"version = ""7.1.1""

 [[LinearAlgebra]]

 deps = [""Libdl""]

 uuid = ""37e2e46d-f89d-539d-b4ee-838fcccc9c8e""
"
15025,"        return 0

     elif n == 2:

         return 1
"
15166,"            // Act

             void Act() => testObj.Compile((long)number);

             // Assert
"
13270,"    double dBlue = (double) blue / 255;

     double value = Math.max(Math.max(dRed, dGreen), dBlue);

     double chroma = value - Math.min(Math.min(dRed, dGreen), dBlue);

     double saturation = value == 0 ? 0 : chroma / value;

     double hue;

     if (chroma == 0) {
"
14782,"// const V = 9

 // const E = [

 //   [0, 1, 4],

 //   [0, 7, 8],
"
19277,"    printf(""String test: %s\n"", str);

     printf(""Test1: search pattern %s\n"", pat1);

     naive_search(str, pat1);

     printf(""Test2: search pattern %s\n"", pat2);

     naive_search(str, pat2);
"
10605,"      int n = s2.length();

       if (storage[m][n] > 0) {

           return storage[m][n];

 }
"
18655,"﻿using System.Collections.Generic;

 namespace Algorithms.Sorters.Comparison

 {

     /// <summary>

     ///     Cycle sort is an in-place, unstable sorting algorithm,
"
32641,"#include <iostream>

 using namespace std;

 int count=0;    // 全局(::)的count
"
11296,"                getSolution(boardSize, solutions, columns, columnIndex + 1);

             }

         }

     }

     /**
"
32271,"                }

             }

         }

         /// <summary>

         ///     Make y a child of x.
"
33350,"#include <cstring>   /// for string

 #include <iostream>  /// for IO operations

 #include <vector>    /// for std::vector

 /**
"
16606,"            for(int i=0;i<Size;i++){

                 a[i]=0;

             }

         }

         T &operator[](int i);

         void Sort();
"
97888,"        addEdge(graph, src, dst);

     }

     printf(""One topological sort order is:\n"");

     topologicalSort(graph);

     printf(""\n"");

     // Uncomment below part to get a ready-made example
"
28231,"package lcm

 import ""testing""

 func TestLcm(t *testing.T) {
"
18414,"    } else if (std::abs(lim_a - lim_b) <= EPSILON) {

         std::cerr << ""Search range must be greater than "" << EPSILON << ""\n"";

         return lim_a;

     }

     // golden ratio value

     const double M_GOLDEN_RATIO = (3.f - std::sqrt(5.f)) / 2.f;
"
19720," *

  * Wikipedia (Cocktail Shaker Sort): https://en.wikipedia.org/wiki/Cocktail_shaker_sort

  * Wikipedia (Bubble Sort): https://en.wikipedia.org/wiki/Bubble_sort

  */

 export function cocktailShakerSort (items) {

   for (let i = items.length - 1; i > 0; i--) {
"
41594,"			if err != nil {

 				t.Error(""got an unexpected error "", err)

 			}

 			if listQueue.Len() != 1 {

 				t.Errorf(""List Length is not correct expected %v but got %v"", 1, listQueue.Len())

 			}
"
28077,"    /// <summary>

     ///     Power iteration method - eigenvalue numeric algorithm, based on recurrent relation:

     ///     Li+1 = (A * Li) / || A * Li ||, where Li - eigenvector approximation.

     /// </summary>

     public static class PowerIteration
"
17185,"};

 int main()

 {

     cout<<sizeof(A)<<endl; // 1
"
28765,"}
"
10208,"  return maxSum

 }

 export { slidingWindow }
"
18905,"    int[] array = new int[size];

     /* init array with rand numbers */

     for (int i = 0; i < size; i++) {

       array[i] = rand.nextInt() % 100;

     }
"
24473,"        >>> queue.clear()

         >>> len(queue)

         0

         >>> str(queue)
"
48018,"				p = p->parent;

 			}

 			else
"
23833,"		for j := 0; j < len(arr); j++ {

 			if arr[i] < arr[j] {

 				// swap arr[i] and arr[j]

 				arr[i], arr[j] = arr[j], arr[i]

 			}

 		}
"
53503,"        // node is internal

         if (node->Contains(item)) {

             int8_t index = node->GetItemIndex(item);
"
21264,"#include <stdio.h>

 #include <stdlib.h>

 /*Displays the array, passed to this method*/

 void display(int arr[], int n)
"
29859,"// Problem Statement => https://www.youtube.com/watch?v=lBRtnuxg-gU

 const minCostPath = (matrix) => {

   /*
"
23008,"[[Colors]]

 deps = [""ColorTypes"", ""FixedPointNumbers"", ""Reexport""]

 git-tree-sha1 = ""417b0ed7b8b838aa6ca0a87aadf1bb9eb111ce40""
"
24740,"using System.Collections.Generic;

 using System.Numerics;

 namespace Algorithms.Sequences

 {

     /// <summary>
"
11750,"        Exception: Empty Queue

         """"""

         self.check_is_full()

         if self.is_empty():

             self.rear.data = data

         else:
"
14803,"// Queue structure is tell us what our head is and what tail should be with length of the list

 type Queue struct {

 	head   *Node

 	tail   *Node

 	length int

 }
"
53090,"			3,

 			""c"",

 		},
"
17067,"[[ZygoteRules]]

 deps = [""MacroTools""]

 git-tree-sha1 = ""9e7a1e8ca60b742e508a315c17eef5211e7fbfd7""
"
18604,"    // scenario this would be provided by calling time(NULL) - last_time, or by

     // calling the function reliably at X Hz (using a timer or RTOS etc) For

     // demonstration of this algorithm though, it is defined below as 1 second,

     // allowing easy testing of integral and derivative terms.

     float time_step = 1;
"
30790,"/*

     Problem statement and Explanation : https://medium.com/@ManBearPigCode/how-to-reverse-a-number-mathematically-97c556626ec6

 */
"
55508,"}
"
32820,"// To calculate x^n i.e. exponent(x, n) in O(log n) time in iterative way

 // n is an integer and n >= 0

 // Explanation: https://en.wikipedia.org/wiki/Exponentiation_by_squaring

 // Examples:

 // 2^3 = 8

 // 5^0 = 1
"
17055," * @param l left index for merge

  * @param r right index for merge

  * @param n total number of elements in the array
"
24007,"  }

   /** This method converts a decimal number to a binary number using a bitwise algorithm */

   public static void bitwiseConversion() {

     int n, b = 0, c = 0, d;

     Scanner input = new Scanner(System.in);

     System.out.printf(""Bitwise conversion.%n Enter the decimal number: "");
"
26792,"      this._length--;

     }

     if (this._head != null) {

       Node<T> current = this._head;

       while (current?.next != null) {

         if (current.next.value == item) {
"
14671,"        num_steps++;

         printf(""%llu->"", curr_no);

         if (curr_no % 2 == 0)  // condition   for even number
"
20895,"    int index_list = 0;

     /* counts all words */

     int count_all = 0;

     /* for controlling the while loop */

     int loop = 1;
"
64807,"    test(new Integer[] { 1 }, new Integer[] { 1 }); // single node tree

     test(new Integer[] { 1, 2, 3, 4 }, new Integer[] { 1, 2, 3, 4 }); // right skewed tree

     test(new Integer[] { 1, 2, 3, 4 }, new Integer[] { 4, 3, 2, 1 }); // left skewed tree

     test(new Integer[] { 3, 9, 20, 15, 7 }, new Integer[] { 9, 3, 15, 20, 7 }); // normal tree
"
75432,"}

 int main(int argc, char const *argv[])

 {

     //ģʵ
"
82811,"    https://en.wikipedia.org/wiki/Bellman–Ford_algorithm

     https://cp-algorithms.com/graph/bellman_ford.html

 */

 /**

  *

  * @param graph Graph in the format (u, v, w) where
"
29696,"}

 }  // namespace pancake_sort

 }  // namespace sorting

 /**

  * @brief Test implementations

  * @returns void
"
23504,"	Size int

 	Head *Node

 }

 // Create new list.
"
24774,"    or equal to n.

     >>> solution(10)

     10

     >>> solution(15)

     10
"
32936,"    a--;

     a.display();

     system(""pause"");
"
10169,"        ///     from the <paramref name=""items"">items</paramref> list.

         /// </param>

         /// <returns>

         ///     The array of items that provides the maximum value of the
"
16274,"    hash[value] += 1

   end

 end
"
20047,"      }

     }

     primeNumbers

   }

 }
"
10954,"      visited.add(node)

       const neighbors = graph[node]

       // put all its neighbors into the queue

       for (let i = 0; i < neighbors.length; i++) {
"
84711,"            {

                 throw new InvalidOperationException(""Queue is empty."");

             }

             return list[0];

         }
"
22567,"}
"
10331,"version = ""3.32.0""

 [[CompilerSupportLibraries_jll]]

 deps = [""Artifacts"", ""Libdl""]

 uuid = ""e66e0078-7015-5450-92f7-15fbd957f2ae""

 [[CompositeTypes]]
"
27771,"    heap->count++;

     if (4 * heap->count >= 3 * heap->size)

     {

         heap->size *= 2;

         (heap->p) = (int *)realloc((heap->p), (heap->size) * sizeof(int));
"
96501,"	{""8^3"", 8, 3, 512},

 	{""10^5"", 10, 5, 100000},

 }

 func TestIterativePower(t *testing.T) {

 	for _, tc := range testCases {

 		t.Run(tc.name, func(t *testing.T) {
"
15880,"		VertexColors: map[int]coloring.Color{

 			1: 1, 4: 1, 0: 1,

 			2: 2,
"
28462,"	if err != nil {

 		t.Errorf(""RomanToInteger(\""\"") returned an error %s"", err.Error())

 	}

 }

 func BenchmarkRomanToInteger(b *testing.B) {

 	b.ReportAllocs()
"
15387,"// factorial_test.go

 // description: Test for calculating factorial

 // author(s) [red_byte](https://github.com/i-redbyte)

 // see factorial.go

 package factorial
"
15195,"*@ param length array length

 */

 List downAdjust(List arr, int parent, int length) {

   //Save elements to sink

   int temp = arr[parent];
"
21943,"	})

 	base64 := 63

 	t.Run(""Testing(64bit) a = 32 and m = 9223372036854775807: "", func(t *testing.T) {

 		max := BitwiseMax(32, 9223372036854775807, base64)

 		if max != 9223372036854775807 {

 			t.Fatalf(""Error: BitwiseMax returned bad value"")
"
33220,"    }

     else  // decrement k_ratio

     {

         if (k_ratio <= step)  // minimum limit

         {

             direction1 = true;  // reverse direction of k_ratio
"
20461,"# Approach 2: Without creating an additional array

 #

 # @param {Integer[]} gain
"
24721,"    while (n > 0) {

       r = n % 10

       p = 10 * p + r

       n = Math.floor(n / 10)

     }

     return p === q // returning whether the number is palindromic or not
"
21259,"    XImpl* pImpl;

 };

 struct X::XImpl {

     C c;

     D d;
"
19816,"        case '5':

             bin += 101;

             break;

         case '6':
"
81387,"  print(nearestNeighbourSearch(fromPoints(points)));

 }
"
13553," * @complexity: O(log(n)) (on average )

  * @complexity: O(log(n)) (worst case)

  * @flow
"
22481,"        end 

         

         return fact
"
79861,"   */

   public static String reverse(String str) {

     return new StringBuilder(str).reverse().toString();

   }
"
32087,"        ///     Gets the data stored on this node.

         /// </summary>

         public T Data { get; }
"
94185,"        memset(remainders, (unsigned short)-1,

                MAX_LEN * sizeof(unsigned short));

         // remainders[0] = 1;
"
23143,"    Returns

     -------

     The maximum revenue obtainable for a rod of length n given the list of prices

     for each piece.

     """"""
"
23985,"    if (linearsearch(a, n, v))

         printf(""Value %d is in the array.\n"", v);

     else

         printf(""Value %d is not in the array.\n"", v);
"
84248,"	for _, test := range tests {

 		result := Phi(test.n)

 		t.Log(test.n, "" "", result)

 		if result != test.expected {

 			t.Errorf(""Wrong result! Expected:%v, returned:%v "", test.expected, result)

 		}
"
32087,"6	1,5		            2	    3

 7	1,2,3,4,5,6	        6	    1.1666...

 8	1,3,5,7		        4	    2
"
19382,"  }

 }

 // tests to see if the matrices have a like side, i.e. the row length on the first matrix matches the column length on the second matrix, or vice versa.

 const twoMatricesCheck = (first, second) => {
"
12534,"Finds area of the ellipse

 # Example

 ```julia

 area_ellipse(10, 10) # returns 314.1592653589793

 area_ellipse(10, 20) # returns 628.3185307179587

 area_ellipse(1, -2) # returns DomainError
"
53099,"{

     int octalNumber, decimalNumber;

     printf(""\nEnter your decimal number : "");
"
13493,"    }

     else

     {
"
75575,"			stack = stack[:len(stack)-1]

 		}

 		for i := 0; i < len(edges[now]); i++ {

 			if edges[now][i] && NotExist(i, stack) {

 				stack = append(stack, i)
"
93371,"    typeof b !== 'number'

   ) {

     throw new TypeError('argument is not a Number')

   }
"
11495,"    nums.count.times do |j|

       next unless i != j && i < j

       current_sum = nums[i] + nums[j]

       return [i, j] if current_sum == target
"
14270,"    return pre

 end
"
18443,"# Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] ..

 # .. such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

 # Notice that the solution set must not contain duplicate triplets.
"
34589,"   */

   public static String convertToAnyBase(int inp, int base) {

     ArrayList<Character> charArr = new ArrayList<>();

     while (inp > 0) {
"
51396,"    example();

     // code here

     return 0;

 }

 /**
"
63002,"    Node y = z;

     int yorigcolor = y.color;

     if (z.left == nil) {

       x = z.right;

       transplant(z, z.right);

     } else if (z.right == nil) {
"
26385,"        for (j <- 0 to array.length - 2) {

           if (array(j) > array(j + 1)) {

             val temp = array(j)
"
28088,"            }    

         }    

     }    

 }"
20938,"        [4] 50

         =#

         @test tree.n == 4

         @test depth(tree,4) == 2

         @test isleaf(tree,2) == false

         @test ch(tree,1,true) == 3
"
21528,"    return out_quat;

 }

 /** @} */

 static void test()
"
75145,"# normalization & standardization

 normalization<-function(x){

   return((x-min(x))/(max(x)-min(x)))
"
30391,"        print("" Linear Discriminant Analysis "".center(50, ""*""))

         print(""*"" * 50, ""\n"")

         print(""First of all we should specify the number of classes that"")

         print(""we want to generate as training dataset"")

         # Trying to get number of classes
"
10623,"                    {

                         greatGrandParent->right = parent;

                     }

                 }

                 // Change the colors
"
22910,"import { aliquotSum } from '../AliquotSum'

 describe('Aliquot Sum of a Number', () => {

   it('Aliquot Sum of 6', () => {

     expect(aliquotSum(6)).toBe(6)

   })
"
24800,"    if (

         left >= len(nums)

         or left < -len(nums)
"
32718,"func TestHeaps(t *testing.T) {

 	t.Run(""Should generate permutations for various size sets"", func(t *testing.T) {

 		expectedValues := [][]string{

 			{""1""},

 			{""12"", ""21""},

 			{""123"", ""213"", ""321"", ""231"", ""312"", ""132""},
"
21844,"        /// <summary>

         ///     Remove an element from the heap.

         /// </summary>

         /// <remarks>

         ///     In removing an element from anywhere in the heap, we only need to push down or up

         ///     the replacement value depending on how the removed value compares to its
"
24188,"            algorithm(bitmap, fillLocation, targetColor, replacementColor);

             Color actualColor = bitmap.GetPixel(testLocation.Item1, testLocation.Item2);

             actualColor.Should().Be(expectedColor);

         }

     }

 }"
22579,"# Output:

 # [2,3]

 require 'benchmark'
"
74274,"        end

     end

     copy!(arr, vcat(buckets...))

 end
"
28577,"        x1 = (1 / a1) * (d1 - (a2 * x2) - (a3 * x3));

         x2 = (1 / b2) * (d2 - (b1 * x1) - (b3 * x3));

         x3 = (1 / c3) * (d3 - (c1 * x1) - (c2 * x2));
"
33128,"                { new DateTime(2015, 1, 1), ""TestTime5"" },

             };

             var times = timeline.GetTimesAfter(new DateTime(2003, 1, 1));

             using (new AssertionScope())

             {
"
93228,"		down := s[parent]

 		for StateExists(down, acToReturn) && GetTransition(down, o, acToReturn) == -1 {

 			down = s[down]

 		}

 		if StateExists(down, acToReturn) {

 			s[current] = GetTransition(down, o, acToReturn)
"
12759,"    /* number of eigen values = matrix size */

     std::valarray<double> eigen_vals(rows);

     for (int i = 0; i < rows; i++) {

         Q[i] = std::valarray<double>(columns);

         R[i] = std::valarray<double>(columns);

     }
"
32790,"        a[top - i + 1] = n;

     }

 }"
27811,"	if !IsParallel(&l1, &l2) {

 		t.Fatalf(""Failed to check if Parallel."")

 	}

 }

 func TestIsPerpendicular(t *testing.T) {
"
21481,"package Sorts;

 public class SelectionSort implements SortAlgorithm {

   /**

    * Generic selection sort algorithm in increasing order.

    *

    * @param arr the array to be sorted.
"
31181,"                throw new KeyNotFoundException($""Key {key} is not in the tree"");

             }

             else

             {

                 root = Remove(root, key);
"
17970,"            list = tmp = l1;

             l1 = l1->next;

         }

         else

         {
"
87744,"        )

     lower = np.zeros((rows, columns))

     upper = np.zeros((rows, columns))
"
89838,"// graph.addEdge(3, 5)

 // graph.DFSIterative(5, 1)

 // graph.DFSIterative(5, 100)
"
14427,"        private readonly double[,] adjacencyMatrix;

         /// <summary>

         ///     Initializes a new instance of the <see cref=""DirectedWeightedGraph{T}""/> class.

         /// </summary>

         /// <param name=""capacity"">Capacity of the graph, indicates the maximum amount of vertices.</param>

         public DirectedWeightedGraph(int capacity)
"
88628,"}; 

 int main(void) 

 { 

     Derived d; 

     d.fun(); 
"
27024,"        float getSalary(){ return WeeklySalary; }	//ȡн

         void print(){			//ӡ֤н

             cout<<""""<<getName()<<""\t\t : ""<<getID()

                 <<""\t\t ܹ: ""<<getSalary()<<endl;

             }
"
22184,"const titleCaseConversion = (inputString) => {

   if (inputString === '') return ''

   // Extract all space separated string.

   const stringCollections = inputString.split(' ').map(word => {
"
13360,"}
"
28761,"""""""

     mode(nums)

 Finds mode of a vector of numbers

 # Example
"
51664,"        True

         >>> test_labels = np.array([1,2,3])

         >>> test_prediction = np.float(2)

         >>> tester.mean_squared_error(test_labels, test_prediction) == (
"
20573,"        for (int i = 0; i < transpositionPlaintext.length(); i++) {

             char c = transpositionPlaintext.charAt(i);

             plaintext.append((char) (c - 5));

         }

         System.out.println(""Plaintext: "");

         System.out.println(plaintext);
"
22012,"            if (tempNode == NULL)

                 printf(""\n\t %d : Not Found\n"", queryNum);

             else
"
91512,"                return false;

             }

         }
"
26930,"    - If the letter is connected to plugboard, it is switched.

     - Return the letter

     >>> enigma('Hello World!', (1, 2, 1), plugb='pictures')

     'KORYH JUHHI!'
"
31280,"bool sortcol(tuple<S, T, E>& t1, tuple<S, T, E>& t2) {

     if (get<1>(t1) < get<1>(t2)) {

         return true;
"
31899,"    enum unit {

         metre,

         kilometre,
"
27958,"{

     public class RabinKarpTest

     {

         [TestCase(""HelloImATestcaseAndIWillPass"", ""Testcase"", new[] { 8 })]
"
11792,"            j = j + 1;

         if (temp > a[j])

         {

             break;

         }

         else if (temp <= a[j])
"
20264,"   *

    * @param number number to find

    * @return number of digits of given number

    */
"
12450,"    {

         free(digit);

         digit = NULL;
"
27507,"/*

   Modified from:

     https://github.com/TheAlgorithms/Python/blob/master/maths/binary_exponentiation.py

   Explanation:

     https://en.wikipedia.org/wiki/Exponentiation_by_squaring

 */
"
12351,"{

     char str[] = ""AABCAB12AFAABCABFFEGABCAB"";

     char pat1[] = ""ABCAB"";
"
15618,"    public class MatrixExtensionsTests

     {

         private static readonly object[] MatrixMultiplyTestCases =
"
45558,"    }

   }

   return -1;

 }
"
33573,"    cout << ""use count of dptr2_1 is now "" << dptr2_1.use_count() << endl;    // 2

     cout << ""use count of dptr3_1 is now "" << dptr3_1.use_count() << endl;    // 2

     // shape* -> circle* 使用static_cast转换后,指针为空  与dynamic_cast相比,不安全

     shared_ptr<shape> sptr2(new shape);

     shared_ptr<circle> sptr1 = static_pointer_cast<circle>(sptr2);      // 基类转子类
"
30716,"    forwarding( x );

     circle temp;

     bar(temp);
"
86012,"	n.Remove(""albert"") // no effect since already removed

 	n.verify(t, checkWords)

 	n.verifySizeCapa(t, size, capa)

 	n.Remove(""marcel"") // no effect since ,o, existent
"
11983,"  private static class Edge {

     private int from;

     private int to;

     private int weight;
"
22669,"        n --> is the number of element in the sequence

         reference-->""Hexagonal number"" Wikipedia

         <https://en.wikipedia.org/wiki/Hexagonal_number>
"
23014,"  String word = """";

 }

 class Trie {
"
23034,"/**

  * @addtogroup open_addressing Open Addressing

  * @{

  * @namespace quadratic_probing
"
32292,"   * @param imageHeight The height of the rendered image.

    * @return The image of the rendered edges.

    */

   private static BufferedImage GetImage(

       ArrayList<Vector2> vectors, int imageWidth, int imageHeight) {

     BufferedImage image = new BufferedImage(imageWidth, imageHeight, BufferedImage.TYPE_INT_RGB);
"
10691,"version = ""1.6.9+4""

 [[Xorg_libXau_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]

 git-tree-sha1 = ""4e490d5c960c314f33885790ed410ff3a94ce67e""

 uuid = ""0c0b7dd1-d40b-584c-a123-a41640f87eec""
"
56840,"    cout<<*ptr<<endl;

 }
"
25643,"		if root.Left.Key != 3 {

 			t.Errorf(""left child should have value = 3"")

 		}
"
21678,"    >>> bd_bfs.fwd_bfs.start.pos == bd_bfs.bwd_bfs.target.pos

     True

     >>> bd_bfs.retrace_bidirectional_path(bd_bfs.fwd_bfs.start,

     ...                                     bd_bfs.bwd_bfs.start)
"
31727,"        /// <summary>

         ///     Similar to AddRight, but adds the node as a sibling to the child node.

         /// </summary>

         /// <param name=""node"">A node to add to the child list of this node.</param>

         public void AddChild(FHeapNode<T> node)
"
49216," * @param string $decimalNumber

  * @return string

  */
"
28017,"        if (x <= upper_bound && x >= 1.0) {

             return 0.1;

         }

         if (x > -1.0 && x < 1.0) {
"
26881,"	prevItem = thisItem.Prev

 	if cl.Size == 1 {

 		cl.Head = nil

 	} else {

 		cl.Head = nextItem
"
85956,"                else

                 {

                     var newNode = new BinarySearchTreeNode<TKey>(key);

                     node.Left = newNode;
"
26469,"            result.ifPresent(value -> assertThat(value, new BigDecimal(6765)));

         }

         {
"
23495,"                    return;

                 }

                 result.Add(node.Key);

                 PreOrderWalk(node.Left);

                 PreOrderWalk(node.Right);

             }
"
11316,"    }

 }
"
14170,"    }

 }
"
11044,"    for (int i = 0; i < size; i++)

     {

         arr[i] = (rand() % 100) - 50; /* signed random numbers */

     }

     selectionSort(arr, size);

     for (int i = 0; i < size - 1; ++i)
"
33656,"﻿using Algorithms.Strings;

 using NUnit.Framework;

 namespace Algorithms.Tests.Strings

 {

     public static class KnuthMorrisPrattSearcherTests
"
12877,"class SHA256:

     """"""

     Class to contain the entire pipeline for SHA1 Hashing Algorithm

     >>> SHA256(b'Python').hash

     '18885f27b5af9012df19e496460f9294d5ab76128824c6f993787004f6d9a7db'

     >>> SHA256(b'hello world').hash
"
18898,"}
"
13793,"        System.out.println(""Input "" + Arrays.toString(input) + "" is "" + validationResult);

     }

     /*

         ========================

          Business usage example

         ========================
"
10662,"    const encryptedChar = encryptedCharIndex !== -1 ? targetAlphabet[encryptedCharIndex] : char

     encryptedMessage += isUpperCase ? encryptedChar.toUpperCase() : encryptedChar

     return encryptedMessage
"
72982,"  print(list);

 }

 void selectSort(List<int> a) {

   for (var i = 0; i < a.length - 1; i++) {
"
49863,"	want := []interface{}{1, 2, 3}

 	var got []interface{}

 	var start *Node

 	start = list.Head

 	for i := 0; i < list.Size; i++ {
"
20824,"  return sqrt

 }

 export { sqrt }
"
29117,"            return true;

         else

             return false;
"
55666,"# @Author  : lightXu

 # @File    : convolve.py

 # @Time    : 2019/7/8 0008 下午 16:13

 from cv2 import COLOR_BGR2GRAY, cvtColor, imread, imshow, waitKey

 from numpy import array, dot, pad, ravel, uint8, zeros
"
11732,"version = ""1.6.0""

 [[Static]]

 deps = [""IfElse""]

 git-tree-sha1 = ""2740ea27b66a41f9d213561a04573da5d3823d4b""

 uuid = ""aedffcd0-7271-4cad-89d0-dc628f76c6d3""
"
77067,"#include<iostream>

 using namespace std;

 //ԭ

 //put(char c)

 //write(const char*c, int n)

 int main(){
"
18288,"  if (cache) {

     const value = cache.get(num)

     if (value) {
"
28230,"			graph: []Edge{

 				{

 					Start:  0,

 					End:    1,
"
13761,"                    result = prev_len == len(row)

         else:

             result = True

     else:
"
13601,"            A, pivot_index + 1, right

         )  # recursive quicksort to the right of the pivot point

 def main():

     user_input = input(""Enter numbers separated by a comma:\n"").strip()

     arr = [int(item) for item in user_input.split("","")]

     quick_sort_random(arr, 0, len(arr))
"
16104,"    } else {

       if (dividedMessage.contains(1) && messageChanged) {

         wrongMessCaught++;
"
26890,"package Mathematics

 import org.scalatest.flatspec.AnyFlatSpec

 class LinearSieveSpec extends AnyFlatSpec {
"
31290,"        }

     }

     return node;
"
27825,"    char *base = (char *)tree->root;

     size_t i = 0;

     for (; i < 2 * tree->length - 1; i++)
"
20513,"        | _ -> item
"
60894,"            {

 #ifdef _OPENMP

 #pragma omp for

 #endif

                 // preallocate with random initial weights

                 for (j = 0; j < features; j++)
"
16049," * @param r number of vectors

  * @param c dimenaion of vectors

  * @param B stores orthogonalised vectors
"
12406,"  //Takes the next element from the queue

   T deque() {

     T result = null;

     if (count == 0) {
"
22958,"// / ____ \   | || |  | |\ \| |   | | | |   |  __  |   | || |  | |    | |  | |

 // | |    _| |_     | || |   \ `--' /   | || | _/ /    \ \_ | || | _| |_\   |_

 // | | | |  _| |  | |_  | || |  \  `--'  /  | | | |   |_____|    | || | `.__.'

 // | || ||____|  |____|| || ||_____|\____| | | | | |____||____| | || | `.____.'
"
24035,"#include <stdlib.h>

 #ifdef _OPENMP

 #include <omp.h>

 #endif

 /**

  * Computes the length of collatz sequence for a given
"
25109,"using System;

 namespace DataStructures.Heap.FibonacciHeap

 {

     /// <summary>

     ///     These FHeapNodes are the bulk of the data structure. The have pointers to

     ///     their parent, a left and right sibling, and to a child. A node and its
"
22265,"    1000

     >>> convert_si_prefix(1, SI_Unit.mega, SI_Unit.giga)

     0.001

     >>> convert_si_prefix(1, SI_Unit.kilo, SI_Unit.kilo)

     1
"
28219,"    bool a6(a1);        // OK：使用转换函数 A::operator bool() 的从 A 到 bool 的隐式转换

     bool a7 = a1;        // OK：使用转换函数 A::operator bool() 的从 A 到 bool 的隐式转换

     bool a8 = static_cast<bool>(a1);  // OK ：static_cast 进行直接初始化

     B b1(1);        // OK：直接初始化

 //    B b2 = 1;        // 错误：被 explicit 修饰构造函数的对象不可以复制初始化
"
73836,"		got = append(got, current.Val)

 		for current.Next != nil {

 			current = current.Next

 			got = append(got, current.Val)

 		}

 		if !reflect.DeepEqual(got, want) {
"
32326,"  private static int[] find(int arr[][], int row, int col, int key) {

     // array to store the answer row and column

     int ans[] = {-1, -1};

     if (row < 0 || col >= arr[row].length) {

       return ans;

     }
"
51378,"def test_disjoint_set() -> None:

     """"""

     >>> test_disjoint_set()

     """"""

     vertex = [Node(i) for i in range(6)]

     for v in vertex:
"
63188,"static void test()

 {

     const uint8_t size = 10;

     int8_t *arr = (int8_t *)calloc(size, sizeof(int8_t));

     /* generate size random numbers from 0 to 100 */

     for (uint8_t i = 0; i < size; i++)
"
20864,"    m, n = A.shape

     t = min(m, n)

     Q = np.eye(m)
"
15639,"# pylint: disable=invalid-name

 from collections import defaultdict

 def dfs(start: int) -> int:

     """"""DFS traversal""""""

     # pylint: disable=redefined-outer-name

     ret = 1
"
20845," * @brief 子类

  */

 typedef struct _B

 { 

     A _b; ///< 在子类中定义一个基类的对象即可实现对父类的继承。 
"
32007,"        }

         checkForCase2(parent, 0, locateChild, root);

     }

     else

     {  // Bring the sibling on top and apply 2.1 or 2.2 accordingly
"
31462,"            int n)

         {

             // Arrange

             var sorter = new MiddlePointQuickSorter<int>();

             var intComparer = new IntComparer();
"
89060,"    ):

         return array[first_index]

     elif (array[middle_index] > array[first_index]) != (

         array[middle_index] > array[last_index]

     ):
"
11510,"}
"
24111,"    // Test with cassert wether sig is correct from expected value

     assert(hashing::sha1::sig2hex(sig4).compare(

                ""761c457bf73b14d27e9e9265c46f4b4dda11f940"") == 0);
"
89729,"Contributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee) and [Rratic](https://github.com/Rratic)

 """"""

 function factorial_iterative(n::N)where N<:Integer

     if n < 0

         throw(error(""factorial_iterative() only accepts non-negative integral values""))
"
33358,"        if l_pos<=mid && (r_pos>r || arr[l_pos]<arr[r_pos])

             temp[t_pos]=arr[l_pos]

             l_pos+=1

         else

             temp[t_pos]=arr[r_pos]
"
57604,"     * @param last_label flag for whether label is in first or last column

      * @param normalize flag for whether to normalize data

      * @param slip_lines number of lines to skip

      * @return returns pair of X and Y

      */
"
53893,"    assert points2.get(points2.size() - 1)[1] == 45.25925556817596;

     points2.forEach(

         point -> System.out.println(String.format(""x: %1$f; y: %2$f"", point[0], point[1])));

     // example from https://www.geeksforgeeks.org/euler-method-solving-differential-equation/
"
20816,"		return n1;

 	}

 }	

 /**

  * @brief Update table by placing an `X`

  *
"
11295,"        public void Remove(TKey key)

         {

             // Search for node

             var node = Remove(root, key);

             // Simple cases
"
23657,"    while (j >= left && array[j] > key) {

       array[j + 1] = array[j]

       j--
"
27384,"uuid = ""e1d29d7a-bbdc-5cf2-9ac0-f12de2c33e28""

 version = ""1.0.0""

 [[Mmap]]
"
14463,"    if list(tree.postorder_traverse()) != [-16, 8, 20, 24, 22, 16, 0]:

         return False

     return True

 def print_results(msg: str, passes: bool) -> None:

     print(str(msg), ""works!"" if passes else ""doesn't work :("")

 def pytests() -> None:
"
17265,"//   'Sierra',

 //   'Tango',

 //   'Uniform',

 //   'Victor',

 //   'Whiskey',
"
18665,"                                             transpose(this->layers[j].kernel));

                         // Adding gradient values to collection of gradients

                         gradients[j] = gradients[j] + grad / double(batch_size);

                     }
"
42398,"// Trie used to optimize string search

 class TrieNode {

   Map<Character, TrieNode> children = new HashMap<>();

   String word = """";

 }

 class Trie {
"
20341,"        /// </summary>

         /// <returns>Minimum value in tree.</returns>

         public TKey GetMin()

         {

             if (root is null)

             {
"
31163,"    Scanner sc = new Scanner(System.in);

     int i, j, row, column;

     System.out.println(""Enter the number of rows in the 2D matrix:"");

     /*

      * Take input from user for how many rows to be print

      */
"
12306,"   * @param {Number} value

    */

   evaluate (value) {

     return this.coefficientArray.reduce((result, coefficient, exponent) => {

       return result + coefficient * Math.pow(value, exponent)

     }, 0)
"
73747,"	  last->next=pnode ;

 	  last=pnode ;    /* last keeps track of last node */

     }

     last->next=first ;
"
26083,"     */

     friend std::istream &operator>>(std::istream &input,

                                     stats_computer2 &stat) {

         T val;
"
63037," * @details

  * merge() function is called from mergeSort()

  * to merge the array after it split for sorting

  * by the mergeSort() funtion.

  *
"
31815,"	var slope float64 = -5

 	var wantedIntercept float64 = 3

 	var calculatedIntercept float64 = Intercept(&p, slope)

 	if calculatedIntercept != wantedIntercept {

 		t.Fatalf(""Failed to calculate Intercept."")

 	}
"
47797,"   *

    * @param sideLength side length of square

    * @return area of given square

    */

   private static double surfaceAreaSquare(double sideLength) {
"
29735," *

  * \copyright 2020 Arctic2333

  *
"
17725,"  }

   // Return the item at the front of the queue

   Queue.prototype.peek = function () {
"
61525," * \f]

  * (Where '^' denotes the exponent operator)

  *

  * Here 'ϕ' is Euler's Totient Function. For modular inverse existence 'a' and

  * 'm' must be relatively primes numbers. To apply Fermat's Little Theorem is
"
30917,"            var sequence = new FactorialSequence().Sequence.Take(10);

             sequence.SequenceEqual(new BigInteger[] { 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880 })

                 .Should().BeTrue();

         }

     }

 }
"
30141,"void display(struct node *p)

 {

     if (top == NULL)

         printf(""\nStack is empty.\n"");

     else

     {
"
31597,"         * @returns void

          */

         void insert(const uint64_t &val) {

             // overflow check
"
21701,"    these smaller hulls.  The union of the convex hull from smaller hulls is the

     solution to the convex hull of the larger problem.

     Parameter
"
24619,"	55: ""110111"", 56: ""111000"", 57: ""111001"", 58: ""111010"", 59: ""111011"",

 	60: ""111100"", 61: ""111101"", 62: ""111110"", 63: ""111111"", 64: ""1000000"",

 	65: ""1000001"", 66: ""1000010"", 67: ""1000011"", 68: ""1000100"", 69: ""1000101"",
"
32873,"// original list is : 8 9 3 1 4

 // sorted list is : 1 3 4 8 9

 // enter the no. of nodes : 3

 // -1 -2 -3

 // original list is : -1 -2 -3
"
19565,"    Iterate through every possible cube and sort the cube's digits in

     ascending order. Sorting maintains an ordering of the digits that allows

     you to compare permutations. Store each sorted sequence of digits in a

     dictionary, whose key is the sequence of digits and value is a list of

     numbers that are the base of the cube.

     Once you find 5 numbers that produce the same sequence of digits, return
"
20690,"s = 'IV'

 puts roman_to_int(s)

 # Output: 4

 s = 'IX'

 puts roman_to_int(s)

 # Output: 9
"
19105,"  it('should produce white pixels outside of the set', () => {

     const blackAndWhite = getRGBData(800, 600, -0.6, 0, 3.2, 50, false)

     expect(blackAndWhite[0][0]).toEqual([255, 255, 255]) // black
"
61642,"    To better understand the algorithm, see also:

     https://github.com/akashvshroff/Gale_Shapley_Stable_Matching (README).

     https://www.youtube.com/watch?v=Qcv1IqHWAzg&t=13s (Numberphile YouTube).

     >>> donor_pref = [[0, 1, 3, 2], [0, 2, 3, 1], [1, 0, 2, 3], [0, 3, 1, 2]]

     >>> recipient_pref = [[3, 1, 2, 0], [3, 1, 0, 2], [0, 3, 1, 2], [1, 0, 3, 2]]

     >>> print(stable_matching(donor_pref, recipient_pref))
"
22467,"using DataStructures.Graph;

 using FluentAssertions;

 using NUnit.Framework;
"
25731," */

 // Return the length of the Longest Increasing Subsequence, given array x

 function longestIncreasingSubsequence (x) {
"
19424,"        {

             // To move at the end, first move maximum number to beginning

             flip(arr, maxElementIdx);

             // Now move the maximum number to end by reversing current array

             flip(arr, curr_size - 1);
"
17011,"    } else {

       hex_val = remainder.toString();

     }
"
80160,"      if (first < last) {

         pivot = first

         i = first

         j = last
"
16077,"		ll.Head.Prev = nil

 	}

 	return cur.Val

 }

 // DetAtEnd Delete a node at the end of the linkedlist

 func (ll *Doubly) DelAtEnd() interface{} {
"
30228,"    boolean[][] isSum = new boolean[n + 2][sum + 1];

     isSum[n + 1][0] = true;

     for (int i = 1; i <= sum; i++) {
"
15734,"                hue = 60 * (4 + (dRed - dGreen) / chroma);

             }

             hue = (hue + 360) % 360;

             return (hue, saturation, value);
"
15817,"package Mathematics

 import org.scalatest.flatspec.AnyFlatSpec

 class FibonacciSpec extends AnyFlatSpec {

   ""FibonacciSpec 1"" should ""output the correct sequence of the first 40 fib numbers"" in {
"
77227,"  T get current {

     T currentValue = this._current.value;

     this._current = this._current.next;
"
22057,"		b := c[1]

 		dependencies[b]++

 		edges[a][b] = true

 	}

 	answer := []int{}
"
33491,"    for (int i = 0; i < word.length(); i++) {

       char ch = word.charAt(i);

       TrieNode node = currentNode.child[ch - 'a'];
"
23386,"# Output: 1
"
22442,"NGN	Nigerian Naira

 NIO	Nicaragua Cordoba

 NOK	Norwegian Krone

 NPR	Nepalese Rupee
"
46093,"    int length = 1;

     tail[0] = array[0];

     for (int i = 1; i < N; i++) {
"
20670,"		}

 	}

 }

 // Generate returns a int slice of prime numbers up to the limit

 func Generate(limit int) []int {

 	var primes []int
"
29283,"        h2 += c;

         h3 += d;

         h4 += e;

     }

     // Build signature from state

     // Note, any type could be used for the signature
"
75344,"Each loop the function will find the highest value in the array and check if the capacity is enough to store it, if enough then 

 the value will be added into the total_max_value. 

 After that the highest current value will be deleted.

 ```

 julia> zero_one_pack!(20,[1,3,11],[2,5,30])

 37
"
12629,"  void insert(int data) {

     Node newnode = new Node(data);

     size++;
"
47877,"        System.out.println(findAnySolution(toSolve));

     }

     public static Solution findAnySolution(final Equation equation) {

         if (equation.a() == 0 && equation.b() == 0 && equation.c() == 0) {

             return Solution.INFINITE_SOLUTIONS;

         }
"
53523,"    }

   }

 }
"
30840," * @param base calculated from alphabet

  * @param converted string filled with the convertion's result

  * @return void

  */

 void convertion(uint64_t nb, const char* alphabet, short base, char* converted) {
"
16099,"// sudokuSolver(board) // -> board updated by reference

 export { sudokuSolver }
"
31399,"    else		/* deleting any other node */

       follow->next=p->next ;

     free(p) ;

   }

 }
"
29796," 

 public class WineProblem {

 	// Method 1: Using Recursion

 	// Time Complexity=0(2^N) Space Complexity=Recursion extra space

 	public static int WPRecursion(int[] arr, int si, int ei) {
"
90764,"        case '2':

             bin += 10;

             break;

         case '3':

             bin += 11;

             break;
"
54521,"    {

         if (array->array[i] == value)

             total++;

     }

     return total;

 }
"
27151,"}
"
28143,"}
"
13927,"        {

             return -1;

         }

         if (game_table[1] == 'o' && game_table[4] == 'o' &&

             game_table[7] == 'o')

         {
"
11183,"    assert approximatelyEqualHsv(rgbToHsv(255, 0, 255), new double[] {300, 1, 1});

     assert approximatelyEqualHsv(rgbToHsv(64, 128, 128), new double[] {180, 0.5, 0.5});

     assert approximatelyEqualHsv(rgbToHsv(193, 196, 224), new double[] {234, 0.14, 0.88});

     assert approximatelyEqualHsv(rgbToHsv(128, 32, 80), new double[] {330, 0.75, 0.5});
"
22687,"  return list

 }

 export { cycleSort }
"
67794,"            int currentIndex = 0;

             int nextIndex = jumpStep;

             if (sortedArray.Length != 0)

             {
"
25323,"import { breadthFirstSearch } from '../BreadthFirstSearch'

 describe('BreadthFirstSearch', () => {

   const graph = {

     A: ['B', 'D'],

     B: ['E'],

     C: ['D'],
"
26159,"        {

             var timeline = new Timeline<string>

             {

                 { new DateTime(1985, 1, 10), ""TestTime1"" },

                 { new DateTime(1990, 1, 10), ""TestTime2"" },
"
22104,"        case 5:

             In(root);

             break;

         case 6:
"
93064,"    }

     /** Method to check if number is Automorphic Number or Not

      *  1) Input  - Enter a Number: 25
"
32742,"module TheAlgorithms

 # Usings/Imports (keep sorted)

 using LinearAlgebra

 using Random

 ## Exports

 # Please keep the folders/functions sorted
"
37177,"# GCD(6, 3) = 3

 #

 # Dynamic driver code:

 #
"
33187,"        {  // Right Rotate

             toDelete->par->right = toDelete->left;

             if (toDelete->left != NULL)

             {

                 toDelete->left->par = toDelete->par;

             }
"
16182,"    result_test2 = sorting::selectionSort(vector2, vector2size);

     assert(std::is_sorted(result_test2.begin(), result_test2.end()));

     std::cout << ""Passed"" << std::endl;
"
21365,"    const res = nextPowerOfTwo(input)

     expect(res).toBe(result)

   })

 })
"
15608,"            // Act

             // Assert

             _ = Assert.Throws<ArgumentException>(() => BinomialCoefficient.Calculate(n, k));
"
22667,"    printf(""Enter the decimal number: "");

     scanf(""%ld"", &decimalnum);

     decimal2Octal(decimalnum);

     return 0;

 }

 /********function for convert decimal numbers to octal numbers************/
"
27775,"	})

 }

 // TestStackLinkedListWithList for testing Stack with Container/List Library (STL)

 func TestStackLinkedListWithList(t *testing.T) {
"
21569,"	return result

 }
"
33696,"                Height = Math.Max(Left.Height, Right.Height) + 1;

                 BalanceFactor = Right.Height - Left.Height;

             }

         }

     }

 }
"
83740,"            ""c"": 0.02202,

             ""d"": 0.04253,

             ""e"": 0.11162,
"
62039," * @param root head/root node of a tree

  */

 static void test1(others::iterative_tree_traversals::BinaryTree binaryTree,

                   others::iterative_tree_traversals::Node *root) {

     std::vector<int64_t> actual_result{1, 2, 4, 5, 3};

     std::vector<int64_t>
"
32403,"      s += d * (int) Math.pow(2, power++);

       binCopy /= 10;

     }
"
23509,"    adjusted_down(adjusted_array, i, array_size)

   end

   while array_size > 1

     adjusted_array[1], adjusted_array[array_size] = adjusted_array[array_size], adjusted_array[1]

     array_size -= 1

     adjusted_down(adjusted_array, 1, array_size)
"
12793,"        public static void Union_EmptyHeap_BecomesOtherHeap()

         {

             var thisHeap = new FibonacciHeap<int>();

             var otherHeap = BuildTestHeap();

             var minNode = otherHeap.Peek();
"
22422,"            {

                 yield return tempElement.Data;

                 tempElement = tempElement.Next;

             }

         }
"
21238,"                {

                     bitmap.SetPixel(x, y, layout[y, x]);

                 }
"
23633,"                     {0, -3, 3, -1, -3},

                      {-3, -1, -3, -3, 0}};

     double y[] = {9.27648, -9.26948, 2.0181, -1.03516,

                   -5.98994};  // corresponding y-values

     double eig_vals[5];
"
25785,"                {

                     us[j, i] = u[j];

                 }

                 for (var j = 0; j < v.Length; j++)
"
72191,"if __name__ == ""__main__"":

     main()
"
17340,"                      |    \                     |

                      . 5.  (101)-.13. -(138)   (115)

                       |           |     |     /

                     ( 99)       ( 97)   |    /

                       |           |     |   /

         .12. -(151)- .15. -(80)- .14.   |  /
"
21270,"  return gcd(b % a, a);

 }

 //Function to return LCM of two numbers

 double lcm(int a, int b) {

   return (a * b) / gcd(a, b);

 }
"
89179,"    const theString = 'I can\'t do that'

     const maxChar = maxCharacter(theString)

     expect(maxChar).toBe('t')

   })

 })
"
22533,"        }

         bool isEmpty(){

             if(top==-1)

                 return true;
"
15573,"    int E = graph.edgeNum;

     int dist[V];

     // Initialize distances array as INF for all except source

     // Intialize source as zero
"
48717," * nodes. Every element contains a key, and those keys indicate how the tree shall be built. For

  * instance, for a min-heap, the key of a node shall be greater than or equal to its parent's and

  * lower than or equal to its children's (the opposite rule applies to a max-heap).

  *

  * <p>All heap-related operations (inserting or deleting an element, extracting the min or max) are

  * performed in O(log n) time.
"
32133,"        /// </summary>

         /// <param name=""key"">The key to insert.</param>

         /// <exception cref=""ArgumentException"">

         ///     Thrown if key is already in BST.

         /// </exception>

         public void Add(TKey key)
"
31520,"    root_node.next_node.next_node.next_node = root_node.next_node

     print(root_node.has_loop)  # True

     root_node = Node(5)
"
13510,"  return Node

 }())

 // class Tree
"
26431,"    return 0;

     //  return (arg1 > arg2) - (arg1 < arg2); // possible shortcut

     //  return arg1 - arg2; // erroneous shortcut (fails if INT_MIN is present)
"
28662,"        kernel_func,

         alpha_list=None,

         cost=0.4,

         b=0.0,
"
41628,"        }

         //check if det = 0

         if (determinant(keyMatrix, n) % 26 == 0) {

             System.out.println(""Invalid key, as determinant = 0. Program Terminated"");

             return;
"
26072,"Contributed By:- [Gervin Fung](https://github.com/GervinFung)

 """"""

 function exchange_sort!(arr::Vector{T})where T
"
82458,"#include <stdio.h>

 #include <stdlib.h>

 #include <string.h>

 void swap(char *left, char *right)

 {

     char temp = *left;
"
20952,"}
"
75565,"void Queue_Array::display() const {

     if (front == -1) {

         std::cout << ""\nStack is empty"";

     } else {
"
16370,"            // Arrange

             var subject = new RecursiveBinarySearcher<int>();

             var collection = (IList<int>?)null;
"
14924,"})

 describe('Testing Conversion of Reamur to Rankine', () => {

   it('with Reamur value', () => {
"
16599,"#include<iostream>

 using namespace std;

 int main(int argc, char const *argv[])

 {

     int i,j,k,f;
"
27369,"/**

  * Definition for a binary tree node.

  * struct TreeNode {

  *     int val;
"
33513,"            if (i == 1)

             {

                 printPositioning(i, 1, j);

                 printsTray(Player1, 0);
"
25463," * @return string

  */

 function maxCharacter(string $string)

 {

     if (empty($string)) {
"
31178,"   *  1 if a greater than b

    */

   const defaultComparator = function (x, y) {

     if (x === undefined && y === undefined) return 0

     if (x === undefined) return 1

     if (y === undefined) return -1
"
68990,"        node = LeftRightRotate(node);

     }

     /*Right Left */

     if (balance < -1 && key < (node->right->key))
"
19344,"                return;

             }

             // If a or b are out of the by l and r specified subarray stop application at this node
"
31178," */

 #include <algorithm>

 #include <cmath>

 #include <iostream>

 #include <array>

 /** 
"
31085,"  private static class TestWriteWorker implements Runnable {

     String _alphabet = ""abcdefghijklmnopqrstuvwxyz0123456789"";

     Random _random = new Random();

     CircularBuffer _buffer;

     public TestWriteWorker(CircularBuffer cb) {

       this._buffer = cb;
"
11251,"    assert(are_amicable(6368, 6232) == true);

     // are_amicable(458, 232) returns false.

     assert(are_amicable(458, 232) == false);

 }
"
19291,"    previous.next = node

     this.size++

   }

   remove () {

     if (!this.head) return
"
16793,"package Sort

 object RecursiveInsertionSort {

   /** @param array

     *   - a List of unsorted integers
"
29058,"import java.util.List;

 import java.util.Random;

 /**
"
25017,"	if n == 1 {

 		return 1

 	} else {

 		return n * RecursiveFactorial(n-1)

 	}
"
29763,"import { shuffle } from '../FisherYatesShuffle'

 describe('shuffle', () => {

   it('expects to have a new array with same size', () => {
"
68826,"    >>> solution(3)

     12

     """"""

     f1, f2 = 1, 1

     index = 2
"
11586,"def Dijkstra(graph, V, src):

     mdist = [float(""inf"") for i in range(V)]

     vset = [False for i in range(V)]

     mdist[src] = 0.0

     for i in range(V - 1):
"
72116,"    free(aarray);

     free(barray);

     free(carray);

     free(darray);

     printf(""\n"");

     return 0;
"
27206,"        private static Color BlackAndWhiteColorMap(double distance) =>

             distance >= 1

                 ? Color.FromArgb(255, 0, 0, 0)

                 : Color.FromArgb(255, 255, 255, 255);

         /// <summary>

         ///     Color-coding taking the relative distance into account. The Mandelbrot set
"
71237,"class CocktailShakerSort implements SortAlgorithm {

   /**

    * This method implements the Generic Cocktail Shaker Sort

    *

    * @param array The array to be sorted Sorts the array in increasing order
"
28552,"    https://en.wikipedia.org/wiki/Quicksort#Three-way_radix_quicksort

     First divide the list into three parts.

     Then recursively sort the ""less than"" and ""greater than"" partitions.

     >>> three_way_radix_quicksort([])

     []

     >>> three_way_radix_quicksort([1])
"
27954,"        self.tail = None

     def __iter__(self) -> Iterator[Any]:

         node = self.head
"
13219,"            var offsetX = bitmapWidth / 10f;

             var offsetY = bitmapWidth / 3.7f;

             var vector1 = new Vector2(offsetX, offsetY);

             var vector2 = new Vector2(bitmapWidth / 2, (float)Math.Sin(Math.PI / 3) * bitmapWidth * 0.8f + offsetY);

             var vector3 = new Vector2(bitmapWidth - offsetX, offsetY);

             List<Vector2> initialVectors = new() { vector1, vector2, vector3, vector1 };
"
33349,"	

 	return i != len-1 ? i : -1;

 	 

 }

 /**

  * @brief Self-test implementations
"
29714,"            # push it into the queue

             for neighbour in neighbours:

                 new_path = list(path)

                 new_path.append(neighbour)
"
31585,"# Challenge name: Find Common Characters

 #

 # Given an array A of strings made only from lowercase letters, return a list

 # of all characters that show up in all strings within the list

 # (including duplicates).  For example, if a character occurs 3 times in all

 # strings but not 4 times, you need to include that character three times in
"
18112,"  let outStr = ''

   // get first string length.

   const firstStringLength = str1.length

   // get second string length.
"
50282,"    10

     >>> top_down_cut_rod(10, [1, 5, 8, 9, 10, 17, 17, 20, 24, 30])

     30
"
10418,"    {

         putchar(ptr->value + 0x30); /* convert digit to ASCII char */

         ptr = ptr->prev_digit;
"
23507,"        /// <returns>

         ///     The array of items that provides the maximum value of the

         ///     knapsack without exceeding the specified weight <paramref name=""capacity"">capacity</paramref>.

         /// </returns>

         public T[] Solve(T[] items, int capacity, Func<T, int> weightSelector, Func<T, double> valueSelector)

         {
"
27963,"            let mutable value = list.[index]

             let mutable pos = index

             for i in index + 1 .. list.Length - 1 do
"
61663,"                    chi_letter_value = ((occurrences - expected) ** 2) / expected

                     # Add the margin of error to the total chi squared statistic

                     chi_squared_statistic += chi_letter_value

         # Add the data to the chi_squared_statistic_values dictionary
"
21082," */

 void HKGraph::addEdge(int u, int v)

 {

     adj[u].push_back(v); // Add v to u’s list.
"
57221,"import os

 from typing import Iterator

 URL_BASE = ""https://github.com/TheAlgorithms/Rust/blob/master""

 g_output = []
"
17959,"}
"
21272,"int add_numbers(uint8_t *a, uint8_t *b, uint8_t N)

 {

     int carry = 0;

     uint8_t *c = b; /* accumulate the result in the array 'b' */
"
15843,"              // third and fifth with total sum money as 12

     std::cout << ""passed"" << std::endl;

 }
"
34025,"        + 6 * days_to_add

         + century_starting_point

     ) % 7
"
28396,"# current_sum += num

 # max_sum = current_sum if current_sum is greater than max_sum

 # Return max_sum

 # @param {Integer[]} nums

 # @return {Integer}

 def max_sub_array(nums)
"
27513,"puts max_number(9669)

 # => 9969

 puts max_number(9996)

 # => 9999
"
12191,"    return true

   } else if (intArr.length > 1) {

     return intArr[middleIndex] < searchQuery ? BinarySearch(intArr.slice(1, middleIndex)) : BinarySearch(intArr.slice(middleIndex))
"
20744,"{

     void *root;       /**< the root of formed segment tree */

     void *identity;   /**< identity element for combine function */

     size_t elem_size; /**< size in bytes of each data element */

     size_t length;    /**< total size of array which segment tree represents*/

     /** the function to be used to combine two node's
"
28064,"		String a = ""babad"";

 		String b = ""cbbd"";

 		String aLPS = LPS(a);
"
28097," */

 /**

  * Returns the power digit sum of n^pow.

  *

  * @param {number} [n=2]
"
31364,"    }

     friend ostream &operator<<(ostream out, const C &c) {

         out << c.mystr << endl;
"
20078,"        {

             if (proposers.Length != accepters.Length)

             {
"
26729,"    -2

     >>> determinant([[1.5, 2.5], [3, 4]])

     -1.5

     """"""

     if len(matrix) == 1:
"
33555,"    >>> area_triangle_three_sides(2, 7, 4)

     Traceback (most recent call last):

         ...

     ValueError: Given three sides do not form a triangle
"
30964,"        all.true[i]<-TRUE

       }

     }

     formerPoint = iterPoint

     continue.change=ifelse(all(all.true) == T,F,T)
"
78642,"    Scanner sc = new Scanner(System.in);

     int n, k, d, s = 0, c = 0;

     System.out.print(""Decimal number: "");

     n = sc.nextInt();

     k = n;

     while (k != 0) {
"
66888,"number; for example, 66420.

 We shall call a positive integer that is neither increasing nor decreasing a ""bouncy""

 number, for example, 155349.

 Clearly there cannot be any bouncy numbers below one-hundred, but just over half of

 the numbers below one-thousand (525) are bouncy. In fact, the least number for which
"
24792,"    printf(""\nResultant polynomial:\n"");

     display_polynomial(poly3);

     printf(""\n"");

     // Frees memory space
"
33802,"        new_key = self.hash_function(key + 1)

         while self.values[new_key] is not None and self.values[new_key] != key:

             if self.values.count(None) > 0:

                 new_key = self.hash_function(new_key + 1)
"
43362,"            30469, 30491, 30493, 30497, 30509, 30517, 30529, 30539, 30553, 30557, 30559, 30577, 30593, 30631, 30637,

             30643, 30649, 30661, 30671, 30677, 30689, 30697, 30703, 30707, 30713, 30727, 30757, 30763, 30773, 30781,

             30803, 30809, 30817, 30829, 30839, 30841, 30851, 30853, 30859, 30869, 30871, 30881, 30893, 30911, 30931,

             30937, 30941, 30949, 30971, 30977, 30983, 31013, 31019, 31033, 31039, 31051, 31063, 31069, 31079, 31081,

             31091, 31121, 31123, 31139, 31147, 31151, 31153, 31159, 31177, 31181, 31183, 31189, 31193, 31219, 31223,

             31231, 31237, 31247, 31249, 31253, 31259, 31267, 31271, 31277, 31307, 31319, 31321, 31327, 31333, 31337,
"
66065,"def isSumSubset(arr, arrLen, requiredSum):

     """"""

     >>> isSumSubset([2, 4, 6, 8], 4, 5)

     False
"
44505,"			listQueue.Enqueue(true)

 			listQueue.Enqueue(212.545454)

 			if listQueue.Len() != 4 {

 				t.Errorf(""List Enqueue is not correct expected %d but got %d"", 4, listQueue.Len())

 			}
"
23687,"        >>> d.add_first('A').first()

         'A'

         >>> d.add_first('B').first()

         'B'

         """"""
"
31515,"    /// https://en.wikipedia.org/wiki/Miller-Rabin_primality_test

     /// The Miller–Rabin primality test or Rabin–Miller primality test is a probabilistic primality test:

     /// an algorithm which determines whether a given number is likely to be prime,

     /// similar to the Fermat primality test and the Solovay–Strassen primality test.

     /// It is of historical significance in the search for a polynomial-time deterministic primality test.
"
27579,"  numberToCharMap[5] = new Character[]{'j','k','l'};

   numberToCharMap[6] = new Character[]{'m','n','o'};

   numberToCharMap[7] = new Character[]{'p','q','r','s'};

   numberToCharMap[8] = new Character[]{'t','u','v'};

   numberToCharMap[9] = new Character[]{'w','x','y','z'};

 }
"
18670,"puts climb_stairs(4)

 # => 5

 puts climb_stairs(10)

 # => 89

 puts climb_stairs(45)

 # => 1836311903
"
24358,"	n.verify(t, checkWords)

 	n.verifySizeCapa(t, size, capa) // no words, but still have some nodes left capacity

 	if !n.Compact() {

 		t.Fatal(""the root node of an empty Trie should be marked as removable after compaction"")

 	}

 	n.verifySizeCapa(t, 0, 1) // no words, only the root node left
"
19952,"    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

     printf(""Client is running...\n"");

     /**
"
86705,"	min := values[0]

 	for _, value := range values {

 		if value < min {
"
24765,"    # linear time

     small = [e for e in lst if e < pivot]

     big = [e for e in lst if e > pivot]

     # if we get lucky, pivot might be the element we want.
"
64530,"  word.chars.sum { |char| char.ord - 'A'.ord + 1 }

 end

 # this method takes the words as an input

 # calls `word_worth` method on each word

 # to that value multiply that with the index of the word in the array
"
41806,"struct Sum {

     typedef SumLoop<0, n> type;

 };

 template<int n>
"
27759,"            var item2 = heap.Push(2);

             item2.Degree = -1;

             Assert.Throws<InvalidOperationException>(() => heap.RawCut(item1, item2));
"
33751,"}
"
71527,"            Assert.AreEqual(4, threeNode!.Right!.Key);

             var twoNode = tree.Search(2);

             Assert.IsNull(twoNode!.Left);

             Assert.IsNull(twoNode!.Right);
"
20121,"  public int pop() {

     if (!isEmpty()) { // Checks for an empty stack

       return stackArray[top--];

     }
"
69594,"     * of rows wth column so we interchange the rows in next loop Thus at last

      * matrix of transpose is obtained through user input...

      */

     System.out.println(""The Transpose of the given matrix is:"");

     for (i = 0; i < column; i++) {

       for (j = 0; j < row; j++) {
"
99129,"            res.Should().Throw<ArgumentException>()

             .WithMessage(String.Format(""{0} is not a positive integer"", m));

         }
"
29900," * @param c pointer where minimum of a and b is tored as result

  */

 void minimum(const void *a, const void *b, void *c)

 {

     *(int *)c = *(int *)a < *(int *)b ? *(int *)a : *(int *)b;

 }
"
33016,"      System.out.println();

     }

   }

 }
"
14533,"    ///     TODO.

     /// </summary>

     /// <typeparam name=""T"">TODO. 2.</typeparam>

     public class BinarySearcher<T> where T : IComparable<T>
"
24162,"            {

                 throw new ArgumentException($""Key \""{key}\"" already exists in tree!"");

             }

             // Check all of the new node's ancestors for inbalance and perform
"
11851,"                    RemoveCase3(node, closeNewphew, dir);

                     break;

                 case 4:

                     RemoveCase4(sibling);

                     break;
"
16123,"                    return;

                 }

                 InOrderWalk(node.Left);

                 result.Add(node.Key);

                 InOrderWalk(node.Right);
"
23663,"    A::count=5; // 设置类A的count为2

     cout<<A::count<<endl;

 //    int count=3; // 局部count

 //    count=4;     // 设置局部的count为4
"
31239,"    return true

   }

   getDayDiff (startDate, endDate) {

     if (this.isGreater(startDate, endDate) === null) {

       return 0

     } else if ((this.isGreater(startDate, endDate) === true)) {
"
18248,"	if mod == 1 {

 		return 0

 	}

 	var r int64 = 1
"
11631,"}

 /**

  * test function to predict points in a 2D coordinate system above the line
"
42423,"    int primesCount = (int) Arrays.stream(numbers)

         .filter(element -> element == Type.PRIME)

         .count();

     int[] primes = new int[primesCount];

     int primeIndex = 0;
"
14905,"}
"
30043,"    @returns : log10(N/df) or 1+log10(N/1+df)

     @examples :

     >>> inverse_document_frequency(3, 0)
"
32793," * <p>This is an extension of BinarySearch.

  *

  * <p>Worst-case performance O(log n) Best-case performance O(1) Average performance O(log n)

  * Worst-case space complexity O(1)

  *
"
20397," */

 union UnionTest {

     /**

      * 可以含有构造函数、析构函数

      */
"
20576,"import { pow } from '../Pow'

 describe('Pow', () => {

   it('should return 1 for numbers with exponent 0', () => {

     expect(pow(2, 0)).toBe(1)

   })
"
27587,"        /* If the power of the second polynomial is greater than the power of

           the first one place the power and coefficient of that node of the

           second polynomial in temp and increase the pointer poly2

         */

         else if (poly1->pow < poly2->pow)
"
22896,"  // If the input numbers are not integers return an error message.

   if (num1 !== Math.round(num1) || num2 !== Math.round(num2)) {

     return 'Please enter whole numbers.'

   }

   let maxNum
"
24012,"# Example

 ```julia

 kelvin_to_fahrenheit(273.354, 3) == 32.367  # returns true
"
32804,"  // This and following subsets on this path will always add up to

   // greater than targetSum, so no need to continue

   if (sum > targetSum) return []

   // Initialize results array. Will contain only valid subsets

   let results = []
"
18017,"true

 ```

 # References:
"
25820,"		c.out = c.out[:len(c.out)-1]

 	}

 	c.out = append(c.out, c.in[inLen-1])

 	fmt.Println(string(c.out))

 	c.out = c.out[:len(c.out)-1]
"
64208,"    ///     p - pattern length.

     /// </summary>

     public static class RabinKarp
"
11401,"      }

     }

     setBalance(a, b);

     return b;

   }

   private Node rotateRight(Node a) {
"
96815,"    :condition: function that represents the condition that user input is valid.

     :default: Default value in case the user does not type anything

     :return: user's input

     """"""

     while True:

         try:
"
60748,"/**

  * Copyright 2020 @author tjgurwara99

  * @file
"
60532,"            return '.';

         }

         else if (logic == -2)

         {
"
25329,"            => false;

         /// <summary>

         ///     Gets the count of pairs.

         /// </summary>
"
14238,"// function for poping the element out

 void pop()

 {

     if (top == -1)
"
20418,"    }

   })

 })
"
16862,"    end

     # Build the 'output' by assigning the item into correct position (STEP 4)

     for i in 1:r

       index = arr[i] - min + 1
"
80137,"        // node.

         auto const it = adjList.find(node);

         if (it != adjList.end()) {

             for (auto child : it->second) {

                 // If state of child node is ""not_visited"", evaluate that child

                 // for presence of cycle.
"
16595,"				t.Fatalf(""Expecting %v, actual %v"", decrypted, actual)

 			}

 		})

 	}

 }
"
16603,"        """"""

         Arguments:

             num_of_nodes - the number of nodes in the graph

         Attributes:

             m_num_of_nodes - the number of nodes in the graph.

             m_edges - the list of edges.
"
12977,"# [7,]  -1.50149039  0.78617383  -1.33575163 -1.1798594716"
74029,"            0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,

             0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,

             0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,

             0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,

             0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
"
25306," */

 namespace graph {

 /**

  * @brief Function that add edge between two nodes or vertices of graph

  *

  * @param adj adjacency list of graph.
"
31619,"    The chi-squared test

     -------------------

     Each letter in the english alphabet has a frequency, or the amount of times

     it shows up compared to other letters (usually expressed as a decimal

     representing the percentage likelihood). The most common letter in the
"
34007,"struct ListNode *deleteDuplicates(struct ListNode *head)

 {

     if (head == NULL)

         return NULL;

     if (head->next && head->val == head->next->val)
"
20436,"    }

 }

 /**

  * Test function
"
33570,"            mat[line][j] = boat;

         }

         if (boat == 3)

         {
"
99024,"    # If weight of the nth item is more than Knapsack of capacity,

     #   then this item cannot be included in the optimal solution,

     # else return the maximum of two cases:

     #   (1) nth item included
"
10493,"          skyline.add(new Skyline(currentX, currentH1));

         }

       } else {

         int currentX = sky2.get(0).coordinates;

         currentH2 = sky2.get(0).height;
"
18870,"                fibMinus1 = fibMinus2;

                 fibMinus2 = fibNumber - fibMinus1;

                 offset = i;
"
11761,"        }

         [Test]

         public void Svd_Decompose()

         {
"
32651,"    const toSort = [5, 6, 7, 8, 1, 2, 12, 14]

     const expected = [1, 2, 5, 6, 7, 8, 12, 14]

     expect(selectionSort(toSort)).toEqual(expected)
"
28144,"    std::cout << ""Time taken to compute: "" << dtime << "" sec\n "";

     return 0;

 }
"
21324,"                }

                 // Change The Colors

                 child->color = 0;
"
33005," * For more details, refer to the

  * [Algorithms-Explanation](https://github.com/TheAlgorithms/Algorithms-Explanation/blob/master/en/Basic%20Math/Finding

  * the number of digits in a number.md) repository.
"
11164,"  static int knapSackRec(int W, int wt[], int val[], int n, int[][] dp) {

     // Base condition

     if (n == 0 || W == 0) return 0;

     if (dp[n][W] != -1) return dp[n][W];
"
59275,"     * Assumes that the provided numbers are valid indices of vertices.

      * Iterativelly modifies (""lifts"") u an v until it finnds their lowest

      * common ancestor.
"
23789,"  private void setNext(NodeStack<?> next) {

     this.next = next;

   }
"
10822,"    key[0] = 0; // Make key 0 so that this vertex is

     // picked as first vertex

     parent[0] = -1; // First node is always root of MST

     // The MST will have V vertices
"
34841,"    y = np.array(train_usr)

     beta = np.dot(np.dot(np.linalg.inv(np.dot(x.transpose(), x)), x.transpose()), y)

     return abs(beta[0] + test_dt[0] * beta[1] + test_mtch[0] + beta[2])

 def sarimax_predictor(train_user: list, train_match: list, test_match: list) -> float:
"
23693,"    print(""New node d"")

     let d = UnionFindNode()

     print(""a, d"", UnionFindNode.inSameSet(a, d))
"
23327,"    return 0;

 }
"
12843,"    'Hlia rDsahrij'

     """"""

     cipherText = [""""] * key

     for col in range(key):

         pointer = col
"
90876,"            // Assert

             Assert.IsTrue(Math.Abs(expected - actual) < error);

         }

         [TestCase(0.0)]

         [TestCase(1.0)]

         public void Cos_ErrorForm_InvalidCases(double error) =>
"
27504,"                return node1;

             }

             AddChild(ref node2!, node1);

             return node2;
"
11967,"    }

 }
"
15665,"    $distanceVectorInit = [];

     $distanceVectorFinal = [];

     for ($i = 0; $i < $lenStr1 + 1; $i++) {

         $distanceVectorInit[] = 0;

         $distanceVectorFinal[] = 0;
"
31417,"                curr = curr->right;

             }

         }

     }

 }
"
32467,"[[FiniteDiff]]

 deps = [""ArrayInterface"", ""LinearAlgebra"", ""Requires"", ""SparseArrays"", ""StaticArrays""]

 git-tree-sha1 = ""8b3c09b56acaf3c0e581c66638b85c8650ee9dca""

 uuid = ""6a86dc24-6348-571c-b903-95158fe2bd41""
"
21508,"    h /= 3

   end

   a

 end
"
28112,"    (3,2,4), (3,5,4), (4,1,3), (4,2,3), (4,5,3)

     total 10

     """"""
"
18962,"/**

  * @brief Test implementations

  * @returns void

  */

 static void test() {

     // Test 1
"
28967,"package Search

 import scala.math.{floor, min, sqrt}

 object JumpSearch {

   /** An implementation of the jump search algorithm in scala used to search a sorted list
"
12279,"            for (var i = 0; i < solution.GetLength(0); i++)

             {

                 var foundQueen = false;

                 for (var j = 0; i - j >= 0; j++)

                 {
"
72112,"    /// Implementation of Disjoint Set with Union By Rank and Path Compression heuristics.

     /// </summary>

     /// <typeparam name=""T""> generic type for implementation.</typeparam>

     public class DisjointSet<T>
"
11304,"    for (let iSorted = 0; iSorted < arr.length; iSorted++) {

       sorted.push(arr[iSorted])

     }

   }
"
28068,"            if (childDir < 0)

             {

                 sibling.Left!.Color = NodeColor.Red;

             }
"
25634,"      }

       // If it has a left child

       else {

         if (temp == root) {
"
29234," */

 void push(int8_t opd) {

 	if(st.top == 19)	{		// overflow condition

 		printf(""Stack overflow..."");

 		exit(1);

 	}
"
27197,"                { new DateTime(2000, 1, 1), ""TestTime2"" },

                 { new DateTime(2005, 1, 1), ""TestTime3"" },

                 { new DateTime(2010, 1, 1), ""TestTime4"" },

                 { new DateTime(2015, 1, 1), ""TestTime5"" },

             };
"
24893,"        public static void GetAllValuesTest()

         {

             var timeline = new Timeline<string>

             {
"
13535,"{

     int *a, n = 10, i, j, temp, sum = 0;

     float mean;

     if (argc == 2)

     {

         n = atoi(argv[1]);
"
78286,"  return newString.join('')

 }

 export { upperCaseConversion }
"
10641,"            // for each singular value

             for (var i = 0; i < numValues; i++)

             {

                 // compute the v singular vector

                 double[] v = Decompose1D(remaining, epsilon, maxIterations);
"
31889,"    cStack.push('E');

     for(i=1;i<6;i++)  cout<<cStack.pop()<<""\t"";

     cout<<endl;

     system(""pause"");
"
33300,"    if left_index < heap_size and array[largest] < array[left_index]:

         largest = left_index

     if right_index < heap_size and array[largest] < array[right_index]:

         largest = right_index

     if largest != index:
"
24423,"ⶨͳʼ(::)ָࡣ

 */

 #include <iostream>

 using namespace std;

 class Point	
"
18231,"  const divisors = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]

   let num = 21

   let result
"
31931,"    auto&& v1 = w1;                  // v1 is an auto-based universal reference being

     // initialized with an lvalue, so v1 becomes an

     // lvalue reference referring to w1.

     // 不能编译
"
33577,"            }

             var m = (a + b) / 2;

             // Application of the saved operand to the direct and indrect child nodes

             return Operand[i] * (Query(l, r, a, m, Left(i)) + Query(l, r, m + 1, b, Right(i)));

         }

         /// <summary>
"
13887,"      stringBuilder.append(Integer.toString(n));

       stringBuilder.append(from_rod);

       stringBuilder.append(aux_rod);

       movements.add(stringBuilder.toString());

       // System.out.println(""Move disk 1 from rod "" +  from_rod + "" to rod "" + aux_rod);

       stringBuilder.setLength(0);
"
42195,"  }

   /**

    * Loops through each pair of adjacent vectors. Each line between two adjacent vectors is divided
"
29867,"        }

     }

 }

 class NRKTree {

     public NRKTree left;
"
29535,"        public RedBlackTreeNode<TKey>? Left { get; set; }

         /// <summary>

         ///     Gets or sets the right child of the node.

         /// </summary>
"
86987,"   */

   rotate (angleInDegrees) {

     const radians = angleInDegrees * Math.PI / 180

     const ca = Math.cos(radians)
"
90738,"     */

   }

   public static void main(String[] args) {

     // heuristic function optimistic values
"
50020,"		name     string

 		input    int

 		expected bool

 	}{

 		{""smallest prime"", 2, true},

 		{""random prime"", 3, true},
"
21311,"  [newArray[i], newArray[j]] = [newArray[j], newArray[i]] // Swapping elements ES6 way

   return newArray

 }

 const permutations = arr => {

   const P = []

   const permute = (arr, low, high) => {
"
27352,"		tt := tt // NOTE: https://github.com/golang/go/wiki/CommonMistakes#using-goroutines-on-loop-iterator-variables

 		t.Run(tt.name, func(t *testing.T) {

 			t.Parallel()

 			res := Distance(tt.v1, tt.v2)           // Calculate result for
"
10409,"    :return: calculated variance for considered dataset

     >>> items = gaussian_distribution(5.0, 1.0, 20)

     >>> means = [5.011267842911003]
"
91796,"}

 // Example

 // const myArray = [10, 22, 35, 40, 45, 50, 80, 82, 85, 90, 100]

 // const n = myArray.length

 // const x = 90
"
79696,"    } while (digit_count < MAX_DIGITS);

     clock_t end_time = clock();

     printf(""Time taken: %.4g ms\n"",

            1e3 * (end_time - start_time) / CLOCKS_PER_SEC);
"
27698,"    print(toSort);

   }

 }
"
10843,"// Package xor is an encryption algorithm that operates the exclusive disjunction(XOR)

 // ref: https://en.wikipedia.org/wiki/XOR_cipher

 package xor
"
33378,"// From '10' to

 //  -> 2: [7, 5, 4, 2]   (dist:4)

 //  -> 3: [7, 5, 4, 3]   (dist:4)

 //  -> 4: [7, 5, 4]   (dist:3)

 //  -> 5: [7, 5]   (dist:2)

 //  -> 6: [7, 5, 4, 3, 6]   (dist:5)
"
51350,"                 double alpha_min) {

     size_t num_samples = X.size();  // number of rows

     // size_t num_features = X[0].size();  // number of columns
"
11198,"            c = (i + k) * k

             cipher.append(c)

             key.append(k)

         return cipher, key

     @staticmethod

     def decrypt(cipher: list[int], key: list[int]) -> str:
"
12332,"        public bool IsTaken { get; }

         // cumulativeWeight --> um of weight of item associated in each nodes starting from root to this node (only item that is taken)

         public int CumulativeWeight { get; set; }

         // cumulativeValue --> sum of value of item associated in each nodes starting from root to this node (only item that is taken)

         public double CumulativeValue { get; set; }
"
32810,"  out[[""distance""]]<-error.matrix

   out[[""cluster""]]<-rep(1,rows.dataset)

   for(i in 1:rows.dataset){

     out[[""cluster""]][i]<-which(cluster.matrix[i,] == 1)

   }

   return(out)
"
19591,"            return node;

         }

         /// <summary>

         ///     Gets an enumerable based on the data in the list.
"
12347,"	length int

 }

 // enqueue it will be added new value into queue

 func (ll *Queue) enqueue(n interface{}) {
"
13817,"# array. We use one iteration to construct the array L, one to update the array

 # answer.

 # Space complexity: O(1) since don't use any additional array for our

 # computations. The problem statement mentions that using the answer

 # array doesn't add to the space complexity.
"
18253,"            var node = Remove(root, key);

             // Simple cases

             node = RemoveSimpleCases(node);
"
32757,"      }

       int temp = this.heap[k];

       this.heap[k] = this.heap[minIndex];

       this.heap[minIndex] = temp;
"
64499,"				t.Errorf(""expecting knapsack with (maxWeight: %d, weights: %v, values: %v) to return %d but got %d"", tc.maxWeight, tc.weights, tc.values, tc.expected, actual)

 			}

 		})
"
19505,"/**

  * @brief Stack Class implementation for basic methods of Stack Data Structure.

  */

 struct Stack {

     std::queue<int64_t> main_q;       ///< stores the current state of the stack

     std::queue<int64_t> auxiliary_q;  ///< used to carry out intermediate
"
27315,"    expect(ReverseStringIterative('Javascript')).toEqual('tpircsavaJ')

   })

   it.each`

     input
"
14371,"      return false

     }

   }

   // Remove element at any position

   this.removeAt = function (position) {

     // look for out-of-bounds value
"
18189,"			},

 			cost: 18,

 		},

 		{
"
18322,"}

 /* Length of list */

 int List_length(L list)
"
67538,"{

     long num_divisors = 0;

     for (long long i = 1; i < sqrtl(n) + 1; i++)
"
80587,"            int[][] B21 = new int[n / 2][n / 2];

             int[][] B22 = new int[n / 2][n / 2];

  

             // Dividing matrix A into 4 parts

             split(A, A11, 0, 0);

             split(A, A12, 0, n / 2);
"
12552,"    * @param listOfElements

     * @return

     */

   def findMax(elements: List[Int]): Int = elements.foldLeft(elements.head) { (acc, i) => if (acc > i) acc else i }
"
21147,"package DynamicProgramming;

 // Partition a set into two subsets such that the difference of subset sums is minimum

 /*

 Input:  arr[] = {1, 6, 11, 5}

 Output: 1
"
29317,"/* Program to demonstrate non recursive merge sort */

 /* Merge sort is an effective sorting algorithm which falls under divide and

 conquer paradigm and produces a stable sort. Merge sort repeatedly breaks down a

 list into several sublists until each sublist consists of a single element and

 merging those sublists in a manner that results into a sorted list.
"
30185,"	}

 	if BSTree.Depth() != 2 {

 		t.Errorf(""tree should have depth = 1"")

 	}

 }
"
28001,"        if parent[i][u] != 0 and parent[i][u] != parent[i][v]:

             u, v = parent[i][u], parent[i][v]

     # returning longest common ancestor of u,v

     return parent[0][u]

 # runs a breadth first search from root node of the tree

 def breadth_first_search(
"
20253," *                           7 4

  *                          2 4 6

  *                         8 5 9 3

  *

  * That is, 3 + 7 + 4 + 9 = 23.
"
54673,"            table[j] += table[j - coin_val]

     return table[n]

 if __name__ == ""__main__"":
"
29383,"    static const std::valarray<uint8_t> mat_mul(

         const std::valarray<uint8_t> &vector, const matrix<int> &key) {

         std::valarray<uint8_t> out(vector);  // make a copy

         size_t L = std::strlen(STRKEY);
"
33642,"        ///     setups the array with false-values.

         /// </summary>

         /// <param name=""n"">length of the array.</param>
"
14564,"        /// <summary>

         ///     Gets or sets a list of all connected nodes.

         /// </summary>

         public Node[] ConnectedNodes { get; set; } = new Node[0];

         /// <summary>
"
20798,"        if (config.size() <= 1) {

             std::cerr << ""ERROR ("" << __func__ << "") : "";

             std::cerr << ""Invalid size of network, "";

             std::cerr << ""Atleast two layers are required"";
"
28880,"/**

  * @brief Lists out all the words in trie with the longest prefix

  * of the search key that is present in the trie. For example - if trie contains

  * ""abc"", ""abcde"", ""abcdefg"", ""abcddef"" and if the search key is ""abcdezz"", then

  * the longest common prefix is ""abcde"" and hence search results will be
"
15075," * For example, 370 is an Armstrong number because 3*3*3 + 7*7*7 + 0*0*0 = 370.

  * An Armstrong number is often called Narcissistic number.

  *

  */

 const armstrongNumber = (num) => {
"
27445,"// Write a program that prints the numbers from 1 to 100. But for multiples of three print ""Fizz"" instead of the number and for the multiples of five print ""Buzz"". For numbers which are multiples of both three and five print ""FizzBuzz"".

 void main() {

   fizzBuzz();
"
17426,"    }

     std::cout << std::endl;

     // Example 3. Creating random array of float.
"
64181,"  first_array = array.slice(0..mid - 1)

   second_array = array.slice(mid..-1)

   first_array = merge_sort first_array
"
77081,"  }

   return negative ? ""-"" + hex_string : hex_string;

 }
"
43799,"  }

   // height difference or balance factor of a node

   const getHDiff = function (node) {

     if (node == null) { return 0 } else { return getH(node._left) - getH(node._right) }

   }
"
61976,"# A ruby program to find min from a set of elements

 # This find_min method will return the min element out of the array

 def find_min(*array)

   min = array[0]
"
17836,"    let sort items =

         let rec loop data limit =

             if limit <= 0 then

                 data

             else

                 let lower, upper = split data limit
"
33575,"			name:     ""Singleton"",

 		},

 		// Empty slice

 		{
"
24963,"            if (node.Color == NodeColor.Black)

             {

                 return 1;

             }

             else if (node.Parent is null)

             {
"
72958,"//   'Whiskey',

 //   'X-Ray',

 //   'Yankee',

 //   'Zulu'
"
28885,"		t.Run(tc.name, func(t *testing.T) {

 			actual_output := Lcm(tc.a, tc.b)

 			if actual_output != tc.output {
"
25015,"  result = List();

   test(('inOrder traversal'), () {

     result = List();
"
15738,"    free_poly(poly1);

     free_poly(poly2);

     free_poly(poly3);

 }

 /**
"
30855,"            for j in 1 .. lenDestinationSeq + 1 do

                 if sourceSeq.[i - 1] = destinationSeq.[j - 1] then

                     costs.[i].[j] <- costs.[i - 1].[j - 1] + copyCost
"
31164,"    while (*p != '\0')

     {

         p++;

         k++;
"
28286,"        /// </summary>

         /// <param name=""first"">the first HLL.</param>

         /// <param name=""second"">The second HLL.</param>

         /// <returns>A HyperLogLog with the combined values of the two sets of registers.</returns>

         public static HyperLogLog<T> Merge(HyperLogLog<T> first, HyperLogLog<T> second)

         {
"
19595,"{

     bool isSorted = false;

     while(!isSorted)

     {

         isSorted = true;

         int32_t i;
"
27557,"""""""

 def MF_knapsack(i, wt, val, j):

     """"""

     This code involves the concept of memory functions. Here we solve the subproblems

     which are needed unlike the below example
"
12322,"    int leftNodesCount = i - inStart;

     int rightNodesCount = size - leftNodesCount - 1;

     root.left = createTreeOptimized(preorder, inorder, preStart + 1, inStart,

         leftNodesCount, inorderMap);
"
25791,"    How it works:

     (for every letter in the message)

     - Input letter goes into the plugboard.
"
89703,"            } else {

                 break

             }
"
20640,"            array[m] = temp;

         }

         sort(array, i, j - 1);

     }

     public static void main(String[] args) {
"
19123,"/*

     author sandyboypraper

     Here is the EulerTotientFunction.

     it is also represented by phi
"
28808,"                    connected.CurrentCost =

                         current.CurrentCost + current.DistanceTo(connected) * connected.TraversalCostMultiplier;

                     connected.EstimatedCost = connected.CurrentCost + connected.DistanceTo(to);

                     connected.State = NodeState.Open;

                     queue.Enqueue(connected);

                 }
"
30498,"        // If the input key is lower than the root's, search in the left subtree

         return find(root->left, data);

     }
"
15881,"        dx = self.pos_y - self.goal_y

         if HEURISTIC == 1:

             return abs(dx) + abs(dy)
"
17458,"    expect(() => area.areaRhombus('zero', 2)).toThrow()

   })

 })
"
27706,"  //  This marks the eliminated range from front

   let offset = -1

   /* while there are elements to be checked. We compare arr[fib2] with x.

     When fibM becomes 1, fib2 becomes 0 */

   while (fibK > 1) {

     // Check if fibK is a valid location
"
29095,"void Tnode::SearchFreqSuggestions(const std::string &key) {

     Tnode *cur_pos = nullptr, *prev_pos = nullptr;

     cur_pos = prev_pos = this;  // maintaining 2 pointers, initialized to root
"
20225,"            var rotations = new string[s.Length];

             for (var i = 0; i < s.Length; i++)

             {

                 for (var j = 0; j < s.Length; j++)

                 {
"
17667,"func AhoCorasick(t string, p []string) Result {

 	startTime := time.Now()

 	occurrences := make(map[int][]int)

 	ac, f, s := BuildAc(p)

 	current := 0

 	for pos := 0; pos < len(t); pos++ {
"
16264,"            }

             return GetMax(root).Key;

         }

         /// <summary>

         ///     Get keys in order from smallest to largest as defined by the comparer.
"
87109,"    std::cout << ""Give input 'a' and 'm' space separated : "";

     std::cin >> a >> m;

     if (isPrime(m)) {

         std::cout << ""The modular inverse of a with mod m is (a^(m-2)) : "";
"
21099,"  }

 }

 function exponentialSearch (arr, length, value) {
"
13557,"    void fit(std::array<std::vector<double>, N> const &X,

              std::array<int, N> const &Y) {

         double avg_pred_error = 1.f;

         int iter = 0;
"
45514,"int main(int argc, const char *argv[])

 {

     /* Intializes random number generator */
"
20268,"import { quickSort } from '../QuickSort'

 describe('QuickSort', () => {

   it('should work for empty arrays', () => {

     expect(quickSort([])).toEqual([])

   })
"
15242,"        uint64_t DD = (D[i] * D[i]) % MOD_LIMIT;

         sum += DD;

     }

     free(D);

     return sum % MOD_LIMIT;
"
27569,"        if (cur1 == cur2)

             return cur1;

         if (!cur1)

             cur1 = headB;

         if (!cur2)

             cur2 = headA;
"
39073,"        // if found (above)

         if (ptr->next != NULL)

         {

             struct Node *tmp;

             tmp = k;

             k = k->next;  // important for the while
"
96817,"      matched = lps[matched - 1]

     }

     if (text[i] === pattern[matched]) {

       matched++

     }
"
98683,"        /// <returns>Decoded text.</returns>

         string Decode(string text, TKey key);

     }

 }
"
15697,"/**

  * Bead Sort, also known as Gravity sort.

  *

  * This algorithm was inspired from natural phenomena and was designed keeping in mind objects (or beads) falling under

  * the influence of gravity.

  *
"
14905,"  for (let i = 0; i < arr.length; ++i) {

     const shouldNotBeLessThan = i % 2

     const isLessThan = arr[i] < arr[i + 1]

     if (shouldNotBeLessThan && isLessThan) {

       [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]]

     }
"
33876,"    // populating the array

     arr.push_back(22);

     arr.push_back(46);
"
15733,"                break;

             }

             else if (ele > temp->data)

             {
"
15305,"        return (key > arr[low]) ? (low + 1) : low;

     int mid = low + (high - 1) / 2;

     if (arr[mid] == key)
"
27946,"					Weight: 3,

 				},

 			},

 			cost: 4,

 		},

 		{
"
37332,"/** Driver Code */

 int main() {

     // Testing
"
10919,"import numpy as np

 class BifidCipher:

     def __init__(self) -> None:

         SQUARE = [

             [""a"", ""b"", ""c"", ""d"", ""e""],

             [""f"", ""g"", ""h"", ""i"", ""k""],
"
11183," * comp(a, b) RETURN < 0 if a < b

  * RETURN > 0 if a > b

  * MUST RETURN 0 if a == b

  */
"
27872,"    for (i = n - 1; i >= 0; i--)

     {

         output[freq[(arr[i] / place) % range] - 1] = arr[i];

         freq[(arr[i] / place) % range]--;
"
12460,"/**

  *   Min Heap is one of the two Binary Heap types (the other is Max Heap)

  *   which maintains the smallest value of its input array on top and remaining values in loosely (but not perfectly sorted) order.
"
18183,"// 	for key, value := range d {

 // 		fmt.Printf(""%c:%d; "", key, value)

 // 	}

 // 	fmt.Println()
"
31261,"}
"
26912,"  }

   /**

    * Constructor

    *

    * @param value Value to be put in the node

    * @param next Reference to the next node
"
65993,"            }

             return ret;

         };

     auto sol2 = search2.a_star_search(manhattan_distance2);

     std::cout << sol2.size() << std::endl;

     // Static assertion due to large solution
"
51165,"        std::cout << ""~Animal() is called"" << std::endl;

     }

 };

 class Dog : Animal {

 public:

     Dog(int age) : Animal(age) {
"
83284,"    {

         return prev;

     }

     return -1;

 }

 /**
"
10248,"    public Vertex(E data) {

       adjacentVerticies = new ArrayList<>();

       this.data = data;

     }

     public boolean addAdjacentVertex(Vertex to) {
"
17412,"        >>> from collections import deque

         >>> deque_collections_1 = deque([1, 2, 3])

         >>> deque_collections_1.extendleft([0, -1])

         >>> deque_collections_1

         deque([-1, 0, 1, 2, 3])
"
11686,"    return ""T"";

 }

 int main() {

     std::cout << f<int>(1) << std::endl;

 }"
54481,"    84580156166097919133875499200524063689912560717606

     05886116467109405077541002256983155200055935729725

     71636269561882670428252483600823257530420752963450
"
15155,"    ///     This class contains some tests for the class BitArray.

     /// </summary>

     public static class BitArrayTests

     {

         [Test]

         public static void TestIndexer()
"
19194,"largest_altitude(gain)

 # Output: 0

 #

 # Approach 2: Without creating an additional array

 #
"
93664,"        if (stack.top() == matchingBracket[currentChar]) {

           stack.pop();

         } else {
"
13396,"    >>> infix_to_postfix(""(3+4)*5-6"")

     '3 4 + 5 * 6 -'

     >>> infix_to_postfix(""(1+2)*3/4-5"")

     '1 2 + 3 * 4 / 5 -'

     >>> infix_to_postfix(""a+b*c+(d*e+f)*g"")

     'a b c * + d e * f + g * +'
"
90310,"        int LENGTH = array.length;

         int index = 0;

         while (index < LENGTH - 1) {

             int amountSmallerElements = this.getSmallerElementCount(array, index);

             if (amountSmallerElements > 0 && index != amountSmallerElements) {

                 T element = array[index];
"
31905,"            {

                 result[i] = 2 * random.NextDouble() - 1;

             }

             var magnitude = result.Magnitude();

             result = result.Scale(1 / magnitude);

             return result;
"
10306,"        return

     for i in range(len(sequence)):

         if not index_used[i]:
"
25968,"        every bit.

         """"""

         return int(128 + factor * (c - 128))

     return img.point(contrast)

 if __name__ == ""__main__"":
"
30369,"    doctest.testmod()
"
84908,"class Node {

   constructor (data) {

     this.data = data

     this.left = null
"
23323,"	int8_t item;				///< to store the popped value to be returned

 	if(st.top == -1) {		// underflow condition

 		printf(""Stack underflow..."");

 		exit(1);
"
26387,"        log(""[PASS] : TEST CASE 1 PASS!"");

         log(""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~""

             ""~"");

         delete (sublistLL);

         delete (mainlistLL);
"
55139,"  of elements to be sorted.*/

   void bitonicMerge(int a[], int low, int cnt, int dir) {

     if (cnt > 1) {

       int k = cnt / 2;
"
90008,"def bin_exp_mod(a, n, b):

     """"""

     >>> bin_exp_mod(3, 4, 5)

     1
"
19393,"{

     if (root != NULL)

     {

         if (root->left != NULL)
"
25615,"func TestAccessNodesByLayer(t *testing.T) {

 	BSTree := BSTree{

 		Root: NewNode(90),

 	}

 	root := BSTree.Root

 	Insert(root, 80)
"
11609,"/**

  * Keyword shifted alphabet is a simple cipher using a translation table created with a help of a keyword.

  * Keyword must be a word where each character can occur only once.
"
82325,"    expect(PrimeCheck(1000001)).toBeFalsy()

   })

   it('should return false for 1 and 0', () => {

     expect(PrimeCheck(1)).toBeFalsy()

     expect(PrimeCheck(0)).toBeFalsy()

   })
"
27548,"        }

       }

       if (maxIndex != i) {

         swap(pivot, i, maxIndex);
"
14801,"private:

     T *ptr_;

 };

 int main() {

     unique_ptr<shape> ptr1{create_shape(shape_type::circle)};
"
29543,"            var query = timeline.GetValuesByDay(20);

             using (new AssertionScope())

             {
"
29065,"Tptr insert1(Tptr p, char *s)

 {

     if (p == 0)

     {

         p = (Tptr)malloc(sizeof(Tnode));
"
33269,"	r[0] = 0                   // cost of 0 length rod is 0

 	for j := 1; j <= length; j++ { // for each length (subproblem)

 		q := -1

 		for i := 1; i <= j; i++ {
"
22300,"# Output: [2,3,5,4,1,7]

 # Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].

 #
"
11392,"public class StringMatchFiniteAutomata {

   public static final int CHARS = 256;

   public static int[][] FA;

   public static Scanner scanner = null;
"
21271,"                var previous = 0;

                 var i = 1;

                 while (true)
"
16573,"/**

  * @file

  * @brief [Combinations](https://en.wikipedia.org/wiki/Combination) n choose r

  * function implementation

  * @details
"
44864,"    // create a generic BST tree

     DataStructures.Trees.BSTRecursiveGeneric<T> tree = new DataStructures.Trees.BSTRecursiveGeneric<T>();

     // add all elements to the tree

     for(T element: unsortedArray) {

       tree.add(element);
"
16400,"  let m = message.split('')

     .map(e => e.charCodeAt(0))

     .map(e => e.toString(2))

     .map(e => pad(e, 8))

     .join('') + '1'

   // extend message by adding empty bits (0)
"
15042,"        /// <summary>

         ///     Checks if a number is a Narcissistic number or not.

         /// </summary>

         /// <param name=""number"">Number to check.</param>

         /// <returns>True if is a Narcissistic number; False otherwise.</returns>

         public static bool IsNarcissistic(int number)
"
95564,"  There can be 2 options when we Bitise AND this res with all the elements in our array

   1. Result will come non zero number

   2. Result will be 0.

   In the first case we will XOR our element with the first number (which is initially 0)

   In the second case we will XOR our element with the second number(which is initially 0)

   This is how we will get non repeating elements with the help of bitwise operators. 
"
26847,"// BenchmarkTrie_Find_non_existant-8           3000                59.1 ns/op             0 B/op          0 allocs/op

 // BenchmarkTrie_Find_existant

 // BenchmarkTrie_Find_existant-8               3000               238 ns/op               0 B/op          0 allocs/op
"
23681,"    def __lt__(self, other: Node) -> bool:

         return self.f_cost < other.f_cost

 class AStar:

     """"""

     >>> astar = AStar((0, 0), (len(grid) - 1, len(grid[0]) - 1))
"
20195,"                inverse[row2][row] = inverse[row2][row] + inverse[row2][col2];

             }

         }

         if (temp[row][row] == 0) {
"
16736,"        /// <param name=""num"">First number.</param>

         /// <param name=""k"">Second number.</param>

         /// <returns>Binimial Coefficients.</returns>

         public static long Calculate(int num, int k)

         {

             if (num < k || k < 0)
"
20459,"""""""

 function kelvin_to_fahrenheit(kelvin, ndigits::Int = 2)

     round(((float(kelvin) - 273.15) * 1.8) + 32.0; digits = ndigits)
"
29339,"During an n-day period a trinary string is formed for each child consisting

 of L's (late), O's (on time), and A's (absent).

 Although there are eighty-one trinary strings for a 4-day period that can be

 formed, exactly forty-three strings would lead to a prize:

 OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA

 OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO
"
35307,"/**

  * @file

  * @brief Implementation of [Doubly linked list](https://en.wikipedia.org/wiki/Doubly_linked_list)

  * @details
"
33201,"        i++;

     }

     return node;
"
25140,"    else:

         print(""Not found"")
"
18397,"      for (int i = lst.length - 2; i >= 0; i--) {

         swap_done = swapItemCocktail(lst, i, swap_done);

       }

     }

   } while (swap_done);
"
26381,"   * Removes the element at the top of this stack and returns

    *

    * @return Element popped

    * @throws EmptyStackException if the stack is empty.

    */

   public int pop() {
"
23833,"version = ""2.68.3+0""

 [[Grisu]]

 git-tree-sha1 = ""53bb909d1151e57e2484c3d1b53e19552b887fb2""
"
33214,"        }

     }

 }
"
12083,"  const count = Math.floor((max - min) / size) + 1

   // create buckets

   const buckets = []

   for (let iCount = 0; iCount < count; iCount++) {

     buckets.push([])
"
32483,"    a1 = -2 * _cos

     a2 = 1 - alpha

     filt = IIRFilter(2)

     filt.set_coefficients([a0, a1, a2], [b0, b1, b2])

     return filt
"
31127,"    expect(calcRPN('2 2 2 * +')).toEqual(6)

     expect(calcRPN('6 9 7 + 2 / + 3 *')).toEqual(42)

   })

 })
"
23564,"        a.[i] <- a.[j]

         a.[j] <- temp

     let inline sift cmp (a: 'T []) start count =

         let rec loop root child =
"
26829,"    while queue:

         vertex = queue.pop(0)

         for x in graph[vertex]:

             indegree[x] -= 1

             if longDist[vertex] + 1 > longDist[x]:

                 longDist[x] = longDist[vertex] + 1
"
22155,"    (-1, 2)

     >>> extended_euclid(7, 5)

     (-2, 3)

     """"""

     if b == 0:
"
32556," * The assert statement will check expected hist and miss to resultant hits and

  * miss

  * @returns void

  * */

 static void test_2() {
"
59154,"  return leftMin <= rightMin ? leftMin : rightMin;

 }
"
13645,"        }

         [Test]

         public static void DequeueEmptyQueueThrowsInvalidOperationException()

         {
"
22225,"    /* Following function encrypts the message

      */

     static void encrypt(String message) {

         message = message.toUpperCase();
"
20981,"})

 describe('Testing Conversion of Kelvin to Celsius', () => {

   it('with Kelvin value', () => {

     const test1 = tc.kelvinToCelsius(100)

     expect(test1).toBe(-173)
"
26859,"end

 class DomainError < StandardError; end
"
17061,"            Regex.Replace(word.ToLowerInvariant(), @""\s+"", string.Empty);

         private static string ReverseString(string s)

         {
"
16695,"            // Precondition

             if (field.Length > 32)

             {
"
95806,"// Table building algorithm.

 // Takes word to be analyzed and table to be filled.

 func kmpTable(word string) (t []int) {

 	t = make([]int, len(word))
"
44549,"#include <time.h>

 /**

  * @addtogroup sorting Sorting algorithms

  * @{
"
13526," */

 void join(int *p, int x, int y) { p[find(p, x)] = find(p, y); }

 /** Main function */

 int main()
"
26646,"}
"
80945,"		d[j] = t[i]

 	}

 	return string(d)
"
14354,"            if (!isValid) {

                 throw new IllegalArgumentException(""Credit card number {"" + cardNumber + ""} - have a typo"");

             }
"
31656,"import { memoize } from '../Memoize'

 const fibonacci = (n) => {

   if (n < 2) {

     return n

   }

   return fibonacci(n - 2) + fibonacci(n - 1)
"
19334,"    print(message)

 if __name__ == ""__main__"":

     main()
"
26279,"		} 

 		// if we go to left then add ""0"" to the code. 

 		// if we go to the right add""1"" to the code. 

 		// recursive calls for left and 
"
17563,"    String[] subsequence = returnSubsequence(givenString); // calling returnSubsequence() function

     System.out.println(""Subsequences : "");

     // print the given array of subsequences

     for (int i = 0; i < subsequence.length; i++) {
"
32213,"﻿using System;

 using Algorithms.Sorters.Comparison;

 using Algorithms.Tests.Helpers;

 using NUnit.Framework;

 namespace Algorithms.Tests.Sorters.Comparison
"
12436,"    """"""

     assert 0 == abs_val(0)

     assert 34 == abs_val(34)
"
11223,"				/* If arr[i] is greater, then check with las[j][1] */

 				if (arr[j] < arr[i] && las[i][0] < las[j][1] + 1)

 					las[i][0] = las[j][1] + 1;

 				/* If arr[i] is smaller, then check with las[j][0]*/

 				if( arr[j] > arr[i] && las[i][1] < las[j][0] + 1)
"
58416,"let humansNode = TreeNode<String>(value: ""humans"")

 tree.addChild(reptilesNode)

 tree.addChild(mammalsNode)

 reptilesNode.addChild(lizardsNode)
"
14134,"}
"
22320,"        return digit;

     }

     if (digit->next_digit)

     {
"
24428,"        ///     Gets the positional information of the node.

         /// </summary>

         public VecN Position { get; }
"
78850,"/**

  * \file

  * \brief [Problem 23](https://projecteuler.net/problem=23) solution

  * \author [Krishna Vedala](https://github.com/kvedala)

  */

 #include <stdio.h>
"
20478,"    // Iterate inner loop once more to check for negative cycle

     for (int j = 0; j < E; j++)

     {

         int u = graph->edges[j].src;

         int v = graph->edges[j].dst;
"
93212,"                System.out.printf(""%2d "", i);

             }

             System.out.println();

         }
"
12645," * @param mat board

  * @param line matrix row

  * @param column matrix column
"
30052," *

  *       ### Partition Logic

  *           * Partitions are done such as numbers lower than the ""pivot""

  * element is arranged on the left side of the ""pivot"", and number larger than

  * the ""pivot"" element are arranged on the right part of the array.

  *
"
32375,"   * Conversion from the HSV-representation to the RGB-representation.

    *

    * @param hue Hue of the color.
"
31730,"                    .Should()

                     .Be(new DateTime(2015, 1, 1));

             }
"
10207,"[[Bzip2_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]

 git-tree-sha1 = ""c3598e525718abcc440f69cc6d5f60dda0a1b61e""

 uuid = ""6e34b625-4abd-537c-b88f-471c36dfa7a0""

 version = ""1.0.6+5""

 [[CEnum]]
"
14160,"}

 // The code below can be used for testing

 // let numberList : Array<Int> = [8, 2, 10, 9, 7, 5]

 // let results: Array<Int> = numberList.bubbleSort()
"
16018,"        else if (logic == 2)

         {

             return '2';

         }

         else

         {
"
21345,"                {

                     timeline.Remove(@event);

                 }
"
20463,"      }

     }

     ArrayList<Point> leftSubSkyLine = produceSubSkyLines(leftHalf);

     ArrayList<Point> rightSubSkyLine = produceSubSkyLines(rightHalf);
"
29228,"        >>> assert 'E' in g2.connections[""C""]

         >>> mst = g2.kruskal()

         >>> assert 'E' not in mst.connections['C']

         """"""

         # getting the edges in ascending order of weights
"
19472,"        binarySearch(mat, i_low + 1, j_mid + 1, m - 1, x);

 }

 /** Main function */
"
19736,"﻿namespace Algorithms.Strings

 module IsPalindrome =

     /// <summary>

     /// Determine whether the string is palindrome

     /// </summary>

     /// <param name=""str""></param>
"
12254,"    Employee e3(3,"""",34,2220);

     Employee e4(4,"""",27,1220);

     out.write((char*)&e1,sizeof(e1));		//e1,e2,e3,e4˳дļ

     out.write((char*)&e2,sizeof(e2));

     out.write((char*)&e3,sizeof(e3));

     out.write((char*)&e4,sizeof(e4));
"
13425,"     [-3. 6. -3.]]

     >>>  # won't be apparent due to the nature of the cofactor matrix

     >>> print(matrix.adjugate())

     [[-3. 6. -3.]

      [6. -12. 6.]

      [-3. 6. -3.]]
"
33556,"    ff();

     fc();

     return 0;

 }
"
86637,"{

     public static class LinearSearcherTests

     {

         [Test]
"
62843,"            var isPalindrome = Palindrome.IsStringPalindrome(text);

             // Assert

             Assert.True(isPalindrome);

         }
"
13043,"            }

             Assert.IsFalse(list.TryRemove(value));

         }
"
22409,"    }

     public void setScores(int[] scores) {

         if (scores.length % 1 == 0) {
"
12010,"   *

    * @param numbers array to store numbers

    * @return mean of given numbers

    */

   public static double average(double[] numbers) {

     double sum = 0;
"
27021,"    }

 }

 /** Utilitary procedure to measure the height of the binary tree

  * @param root pointer to parent node

  * @param data value to store int he new node

  * @returns 0 if value not found in the nodes
"
26006,"        [TestCase(""nnbaaa"", 3, ""banana"")]

         [TestCase(""TEXYDST.E.IXIXIXXSSMPPS.B..E.S.EUSFXDIIOIIIT"", 29, ""SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES"")]

         [TestCase("""", 0, """")]

         public void Decode(string encoded, int index, string expected)
"
24241,"            /// Inserts 100 elements in main list

             mainlistData[i] = i + 1;

         }

         int temp = 0;

         for (int i = 45; i < 65; i++) {
"
34572,"    }

 }

 // The main function that finds the shortest path from a vertex

 // to all other vertices using Floyd-Warshall Algorithm.
"
25030,"  def initialize

     @head = nil

     @tail = nil
"
31889,"        return binary_search(a_list[:midpoint], item)

     else:

         return binary_search(a_list[midpoint + 1 :], item)
"
33113,"    public static class SieveOfEratosthenesTests

     {

         private static readonly BigInteger[] First10000PrimeNumbers =

         {

             2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,
"
31700,"   *

    * @return true if queue is empty, otherwise false

    */

   public boolean isEmpty() {
"
28680,"            clusters[j].y = observations[j].y;

             clusters[j].count = 1;

             observations[j].group = j;
"
32630,"stack.push(5)

 stack.push(7)

 stack.push(9)

 puts stack.full?
"
81154,"      } else {

         parent.right = newNode;

         parent.right.parent = parent;
"
19351,"/*

     Problem statement and Explanation : https://en.wikipedia.org/wiki/Euclidean_algorithm

     In this method, we have followed the iterative approach to first

     find a minimum of both numbers and go to the next step.
"
22459,"    ----------

     P: array-like, sorted in non-decreasing order

     Q: array-like, sorted in non-decreasing order

     Returns

     ------

     R: array-like, a sorted array of the elements of `P` and `Q`
"
58839,"    int l1 = s1.length();

     int l2 = s2.length();

     s1 = s1.toLowerCase();
"
83171,"        self.vertices.add(edge[0])

         self.vertices.add(edge[1])

         self.edges[(min(edge), max(edge))] = weight

     def prims_algorithm(self) -> Graph:

         """"""
"
12248,"namespace Algorithms.Knapsack

 {

     public class BranchAndBoundNode
"
16847,"    }

     return maxval;

 }
"
20945,"	}

 	list = append(list, g2)

 	g2.Graph.AddVertex(0)

 	g2.Graph.AddEdge(4, 3)

 	g2.Graph.AddEdge(3, 1)

 	g2.Graph.AddEdge(1, 2)
"
11030,"    return edges;

   }

 }
"
29062,"# frozen_string_literal: true

 # Calculates the square root of a number

 class SquareRoot

   class << self

     EPSILON = 1E-10
"
19824,"            if (newArr[j] == newArr[j + 1])

             {

                 count++;

                 j++;

             }
"
18593,"    // Save image

     try {

       ImageIO.write(image, ""png"", new File(""KochSnowflake.png""));

     } catch (IOException e) {

       e.printStackTrace();

     }
"
32775,"# while left < right:

 # find current sum

 # if sum > 0, right -= 1

 # if sum < 0, left += 1
"
15406,"			if err := tt.Graph.ValidateColorsOfVertex(colorsOfVertices); err != nil {

 				t.Errorf(""ColorUsingGreedyApproach() assigned colors are wrong, error = %v"", err)

 			}

 		})

 	}
"
22510,"  timSort(arr, arr.length);

   print(""After sorting: $arr"");

 }
"
28335," * [Problem 9](https://projecteuler.net/problem=8) solution

  * A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

  * a^2 + b^2 = c^2
"
19432,"      new HashMap<Character, Integer>() {

         /** */

         private static final long serialVersionUID = 87605733047260530L;

         {
"
10543,"            }

             return -1;

         }

     }

 }
"
19431,"        ///     the algorithm is applied.

         /// </param>

         /// <param name=""steps"">The number of iterations.</param>
"
32615,"      }

       sb.append(""\n"");

     }
"
25340,"end

 gain = [-5, 1, 5, 0, -7]

 largest_altitude(gain)

 # Output: 1
"
13952,"    System.out.print(""Enter the number : "");

     a = sc.nextInt();

     int n = a;

     while (a > 0) {

       b = a % 10;

       s = s + fact(b);
"
32883,"    parity code cannot correct errors, and can detect only an odd number

     of bits in error. Hamming codes are perfect codes, that is, they

     achieve the highest possible rate for codes with their block length

     and minimum distance of three.
"
62970,"package binarytree

 import (

 	""reflect""

 	""testing""

 )
"
66408,"		int start = 0, end = 0;

 		for (int g = 0; g < input.length(); g++) {

 			for (int i = 0, j = g; j < input.length(); i++, j++) {

 				if (g == 0) {

 					arr[i][j] = true;

 				} else if (g == 1) {
"
78754,"if __name__ == ""__main__"":

     tree1 = Node(1)

     tree1.left = Node(2)

     tree1.right = Node(3)

     tree1.left.left = Node(4)
"
29261,"    """"""

     Return probability list of all possible sums when throwing dice.

     >>> random.seed(0)

     >>> throw_dice(10, 1)
"
16629,"            }

             else

             {  // Right Left Case

                 // First step -> Parent Child Rotation

                 parent->left = child->right;
"
59326,"  for (i = 0; i < len; i++) {

     if (node.children[word.charAt(i)] === undefined) { node.children[word.charAt(i)] = new TrieNode(word.charAt(i), node) }

     node = node.children[word.charAt(i)]

   }

   node.count += 1
"
28144," */

 function upper_bound(array $arr, int $elem){

     // array must be sorted

     // and all elemets must be integers

     array_check($arr);

     $hi = count($arr);
"
94819,"    {

         assertEquals(decimalToOctal(8), 10);

         assertEquals(decimalToOctal(9), 11);

         assertEquals(decimalToOctal(589), 1115);

         $this->expectException(\Exception::class);

         $this->expectExceptionMessage('Please pass a valid Decimal Number for Converting it to an Octal Number.');
"
24897,"/**

  * @brief The main function implements set bit count

  * @param n is the number whose set bit will be counted

  * @returns total number of set-bits in the binary representation of number `n`

  */

 std::uint64_t countSetBits(
"
72111,"int numcmp(const void *a, const void *b) { return *(int *)a - *(int *)b; }

 bool containsDuplicate(int *nums, int numsSize)

 {

     int i;

     qsort(nums, numsSize, sizeof(int), numcmp);

     for (i = 0; i < numsSize - 1; i++)
"
26969,"                if (Comparer.Compare(heap[index], heap[grandparent]) > 0)

                 {

                     SwapNodes(index, grandparent);
"
29835,"export { fibonacci }
"
65459,"    flow = new int[V][V];

     int totalFlow = 0;

     while (true) {
"
19141,"﻿namespace Algorithms.Search.AStar

 {

     /// <summary>
"
20917,"*/

 /*

   The given input is converted to a string, split into an array of characters.

   This array is reduced to a number using the method <Array>.reduce

   NOTE: The final parseInt is just there in cases where 1 digit numbers are given, since without that it would result in a String output.
"
12600,"     * @return true if the point wich calls the function dominates p1 false otherwise.

      */

     public boolean dominates(Point p1) {

       // checks if p1 is dominated
"
80626,"                                after node: Node<Value>) -> Node<Value> {

         guard tail !== node else {

           append(value)

           return tail!
"
78693," */

 template <typename T>

 T sphere_volume(T radius, double PI = 3.14) {
"
17434,"namespace Algorithms.Math

 module Perfect_Numbers =

     let IsPerfect (number: int) =
"
16402,"    print(f""Done!  {len(all_patterns):,} word patterns found in {totalTime} seconds."")

     # Done!  9,581 word patterns found in 0.58 seconds.
"
33142,"        // create random coordinates (x,y,z) around the centre of the class

         data[i][0] = _random(centres[class][0] - R, centres[class][0] + R);

         data[i][1] = _random(centres[class][1] - R, centres[class][1] + R);

         /* The follosing can also be used

         for (int j = 0; j < 2; j++)

             data[i][j] = _random(centres[class][j] - R, centres[class][j] + R);
"
24678,"  }

   if (arr[lowerBound] === value) {

     return lowerBound
"
73327," */

 #include <array>

 #include <cassert>

 #include <iostream>

 #include <memory>
"
11798,"            Assert.IsTrue(Math.Abs(expected - actual) < error);

         }

         [TestCase(0.0)]
"
10479,"        IntStream.generate(() -> r.nextInt(maxElement))

             .limit(size)

             .sorted()

             .boxed()

             .toArray(Integer[]::new);

     // The element for which the lower bound is to be found
"
55036,"            var testObj = new BitArray(sequence);

             // Act

             testObj.ResetField();

             // Assert

             Assert.AreEqual(0, testObj.ToInt64());
"
68587,"      const rheight = this.getHeight(node.right)

       return lheight > rheight ? lheight + 1 : rheight + 1

     }

   }
"
85564,"			a:      5,

 			b:      5,

 			output: 5,
"
32022,"1 -  let H = min heap data structure, initialized with 0 and s [here 0 indicates

      the distance from start vertex s]

 2 -  while H is non-empty:

 3 -    remove the first node and cost of H, call it U and cost
"
20100," * * \f$(-0,5, 0.5, 0.5)\f$

  * * \f$(-0,5,-0.5, -0.5)\f$

  *

  * \param[out] data matrix to store data in
"
37512,"        /// <returns>Array of values.</returns>

         public Timeline<TValue> GetValuesByTimeOfDay(TimeSpan timeOfDay)

             => new(timeline.Where(pair => pair.Time.TimeOfDay == timeOfDay).ToArray());
"
21157,"            }

         }

     }

 }
"
11349,"{

     // Test Case 1

     const int size = 10; /* array size */

     printf(""Test Case 1..."");

     int arr[1000005]={0};   /* array to store prime numbers */
"
30466,"   * @param numOfTerms the total terms of an arithmetic series

    * @return sum of given arithmetic series

    */
"
16326,"     */

   const primes = new Array(n + 1)

   primes.fill(true) // set all as true initially

   primes[0] = primes[1] = false // Handling case for 0 and 1

   const sqrtn = Math.ceil(Math.sqrt(n))
"
10606,"    >>> weight_conversion(""pound"",""gram"",2)

     907.184

     >>> weight_conversion(""pound"",""milligram"",3)

     1360776.0
"
30074,"  }

   for (final position in getValidPos(pos, board.length)) {

     final i = position[0];

     final j = position[1];

     if (board[i][j] == 0) {
"
28446,"   */

   private static <T extends Comparable<T>> void doSort(T[] array, int left, int right) {

     if (left < right) {

       int pivot = randomPartition(array, left, right);

       doSort(array, left, pivot - 1);
"
13559,"        [Test]

         [TestCase(2, 3, 1)]

         [TestCase(1, 1, 1)]

         [TestCase(13, 17, 1)]

         [TestCase(0, 17, 17)]

         [TestCase(17, 0, 17)]
"
29266,"    float arr6[50];

     std::cout << ""Test 6... "";

     create_random_array(arr6, 50);

     sorting::insertionSort(arr6, 50);
"
26432,"            match this with

             | c when c >= 'a' && c <= 'z' -> true

             | _ -> false

         member this.Lower(): char =
"
28019," *

  * @see <a href=""https://en.wikipedia.org/wiki/Roman_numerals"">Roman numerals</a>

  * @author Sokratis Fotkatzikis
"
10229,"            tree.Remove(8);

             tree.Count.Should().Be(9);

             tree.Contains(8).Should().BeFalse();

             tree.GetKeysInOrder().SequenceEqual(new[] { 1, 6, 11, 13, 15, 17, 22, 25, 27 }).Should().BeTrue();

             tree.GetKeysPreOrder().SequenceEqual(new[] { 13, 6, 1, 11, 17, 15, 25, 22, 27 }).Should().BeTrue();

             tree = new RedBlackTree<int>();
"
19163,"[[IfElse]]

 git-tree-sha1 = ""28e837ff3e7a6c3cdb252ce49fb412c8eb3caeef""

 uuid = ""615f187c-cbe4-4ef1-ba3b-2fcf58d6d173""

 version = ""0.1.0""

 [[Inflate]]

 git-tree-sha1 = ""f5fc07d4e706b84f72d54eedcc1c13d92fb0871c""
"
97632,"	return vertexColors, g.vertices

 }
"
28169,"    }

     return max;

 }
"
13823,"}
"
18586,"        return stack->arr[stack->top--];

 }
"
11744,"          }

           temp.data = child.data;

           parent2.left = child.right;

           replacement = temp;

         }
"
40202,"    std::cout << ""3rd test"";

     std::vector<uint64_t> arr3 = math::n_bonacci::N_bonacci(

         6, 17);  // first input is the param n and second one is the param m for

                  // N-bonacci func

     std::vector<uint64_t> output_array3 = {

         0, 0,  0,  0,  0,   1,   1,   2,  4,
"
74185,"    Returns

     -------

     The maximum revenue obtainable for a rod of length n given the list of prices

     for each piece.

     Examples

     --------
"
23705,"    }

     st->push(v);

 }

 /**
"
20642,"  // Just like Binary exponentiation mentioned in ./BinaryExponentiationIterative.js

   let result = Identity(A.length) // Identity matrix

   while (n > 0) {

     if (n % 2 !== 0) result = matrixMultiply(result, A)
"
31481,"                        break;

                     }

                     if (current.Next != null)

                     {
"
40667,"package Maths;

 /** @see <a href=""https://en.wikipedia.org/wiki/Combination"">Combination</a> */

 public class Combinations {

   public static void main(String[] args) {

     assert combinations(1, 1) == 1;
"
23975,"func IsEmptyQueue() bool {

 	return len(ListQueue) == 0

 }
"
14643,"    collection[:] = merge(*(reversed(stack) for stack in stacks))

     return collection

 if __name__ == ""__main__"":

     user_input = input(""Enter numbers separated by a comma:\n"").strip()

     unsorted = [int(item) for item in user_input.split("","")]

     print(patience_sort(unsorted))
"
83450,"                }

             }

             result = result.Trim();

             ans.Compile(result);

             return ans;
"
12527,"    print(decoded)
"
17986,"    return filt

 def make_peak(

     frequency: int, samplerate: int, gain_db: float, q_factor: float = 1 / sqrt(2)

 ) -> IIRFilter:

     """"""

     Creates a peak filter
"
14273,"/**

 *

 * @title Midpoint rule for definite integral evaluation

 * @author [ggkogkou](https://github.com/ggkogkou)

 * @brief Calculate definite integrals with midpoint method
"
32880,"int rangeSumBST(struct TreeNode *root, int L, int R)

 {

     if (root == NULL)
"
33271,"    {

         if ((N % i) != 0)

             /* i is not a divisor of N */

             continue;

         // #ifdef DEBUG

         //         printf(""%4d, %4d,"", i, N / i);
"
29172,"		int N = sc.nextInt();

 		int X = sc.nextInt();

 		PowerSum ps = new PowerSum();
"
27373,"            {

                 { new DateTime(1995, 1, 1), ""TestTime1"" },

                 { new DateTime(2000, 1, 1), ""TestTime2"" },

                 { new DateTime(2005, 1, 1), ""TestTime3"" },

                 { new DateTime(2010, 1, 1), ""TestTime4"" },
"
32106,"      const tmp = this.heap[largest]

       this.heap[largest] = this.heap[index]

       this.heap[index] = tmp

       this.sinkDown(largest)

     }
"
24052,"        self.bottom_root = bottom_root

         self.min_node = min_node

     def mergeHeaps(self, other):

         """"""

         In-place merge of two binomial heaps.

         Both of them become the resulting merged heap
"
69475,"[[DiffEqJump]]

 deps = [""ArrayInterface"", ""Compat"", ""DataStructures"", ""DiffEqBase"", ""FunctionWrappers"", ""LightGraphs"", ""LinearAlgebra"", ""PoissonRandom"", ""Random"", ""RandomNumbers"", ""RecursiveArrayTools"", ""Reexport"", ""StaticArrays"", ""TreeViews"", ""UnPack""]

 git-tree-sha1 = ""fb7cb8909880cfa70d134aac3fbd486a908e56ce""

 uuid = ""c894b116-72e5-5b58-be3c-e6d8d4ac2b12""
"
27770,"  {

     for(uint16_t j = 0; j < V; ++j)

     {
"
25504,"""""""

 Code contributed by Honey Sharma

 Source: https://en.wikipedia.org/wiki/Cycle_sort
"
17819,"    assert(test_4 == 616);

     std::cout << ""Passed Test 4!"" << std::endl;

     n = 15;

     uint64_t test_5 = math::lcmSum(n);

     assert(test_5 == 1110);
"
28143,"        /// <returns>The longest prefix suffix values for <paramref name=""pat"" />.</returns>

         public int[] FindLongestPrefixSuffixValues(string pat)

         {

             var lps = new int[pat.Length];
"
21412,"}
"
13309,"      [1, 2],

       [0, 3]

     ];

     Graph graph = Graph(nodes);

     for (int i = 0; i < numberOfEdges; i++) {
"
26405," * @returns return correspond boolean value, if the number is krishnamurthy number return `true` else return `false`.

  * @example 145 => 1! + 4! + 5! = 1  + 24 + 120 = 145

  */

 const CheckKishnamurthyNumber = (number) => {

   // firstly, check that input is a number or not.
"
22163,"/**

  * @brief Main function

  * @returns 0 on exit

  */

 int main() {
"
19915,"from cv2 import COLOR_BGR2GRAY, cvtColor, imread, imshow, waitKey

 from numpy import array, dot, pad, ravel, uint8, zeros

 def im2col(image, block_size):
"
31293,"  describe('Variations of input array lengths', () => {

     it('should return an empty list with the input list is an empty list', () => {

       expect(bucketSort([])).toEqual([])

     })

     it('should correctly sort an input list of length 1', () => {
"
10051,"  return array if array_length <= 1

   loop do

     swapped = false

     (array_length - 1).times do |i|

       if array[i] > array[i + 1]

         array[i], array[i + 1] = array[i + 1], array[i]
"
24036,"			parent1 := pop[i]

 			// Generate more child proportionally to the fitness score

 			nChild := (parent1.Value * 100) + 1

 			if nChild >= 10 {

 				nChild = 10

 			}
"
69265,"""""""

 Problem 72 Counting fractions: https://projecteuler.net/problem=72

 Description:

 Consider the fraction, n/d, where n and d are positive integers. If n<d and HCF(n,d)=1,

 it is called a reduced proper fraction.
"
79729,"    plt.plot([abs(f(x)) for x in steps])

     plt.xlabel(""step"")

     plt.ylabel(""error"")
"
13202,"require 'minitest/autorun'

 require_relative './sort_tests'

 require_relative './bubble_sort'
"
15206,"#

 #

 # Approach: Hash table
"
23174,"  function _avl (comp) {

     /** @public comparator function */

     this._comp = undefined

     if (comp !== undefined) {

       this._comp = comp
"
29978,"            {

                 3.0,

                 new[] { 0.7071039, 0.70710966 },
"
11850,"# Time Complexity: O(nlogn + mlogm), where n and m are the lengths of the arrays. We sort two arrays independently and then do a linear scan.

 # Space Complexity: from O(logn+logm) to O(n+m), depending on the implementation of the sorting algorithm.

 #

 def intersect(nums1, nums2)

   result = []
"
14030,"        {

             // Arrange

             var items = new[] {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};

             var values = new[] { 505, 352, 458, 220, 354, 414, 498, 545, 473, 543 };

             var weights = new[] {23, 26, 20, 18, 32, 27, 29, 26, 30, 27};

             var capacity = 67;
"
15750,"      }

       // Adding node at the end of the list

       currentNode.next = node
"
19635,"      return y;

     }

     /**
"
91349,"library(plyr)

 arrange(X, var1)

 ##   var1 var2 var3

 ## 1    1   10   11

 ## 2    2   NA   15

 ## 3    3   NA   12
"
15832,"List<int> dp;

 int mod = (1e9 + 7).toInt();

 //Get the nth Fibonacci number modulo 10^9 + 7 since it can be a very large number

 int getFib(int n) {
"
24929,"    """"""

     return round(float(kelvin) - 273.15, ndigits)

 def kelvin_to_fahrenheit(kelvin: float, ndigits: int = 2) -> float:

     """"""

     Convert a given value from Kelvin to Fahrenheit and round it to 2 decimal places.

     Wikipedia reference: https://en.wikipedia.org/wiki/Kelvin
"
11129,"        >>> our_popped

         15182

         >>> our_deque
"
31758,"                    var newTCost = newCCost + current.EstimatedCost;

                     if (newTCost < connected.TotalCost)

                     {

                         connected.Parent = current;

                         connected.CurrentCost = newCCost;

                     }
"
41691,"      while (true) {

         if (node.key < temp.key) {

           if (temp.left == nil) {

             temp.left = node;

             node.p = temp;
"
22023,"    r = (max-min+1)/l

     buckets = Array{T, 1}[[] for a in 1:l]

     for i in arr
"
20272," *  ʾʱ  

  */  

 void Clock::ShowTime()   
"
13394,"    return output;

   }

 }
"
61822,"			}

 		})

 	}
"
42260,"     * @return Returns a vertex that is LCA of v1 and v2

      */

     private static int getLCA(int v1, int v2, int[] depth, int[] parent){

         if(depth[v1] < depth[v2]){

             int temp = v1;
"
10857,"		for j := boxes - 1; j >= 0; j-- {

 			remainders[j] *= 10

 			sum = remainders[j] + carriedOver

 			quotient := sum / (j*2 + 1)

 			remainders[j] = sum % (j*2 + 1)

 			carriedOver = quotient * j
"
19045,"            raise IndexError(""Warning: Tree is empty! please use another."")

         else:

             node = self.root

             # use lazy evaluation here to avoid NoneType Attribute error
"
32346,"    1. Find symbols that are the only occurrences in a clause.

     2. Find symbols in a clause where all other literals are assigned False.

     3. Assign True or False depending on whether the symbols occurs in

     normal or complemented form respectively.

     >>> clause1 = Clause([""A4"", ""A3"", ""A5'"", ""A1"", ""A3'""])
"
26530,"99999999999999999999999999999999999999999999999999

 99999999999999999999999999999999999999999999999999

 99999999999999999999999999999999999999999999999999

 99999999999999999999999999999999999999999999999999`

 describe('checkLargestAdjacentNumberProduct', () => {
"
29917,"     * takes place with data in the correct format

      */

     bzero(&server_addr, sizeof(server_addr));
"
24876,"# Predict Output 

 predicted= predict(fit,x_test)
"
13831,"      canvas.setColor(new Color(64, 26, 0)); // Brown Wolfers

       canvas.fillRect(130 - Stack1.get(i - 1) * 10, 670 - i * 12, Stack1.get(i - 1) * 20, 10);

     }

     // Disks in stack2

     for (int i = 1; i <= Stack2.size(); i++) {
"
39196,"    public class RecursiveBinarySearcher<T> where T : IComparable<T>

     {

         /// <summary>
"
18226,"		wantToReturn int

 		listCount    int

 	}

 	testCases := []testCase{

 		{5, 4, 8},

 		{3, 8, 8},
"
74163,"uuid = ""c7cfdc94-dc32-55de-ac96-5a1b8d977c5b""

 version = ""1.13.0+3""

 [[Xorg_libxkbfile_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg"", ""Xorg_libX11_jll""]
"
22524,"                InOrderWalk(node.Right);

             }

         }

         /// <summary>
"
14895,"}

 int main()

 {

     int choice;

     int flag = 1;
"
16448,"            index += 1

         while (

             left_index < left_size

         ):  # Adds the left over elements in the left half of the array
"
32202,"deps = [""Compat"", ""InteractiveUtils"", ""OrderedCollections""]

 git-tree-sha1 = ""4437b64df1e0adccc3e5d1adbc3ac741095e4677""

 uuid = ""864edb3b-99cc-5e75-8d2d-829cb0a9cfe8""

 version = ""0.18.9""

 [[DataValueInterfaces]]

 git-tree-sha1 = ""bfc1187b79289637fa0ef6d4436ebdfe6905cbd6""
"
81875,"        [Test]

         public static void TestExampleGeeksForGeeks()

         {

             // example from https://www.geeksforgeeks.org/euler-method-solving-differential-equation/

             // Euler method: y_n+1 = y_n + stepSize * f(x_n, y_n)

             // differential equation: f(x, y) = x + y + x * y
"
30216," * @author [Swastika Gupta](https://github.com/Swastyy)

  */

  

 #include <assert.h>   /// for assert
"
26435,"        {

             var graph = new DirectedWeightedGraph<int>(10);

             var vertex1 = graph.AddVertex(1);

             var vertex2 = graph.AddVertex(2);

             var vertex3 = graph.AddVertex(3);
"
24535,"  }

 }
"
37551,"    return NULL;

 }

 /**

  * @brief Closes the file after reading or writing

  * @param file pointer to the file to be closed
"
30928,"      p.arrivalTime = in.nextInt();

       p.burstTime = in.nextInt();

       p.priority = in.nextInt();

       p.turnAroundTime = 0;
"
29820,"/** main function */

 int main() {

     int m, n;

     int counterZeros = 0;

     std::cout << ""Enter dimensions of matrix (seperated with space): "";
"
31866,"            fibMMm2 = fibM - fibMMm1;

             offset = i;

         }
"
27608,"  test(""romanToInteger DLVII returns 557"", () {

     expect(romanToInteger('LII'), equals(52));

   });

   test(""romanToInteger VI returns 6"", () {

     expect(romanToInteger('VI'), equals(6));

   });
"
28780,"    if ((i * (i + 1)) / 2 === number) {

       return true

     } else if ((i * (i + 1)) / 2 > number) {

       return false

     }
"
11165,"# You can return the answer in any order.

 #

 #

 # Examples

 #

 # Input: nums = [2, 7, 11, 15], target = 9
"
13742,"            // Assert

             Assert.AreEqual(5, items.Count());

             Assert.AreEqual(""O"", testObj.GetElementByIndex(4));
"
32578," */

 //Recursive function to return gcd of a and b

 int gcd(int a, int b) {

   if (a == 0) {

     return b;

   }
"
65406,"# Example

 ```julia

 kelvin_to_celsius(273.354, 3) == 0.204   # returns true
"
77527,"      end

       byte |= (bit << (i % 8))

       if i % 8 == 7
"
21564,"                { new DateTime(2005, 1, 1), ""TestTime3"" },

                 { new DateTime(2010, 1, 1), ""TestTime4"" },

                 { new DateTime(2015, 1, 1), ""TestTime5"" },

             };

             var values = timeline.GetAllValues();

             var i = 0;
"
30790,"				{

 					Start:  3,

 					End:    4,

 					Weight: 4,

 				},

 			},
"
25242,"	},

 	{

 		""String comparison with not found pattern"",
"
21769,"      if (count.containsKey(num)) {

         count.put(num, count.get(num) + 1);

       } else {

         count.put(num, 1);

       }
"
15110,"            G.addEdge(src, dst, weight);

         } else {

             cout << ""source and/or destination out of bounds"" << endl;
"
28597,"// [ 3, 5, 2, 6, 1, 4 ]
"
76947,"        // Check if key is present at any mid

         if (ar[mid1] == key)

         {

             return mid1;

         }

         if (ar[mid2] == key)
"
15594,"    @queue = queue

   end

   attr_accessor :queue

   def add(item)
"
27028,"        for (int j = 1; j <= 4; j++)

         {

             if (i == 1)

             {
"
24641,"            79531, 79537, 79549, 79559, 79561, 79579, 79589, 79601, 79609, 79613, 79621, 79627, 79631, 79633, 79657,

             79669, 79687, 79691, 79693, 79697, 79699, 79757, 79769, 79777, 79801, 79811, 79813, 79817, 79823, 79829,

             79841, 79843, 79847, 79861, 79867, 79873, 79889, 79901, 79903, 79907, 79939, 79943, 79967, 79973, 79979,

             79987, 79997, 79999, 80021, 80039, 80051, 80071, 80077, 80107, 80111, 80141, 80147, 80149, 80153, 80167,

             80173, 80177, 80191, 80207, 80209, 80221, 80231, 80233, 80239, 80251, 80263, 80273, 80279, 80287, 80309,
"
24019,"  }

   // a new value is pushed to the end of the heap and sorted up

   insert (value) {

     this.heap.push(value)

     this.bubbleUp(this.heap.length - 1)
"
16670,"    ---------

      >>> count_inversions_bf([1, 4, 2, 4, 1])

      4

      >>> count_inversions_bf([1, 1, 2, 4, 4])

      0

      >>> count_inversions_bf([])
"
57399,"    void print(int dist[])

     {

         System.out.println(""Vertex \t\t Distance"");
"
10953,"			permutations = append(permutations, strings.Join(elements, """"))

 		} else {

 			for i := 0; i < n; i++ {

 				recursiveGenerate(previousIteration, n-1, elements)
"
29521,"    // adds the numbers a and b

     for (int i = a.length() - 1; i >= 0; i--) {

         char val = static_cast<char>(((a[i] - 48) + (b[i] - 48)) + 48 + carry);

         if (val > 57) {

             carry = 1;
"
22814,"Each new term in the Fibonacci sequence is generated by adding the previous

 two terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
"
23503,"    }

     printf(""You entered:  "");

     for (i = 0; i < n; i++)

     {

         printf(""%d "", arr[i]);
"
36925,"/* push: pushs the argument onto the stack */

 void push(void *object)

 {

     assert(object); /* tests whether pointer isn't null */

     if (counter < max)
"
29200,"        assert True  # This should happen

     for i in range(10):

         assert stack.size() == i
"
22246,"SBD	Solomon Islands Dollar

 SCR	Seychellois Rupee

 SDG	Sudanese Pound

 SEK	Swedish Krona
"
13611,"/**

     Same algorithm with little different formula.

     It still calculates in \f$O(\log N)\f$

 */

 template <typename T>

 double fast_power_linear(T a, T b) {
"
23454,"                poly_function(coeffs, degree, s0[n]);

             long double complex denominator = 1.0;

             for (i = 0; i < degree - 1; i++)

                 if (i != n)
"
32417,"  for (int i = 2; i * i <= n; i++) {

     if (is_prime[i]) {

       for (int j = i * i; j <= n; j += i) {

         // mark all multiples of i as false
"
12550,"  int j = m - 1;

   for (int i = m - 1; i >= 0; i--) {

     if (s[i] == '.') {

       for (int j1 = i + 1; j1 <= j; j1++) {
"
17529," * \param [in] 	  step_size	independent variable step size

  * \param [in]    Y0	    initial values of dependent variables

  */

 void save_exact_solution(const double &X0, const double &X_MAX,

                          const double &step_size,
"
18678,"version = ""0.2.4""

 [[Preferences]]

 deps = [""TOML""]

 git-tree-sha1 = ""00cfd92944ca9c760982747e9a1d0d5d86ab1e5a""

 uuid = ""21216c6a-2e73-6563-6e65-726566657250""
"
14422,"  static int knapSack(int W, int wt[], int val[], int N) {

     // Declare the table dynamically

     int dp[][] = new int[N + 1][W + 1];

     // Loop to initially filled the
"
23644,"    return -1;

 }

 void *get_element_label(Dictionary *dict, char s[])
"
10377,"/**

  * Transcipher a ROT13 cipher

  * @param  {String} text - string to be encrypted

  * @return {String} - decrypted string

  */

 const ROT13 = (text) => {
"
65637,"        checkCapacity(newCapacity);

         for (int i = data.size(); i > newCapacity; i--) {

             Entry<K, V> evicted = evict();

             data.remove(evicted.getKey());
"
64814,"                throw new InvalidOperationException($""Vertex already exists: {currentEdgeWeight}"");

             }

         }
"
10564,"    test();  // execute the tests

     return 0;

 }
"
17606,"			right:  9,

 			min:    5,

 		},

 		{

 			name:   ""right is min"",

 			left:   10,
"
11545,"                    {

                         tmp.Append('0');

                     }

                     tmp.Append(two);
"
71610,"﻿using System;

 namespace Algorithms.Numeric

 {
"
24093,"for word in word_list:

     word_bysig[signature(word)].append(word)

 def anagram(my_word):

     return word_bysig[signature(my_word)]

 print(""finding anagrams..."")

 all_anagrams = {word: anagram(word) for word in word_list if len(anagram(word)) > 1}
"
27926,"// Package dynamic is a package of certain implementations of dynamically run algorithms.

 package dynamic
"
22376,"    ...          [0, 1, 0, 1, 0],

     ...          [0, 1, 1, 0, 0],

     ...          [0, 1, 0, 0, 0]]

     >>> max_colors = 3

     >>> colored_vertices = [0, 1, 0, 0, 0]

     >>> index = 3
"
31377,"  }

   /** Inner class to handle the vector calculations. */

   private static class Vector2 {

     double x, y;

     public Vector2(double x, double y) {

       this.x = x;
"
24984,"               adaline_get_weights_str(ada), avg_pred_error);

     }

     if (iter < MAX_ADALINE_ITER)

         printf(""Converged after %d iterations.\n"", iter);

     else

         printf(""Did not converged after %d iterations.\n"", iter);
"
71641,"      xQuickSort(a, q + 1, last); // Right

     }

   }

   /**

    * yQuickSort function: //y-axis Quick Sorting.

    *
"
28968,"//

 // Created by light on 20-2-6.

 //

 class singleton {

 private:
"
19626,"            p1 = p;

         }

         follow = p;

         p = p->next;
"
97207,"        ///     is smaller, and set <c>this.MinItem</c> accordingly

         ///     This operation destroys <c>other</c>.

         /// </remarks>

         /// <param name=""other"">

         ///     Another heap whose elements we wish to add to this heap.

         ///     The other heap will be destroyed as a result.
"
12491,"                return 1;

             p = p->eqkid;

         }

         else

             p = p->hikid;
"
24095,"perfect_cube(4)  # returns false

 ```

 Contributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee) and [Rratic](https://github.com/Rratic)

 """"""

 function perfect_cube(number::N)where N<:Integer

     val = trunc(cbrt(number))
"
22496,"import { newGeneration } from '../ConwaysGameOfLife'

 describe('newGeneration', () => {

   it('should produce the next generation according to the rules', () => {

     expect(newGeneration([[0, 1, 0], [0, 1, 0], [0, 1, 0]]))
"
31867,"""""""

 function area_ellipse(radius_x, radius_y)

     if radius_x < 0 || radius_y < 0

         throw(DomainError(""area_ellipse() only accepts non-negative values""))
"
10720,"    for i in range(3, n, 2):

         if is_prime[i]:

             primes.append(i)
"
24795,"        {

             minVal = mdist[i];

             minInd = i;

         }

     return minInd;
"
13459," * q_{3} & =

  * &\cos\left(\frac{\phi}{2}\right)\cos\left(\frac{\theta}{2}\right)\sin\left(\frac{\psi}{2}\right)

  * -

  * \sin\left(\frac{\phi}{2}\right)\sin\left(\frac{\theta}{2}\right)\cos\left(\frac{\psi}{2}\right)\\
"
19243,"    103           dummy             median  False    1.000000    1.000000

     <BLANKLINE>

     [104 rows x 5 columns]

     """"""

     # Fill missing values with given rules

     if FillMissingReport:
"
63925,"    for (int i = 0; i < num_digits; i++, count++)

     {

         /* get character from file */
"
68282,"func NthCatalanNumber(n int) (int64, error) {

 	if n < 0 {

 		//doesn't accept negative number
"
78664,"	cl := c.Left

 	cr := c.Right

 	c.Left = (*root).Left

 	c.Right = (*root)
"
30735,"        if (start != end) {

             int mid = start + (end - start) / 2;

             updateTree(start, mid, index, diff, seg_index*2 + 1);

             updateTree(mid + 1, end, index, diff, seg_index*2 + 2);
"
25143,"     * given angle these three points turns. If returned number is negative,

      * then the angle is counter-clockwise. That means the line is going to

      * right to left. We will fount angle as clockwise if the method returns

      * positive number.

      */
"
13876," * @param parent the parent node in the merging operation

  * @param index the item index of the parent node that involved in the

  * merging

  * @return the merged 4-node

  */
"
10527,"    pancake_sort(input)

   end

 end
"
93566,"        /// <param name=""targetColor"">The old color to be replaced.</param>

         /// <param name=""replacementColor"">The new color to replace the old one.</param>

         public static void BreadthFirstSearch(Bitmap bitmap, (int x, int y) location, Color targetColor, Color replacementColor)
"
83106,"                (""mean_with_na"", np.mean),

                 (""min"", lambda x: x.min()),

                 (""5%"", lambda x: x.quantile(0.05)),

                 (""25%"", lambda x: x.quantile(0.25)),
"
30208," * ### Algorithm

  * 1) Initialize the Maximal Matching M as empty.

  * 2) While there exists an Augmenting Path P

  *   Remove matching edges of P from M and add not-matching edges of P to M

  *   (This increases size of M by 1 as P starts and ends with a free vertex
"
12026,"// CheckKebabCase method checks the given string is in kebab-case or not.

 // Problem Source & Explanation: https://en.wikipedia.org/wiki/Naming_convention_(programming)

 /**

  * CheckKebabCase method returns true if the string in kebab-case, else return the false.
"
23096,"      }

       // Else return the characters without any modification.

       return char

     })
"
14204,"    Integer[] integers =

         IntStream.generate(() -> r.nextInt(maxElement))

             .limit(size)

             .sorted()

             .boxed()
"
27310,"        temp = temp * 2;  // used as power of 2

     }

     printf(""%d\n"", decimal_number);

 }
"
20175,"    std::cout << ""Test 1 passed\n"";

     /// Test 2

     int arr2[8] = {-6, 56, -45, 56, 0, -1, 8, 8};

     CombSort(arr2, 0, 8);

     assert(std::is_sorted(arr2, arr2 + 8));
"
21866,"/**

  * Author: dephraiim

  * License: GPL-3.0 or later

  *
"
64307,"			return false

 		}

 	}

 	return true

 }
"
25372,"					int start = strg[si + 1][ei] + arr[si] * year;

 					int end = strg[si][ei - 1] + arr[ei] * year;

 					strg[si][ei] = Math.max(start, end);
"
22407,"}

 export { eulersTotientFunction }
"
32883,"1 = 0^2 + 1^2 has not been included as this problem is concerned with the

 squares of positive integers.

 Find the sum of all the numbers less than 10^8 that are both palindromic and can

 be written as the sum of consecutive squares.

 """"""

 def is_palindrome(n: int) -> bool:
"
28033,"            // In the next step you iterate over the text with the pattern.

             List<int> occurrences = new();

             for (var i = 0; i + pattern.Length - 1 < text.Length; i++)

             {

                 // In each step you calculate the hash value of the substring to be tested.
"
33280,"		return 1;

 	}

 	else {

 		return -1;

 	}

 }
"
96047,"                    float.PositiveInfinity,

                     float.PositiveInfinity,

                     float.PositiveInfinity

                 },
"
27672,"    int j = 0;

     int k = l;

     // after comparing, we merge those two array in larger sub array
"
24444," */

 int main(int argc, char *argv[]) {

     if (argc < 2) {

         test1();  // execute 1st test
"
79291,"#ifdef _OPENMP

 #pragma omp for

 #endif

         for (col = row; col < mat_size; col++)
"
29272,"			name: ""invalid decryption(position of odd number)"", text: ""hode"", want: ""failed decipher: D does not exist in characters"",

 		},

 		{
"
31407,"        {

             start++;

             if (start < arrSize)

                 arr[start] = 0;

         }
"
32187,"		{""olokazakabba"", ""kazak""},

 		{""abaacakkkkk"", ""kkkkk""},

 		{""qqqq C++ groovy mom pooop"", ""pooop""},
"
18291,"        >>> t.put(3)

         >>> assert t.root.left.parent == t.root

         >>> assert t.root.left.label == 3

         """"""

         self.root = self._put(self.root, label)
"
27189,"# Example 1:

 # Input: A = ""this apple is sweet"", B = ""this apple is sour""

 # Output: [""sweet"",""sour""]
"
31710,"  int sequenceIndex = 0;

   while (sequenceIndex < sequence.length && arrayIndex < array.length) {

     if (sequence[sequenceIndex] == array[arrayIndex]) {

       sequenceIndex += 1;

     }

     arrayIndex += 1;
"
18114,"        /// <returns>Sequence of elements in post-order order.</returns>

         public IEnumerable<TKey> GetKeysPostOrder()

         {
"
29910,"};

 int main(void) {

     size_t f = 10;

     _hash(""asdas"", 2, 3, 4);

     A<int, string, vector<int>> a;    // 类型任意

     // Tuple就是利用这个特性(变长参数模板)
"
33382,"            freearr[freen++] = (void *)buffer;

             bufn = BUFSIZE - 1;

         }
"
14355," * conditions

  * There can be many such equations

  */

 #include <cassert>   /// asserting the test functions
"
19934,"#include <vector>

 /**

  * @namespace dynamic_programming

  * @brief Dynamic programming algorithms
"
14440,"    throw new Error('The ' + paramName + ' only accepts non-negative values')

   }

 }

 export { surfaceAreaCube, surfaceAreaSphere, areaRectangle, areaSquare, areaTriangle, areaParallelogram, areaTrapezium, areaCircle, areaRhombus }
"
45487,"        """"""

         input: new components

         changes the components of the vector.

         replaces the components with newer one.

         """"""

         if len(components) > 0:
"
80861,"    }

   }

   /**

    * Serach recursively if the given value is present in BST or not.
"
13062,"  test(""findPeak returns 3 for [1, 3, 20, 32, 1, 2]"", () {

     List<int> lst = [1, 3, 20, 32, 1, 2];

     expect(findPeak(lst, lst.length), equals(3));

   });
"
12241,"        @test weight_conversion(""ounce"", ""pound"", 1) == 0.0625000000004599

         @test weight_conversion(""ounce"", ""ounce"", 2) == 2.000000000003377

         @test weight_conversion(""ounce"", ""carrat"", 1) == 141.7475

         @test weight_conversion(""ounce"", ""atomic-mass-unit"", 1) == 1.70724563015874e+25

         @test weight_conversion(""carrat"", ""kilogram"", 1) == 0.0002
"
31640,"            {

                 Sort(array, l + count[i], l + count[i + 1] - 1, d + 1, temp);

             }
"
13259,"}

 #endif

 /** Main function */

 int main(int argc, char **argv)
"
20514,"    comb_sort(input)

   end

 end
"
12487,"            {

                 var compareResult = comparer.Compare(key, node.Key);

                 if (compareResult < 0)

                 {

                     node = node.Left;

                 }
"
96589,"            tmp->next = nodeList;

             nodeList = tmp;

             continue;

         }

         // from begin up to end
"
19110,"        case 'v':

             return ""...-"";

         case 'w':

             return "".--"";
"
21731,"<?php

 function merge(array $arr1,array $arr2){

     $result=[];

     $i=0;

     $j=0;

     while ($i<count($arr1)&&$j<count($arr2)){
"
18246,"  private static Integer patternLength;

   private static int comparisons = 0; // total comparisons in the current/last search

   /**

    * Case sensitive version version of the algorithm
"
30345," * execute: ./file

  */

 extern int ext;

 int main(){
"
81628,"  while (Math.max(x, y) % Math.min(x, y) !== 0) {

     if (x > y) {

       x %= y

     } else {
"
23518,"70172427121883998797908792274921901699720888093776\

 65727333001053367881220235421809751254540594752243\

 52584907711670556013604839586446706324415722155397\

 53697817977846174064955149290862569321978468622482\

 83972241375657056057490261407972968652414535100474\
"
26739,"        self.data = data

         self.next = None

     def __repr__(self):

         """"""Returns a visual representation of the node and all its following nodes.""""""
"
33502,"    }

     public Node getNext() {

       return next;

     }
"
88078," * finding a pattern within a piece of text with complexity O(n + m)

  *

  * 1. Preprocess pattern to identify any suffixes that are identical to

  * prefixes. This tells us where to continue from if we get a mismatch between a
"
17687,"};

 class Derivered1 : public Base1 {

     virtual void func() {}      // error: overriding final function ‘virtual void Base1::func()’
"
58921,"    ValueError: The number of weights must be the same as the number of values.

     But got 4 weights and 3 values

     """"""

     if not (isinstance(wt, (list, tuple)) and isinstance(val, (list, tuple))):

         raise ValueError(
"
25244,"8 5 9 3

 That is, 3 + 7 + 4 + 9 = 23.

 Find the maximum total from top to bottom of the triangle below:

 75

 95 64

 17 47 82
"
24396,"    } else {

       result += hexLookup(binaryString.slice(0, i + 1).join(''))

     }

   }
"
15781,"    1.477

     """"""

     if smoothing:

         if N == 0:

             raise ValueError(""log10(0) is undefined."")

         return round(1 + log10(N / (1 + df)), 3)
"
11818,"        if dist[neighbour] > dist[node] + graph.connections[node][neighbour]:

             dist[neighbour] = dist[node] + graph.connections[node][neighbour]

             priority_queue.update_key(neighbour, dist[neighbour])

             parent[neighbour] = node

     # running prim's algorithm
"
17490,"        raise TypeError(""Parameter n must be int or castable to int."")

     if n <= 0:

         raise ValueError(""Parameter n must be greater than or equal to one."")

     max_number = 0
"
41191,"    {

         private static BinaryHeap<int> BuildTestHeap()

         {
"
24098,"here target is 10

 int n=10;

 		startAlgo();

 		System.out.println(bpR(0,n));
"
76526,"  }

   public static double squareRoot(int N, int P) {

     // rv means return value
"
20990,"{

     static uint32_t counter = 0;

     int i, j;

     static char prefix[100] = """";  // enough memory
"
90717,"def pre_order(node: TreeNode) -> None:

     """"""

     >>> root = TreeNode(1)
"
54859,"      }

     }

     return visited;

   }

 }

 public class ConnectedComponent {
"
11334,"      const col = j + i

       if (s[j] === s[col]) {

         dp[j][col] = 2 + dp[j + 1][col - 1]

       } else {
"
88811,"        }

         [Test]

         public void TestInsertAndCount()

         {

             var obj1 = new SimpleObject(""foo"", 5);

             var obj2 = new SimpleObject(""bar"", 6);
"
27365,"        }

     }

 }

 /**
"
12799,"    Traceback (most recent call last):

         ...

     ValueError: not a valid axis, choose one of 'x', 'y', 'z'

     >>> rotate(1, 2, 3, ""x"", -90)

     (1, -2.5049096187183877, -2.5933429780983657)
"
19949,"        sc.close();

     }catch(Exception e){

         System.out.println(""Unable to close scanner""+e);

     }

     //Find XOR of the 2 non repeating elements
"
38239,"    167761

     >>> dynamic_lucas_number(-1.5)

     Traceback (most recent call last):
"
10088,"        {

             printf(""\nPrinting Tree inOrder\n"");

             printInOrder(root);

             break;
"
90310,"        public bool Contains(TKey key) => Search(root, key) is not null;

         /// <summary>

         ///     Removes a node with a key that matches <paramref name=""key"" />.

         /// </summary>

         /// <param name=""key"">The key to search for.</param>

         /// <returns>true if the removal was successful, false otherwise.</returns>
"
31955,"            break;

           }

         case 3:

           {

             System.out.println(""Print table"");

             h.displayHashtable();
"
24311,"        /// <param name=""node"">Black node to examine.</param>

         /// <returns>Node to start recoloring from. Null if deletion occurred.</returns>

         private RedBlackTreeNode<TKey>? RemoveBlackNode(RedBlackTreeNode<TKey> node)

         {

             // Node is black and has at most one child. If it has a child it must be red.

             var child = node.Left ?? node.Right;
"
25392," * \param[out] y_idx y-index where minimum value was found

  */

 void get_min_2d(double **X, int N, double *val, int *x_idx, int *y_idx)

 {

     val[0] = INFINITY;  // initial min value
"
17455,"        q.pop();

         for(uint64_t i=0;i<graph[u].size();i++)

         {

             int64_t v = graph[u][i];    ///< stores the neighbour of the current node

             if(!(*visited)[v])          /// check whether the neighbour node is 

                                         /// travelled already or not
"
27111,"}
"
22327,"#

 def calculate_products_of_all_other_elements(nums)

   product_of_other_elements = Array.new(nums.count, 1)
"
29821,"        bool result = false;

         for (int j = 0; j < 2 && !result; j++) {

             if (std::abs(y[i] - eig_vals[j]) < 0.1) {

                 result = true;

                 std::cout << ""("" << eig_vals[j] << "") "";

             }
"
18698,"        {

             perror(""Unable to allocate memory for Q & R."");

             for (; i >= 0; i--)

             {
"
30731,"deps = [""LinearAlgebra"", ""Random"", ""SparseArrays""]

 git-tree-sha1 = ""693210145367e7685d8604aee33d9bfb85db8b31""

 uuid = ""1a297f60-69ca-5386-bcde-b61e274b549b""

 version = ""0.11.9""
"
31752,"    $characters = str_split($string); // Splitting the string to a Character Array.

     foreach ($characters as $character) {

         if (in_array($character, $vowels)) {

             $noOfVowels++;

         }

     }
"
10968,"                    continue; // Do ignore already checked and not traversable nodes.

                 }

                 // Adds a previously not ""seen"" node into the Queue

                 if (connected.State == NodeState.Unconsidered)
"
23280,"            tree.GetKeysPreOrder().SequenceEqual(new[] { 3, 1, 0, 2, 7, 4 }).Should().BeTrue();

         }

         [Test]
"
24006,"     */

     bool contains(T value) { return contains(root_, value); }

     /**

      * @brief Find the smallest value in the BST.
"
10687,"  }

   return _avl

 }())
"
21809,"# b = gets.to_i

 # puts ""GCD (#{a}, #{b} ) = #{extended_euclidean_gcd(a, b)}""

 #
"
23628,"<?php

 // The XOR cipher is a type of additive cipher.

 // Each character is bitwise XORed with the key.

 // We loop through the input string, XORing each

 // character with the key.
"
22105,"}

 /**

  * @brief Test function to find root for the function

  * \f$f(x)= x^{\frac{1}{x}}\f$

  * in the interval \f$[-2,10]\f$
"
23218,"     * Applies the inverse Rijndael MixColumns for decryption to the input and returns the result.

      */

     public static BigInteger mixColumnsDec(BigInteger ciphertext) {

         int[] cells = splitBlockIntoCells(ciphertext);

         int[] outputCells = new int[16];
"
18089,"  /**

    * Main method

    *
"
28655,"            var tree = new AvlTree<int>();

             tree.Contains(5).Should().BeFalse();

             tree.Contains(-12).Should().BeFalse();

         }

         [Test]
"
11970,"    printf(""Enter number of test cases : "");

     scanf(""%d"", &T);

     while (T--)

     {

         for (i = 0; i < 16500; i++)
"
68248,"        /// </summary>

         private readonly int capacity;

         /// <summary>

         ///     Adjacency matrix which reflects the edges between vertices and their weight.

         ///     Zero value indicates no edge between two vertices.

         /// </summary>
"
17146,"package Strings;

 /**

  * Given a string, moving several characters in front of the string to the end of the string. For
"
29864,"    void add(int64_t data) { root = insert(data, root); }

     /**

      * Reverses the Binary Tree

      */

     void reverse() { root = reverseBinaryTree(root); }

     /**
"
31560,"	}

 	result := """"

 	for i := 0; i < textLength; i += keyLength {

 		transposition := make([]rune, keyLength)
"
19202,"    expect(cache.cacheInfo()).toBe('CacheInfo(hits=6, misses=3, capacity=2, current size=2)')

   })

   it('Example 2 (Computing Fibonacci Series, size=100)', () => {
"
22707,"import { selectionSort } from '../SelectionSort'

 describe('selectionSort', () => {

   it('expects to return the array sorted in ascending order', () => {

     const toSort = [5, 6, 7, 8, 1, 2, 12, 14]

     const expected = [1, 2, 5, 6, 7, 8, 12, 14]
"
27314,"    """"""

     seed(1)

     return [gauss(mean, std_dev) for _ in range(instance_count)]
"
61358,"/**

  * @brief SDBM algorithm implementation

  *

  * @param s NULL terminated string to hash

  * @return 64-bit hash result

  */
"
21757,"            if (MinItem == null)

             {

                 MinItem = newItem;
"
25087,"        {

             var dll = new DoublyLinkedList<int>(new[] { 0, 1, 2, 3, 4 });

             var one = dll.Contains(1);

             var six = dll.Contains(6);

             Assert.IsTrue(one);
"
15170,"    # sense that the output value is cryptographically secure or difficult

     # to calculate, it only needs to be random in the sense that all output

     # values should be equally likely to appear.

     # For this reason, Pollard suggested using ``f(x) = (x**2 - 1) % num``
"
31041,"	Difference(set2 Set) Set

 	// SymmetricDifference: gives new symmetric difference set of both sets.

 	// ex: [1,2,3] SymmetricDifference [3,4,5] -> [1,2,4,5]

 	SymmetricDifference(set2 Set) Set
"
32865,"  it('should correctly sort an input list that is unsorted', () => {

     const array = [15, 24, 3, 2224, 1]

     expect(cycleSort(array)).toEqual([1, 3, 15, 24, 2224])

   })

   describe('Variations of input array lengths', () => {

     it('should return an empty list with the input list is an empty list', () => {
"
10987,"    # Pads image with the edge values of array.

     image_tmp = pad(image, pad_size, mode=""edge"")

     # im2col, turn the k_size*k_size pixels into a row and np.vstack all rows
"
10000,"import os

 import random

 import sys
"
73087,"func rlRotation(root **Node) {

 	c := (*root).Right.Left

 	cl := c.Left

 	cr := c.Right

 	c.Right = (*root).Right
"
24636,"// Fibonacci Series using Dynamic Programming

 /* Author: Moinak Banerjee(moinak878)

    Date : 1 October ,2019

 */
"
31637,"#include<iostream>

 using namespace std;

 int main(){

     const int p = 3;
"
14289,"export { convertArbitraryBase }

 // > convertArbitraryBase('98', '0123456789', '01234567')

 // '142'

 // > convertArbitraryBase('98', '0123456789', 'abcdefgh')

 // 'bec'

 // > convertArbitraryBase('129', '0123456789', '01234567')
"
30662,"    return this.board[row].slice(start, end)

   }

   printBoard (output = (...v) => console.log(...v)) {

     // helper function to display board

     for (let i = 0; i < 9; i++) {
"
28311,"	return prodTree(l, m) * prodTree(m+1, r)

 }
"
29939,"                    .Should()

                     .Be(3);

                 array[0].Time

                     .Should()

                     .Be(new DateTime(2005, 1, 1));
"
28696," * @tparam size size of the array

  * @param [in] arr our array of elements.

  * @return array with elements sorted
"
29979,"""""""

 Gamma function is a very useful tool in math and physics.

 It helps calculating complex integral in a convenient way.
"
18269,"    >>> input_list = [3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2]

     >>> mode(input_list)

     [2]
"
30244,"      }

     }

   }

   return true

 }
"
25209,"    assert res == (int) Math.pow(a, p) : ""Incorrect Implementation"";

     System.out.println(a + ""^"" + p + "": "" + res);

   }

   /**
"
62058,"// exponentiation_test.go

 // description: Test for ModularExponentation

 // author(s) [Taj](https://github.com/tjgurwara99)
"
83018,"#

 # Input: n = 1

 # Output: 5

 # Explanation: The 5 sorted strings that consist of vowels only are [""a"",""e"",""i"",""o"",""u""].

 #
"
20364,"    r = b - a;

     ssort1(x, r, depth);

     if (i2c(r) != 0)

         ssort1(x + r, a + n - d - 1, depth + 1);

     r = d - c;

     ssort1(x + n - r, r, depth);
"
18617,"import base64

 def base32_encode(string: str) -> bytes:

     """"""

     Encodes a given string to base32, returning a bytes-like object

     >>> base32_encode(""Hello World!"")

     b'JBSWY3DPEBLW64TMMQQQ===='
"
33082,"package DynamicProgramming;

 import java.util.Scanner;

 /**

  * Program to implement Kadane’s Algorithm to calculate maximum contiguous subarray sum of an array

  * Time Complexity: O(n)
"
46213,"    [<TestMethod>]

     [<DataRow(""abr"", ""abracadabra"",2)>]

     [<DataRow(""a"", ""aaaa"", 4)>]

     [<DataRow(""xz"", ""zxxzxxz"", 2)>]

     member this.findPattern (pattern:string, inputString:string, expected:int) =
"
30280,"    encrypted = CaesarCipher.encrypt(plaintext, shift)

     assert_equal encrypted, expected_cipher

     decrypted = CaesarCipher.decrypt(encrypted, shift)
"
24557,"	tests := getTestsForPowerOfTwo()

 	for _, tv := range tests {

 		t.Run(tv.name, func(t *testing.T) {

 			result := IsPowerOfTwoLeftShift(uint(tv.a))
"
21438,"#

 # Example 1:

 # Input: accounts = [[1,2,3],[3,2,1]]
"
29928," * Arrangement: 1

  * "".Q...."",

  * ""...Q.."",

  * "".....Q"",
"
75210,"    Traceback (most recent call last):

         ...

     ValueError: Input series is not valid, valid series - [2, 4, 6]
"
26581,"        /// </summary>

         /// <param name=""collection"">The enumerable collection to be copied.</param>

         /// <param name=""comparer"">The default comparer to use for comparing objects.</param>

         public MinMaxHeap(IEnumerable<T>? collection = null, IComparer<T>? comparer = null)
"
34401,"    }

     int i = 0;

     while (counter > 0)

     {
"
99289,"    }catch(...){

         cout<<""in fun""<<endl;

         throw 1;
"
12996,"            C[j] += C[j - 1]

             j -= 1

     return C[r]

 print(binomial_coefficient(n=10, r=5))
"
17095,"  it should ""return -1 if the element is not present in the list"" in {

     val l = List.range(1, 5)

     assert(BinarySearch.binarySearch(l, 7, 0, 4) === -1)

     assert(BinarySearch.binarySearch(l, 7, 1, 3) === -1)

   }
"
28460,"estimatePi <- function(numSims){

     x <- runif(numSims)

     y <- runif(numSims)

     inUnitCircle <- as.integer(x^2 + y^2 <= 1)

     return(4 * sum(inUnitCircle) / numSims)
"
30510,"            }

             // for appropriate scaling

             if (binaryNumber.Length < field.Length)

             {
"
21200,"/*

     author: Theepag

  */
"
16366,"func TestDecimalToBinary(t *testing.T) {

 	for input, expected := range decimalTestCases {

 		out, err := DecimalToBinary(input)

 		if err != nil {

 			t.Errorf(""DecimalToBinary(%d) returned an error %s"", input, err.Error())
"
18424,"char *adaline_get_weights_str(const struct adaline *ada)

 {

     static char out[100];  // static so the value is persistent
"
32641,"        TEMPORARY_ARRAY_LENGTH = 0;

         for (i = 1; i < ARRAY_LENGTH; i++)

         {
"
22847,"After the largest element has been extracted, the tree is updated to maintain the heap property via a ""sifting"" operation.

   Storing a heap in an array is pretty straightforward - for every node with index n, its children are stored at indices

   2n + 1 and 2n + 2 (for 0-based indices). Index 0 contains the root node.

   Since Julia's indices are 1-based, we need to change this a little bit. We're using a trivial helper function 

   idx_for to convert from 0-based to 1-based.
"
12574,"            // For all Min levels, value (index + 1) has the leftmost bit set to '1' at even position.

             const uint minLevelsBits = 0x55555555;

             const uint maxLevelsBits = 0xAAAAAAAA;
"
75409,"})
"
12472,"import java.util.PriorityQueue; 

 import java.util.Scanner; 

 import java.util.Comparator; 

 // node class is the basic structure 

 // of each node present in the Huffman - tree. 
"
16262," * @namespace magic_sequence

  * @brief Functions for the [Magic

  * sequence](https://www.csplib.org/Problems/prob019/) implementation

  */

 namespace magic_sequence {

 using sequence_t =
"
31111,"#include <stdlib.h>

 #include <string.h>

 #include <time.h>
"
76770,"         i = get_next_abundant(i))

     {

         if (is_abundant(N - i))

         {
"
12693,"                }

             }

         }

         private static BigInteger BinomialCoefficient(long n, long k)

         {

             if (k == 0 || k == n)
"
38681,"    Description: A collection of dates/times and values sorted by dates/times easy to query.

     Usage:

         this data structure can be used to represent an ordered series of dates or times with which to associate values.

         An example is a chronology of events:
"
31117,"}
"
30885,"    /// The QuickSort algorithm sorts the array by first choosing a pivot. This pivot is used to rearrange

     /// all elements, moving the smaller ones to the left of it. This operation is then recursevely applied

     /// to the subarrays formed around the pivot.

     mutating func quickSort() {
"
90237,"}
"
16263,"  it('with celsius value', () => {

     const test1 = tc.celsiusToRankine(28)

     expect(test1).toBe(542)

   })

 })
"
74153,"    // tree.Remove(10);

     tree.Remove(5);

     tree.Print();
"
25446,"        hanoi(noOfDisks - 1, extra, to, where);

     }

 }

 int main(void)
"
18934,"        1.1 If last visited vertex has path to starting vertex return True either

             return False

     Recursive Step:
"
23555,"	                      Map.Entry::getKey,

 	                      Map.Entry::getValue,

 	                      (e1, e2) -> e1, LinkedHashMap::new));

 	         
"
97840,"            ""ERROR: Block size is %s bits and key size is %s bits. The RSA cipher ""

             ""requires the block size to be equal to or greater than the key size. ""

             ""Did you specify the correct key file and encrypted file?""

             % (block_size * 8, key_size)

         )
"
24063,"        if (CanIMove(board, i, col)) {

             board[i][col] = 1;

             NQueenSol(board, col + 1);
"
18216,"#

 # Time complexity: O(n logn), where n is the length of the array.

 # Space complexity: O(n) or O(logn)
"
21346,"        return 0;

     }

     sq = ((int)(sqrt(no))) + 1;

     for (int i = 3; i < sq; i += 2)
"
11616,"        [TestCase(new[] { 1, 2 }, 2)]

         [TestCase(new[] { 1, 2, 3, 3, 3 }, 2)]

         public static void FindIndex_ItemPresentInSpecificCase_IndexCorrect(int[] arr, int present)

         {

             var searcher = new FastSearcher();

             var index = searcher.FindIndex(arr, present);
"
29344,"        {

             var tree = new RedBlackTree<int>();

             tree.AddRange(new[] { 5, 2, 8, 1, 4, 7, 9, 0, 3 });

             tree.Remove(0);
"
90182,"	return (l.P2.Y - l.P1.Y) / (l.P2.X - l.P1.X)

 }

 // Calculates the Y-Intercept of a line from a specific Point.

 func Intercept(p *Point, slope float64) float64 {

 	return p.Y - (slope * p.X)

 }
"
33153,"    {

         return getMax(root->right);

     }
"
19436,"        /// <summary>

         ///     Computes a random unit vector.

         /// </summary>

         /// <param name=""dimensions"">The dimensions of the required vector.</param>
"
15576,"        }

         [Test]

         public void Remove_EmptyTree_ThrowsException()

         {

             var tree = new AvlTree<int>();

             Assert.Throws<InvalidOperationException>(() => tree.Remove(1));
"
20869,"package Search

 import scala.annotation.tailrec

 /** This is scala implementation of linear search algorithm

   */
"
26864,"            var tree = new BinarySearchTree<int>();

             Assert.IsFalse(tree.Remove(8));

             Assert.AreEqual(0, tree.Count);
"
20166,"puts abs_max(9, -121)

 # The Abs Max of 9 and -121 is 9.

 # Invalid inputs

 puts abs_max(2, '-1')

 # Error: Provide number only!

 puts abs_max('3', '5')
"
21611,"    // Pass the octal number to function and get converted decimal form

     int decimal = octToDec(oct);

     // Pass the decimal number to function and get converted Hex form of the number

     String hex = decimalToHex(decimal);

     System.out.println(""The Hexadecimal equivalant is: "" + hex);

     input.close();
"
24750,"  end

 end
"
25515,"        return findfirst(value,tree,tree.rch[place])

     end

 end
"
13138,"            }

         }

     } else {

         for (int i = 0; i <= n / 2; i++) {  // 😏
"
31484,"		{70, 190392490709135},

 		{80, 23416728348467685},

 		{90, 2880067194370816120},

 	}

 	for i := range fibonacciNumbers {

 		t.Run(fmt.Sprintf(""the %dth Fibonacci number"", fibonacciNumbers[i].nth), func(t *testing.T) {
"
25234,"    if ( length == 0 ) { return -1; }

     // find the upperbound

     uint32_t upper_bound = 1;

     while ( upper_bound <= length && arr[upper_bound] < n ) { upper_bound = upper_bound * 2; }

     // calculate the range ( between lower_boud and upper_bound )

     uint16_t lower_bound = upper_bound/2;
"
63564,"            // maxCumulativeValue --> maximum value while not exceeding weight capacity.

             var maxCumulativeValue = 0.0;

             // starting node, associated with a temporary created dummy item

             BranchAndBoundNode root = new(level: -1, taken: false);

             // lastNodeOfOptimalPat --> last item in the optimal item sets identified by this algorithm

             BranchAndBoundNode lastNodeOfOptimalPath = root;
"
25254,"        [TestCase(153, ExpectedResult = true)]

         [TestCase(170, ExpectedResult = false)]

         [TestCase(371, ExpectedResult = true)]

         public static bool NarcissisticNumberWork(int number)

         {
"
10425,"    return tree.lch[from]==0&&tree.rch[from]==0

 end

 function ch(tree::Tree,from::Int,select::Bool)where Tree<:AbstractBinaryTree_arr

     if select return tree.rch[from]

     else return tree.lch[from]
"
51773,"  M: 1000

 }

 export function romanToDecimal (romanNumber) {

   let prev = ' '
"
19076,"	for _, tv := range tests {

 		t.Run(tv.name, func(t *testing.T) {

 			result := CalculateFactorialUseTree(tv.n)
"
47904,"} 
"
26497,"                    node.Left = Remove(predecessor.Key, node.Left);

                     node.Key = predecessor.Key;

                 }

             }

             node = DecreaseLevel(node);
"
18788,"  max_value = ((x + y + num.abs) / 2)

   ""The Abs Max of #{x} and #{y} is #{max_value}.""

 rescue StandardError

   'Error: Provide number only!'
"
12861,"			a:      1,

 			b:      5,

 			output: 5,
"
12638,"		}

 	}

 	// perform linear search from index prev to index curr
"
13145,"/**

  * PID Controller

  *
"
10833,"      } else {

         if (divideArray[i].x > divideArray[divideX].x) {

           break;

         }

       }

     }
"
28595,"    /// <param name=""pattern""></param>

     /// <param name=""text""></param>

     /// <returns></returns>

     let rabinKarp (pattern: string, text: string): bool =
"
10357,"        {

         case 'G':

             ans[i] = 'C';

             break;
"
21785,"        return table;

     }

     /**

      * Determines the number of rows the table should have regarding the Columnar Transposition Cipher

      * Rule
"
14096,"    if (!fp)  // error with fopen

     {

         char msg[120];

         sprintf(msg, ""File error (%s): "", fname);
"
10312," * This program prints (writes or outputs) to another file (`wordcount.txt`),

  * the individual words contained in 'file.txt' with their frequencies (number

  * of occurences) each on a newline and in alphabetical order. This program uses

  * the binary tree data structure to accomplish this task.

  * @author [Randy Kwalar](https://github.com/RandyKdev)
"
73207,"  } else {

     return null;

   }
"
12911,"        """"""

         return len(tuple(iter(self)))

     def __str__(self) -> str:

         """"""

         >>> str(SortedLinkedList([]))

         ''
"
87323,"         *

          *  to make the graph unidirectional pass the third parameter of

          * add_edge as false which will

          */

         adjacency_list[u].push_back(v);  // u-->v edge added

         if (bidir == true) {
"
24540,"/** Iterative constructor of all sets in the current level. This function

  * dynamically allocates memory when creating new sets. These are freed by the

  * function ::free_memory.
"
17826,"                if (tc[s][i] && tc[i][t])

                     tc[s][t] = 1;

 }

 int main(void)

 {

     warshall();
"
15926,"    displayCArray(arr);

     for (i = 0; i < arr->size / 2; i++)

     {

         switchValuesCArray(arr, i, arr->size - i - 1);
"
17927,"        return (0);

     }

     printf(""wrong number of parmeters\n"");

     return (1);

 }
"
33124,"end

 puts 'Binary value of 4 is ' + decimal_to_binary(4).to_s

 # Binary value of 4 is 100
"
87538,"  const pattern = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'

   let currentDateMilliseconds = new Date().getTime()

   return pattern.replace(/[xy]/g, currentChar => {

     const randomChar = (currentDateMilliseconds + Math.random() * 16) % 16 | 0

     currentDateMilliseconds = Math.floor(currentDateMilliseconds / 16)

     return (currentChar === 'x' ? randomChar : (randomChar & 0x7 | 0x8)).toString(16)
"
45897,"}

 // GetParent Function that finds the first previous state of a state and returns it.

 // Used for trie where there is only one parent.
"
69142,"        n->next = NULL;

         start = n;

     }

 }

 void double_linked_list::remove(int x) {
"
12340,"    private static String abecedarium;

     public static final String ABECEDARIUM =

             ""abcdefghijklmnopqrstuvwxyzABCDEFG"" + ""HIJKLMNOPQRSTUVWXYZ0123456789,.;:-@"";
"
27829,"    >>> while not first_heap.isEmpty():

     ...     print(first_heap.deleteMin(), end="" "")

     17 20 25 26 27 28 29 31 34 

     """"""
"
26839,"        INFINITY, 3,        1,        5,        0,        INFINITY,

         INFINITY, INFINITY, INFINITY, 7,        INFINITY, 0};

     findMinimumEdge(INFINITY, graph);

     return 0;
"
83595,"    take(num);

 }

 void Apple::take(int num) const

 {

     cout<<""take func ""<<num<<endl;
"
11881," * */

 int main() {

     uint64_t n = 10;  ///< number of items

     dsu d(n + 1);     ///< object of class disjoint sets

     test1();  // run 1st test case
"
10297,"    } else if (child2Pos < this._heap.length &&

       (child1Priority < currPriority || child2Priority < currPriority)) {

       this._shiftDown(currPos)

     }

   }
"
11180," * @param {String} varName the name of the variable to check.

  * @returns `Boolean` return true if the string is in snake_case, else return false.

  */

 const checkSnakeCase = (varName) => {
"
29760,"    const Array = [13, 2, 3, 4, 5, 6, 12]

     expect(LocalMaximomPoint(Array)).toEqual(6)

   })

   it('test inner points - second element', () => {
"
58078,"  int place = pow(10, length - 1);

   if (number == 0) return inWords = ""Zero"";

   if (length == 1) {

     inWords = ONES[number - 1];
"
15491,"[[ZygoteRules]]

 deps = [""MacroTools""]

 git-tree-sha1 = ""9e7a1e8ca60b742e508a315c17eef5211e7fbfd7""

 uuid = ""700de1a5-db45-46bc-99cf-38207098b444""

 version = ""0.2.1""
"
15192,"        }else{

             return arr[beginningOfQueue];

         }

     }
"
44242,"        {

             if (str[i + j] != pattern[j])

                 break;

         }

         if (j == len_pat)

             printf(""--Pattern is found at: %d\n"", i);
"
22178,"            /**

              * This function finds character for given value (i.e.A-Z)

              * @param x value for which we want character 

              * @return  corresponding character for perticular value
"
12785,"        return -0.18 + (1.17 * ((self.nir - self.red) / (self.nir + self.red)))

     def CCCI(self):

         """"""
"
68328,"    }

 }
"
25218,"      } else {

         f = fib.get(i - 1) + fib.get(i - 2);

       }

       fib.put(i, f);
"
18676,"        /// </summary>

         /// <param name=""sequence"">String sequence.</param>

         /// <returns>returns True if sequence contains only zeros and ones; False otherwise.</returns>

         private static bool Match(string sequence) => sequence.All(ch => ch == '0' || ch == '1');

     }

 }
"
28568,"    if (start == NULL)

     {

         start = p;

     }
"
10178,"def main():

     """"""

     Call Greatest Common Divisor function.
"
31990,"    if ((va = ptr2char(a)) == (vb = ptr2char(b)))

         return a;

     if ((vc = ptr2char(c)) == va || vc == vb)

         return c;

     return va < vb ? (vb < vc ? b : (va < vc ? c : a))

                    : (vb > vc ? b : (va < vc ? a : c));
"
60938,"    if (this._head == null) {

       this._head = new Node(item);

     } else {
"
13347,"        return left

     if left[0] < right[0]:

         return [left[0]] + merge(left[1:], right)

     return [right[0]] + merge(left, right[1:])

 def tim_sort(lst):

     """"""
"
72860,"    for data_point in data:

         distance = euclidean_distance(data_point[0], point)

         distances.append((distance, data_point[1]))
"
21380,"    for _ in arr:

         resultPipe.append(Pipe())

     # creates the processes

     # the first and last process only have one neighbor so they are made outside

     # of the loop
"
70276,"#include <stdio.h>

 #include <stdlib.h>

 #define SHRINK 1.3  // suggested shrink factor value

 void sort(int *numbers, int size)

 {

     int gap = size;
"
20392,"            {

                 mat[line][column] = 50;

                 mat[line][column - 1] = 50;

                 return 4;

             }
"
31341,"        }

         [Test]

         public static void BranchAndBoundTest_CapacityIsZero_NothingTaken()

         {
"
29714,"// graph.addEdge(1, 2, 1)

 // graph.addEdge(2, 3, 2)

 // graph.addEdge(3, 4, 1)

 // graph.addEdge(3, 5, 100) // Removed in MST
"
30524,"    int i;

     for (i = 0; i < ALPHABET_SIZE; i++)

     {

         printPathsRecur(node->children[i], prefix, filledLen);

     }
"
85808,"    for (int i = 0; i < 512; i++) {

       System.out.println(lcg.nextNumber());

     }

   }

 }
"
63649," * @param dest Destination node

  * @returns Shortest distance from source to destination

  */

 function BellmanFord (graph, V, E, src, dest) {

   // Initialize distance of all vertices as infinite.

   const dis = Array(V).fill(Infinity)
"
72715,"      printMatrix(arr);

     }

     sc.close();

   }
"
33667,"      if (chars[i] == ')') {

         if (chars[i - 1] == '(') {

           res[i] = res[i - 2] + 2;

         } else {

           int index = i - res[i - 1] - 1;
"
24439,"            if (isEndofWord) {

                 return false;

             } else {

                 int i = 0;

                 for (i = 0; i < NUM_CHARS; i++) {

                     if (arr[i]) {
"
15918,"})

 test('Should return the integral of f(x) = sqrt(x) + x^2 in [1, 3] to be equal 11.46410161', () => {

   const result = integralEvaluation(64, 1, 3, (x) => { return Math.sqrt(x) + Math.pow(x, 2) })

   expect(Number(result.toPrecision(10))).toBe(11.46410161)
"
79381,"            var oddHeap = new FibonacciHeap<int>();

             for (var i = 1; i < 10; i += 2)

             {
"
69682,"            {

                 return Tree[i];

             }

             if (r < a || b < l)
"
24563,"    }

     nextGeneration.push(nextGenerationRow)

   }

   return nextGeneration

 }
"
29761,"    private static Object[][] sortTable(Object[][] table) {

         Object[][] tableSorted = new Object[table.length][table[0].length];

         for (int i = 0; i < tableSorted.length; i++) {

             System.arraycopy(table[i], 0, tableSorted[i], 0, tableSorted[i].length);

         }
"
33193,"            if (strcmp(word_list[i], words->text) == 0)

             {

                 words->count++;
"
17173,"  count

 end

 nums = [1, 2, 3, 1, 1, 3]

 puts(num_identical_pairs(nums))
"
11081,"﻿namespace Algorithms.Tests.Strings

 open Microsoft.VisualStudio.TestTools.UnitTesting

 open Algorithms.Strings
"
24306,"    end

   end

   result

 end
"
28727,"            user_input = input_type(input(input_msg).strip() or default)

             if condition(user_input):

                 return user_input

             else:

                 print(f""{user_input}: {err_msg}"")

                 continue
"
23757,"        uint32_t n = 1 + rand() % 1000;

         FCFS<uint32_t, uint32_t, uint32_t> readyQueue;

         vector<tuple<uint32_t, uint32_t, uint32_t>> input(n);

         for (uint32_t i{}; i < n; i++) {

             get<0>(input[i]) = i;
"
26969,"     (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (6, 5), (6, 6)]

     """"""

     def __init__(self, start: tuple[int, int], goal: tuple[int, int]):
"
20317,"        return;

     else

     {

         temp = *root;

         prev = NULL;

         // search
"
12344,"# The factorial of 4 is 24.

 puts factorial(10)

 # The factorial of 10 is 3628800.
"
31601,"	n.Remove(""aaaa"")

 	checkWords[""aaaa""] = false

 	n.verify(t, checkWords)

 	n.verifySizeCapa(t, 2, 5+1)

 	if n.Compact() {
"
30564,"        /// <summary>

         ///     Represents black node

         /// </summary>

         Black,

     }

     /// <summary>
"
25700,"        printf(""Converged after %d iterations.\n"", iter);

     else

         printf(""Did not converged after %d iterations.\n"", iter);
"
33053,"        } else if (op.equals(""*"")) {

           s.push(num1 * num2);

         } else {

           s.push(num1 / num2);

         }

         //  ""+"", ""-"", ""*"", ""/""
"
10885,"    std::array <std::array <int, n>, n> sol = { 0 };

     int i, j;

     for (i = 0; i < n; i++) {

         for (j = 0; j < n; j++) { sol[i][j] = -1; }

     }

     std::array <int, n> xmov = { 2, 1, -1, -2, -2, -1, 1, 2 };
"
23410,"		}

 };

 int main(){
"
16988,"import {

   isTriangular,

   isTetrahedral,
"
24627,"        std::queue<int> queue_of_vertices;

         queue_of_vertices.push(root);

         while (!queue_of_vertices.empty()) {

             int vertex = queue_of_vertices.front();

             queue_of_vertices.pop();

             for (int neighbor : neighbors[vertex]) {
"
23213,"    {

         fprintf(stderr, ""Error while opening dictionary file"");

         exit(1);

     }

     words[word_count] = malloc(INPUT_WORD_SIZE);

     while (fgets(words[word_count], INPUT_WORD_SIZE, fp))
"
17648,"/**

 * Quick sort is a comparison sorting algorithm that uses a divide and conquer strategy.

 *

 * For more information see here: https://en.wikipedia.org/wiki/Quicksort

 */
"
24330,"  // if the object forms some other objects prefix we dont delete it

   // For checking an empty object

   // https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object

   if (child.count <= 0 && (Object.keys(child.children).length && child.children.constructor === Object)) {

     child.parent.children[child.key] = undefined

   }
"
42623,"      until iter.nil?

         return iter.val if cnt == index

         iter = iter.next

         cnt += 1

       end

     else
"
71507,"			}

 			for i := 0; i < len(test.queries); i++ {

 				result := segmentTree.Query(1, 0, len(test.array)-1, test.queries[i].firstIndex, test.queries[i].lastIndex)

 				if result != test.expected[i] {

 					t.Logf(""FAIL: %s"", test.description)

 					t.Fatalf(""Expected result: %d\nFound: %d\n"", test.expected[i], result)
"
31568,"            var query = timeline.GetValuesByHour(16);

             using (new AssertionScope())

             {

                 query.Count

                     .Should()
"
14689,"                return 4;

             }

             else
"
24302,"    expect(alternativeBubbleSort([1, 2, 3])).toEqual([1, 2, 3])

     expect(alternativeBubbleSort([5, 6, 7, 8, 1, 2, 12, 14])).toEqual([1, 2, 5, 6, 7, 8, 12, 14])

   })

 })
"
11912,"    mid_index = div(len,2)

     return len % 2 == 0 ? (sorted[mid_index + 1] + sorted[mid_index]) / 2 : sorted[mid_index + 1]

 end
"
20197,"        len = 1;

     }

     else
"
88795,"*/
"
29101,"// graph.addEdge(2, 3)

 // graph.addEdge(2, 4)

 // graph.addEdge(3, 5)

 // graph.DFSRecursive(5, 1)

 // graph.DFSRecursive(5, 100)
"
90068,"    int max;

     max = MAX(arr, n);

     radixsort2(arr, n, max);

     printf(""Sorted array: "");
"
11387,"    expect(perfectSquare(10)).toBeFalsy()

   })

 })
"
24617,"        res[array.size() - shift + i] =

             array[i];  ///< Add the values from the start

     }
"
42530,"            }

         }

         

         return answer;

         
"
24161,"# 1

 puts binary_count_trailing_zeroes(1023)

 # 0
"
22535,"                hue = 0;

             }

             else if (value.Equals(dRed))
"
26863,"import { checkPangram } from '../CheckPangram'

 describe('checkPangram', () => {

   it('""The quick brown fox jumps over the lazy dog"" is a pangram', () => {

     expect(

       checkPangram('The quick brown fox jumps over the lazy dog')

     ).toBeTruthy()
"
19825,"    int i = (low - 1);       // Index of smaller element

     for (int j = low; j < high; j++) {

         // If current element is smaller than or
"
24896,"    }

     /**

      * @brief Doing range update by passing the left and right indexes of the

      * range as well as the value to be added.

      * @param l the left index of the range to be updated

      * @param r the right index of the range to be updated
"
18577,"        .map(turns => rotateRight(pad(a.toString(2), 32), turns))

         .map(bitstring => parseInt(bitstring, 2))

         .reduce((acc, curr) => acc ^ curr, 0) >>> 0

       const maj = ((a & b) ^ (a & c) ^ (b & c)) >>> 0

       const temp2 = (S0 + maj) >>> 0
"
23277,"                    let mutable currentRow = [ i + 1 ]

                     secondWord

                     |> Seq.iteri

                         (fun j c2 ->

                             let insertions = previousRow.[j + 1] + 1

                             let deletions = currentRow.[j] + 1
"
28748,"    /*char c[10];

     char d;

     cin.getline(c,10);

     cin.get(d);

 	cout<<c<<endl<<int(d);//룺12345[enter]a[enter] 12345С97*/

     //cin.getline(arrayname,size,s)cin.gei(arrayname,size,s)
"
18663,"        }

 #endif

     }

     clock_t end_time = clock();

     printf(""Time taken: %.4g ms\n"",

            1e3 * (double)(end_time - start_time) / CLOCKS_PER_SEC);
"
11089,"        default:

             std::cout << ""Operator not defined\n"";

             break;
"
11051,"    1,

     1,

     1,

     1,

     -1,

     -1,
"
81429,"    """"""

     Color-coding taking the relative distance into account. The Mandelbrot set

     is black.

     >>> get_color_coded_rgb(0)

     (255, 0, 0)
"
20561,"            }

             BinarySearchTreeNode<TKey>? replacementNode;

             // Case 0: Node has no children.

             // Case 1: Node has one child.

             if (node.Left is null || node.Right is null)
"
31896,"  // prints the heap

   print (output = value => console.log(value)) {

     output(this.heap.slice(1))

   }
"
65958,"    """"""

     Utility function to plot the vectors using matplotlib.pyplot

     No doctest was implemented since this function does not have a return value

     """"""

     # avoid stretched display of graph

     axes = plt.gca()
"
19411,"uuid = ""42fd0dbc-a981-5370-80f2-aaf504508153""

 version = ""0.9.1""

 [[IteratorInterfaceExtensions]]

 git-tree-sha1 = ""a3f24677c21f5bbe9d2a714f95dcd58337fb2856""
"
32907,"//    // 提供一个非成员swap函数for ADL(Argument Dependent Lookup)

 //    template<typename T>

 //    void swap(A::smart_ptr<T> &lhs, A::smart_ptr<T> &rhs) noexcept {

 //        lhs.swap(rhs);

 //    }

 //
"
21518,"    }

     return root;

 }

 /** Balanced Deletion */

 node *deleteNode(node *root, int key) {
"
28424,"         * @param key to be used for decryption

          * @return new decrypted text

          */        

         std::string decrypt (const std::string &text, const int &key) {

             std::string decrypted_text = """"; // Empty string to store decrypted text
"
23851,"unsigned put(hash_set_t *set, long long hash, void *value)

 {

     if (contains_hash(set, hash))
"
31564,"    user_input = input(""Enter numbers separated by a comma:\n"").strip()

     unsorted = [int(item) for item in user_input.split("","")]

     print(merge_insertion_sort(unsorted))
"
11904,"                nright--;

             }

         }

     }

 }
"
18686,"        System.out.println(""Digital Root : ""+digitalRoot(n));     // Printing the value returned by digitalRoot() method

     }

 }

 /**
"
17281,"                        break;

                     default:

                         found = true;

                         return mid;

                 }
"
25547,"/**

  * [QuickSelect](https://www.geeksforgeeks.org/quickselect-algorithm/) is an algorithm to find the kth smallest number

  *

  * Notes:

  * -QuickSelect is related to QuickSort, thus has optimal best and average

  * -case (O(n)) but unlikely poor worst case (O(n^2))
"
10511,"    # length[i] shows the length of palindromic substring with center i

     length = [1 for i in range(len(new_input_string))]

     # for each character in new_string find corresponding palindromic string

     start = 0
"
24692,"    printf(""%d\n"",base.v3);

     return 0;

 }
"
18959,"            break;

         }

         case 4:

         {
"
46538,"        [Test]

         public void First10ElementsCorrect()

         {

             var sequence = new NaturalSequence().Sequence.Take(10);

             sequence.SequenceEqual(new BigInteger[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 })
"
21578,"function mean(nums::Vector{T})where T<:Number

     return sum(nums) / length(nums)

 end
"
35373,"#     @left, @right = nil, nil

 #   end

 # end

 # @param {TreeNode} root

 # @return {Integer[]}
"
30511," * For comparison, the probability of a cosmic ray causing an error to your

  * infalible program is around 1.4 * 10^-15. An order of magnitude below!

  *

  * But because nothing is perfect, there's a major flaw to this algorithm, and
"
30186,"# frozen_string_literal: true

 # n! means n x (n - 1) x ... x 3 x 2 x 1

 # For example, 10! = 10 x 9 x ... x 3 x 2 x 1 = 3628800,
"
21955,"    val arr = List(3, 2, 7, 1, 9, 0)

     assert(RecursiveInsertionSort.recursiveInsertionSort(arr) === List(0, 1, 2, 3, 7, 9))

   }

 }
"
12178,"    void dijkstra(int graph[][], int src)

     {

         int dist[] = new int[k]; 
"
13732,"            }

         }

         [Test]

         public static void RemoveDateTimeAndTValueArrayTest() //bool Remove(params (DateTime, TValue)[] timeline)

         {
"
38572,"    int min = this.heap[1];

     this.heap[1] = this.heap[this.size];

     this.heap[this.size] = min;

     this.size--;

     this.sink();

     return min;
"
12553,"    >>> solution(15)

     360360

     >>> solution(22)

     232792560

     """"""
"
26328,"  test(""CircularQueue act as fifo"", () {

     CircularQueue<int> queue = new CircularQueue<int>();

     queue.enque(1);

     queue.enque(2);

     queue.enque(3);
"
16000," *

  * \returns the index of the element (n) in the array (arr)

  * \returns -1 if the n element wasn't found
"
67847,"  }

   public static void main(String args[]) {

     Scanner input = new Scanner(System.in);

     System.out.print(""Enter the Octal number: "");

     // Take octal number as input from user in a string
"
88981,"                }

                 left.UpperBound = ComputeUpperBound(left, items, capacity, weightSelector, valueSelector);

                 right.UpperBound = ComputeUpperBound(right, items, capacity, weightSelector, valueSelector);
"
24296,"      }

       currentNode = node;

     }

     if (currentNode.end == true) {

       currentNode.end = false;
"
19214,"  /**

    * Generic Linear search method

    *

    * @param array List to be searched

    * @param value Key being searched for
"
15648,"}
"
31631,"            flags[b] = 1;

             flags[i] = 1;

             sum += b + i;

 #ifdef DEBUG

             printf(""Amicable: %4d : %4d\n"", i, b);
"
10092,"    }

 }

 /**

  * @brief Function to join
"
51063,"  addEdge (node1, node2) {

     // Adding edges to the graph

     this.edges.push({

       node1,

       node2

     })
"
32811," * @author [tushar2407](https://github.com/tushar2407)

  */

 #include <cassert>   /// for assert

 #include <iostream>  /// for IO operations
"
12484,"    // If the number is less than 0, then it is not a armstrong number.

     if (number < 0) {

         return false;
"
80538,"﻿using System;

 namespace Algorithms.Numeric

 {

     /// <summary>
"
93030,"    counting_arr = [0] * counting_arr_length

     # count how much a number appears in the collection

     for number in collection:

         counting_arr[number - coll_min] += 1

     # sum each position with it's predecessors. now, counting_arr[i] tells

     # us how many elements <= i has in the collection
"
13772,"		return

 	}

 	cur := ll.Head

 	for ; cur.Next != nil; cur = cur.Next {

 	}
"
32701,"        /// <returns>Binary representation of input.</returns>

         public static string Int2Bin(uint input)

         {

             var msb = uint.MaxValue / 2 + 1;

             var output = new StringBuilder();
"
17990,"				{

 					t = t->parent;

 					rightrotate(t);

 				}

 				t->parent->color = 'b';

 				g->color = 'r';
"
18339,"				}

 			}

 		})

 	}
"
28580,"    """"""

     >>> simple_interest(18000.0, 0.06, 3)

     3240.0

     >>> simple_interest(0.5, 0.06, 3)

     0.09
"
27508,"    for (int i = 0; i < 3; i++) {

       canvas.drawRect(30 + i * 230, 670, 200, 20);

       canvas.setColor(new Color(76, 174, 227)); // Blue Accent

       canvas.fillRect(30 + i * 230, 670, 200, 20);

       canvas.fillRect(130 + i * 230 - 2, 670 - 170, 4, 170);

       canvas.setColor(new Color(150, 0, 0)); // Arseny
"
17008,"    }

     return 0;

 }
"
17023,"	prev := 0    // previous index

 	curr := step // current index

 	for array[curr-1] < target {

 		prev = curr
"
92658,"      expect(cycleSort([101, -10, 321])).toEqual([-10, 101, 321])

     })

     it('should correctly sort an input list of an even length', () => {
"
82278,"        temp = i;

         i = j;

         j = temp + i;
"
30656,"    }

     return 0;

 }
"
12945,"                delete (node->right,

                         temp->key); /*Delete the smallest in the R subtree.*/

         }

     }
"
16623,"            if (mapping.ContainsKey(newItem))

             {

                 mapping[newItem].Add(newNode);

             }

             else

             {
"
17416,"    std::vector <std::string> calculatedOutput(4, """");

     int i=0;

     for(auto & scsString : scsStrings) {

         
"
14063,"        /// <returns>The unit vector.</returns>

         public static double[] RandomUnitVector(int dimensions)

         {

             Random random = new();
"
30837,"   * Get min of array using recursion algorithm

    *

    * @param array contains elements

    * @param len length of given array

    * @return min value of {@code array}

    */
"
48424,"    uint32_t b = 0;

     const uint32_t MODADLER = 65521;

     size_t i = 0;
"
20792," * \param[in] start_t start clock

  * \param[in] end_t end clock

  * \returns time difference in seconds

  */

 double get_clock_diff(clock_t start_t, clock_t end_t) {
"
21476," * The main sequence is passed over again and a new sub-sequence is created in order.

  * Now that the sorted array is not empty, the newly extracted substring is merged with the sorted array.

  * Repeat types 3 and 4 until the sub-sequence and main sequence are empty.

  * 
"
35402,"    public class DoublyLinkedListNode<T>

     {

         /// <summary>

         ///     Initializes a new instance of the <see cref=""DoublyLinkedListNode{T}"" /> class.

         /// </summary>

         /// <param name=""data"">Data to be stored in this node.</param>
"
12106,"// Value shows how close this species to the desired target, where 1 means,

 // that species DNA equals to the targeted one, 0 for no matchings in the DNA.

 //

 // **Note** In the current implementation species DNA length is suppose to be
"
27631,"  while (i < larr.length && j < rarr.length) {

     if (larr[i] < rarr[j]) {

       array[k++] = larr[i++]
"
23937,"  const left = 2 * i + 1

   const right = 2 * i + 2

   let max = i
"
28411,"from __future__ import annotations

 from .abs import abs_val

 def abs_min(x: list[int]) -> int:
"
23106," * \f[

  * y = (b - a) \times \frac{\text{(random number between 0 and RAND_MAX)} \;

  * \text{mod}\; 100}{100} + a \f]

  *
"
10269,"puts roman_to_int(s)

 # Output: 58

 # Explanation: L = 50, V= 5, III = 3.
"
16257," * performs inorder traversal

  * param[in] curr node pointer to the topmost node of the tree

  */

 void inorder_display(node *curr)
"
13296,"  }

   const middleIndex = intArr.length === 1 ? 0 : Math.ceil(intArr.length / 2)

   if (intArr[middleIndex] === searchQuery) {

     return true

   } else if (intArr.length > 1) {
"
16084,"    and types of data

 """"""

 # Mean Absolute Error
"
22574,"    for(k in (j + 1):max) {

       if(ascending && elements.vec[k] < m || !ascending && elements.vec[k] > m) {

         m <- elements.vec[k]

         p <- k

       }

     } 
"
27909,"def solution(n: int = 998001) -> int:

     """"""

     Returns the largest palindrome made from the product of two 3-digit
"
29878,"            printf(""%c x "", ch);

         else

             printf(""%c = %lld\n"", ch, max_prod);

     }

     fclose(fp); /* close file */
"
21081,"    print(f""{solution() = }"")
"
17245,"        return y * math.log10(x)

     else:

         if x == 0:  # 0 raised to any number is 0

             return 0

         elif y == 0:
"
24362,"    97623331044818386269515456334926366572897563400500

     42846280183517070527831839425882145521227251250327

     55121603546981200581762165212827652751691296897789
"
33814,"            if ((i > 0 && i < 11) && (j > 0 && j < 11))

             {

                 logic = mat[i - 1][j - 1];

                 imp = printTable(logic, stage);

                 printf(""%c"", imp);
"
33794,"        ///         to the result which is returned as a List.

         ///     </para>

         /// </summary>

         /// <param name=""target"">Number that is being factored.</param>

         /// <returns>List of prime factors of target.</returns>
"
13179,"        {

         case 0:

         {
"
10555,"  })

 })

 describe('fermatPrimeCheck', () => {

   it('should give the correct output for prime and composite numbers', () => {

     expect(fermatPrimeCheck(2, 35)).toBe(true)
"
31556,"# 2520 is the smallest number that can be divided

 # by each of the numbers from 1 to 10 without any remainder.

 # What is the smallest positive number that is evenly

 # divisible by all of the numbers from 1 to 20?

 # Euclid's algorithm for the greatest common divisor
"
26031,"from typing import Generic, TypeVar

 T = TypeVar(""T"")

 class GraphAdjacencyList(Generic[T]):

     """"""

     Adjacency List type Graph Data Structure that accounts for directed and undirected
"
36111,"    assert(tree.size() == 0);

     assert(tree.contains(6) == false);

     bool fail_res = tree.remove(5);

     assert(!fail_res);
"
15226,"        /// <param name=""capacity"">The maximum weight capacity of the knapsack to be filled.</param>

         /// <param name=""weightSelector"">

         ///     A function that returns the value of the specified item

         ///     from the <paramref name=""items"">items</paramref> list.

         /// </param>

         /// <param name=""valueSelector"">
"
38909,"  return true

 }

 /**

  * Shuffles the given array randomly in place.
"
30378,"// 		Best: O(1)

 // Example

 // 		fmt.Println(InterpolationSearch([]int{1, 2, 9, 20, 31, 45, 63, 70, 100},100))
"
16214,"{

     public static class TranslatorTests

     {

         [Test]
"
20576,"""""""

 Program to encode and decode Baconian or Bacon's Cipher

 Wikipedia reference : https://en.wikipedia.org/wiki/Bacon%27s_cipher
"
26135,"    output('M   T   W   Th  F   S   Su')

     const dates = []; let i

     for (i = 1; i <= days; i++) {

       dates.push(i)

     }
"
33089,"def rankine_to_fahrenheit(rankine: float, ndigits: int = 2) -> float:

     """"""

     Convert a given value from Rankine to Fahrenheit and round it to 2 decimal places.

     Wikipedia reference: https://en.wikipedia.org/wiki/Rankine_scale

     Wikipedia reference: https://en.wikipedia.org/wiki/Fahrenheit
"
21889,"        if (buckets[hash].equals(wrappedInt)) {

           buckets[hash] = AVAILABLE;

           return hash;

         }

       } catch (Exception E) {

       }
"
51014,"    /// The minimum item on this heap or nil if the heap is empty

     var min: Element? {

         return items.first

     }

     /// The number of items on this heap
"
85124,"    """"""

     Prepare the plaintext by up-casing it

     and separating repeated letters with X's

     """"""

     dirty = """".join([c.upper() for c in dirty if c in string.ascii_letters])

     clean = """"
"
15577,"    assert(g != NULL);

     g->nV = V;

     g->nE = 0;

     // allocate memory for each row
"
15964,"      for (int i = 0; i < x.size(); i++) {

         Complex z = x.get(i);

         x.set(i, z.divide(N));

       }
"
28029,"            bzero(&sendbuff, sizeof(sendbuff));

             printf(""\nType message here: "");

             fgets(sendbuff, 1024, stdin);
"
87364," * };

  */

 struct ListNode *reverse(struct ListNode *head)

 {

     struct ListNode *res = NULL;
"
13839,"    {

         if (arr[s[i]] == 1)

             return i;

     }

     return -1;

 }
"
16875,"    foreach ($hexDigits as $power => $digit) {

         $hexDigit = $digit;

         if (!is_numeric($digit)) {

             $hexDigit = $decimalDigitMappings[$digit];

         }
"
31653,")

 func TestMonteCarloPi(t *testing.T) {

 	t.Run(""Monte Carlo Pi"", func(t *testing.T) {

 		result := fmt.Sprintf(""%.2f"", MonteCarloPi(100000000))

 		t.Log(result)
"
20446,"  }

   //Push a item to the stack

   void push(T item) {

     if (count == n) {

       print(""The stack is full\n"");

     }
"
17339,"}
"
13692,"        /// <param name=""node"">Node that was removed.</param>

         /// <param name=""sibling"">Sibling of removed node.</param>

         /// <param name=""childDir"">Side of parent removed node was on.</param>

         private void RemoveCase5(RedBlackTreeNode<TKey> node, RedBlackTreeNode<TKey> sibling, int childDir)
"
21145," * @details

  * Sieve of Eratosthenes is an algorithm that finds all the primes

  * between 2 and N.
"
33547,"""""""

 mutable struct DisjointSet

     par::Vector{Int}
"
10293,"            }

         }

         /// <summary>

         ///     Remove x from the child list of y.

         /// </summary>
"
13348,"  for (int i = 1; i <= upper_sqrt; ++i)

     if (prime_bits[i])

       for (int j = i * (i + 1) * 2; j <= sieve_bound; j += 2 * i + 1)

         prime_bits[j] = false;

   List<int> primes = [2];
"
20845,"        /// <param name=""a"">TODO.</param>

         /// <param name=""b"">TODO. 2.</param>

         /// <returns>Greatest common divisor.</returns>

         public int FindGcd(int a, int b)

         {

             if (a == 0 && b == 0)
"
49155,"                // Pattern is shifted by the maximum of the values

                 // given by the good-suffix and the bad-character heuristics

                 i += Math.Max(goodSuffix[j + 1], j - badChar[t[i + j]]);
"
10402,"			t.Errorf(""height of left child should be 1"")

 		}

 		if root.Right.Key != 5 {

 			t.Errorf(""right child should have value = 5"")

 		}
"
19720,"#

 def find_duplicates(array)

   result_hash = {}

   result_array = []

   # loop through array and build a hash with counters
"
83999," *   O(sqrt(n))

  */

 int eulers_totient(int n) {
"
24217,"    for (w = 0; w < nV; w++)

         if (adjacent(g, v, w))

             deg++;

     return deg;
"
25785,"    KT.solve()

     expect(KT.board).toEqual([

       [19, 4, 15, 10, 25],

       [14, 9, 18, 5, 16],

       [1, 20, 3, 24, 11],
"
72795,"    Complex a2=2+b;       	 

     a1.display();

     a2.display();  

     c3=c1+c2;
"
26192,"        public static double Cos(double x, double error = 0.00001) => ErrorTermWrapper(x, error, CosTerm);

         /// <summary>

         ///     Wrapper function for calculating approximation with estimated

         ///     count of terms, where last term value is less than given error.

         /// </summary>
"
32454,"}  // namespace util_functions

 /** \namespace layers

  * \brief This namespace contains layers used

  * in MLP.

  */

 namespace layers {
"
20395,"  let ml = (message.length * CHAR_SIZE).toString(2)

   ml = pad(ml, 8)

   ml = '0'.repeat(64 - ml.length) + ml
"
15975,"        ),

         ""seconds"",

     )

 if __name__ == ""__main__"":
"
27811,"    // only the tree changes.

     node *root = NULL;

     int opt = -1;

     int data = 0;

     // event-loop.

     while (opt != 0)
"
82362,"	if !ok || state == -1 || at[state] == nil {

 		return false

 	}

 	return true
"
12505,"        }

 };

 class Derived : private Base {

     public:

         using Base::f;

         void f(int n){
"
21574,"})
"
15167,"    result +=

         base64Table[char1] +

         base64Table[char2] +

         base64Table[char3] +
"
21328,"    >>> catalan_number(5)

     42

     >>> catalan_number(6)

     132

     """"""
"
26518,"	// source: http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibtable.html

 	var fibonacciNumbers = []struct {

 		nth       uint

 		fibonacci uint

 	}{

 		{0, 0},
"
67154,"// TernaryMin is a function to search for minimum value of a uni-modal function `f`

 // in the interval [a, b]. a and b should be finit numbers.

 func TernaryMin(a, b, epsilon float64, f func(x float64) float64) (float64, error) {

 	if a == math.Inf(-1) || b == math.Inf(1) {

 		return -1, fmt.Errorf(""interval boundaries should be finite numbers"")
"
26567,"        {

             cout << ""I am Derived\n"";

         }
"
19483,"// | || |              | | | '--------------' || '--------------' ||

 // '--------------' || '--------------' | | '--------------' || '--------------'

 // |
"
24570,"      // CIRCULAR QUEUE OVERFLOW

       return true

     }
"
49683,"        [Test]

         public static void FindIndex_ArrayOfDuplicatesItemMissing_ItemNotFoundExceptionThrown()

         {

             var searcher = new FastSearcher();

             var arr = new int[1000];

             var missing = 1;
"
22828,"                System.out.println(messageVector[i][0]);

                 j++;

             }
"
11221,"    else if (arr[i] > x) {

       fibM = fibMMm2;

       fibMMm1 = fibMMm1 - fibMMm2;

       fibMMm2 = fibM - fibMMm1;

     }
"
56827,"        const std::function<uint32_t(const Puzzle &, const Puzzle &)> &dist,

         const uint32_t permissible_depth = 30) {

         MapOfPuzzleInfoWithPuzzleInfo

             parent_of;                       /// Stores the parent of the states

         MapOfPuzzleInfoWithInteger g_score;  /// Stores the g_score
"
43192,"            var expectedLower = new[,] { { 1, 0, 0, 0 }, { 3, 1, 0, 0 }, { 2, 1, 1, 0 }, { 4, 3, 2.875, 1 } };

             var expectedUpper = new[,] { { 1, 2, 4.5, 7 }, { 0, 2, -13, -19 }, { 0, 0, 8, 6.5 }, { 0, 0, 0, 20.8125 } };

             // Act

             (double[,] lower, double[,] upper) = LU.Decompose(source);
"
28986,"            if self.is_left():

                 self.parent.rotate_left()

             else:

                 self.parent.rotate_right()
"
11253,"  /**

    * Use a closure to define the whole sort

    * implementation this is done through
"
19085,"            u = tolerance;

         else

             u = -tolerance;

         u += x;

         fu = f(u);
"
25465,"        /// </summary>

         /// <param name=""item"">An element to search.</param>

         /// <returns>true - <see cref=""SortedList{T}"" /> contains an element, otherwise - false.</returns>

         public bool Contains(T item)

         {

             _ = IndexFor(item, out var found);
"
14213,"def random_matrix(width: int, height: int, a: int, b: int) -> Matrix:

     """"""

     returns a random matrix WxH with integer components
"
20156,"/*

  * MergeSort implementation.

  *
"
23185,"  # we'll fill in the array from the end

   max_index = p2

   output = []
"
29038,"    }

   )

 })
"
27911,"    ""kilogram"" => 1.0,

     ""gram"" => 10^-3,

     ""milligram"" => 10^-6,
"
11694,"    double minValue; // Minimum lengt

     minLeftArea = closestPair(leftArray, divideX); // recursive closestPair

     minRightArea = closestPair(rightArray, indexNum - divideX);

     // window size (= minimum length)

     minValue = Math.min(minLeftArea, minRightArea);
"
10214,"}

 /** Main function */

 int main() {

     tests();
"
16424,"          case 3:

             word = scan.next();

             boolean resD = false;

             if (isValid(word)) resD = obj.delete(word);

             else sop(""Invalid string: allowed only a-z"");

             if (resD) {
"
27638," * index element.

  *           * Return the partition index from the function.

  *

  * @author [Nitin Sharma](https://github.com/foo290)
"
87551,"                grandParent->par = parent;

                 // Attach to existing Tree;

                 parent->par = greatGrandParent;

                 if (greatGrandParent != NULL)

                 {
"
20491,"        let diff = Math.abs(48 - 1 - shiftedCharCode) % 10

         while (diff >= 10) {

           diff = diff % 10

         }
"
30603,"package Maths;

 public class ADTFraction {

     public static void main(String[] args) {
"
33120,"            offset = index;

         // if value is less than the value at ""index"", eliminate the subarray after index+1

         } else if(arr[index] > value){

             next = last;

             current = current - last;

             last = next - current;
"
74742,"    assert Arrays.equals(hsvToRgb(300, 1, 1), new int[] {255, 0, 255});

     assert Arrays.equals(hsvToRgb(180, 0.5, 0.5), new int[] {64, 128, 128});

     assert Arrays.equals(hsvToRgb(234, 0.14, 0.88), new int[] {193, 196, 224});
"
16068," *

  * Here's how this works recursively:

  *

  * Palindrome('radar')
"
17403,"﻿using System;

 namespace Algorithms.Search

 {
"
22338,"   * @return index of the element

    */

   @Override

   public <T extends Comparable<T>> int find(T[] array, T key) {

     return search(array, key, 0, array.length);

   }
"
18684,"      case 'D': return 13

       case 'E': return 14

       case 'F': return 15

       default: return parseInt(item)
"
80328,"	point.X = (r*p2.X + p1.X) / (r + 1)

 	point.Y = (r*p2.Y + p1.Y) / (r + 1)

 	return point
"
15943,"		stackPush(2)

 		stackPush(3)

 		t.Run(""Stack Push"", func(t *testing.T) {

 			if !reflect.DeepEqual([]interface{}{3, 2}, stackArray) {

 				t.Errorf(""Stack Push is not work we expected %v but got %v"", []interface{}{3, 2}, stackArray)
"
30557,"  public double getColor(int color8Bit) {

     final double sRgb = getColorSRgb(color8Bit);

     return (sRgb <= 0.03928) ? sRgb / 12.92 : Math.pow((sRgb + 0.055) / 1.055, 2.4);

   }

   /**

    * @brief Calculates the Color sRGB value as denoted in step 1 of the procedure document.
"
10230,"            std::swap((*vec)[low], (*vec)[high]);

         }

         low++;
"
21466,"    """"""

     assert a >= 0 and b >= 0

     if b == 0:

         d, x, y = a, 1, 0

     else:

         (d, p, q) = extended_gcd(b, a % b)
"
17722,"package conversion

 import ""testing""

 var binaryTestCases = map[string]int{

 	""0"": 0, ""1"": 1, ""10"": 2, ""11"": 3, ""100"": 4,

 	""101"": 5, ""110"": 6, ""111"": 7, ""1000"": 8, ""1001"": 9,
"
16032,"              << std::endl;

     // Second test on lcm(2,3) == 6 as 2 and 3 are coprime (prime in fact)

     assert(((void)""LCM of 2 and 3 is 6 but lcm function gives a different ""
"
15335,"      this.from = from;

       this.to = to;

       this.weight = weight;

     }
"
33645,"  private NodeStack<?> getNext() {

     return next;

   }

   private void setNext(NodeStack<?> next) {

     this.next = next;
"
50905,"    ///     Comb sort is a relatively simple sorting algorithm that improves on bubble sort.

     /// </summary>

     /// <typeparam name=""T"">Type of array element.</typeparam>

     public class CombSorter<T> : IComparisonSorter<T>

     {
"
29280,"	/* Function to return longest alternating subsequence length*/

 	static int AlternatingLength(int arr[], int n){

 		/*

 		las[i][0] = Length of the longest

 			alternating subsequence ending at
"
24066,"			name:   ""right is min"",

 			left:   10,

 			middle: 8,

 			right:  6,
"
26720,"    case '2': return '0010'

     case '3': return '0011'

     case '4': return '0100'

     case '5': return '0101'
"
90909,"                index++;

             }

         }

         return array;

     }

     private <T extends Comparable<T>> int getSmallerElementCount(T[] array, int index) {
"
26525,"            var current = Head;

             for (var i = 0; i < position; i++)

             {

                 current = current!.Next;

             }
"
52029,"    def main(self, **kwargs) -> None:

         """"""

         Utilize various methods in this class to simulate the Banker's algorithm

         Return: None

         >>> BankersAlgorithm(test_claim_vector, test_allocated_res_table,

         ...    test_maximum_claim_table).main(describe=True)
"
13156,"          this.heap[k] > this.heap[2 * k] ||

           this.heap[k] > this.heap[2 * k + 1]

         ) {

           minIndex =

             this.heap[2 * k] < this.heap[2 * k + 1] ? 2 * k : 2 * k + 1

         } else {
"
26436,"var errCatalan = fmt.Errorf(""can't have a negative n-th catalan number"")

 // NthCatalan returns the n-th Catalan Number

 // Complexity: O(n²)

 func NthCatalanNumber(n int) (int64, error) {

 	if n < 0 {
"
75672,"                }

                 return false;

             }

             return true;

         }
"
28349,"                // First step -> Parent Child Rotation

                 parent->left = child->right;

                 if (child->right != NULL)
"
20701,"                {

                     if (node.Right is null)

                     {

                         newNode = new RedBlackTreeNode<TKey>(key, node);
"
54866,"        return obj.serialize();

     else

         return to_string(obj);

 }

 int main() {

     // 检测结构体是否有serialize方法
"
12101,"    expect(queue.dequeue()).toBe(2)

   })

 })
"
76299,"    *returnSize = 0;

     for (i = 0; i < numsSize - 1;)

     {

         if (nums[i] == nums[i + 1])

         {

             retArr[*returnSize] = nums[i];
"
18506,"# Given n, calculate F(n).

 #

 # Approach: Top-Down Approach using Memoization

 #
"
20318,"    """"""

     >>> SSL = SortedLinkedList

     >>> merged = merge_lists(SSL(test_data_odd), SSL(test_data_even))
"
17730,"  // Get the element at a given index. The key for the list is equal to index value - 1

   public HeapElement getElement(int elementIndex) {

     if ((elementIndex <= 0) || (elementIndex > minHeap.size()))

       throw new IndexOutOfBoundsException(""Index out of heap range"");
"
41506,"    """"""

     decrypt

     =======

     Decodes a given string of cipher-text and returns the decoded plain-text

     Parameters:

     -----------
"
29715,"	{

 		""non palindrome string"",

 		""Alô?"",

 		false,

 	},
"
32887,"    System.out.println(

         ""Minimum number of coins required for amount :""

             + amount

             + "" is: ""

             + minimumCoins(coins, amount));
"
33916,"            p->eqkid = insert1(p->eqkid, ++s);

     }

     else

         p->hikid = insert1(p->hikid, s);
"
89208,"Contributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee) and [Rratic](https://github.com/Rratic)

 """"""

 function perfect_square(number::N)where N<:Integer

     number<0&&return false

     val=isqrt(number)

     return val*val == number
"
14911,"    topo = []

     cnt = 0

     for key, values in graph.items():

         for i in values:
"
30934,"                        .toArray(Integer[]::new);

         // The element that should be found

         int shouldBeFound = integers[r.nextInt(size - 1)];

         ExponentialSearch search = new ExponentialSearch();
"
16428,"    free(r->range);

     free(r);

 }
"
86348,"/**

  * Faster exponentiation that capitalize on the fact that we are only interested

  * in the modulus of the exponentiation.

  *

  * Find out more about it here: https://en.wikipedia.org/wiki/Modular_exponentiation

  *
"
31636,"    int childTwoIndex;

     while (childOneIndex <= endIndex) {

       childTwoIndex =

           2 * currentIndex + 2 <= endIndex ? 2 * currentIndex + 2 : -1;
"
17519,"    }

 }

 /*
"
29833,"package Others;

 /** @author Prateek Kumar Oraon (https://github.com/prateekKrOraon) */

 import java.util.Scanner;

 // An implementation of Rabin-Karp string matching algorithm

 // Program will simply end if there is no match

 public class RabinKarp {
"
33608,"// 		fmt.Printf(""\n -->(%d)---(%c)--->(%d)"", current, t[pos+j-1], getTransition(current, t[pos+j-1], oracle))

 // 	} else if getTransition(current, t[pos+j-1], oracle) == -1 && current != 0 {

 // 		fmt.Printf(""\n    (%d)---(%c)       "", current, t[pos+j-1])

 // 	} else if getTransition(current, t[pos+j-1], oracle) == -1 && current == 0 {

 // 		fmt.Printf(""\n -->(%d)---(%c)       "", current, t[pos+j-1])
"
14474,"        perror(""Unable to allocate memory for Q & R!"");

         return -1;

     }

     for (int i = 0; i < ROWS; i++)

     {

         R[i] = (double *)malloc(sizeof(double) * COLUMNS);
"
10873,"  const n = array.length

   // Sorting the partitions using Insertion Sort

   for (let i = 0; i < n; i += RUN) {

     InsertionSort(array, i, Math.min(i + RUN - 1, n - 1))

   }

   for (let size = RUN; size < n; size *= 2) {
"
87078,"    if (save_to_file)

     {

         fp = fopen(""forward_euler.csv"", ""w+"");
"
23473,"            ]

         )

     def adjugate(self):

         values = [

             [self.cofactors().rows[column][row] for column in range(self.num_columns)]
"
20823,"    for (i = 0; i < 6; i++)

     {

         scanf(""%d"", &numbers[i]);
"
23558,"                swap(arr[i], arr[i + 1]);

                 sorted = false;

             }

         }
"
32107,"    for (int i = 2; i <= n; i++) {

       for (int j = 2; j <= m; j++) {

         eggFloor[i][j] = Integer.MAX_VALUE;

         for (x = 1; x <= j; x++) {

           result = 1 + Math.max(eggFloor[i - 1][x - 1], eggFloor[i][j - x]);

           // choose min of all values for particular x
"
22804," */

 vec_3d unit_vec(const vec_3d *a)

 {

     vec_3d n = {0};

     float norm = vector_norm(a);

     if (fabsf(norm) < EPSILON)
"
26681,"        public static void ClearWorksCorrectly()

         {

             // Arrange
"
72648,"        std::unordered_map<char16_t, std::shared_ptr<Node>>

             children;  ///< unordered map with key type char16_t and value is a

                        ///< shared pointer type of Node

         bool word_end = false;  ///< boolean variable to represent the node end

     };

     std::shared_ptr<Node> root_node =
"
58707,"  });

   test("".remove on empty list do nothing"", () {

     LinkedList<double> linkedList = new LinkedList();
"
24892,"package DataStructures.Queues;

 /**

  * This implements Queues by using the class Queue.

  *
"
25926,"                          << (hash + static_cast<size_t>(

                                          std::round(std::pow(i + 1, 2)))) %

                                  totalSize

                           << std::endl;

             }

             i++;
"
32202,"}

 /********function for convert decimal numbers to octal numbers************/

 void decimal2Octal(long decimalnum)

 {
"
16714,"        return this.seg_t[index];

     }

     

     
"
30196,"    while (!stack.isEmpty()) {

       output.append(stack.pop());

     }

     return output.toString();
"
22515,"                    .Should()

                     .Be(3);

                 timeline.Contains(

                         (new DateTime(1995, 1, 1), ""TestTime1""),

                         (new DateTime(2000, 1, 1), ""TestTime2""))
"
33499,"begin

   binary_count_trailing_zeroes(-1)

 rescue StandardError => e

   puts e.message

 end

 # Input must be a positive integer
"
15707,"    strcpy(input, input_text);

     char *p_str = input;

     /* index for iteration over input string */

     int index = 0;
"
17624,"/*

 Randomised quick sort implementation in C language.

 In normal quick sort, pivot chosen to partition is either the first or the last
"
28286,"//Author: Shawn

 //Email: stepfencurryxiao@gmail.com

 class ArrayStack<T> {

   //stack

   List<T> stack;

   //element of the stack
"
13320,"    assert(std::equal(std::begin(arr3), std::end(arr3),

                       std::begin(output_array3)));

     std::cout << ""passed"" << std::endl;

     // n = 56 m = 15 return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

     std::cout << ""4th test"";
"
88576,"    std::cout << ""Second test passes."" << std::endl;

     // Third test on 3 choose 2

     t = math::n_choose_r(3, 2);

     assert(

         ((void)""3 is the answer but the function says otherwise.\n"", t == 3));
"
55783,"        >>> linked_list[5] = -666

         >>> linked_list[5]

         -666

         >>> linked_list[-10] = 666

         Traceback (most recent call last):

         ...
"
11130,"        temp = top;

         top = top->link;

         free(temp);

         printf(""\nElement popped is %d.\n"", item);

     }

 }
"
20424,"public class BucketSort {

   public static void main(String[] args) {

     int[] arr = new int[10];
"
30365,"}
"
28021,"    int *pi = new int;

     print(""%d %s %p %f\n"", 15, ""Acc"", pi, 3.14);

     return 0;
"
22131,"version = ""0.5.7""

 [[Crayons]]

 git-tree-sha1 = ""3f71217b538d7aaee0b69ab47d9b7724ca8afa0d""
"
16705,"        for (int r = boxRowStart;

              r < boxRowStart + sqrt; r++)

         {
"
80520,"      array[position - 1] = element

       position -= 1

     end

   end

   array

 end
"
23263,"# A complete working Python program to demonstrate all

 # stack operations using a doubly linked list

 from __future__ import annotations

 from typing import Generic, TypeVar

 T = TypeVar(""T"")

 class Node(Generic[T]):
"
32115,"	return len(ListQueue)

 }

 // IsEmptyQueue check our list is empty or not

 func IsEmptyQueue() bool {

 	return len(ListQueue) == 0

 }
"
33110,"            // Assert

             action.Should().Throw<ArgumentException>()

                 .WithMessage(""The length of the start vector doesn't equal the size of the source matrix."");

         }

         [TestCaseSource(nameof(DominantVectorTestCases))]

         public void Dominant_ShouldCalculateDominantEigenvalueAndEigenvector(
"
12429,"        }

         [Test]

         public static void Remove_RemoveRoot_CorrectlyRemovesRoot()
"
10823,"queue.pop

 # 1

 queue.pop

 # 2
"
24197,"}

 // Driver program to test above functions

 int main() {

     MinHeap h(11);

     h.insertKey(3);

     h.insertKey(2);
"
23471,"// 	supply[m+1] = s

 // 	return oracle, orP + string(o)

 // }

 // // Function that takes a single string and reverses it.

 // // @author 'Walter' http://stackoverflow.com/a/10043083

 // func reverse(s string) string {
"
42287,"    for i in 1:length(weights)

         j = capacity

         while j > weights[i] # reversed loop

             dp[j] = max(dp[j], dp[j - weights[i]] + values[i])
"
33958,"    """"""

     Calculate Greatest Common Divisor (GCD).

     see greatest_common_divisor.py
"
10855,"        offset++; /* increases the element-pointer */

         /*

             moves pointer by the offset address

             pushs the object onto stack

          */

         *(array + offset) = object;
"
26436,"      ...

     ValueError: Number should not be negative.

     >>> [factorial(i) for i in range(10)]
"
26033," * Monte Carlo Tree Search (MCTS) is a heuristic search algorithm

  * used in decition taking problems especially games.

  * 
"
30600,"    """"""

     stack: Stack[int] = Stack(10)

     assert bool(stack) is False

     assert stack.is_empty() is True
"
53820,"                    value = not value

             self.literals[literal] = value

     def evaluate(self, model: dict[str, bool]) -> bool:

         """"""

         Evaluates the clause with the assignments in model.

         This has the following steps:
"
15311,"    ///     <para>

     ///         OEIS: https://oeis.org/A000005.

     ///     </para>
"
32256,"    internal class BinaryIndexedTreeTests

     {

         [Test]

         public void GetSum_CreateBITAndRequestSum_ReturnCorrect()
"
46957,"    >>> insert_next(col, 1)

     >>> print(col)

     []

     """"""
"
97774,"  //Get the index

   var index = interpolationSearch(arr, n, key);

   //print the result

   print(""Element found at position: $index"");

   return 0;

 }
"
94148,"#include <stdbool.h>

 #include <stdio.h>

 #include <stdlib.h>
"
24356,"package Others;

 import java.util.Arrays;

 /**
"
20139,"    }

     public void delete(int key) {

       if (!isEmpty()) {
"
30837,"            // Taken from https://oeis.org/A000002

             var expected = new BigInteger[]

             {
"
17571,"        holder1 = temp1->next;

         // Storing the address of next node of first linked list

         temp1->next = temp2;

         // Making the first node of first linked list point to first node of

         // second linked list

         if (holder1 != NULL)
"
66988,"#

 def add_digits(num)

   until num.to_s.length < 2

     digits_to_sum = num.to_s.split('')
"
22746," */

 public class HashMapLinearProbing {

   private int hsize; // size of the hash table

   private Integer[] buckets; // array representing the table

   private Integer AVAILABLE;
"
32862," * The Mandelbrot set is the set of complex numbers ""c"" for which the series ""z_(n+1) = z_n * z_n + c"" does not diverge,

  * i.e. remains bounded. Thus, a complex number ""c"" is a member of the Mandelbrot set if, when starting with ""z_0 = 0""

  * and applying the iteration repeatedly, the absolute value of ""z_n"" remains bounded for all ""n > 0"". Complex numbers

  * can be written as ""a + b*i"": ""a"" is the real component, usually drawn on the x-axis, and ""b*i"" is the imaginary

  * component, usually drawn on the y-axis. Most visualizations of the Mandelbrot set use a color-coding to indicate
"
42495,"            var decoded = encoder.Decode(encoded, key);

             // Assert

             Assert.AreEqual(message, decoded);

         }
"
49839,"    t.put(13)

     t.put(4)

     t.put(7)

     t.put(5)

     print(
"
30717,"        /// <summary>

         ///     Gets or sets the right child of the node.

         /// </summary>

         public AvlTreeNode<TKey>? Right { get; set; }

         /// <summary>

         ///     Initializes a new instance of the <see cref=""AvlTreeNode{TKey}""/> class.
"
21931,"    cout << ""Enter number of edges: "";

     cin >> E;

     Graph G(V);

     for (int i = 0; i < E; i++) {

         cout << ""\nEdge "" << i + 1 << ""\nEnter source: "";

         cin >> src;
"
29419,"        {

             // Arrange

             var gcdFinder = new EuclideanGreatestCommonDivisorFinder();

             // Act

             var actualGcd = gcdFinder.FindGcd(a, b);

             // Assert
"
18171,"# Valid inputs

 puts predefined_max(51, 82, 39)

 # The Max of the following elements [51, 82, 39] is 82.

 puts predefined_max(-11, -51, -10, -10)

 # The Max of the following elements [-11, -51, -10, -10] is -10.
"
38776,"            return value;

         }

         public void setValue(J value) {

             this.value = value;

         }
"
20540,"            self.closed_nodes.append(current_node)

             successors = self.get_successors(current_node)

             for child_node in successors:

                 if child_node in self.closed_nodes:

                     continue
"
22077,"/**

  * Polynomials are algebraic expressions consisting of two or more algebraic terms.

  * Terms of a polynomial are:

  * 1. Coefficients e.g. 5, 4 in 5x^0, 4x^3 respectively
"
89864,"   * @param s the string to check

    * @return {@code true} if all characters of a string are same, otherwise {@code false}

    */

   public static boolean isAllCharactersSame(String s) {

     for (int i = 1, length = s.length(); i < length; ++i) {

       if (s.charAt(i) != s.charAt(0)) {
"
20233," * @author Anmol3299

  * \brief A basic implementation of trie class to store only lower-case strings.

  */
"
24441,"  // be put in a knapsack of capacity W

   static int knapSack(int W, int wt[], int val[], int n) {

     int i, w;

     int K[][] = new int[n + 1][W + 1];

     // Build table K[][] in bottom up manner
"
12211,"  expect(dist).toBe(1)

 })

 test('Test Case 3', () => {

   const V = 4
"
11028," */

 const checkVowels = (value) => {

   if (typeof value !== 'string') {
"
45309,"            shoot(Player1, lin, col);

             a2 = pts2;

             pts2 += calculateScore(Player1, lin, col);

             if (a2 != pts2)
"
32313,"    [1, 1, 1]

     >>> longest_subsequence([])

     []
"
25393,"    if (num >= 0 && num <= 9) return (char) (num + '0');

     else return (char) (num - 10 + 'A');

   }

 }
"
16808,"    if (iterations == 2) {

         y = y * (1.5 - (x2 * y * y));  // 2nd iteration, the more exact result

     }

     return y;
"
24592,"    return $decimalNumber;

 }

 /**
"
31748,"    //    printf(""%s\n"",""hello world"");

     //};    //error!

 };

 void Base(){
"
74335,"    expect(() => ocatal_to_binary(""as23""), throwsFormatException);

   });

   test(""ocatal_to_binary of empty string raises error"", () {

     expect(() => ocatal_to_binary(""""), throwsFormatException);

   });

 }
"
26389,"    }

     this.print(this.findSkyline(0, num - 1));

     sc.close();

   }

   public void add(int left, int height, int right) {
"
25279," * and prints their sum using linked list.

  * The polynomials must be in increasing or decreasing order of degree.

  * Degree must be positive.
"
56169,"predicted= predict(linear,x_test) 
"
23571,"          Stack1.remove(Stack1.size() - 1);

           Stack2.add(x);

         }
"
25202,"def check_matrix(matrix):

     # must be

     if matrix and isinstance(matrix, Iterable):
"
29476,"""""""

     riemann_integration(f::Function, a::Real, b::Real, n::Int, approx::Symbol = :midpoint)

 a Riemann sum is a certain kind of approximation of an integral by a finite sum.
"
33144,"      return middle;

     }

     //If the element is smaller than middle

     if (a[middle] > x) {

       return binary_search(a, l, middle - 1, x);
"
10326,"    adder(int n) : n_(n) {}

     int operator()(int x) const {

         return x + n_;

     }

 private:

     int n_;
"
18363,"package gcd

 // ExtendedRecursive finds and returns gcd(a, b), x, y satisfying a*x + b*y = gcd(a, b).

 func ExtendedRecursive(a, b int64) (int64, int64, int64) {
"
17148,"      if (!graph.containsKey(e.v1)) graph.put(e.v1, new Vertex(e.v1));

       if (!graph.containsKey(e.v2)) graph.put(e.v2, new Vertex(e.v2));

     }

     // another pass to set neighbouring vertices
"
18322,"def topo(G, ind=None, Q=None):

     if Q is None:

         Q = [1]
"
17780,"	""testing""

 )

 func TestFactorize(t *testing.T) {
"
17220,"      output(i + ' -> ' + vertex)

     }

   }

   /**

    * Prints the Breadth first traversal of the graph from source.
"
11166,"end

 """"""

     vol_cone(area_of_base, height)

 Compute the Volume of a Cone
"
68876,"        {

             // Arrange

             var source = new double[,] { { 2, 1, -1 }, { -3, -1, 2 }, { -2, 1, 2 } };

             var coefficients = new double[] { 8, -11, -3 };

             var expectedSolution = new double[] { 2, 3, -1 };

             // Act
"
95567,"   * @param data the value that needs to be deleted

    */

   public void remove(int data) {

     Node parent = null;

     Node temp = this.root;

     int rightOrLeft = -1;
"
12306,"                    return data[i];

                 }

             }
"
28471," */

 void swap(int *first, int *second)

 {

     int temp = *first;

     *first = *second;
"
12369,"        ///     Recursive to find the maximum/right-most element.

         /// </summary>

         /// <param name=""node"">The node to traverse from.</param>

         /// <returns>The node with the maximum/right-most element.</returns>

         private AATreeNode<TKey> GetMax(AATreeNode<TKey> node)
"
31647,"    int[][] grid = {

       {2, 3, 3},

       {7, 2, 1}

     };
"
17910,"            Key = key;

             Level = level;

         }

         /// <summary>

         ///     Gets or Sets key for this node.

         /// </summary>
"
19386,"                root = new BinarySearchTreeNode<TKey>(key);

             }

             else
"
20282,"    int dec = 305445566;

     String libraryDecToHex = Integer.toHexString(dec);

     String decToHex = decToHex(dec);

     System.out.println(""Result from the library : "" + libraryDecToHex);
"
31940,"        public void Copy_ShouldReturnImmutableCopyOfMatrix()

         {

             // Arrange

             var sutMatrix = new double[,] { { 1, 1, 1 }, { 1, 1, 1 }, { 1, 1, 1 } };

             // Act
"
31833,"            if (j < num_features - 1) {  // if not the last feature

                 fp << "","";               // suffix comma

             }
"
32159,"        ///     Given a list of vectors, returns a single array of elements.

         /// </summary>

         /// <param name=""list"">List of ciphered arrays.</param>

         /// <returns>unidimensional list.</returns>

         private static double[] MergeArrayList(double[][] list)
"
21293,"    assert(que.pop() == 0);

     assert(que.empty() == true);

     std::cout << ""PASSED\n"";
"
14417,"            lower_index = (middle_index + 1);

         else if (*(array + middle_index) > key)

             upper_index = (middle_index - 1);
"
14624,"			expected:    nil,

 		},

 		{
"
52153,"print(queue)

 print(queue.pop())

 print(queue)
"
22684,"// 加减

 template<bool cond, int nums1, int nums2>

 struct addSub {

     static const auto RES = IF<cond, Add_<nums1, nums2>, Sub_<nums1, nums2>>::result::value;

 };

 int main() {
"
27149,"            return res;

         }

     }

     public int peek(){

         if(isEmpty()){
"
16816,"            System.out.println(""And business object is successfully created: "" + creditCard + ""\n"");

         } catch (IllegalArgumentException e) {

             System.out.println(""And fail with exception message: "" + e.getMessage() + ""\n"");

         }

     }

 }
"
11731,"        s = ""Stats""    # A palindrome

         @test is_palindrome(s) == true

         s = ""Racecar""      # A palindrome
"
26310,"        }

     }

     std::queue<int> q;

     for (int i = 0; i < V; i++) {
"
13042,"/* Driver */

 void main() {

   assert(isPalindrome(12321) == true);

   assert(isPalindrome(0) == true);

   assert(isPalindrome(1) == true);
"
12201,"            if (array[low].compareTo(array[high]) > 0) {

                 swap(array, low, high);

                 swapped = true;

             }

             low++;

             high--;
"
14307," * A graph is a collection of nodes also called vertices and these vertices

  * are connected by edges. A connected component in a graph refers to a set of

  * vertices which are reachable form one another.

  *
"
56992,"        }

     }

 }
"
72345,"        public void ValidateMatrix_UnconnectedGraph_ThrowsException()

         {

             // Last node does not connect to any other nodes

             var matrix = new[,]
"
32977," * arranged in some respect of their parents, can either be greater or less than the parent. This

  * makes it a min priority queue or max priority queue.

  *

  * <p>
"
34003,"    return q;

 }

 // Checks for empty queue
"
25878,"    Traceback (most recent call last):

         ...

     ValueError: The parameter bwt_string must not be empty.
"
28633,"                    num = num + len(LETTERS)

                 translated = translated + LETTERS[num]

             else:

                 translated = translated + symbol
"
27748,"        }

         /// <summary>

         ///     Removes specific node.
"
74526,"}

 const LocalMaximomPoint = (A) => findMaxPointIndex(A, 0, A.length - 1, A.length)

 export { LocalMaximomPoint }
"
21006,"    this.keys[this._heap[currPos][0]] = currPos

     if (child1Pos < this._heap.length && child1Priority < currPriority) {

       this._swap(child1Pos, currPos)

       this.keys[this._heap[child1Pos][0]] = child1Pos

     }
"
17429,"      for (int j = 0; j < output.nColumns; j++) {

         output[i][j] = this[j][i];

       }

     }
"
24620,"      // key we are looking is greater, so we must look on the right of median position

       return search(array, key, median + 1, right);

     }

   }

 }
"
14618," * @returns None

  */

 void test2()
"
29425,"/*

     author: @Aayushi-Mittal

     This script will check whether the given

     number is a power of two or not.
"
14920,"is in the list, otherwise return false */

 bool cll::find_item(int item_to_find) {

     if (head == NULL) {

         cout << ""List is empty !"" << endl;

         return false;
"
22087,"    return 0;

 }
"
32867," * 2& 4& 4& 3& -3\\

  * 0& -3& 3& -1&-1\\

  * -3& -1& -3& -3& 0

  * \end{bmatrix}\f]

  * which are approximately, {9.27648, -9.26948, 2.0181, -1.03516, -5.98994}
"
10509,"        [Test]

         public static void GetAllTimesTest()

         {

             var timeline = new Timeline<string>

             {
"
58107,"            Sum(N,X,i+1);

             //backtracking and removing the number added last since no possible combination is there with it.

             sum-=power(i,X);

         }

         if(power(i,X)<N) {
"
21441,"    for (i = 0; i < size2; i++) {

       if (i <= insert_pos) {

         b[i] = a[i];
"
22266,"    }

     test_circle(X, N);  // create test data around circumference of a circle

     save_nd_data(""test1.csv"", X, N, features);  // save test data points

     save_nd_data(""w11.csv"", W, num_out,

                  features);  // save initial random weights

     kohonen_som_tracer(X, W, N, features, num_out, 0.1);  // train the SOM
"
31591,"    >>> surface_area_cylinder(7, 10)

     747.6990515543707

     >>> surface_area_cylinder(6, 8)

     527.7875658030853
"
25770,"        hₙ = n(2n-1)

         where:

         hₙ --> is nth element of the sequence

         n --> is the number of element in the sequence
"
22868,"            Assert.IsNull(tree.Search(2));

             Assert.IsNull(tree.Search(3)!.Left);

             Assert.IsNotNull(tree.Search(3)!.Right);

             Assert.AreEqual(6, tree.Count);

             var fourRemoveResult = tree.Remove(4);
"
56192,"/**

  * @namespace sorting

  * @brief Sorting algorithms

  */

 namespace sorting {
"
29264,"  /**

    * Returns the smaller of two {@code int} values. That is, the result the argument closer to the

    * value of {@link Integer#MIN_VALUE}. If the arguments have the same value, the result is that
"
20100,"package DataStructures.Lists;

 public class CircleLinkedList<E> {

   private static class Node<E> {

     Node<E> next;
"
18291,"            47147, 47149, 47161, 47189, 47207, 47221, 47237, 47251, 47269, 47279, 47287, 47293, 47297, 47303, 47309,

             47317, 47339, 47351, 47353, 47363, 47381, 47387, 47389, 47407, 47417, 47419, 47431, 47441, 47459, 47491,

             47497, 47501, 47507, 47513, 47521, 47527, 47533, 47543, 47563, 47569, 47581, 47591, 47599, 47609, 47623,

             47629, 47639, 47653, 47657, 47659, 47681, 47699, 47701, 47711, 47713, 47717, 47737, 47741, 47743, 47777,
"
14712,"};

 // function headers

 void push(struct Stack *p, char ch);  // pust element in stack

 char pop(struct Stack *p);            // pop topmost element from the stack
"
28610,"        midpoint_euler_step(dx, &x, y, dy);  // perform integration

         x += dx;                             // update step

     } while (x <= x_max);  // till upper limit of independent variable

     /* end of integration */
"
30895,"        if (nx.rank > ny.rank) {

             ny.parent = nx;

         } else if (ny.rank > nx.rank) {

             nx.parent = ny;

         } else {
"
25199,"        }

         return coded_text;

     }

     /**
"
51329,"    counter++;

     char **words = (char **)malloc(counter * sizeof(char *));

     /* initalizes words-array with empty strings */

     for (i = 0; i < counter; i++)

     {
"
17124,"        # If a card is a five high straight (low ace) change the location of

         # ace from the start of the list to the end. Check whether the first

         # element is ace or not. (Don't want to change again)

         # Five high straight (low ace): AH 2H 3S 4C 5D

         # Why use sorted here? One call to this function will mutate the list to

         # [5, 4, 3, 2, 14] and so for subsequent calls (which will be rare) we
"
33335,"		Insert(&root, 4)

 		Insert(&root, 5)

 		Delete(&root, 2)
"
94430,"    inline bool operator==(const Point &p) { return x == p.x && y == p.y; }

     /**

      * @brief ostream operator for printing Point

      * @param op ostream operator
"
10197,"            int n)

         {

             // Arrange
"
26953,"            ans[i] = 0;

         for (int i = 0; i < n; i++) {

             int len = right[i] - left[i] - 1;

             ans[len] = Math.max(ans[len], arr[i]);
"
17489,"  public static void main(String[] args) {

     int[] testnums = {4, 0, 16};

     assert absMin(testnums) == 0;

     int[] numbers = {3, -10, -2};
"
29573,"import Foundation

 extension Array where Element: Comparable {

     func bubbleSort(by areInIncreasingOrder: ((Element, Element) -> Bool) = (<)) -> [Element] {
"
31284,"		if encrypt == decrypt {

 			t.Error(""String "", s, "" not encrypted"")

 		}
"
21287,"  }

   return maxes.reduce((a, b) => a + b, 0)

 }
"
35060,"    return n;

 }

 /**

  * @brief Sets 64-bit integer to little-endian if needed
"
26805,"}

 int main(int argc, char const* argv[]) {

     int a[] = {170, 45, 75, 90, 802, 24, 2, 66};
"
33650,"            else if (comparer.Compare(key, node.Key) > 0)

             {

                 node.Right = Remove(key, node.Right);

             }

             else

             {
"
32284," * v(x) &=& -\sin(x)\\

  * \f}

  * The computation results are stored to a text file `midpoint_euler.csv` and

  * the exact soltuion results in `exact.csv` for comparison. <img
"
88715,"			}

 		})

 	}

 }
"
84838,"Rest of the Interpolation algorithm is the same except the above partition logic.

 - Step1: In a loop, calculate the value of “pos” using the probe position formula.

 - Step2: If it is a match, return the index of the item, and exit.

 - Step3: If the item is less than arr[pos], calculate the probe position of the left sub-array. Otherwise calculate the same in the right sub-array.

 - Step4: Repeat until a match is found or the sub-array reduces to zero.

 """"""
"
21381,"    expect(countVowels).toBe(0)

   })

   it('should return 1 when input is a string of length 1 that is a vowel', () => {

     const value = 'a'
"
41314,"// create a graph class

 class Graph {

   // defining vertex array and

   // adjacent list
"
33017,"        """"""

         return self.key_string.index(letter)

     def replace_digits(self, num: int) -> str:
"
94212,"    public Vertex previous = null;

     public final Map<Vertex, Integer> neighbours = new HashMap<>();

     public Vertex(String name) {

       this.name = name;
"
53540,"		if prev == curr {

 			return -1, ErrNotFound

 		}

 	}

 	if array[prev] == target {

 		return prev, nil
"
55096,"               dmin);

     }

     putchar('\n');

     for (int i = 0; i < num_out; i++) free(D[i]);

     free(D);

 }
"
16404,"/** Information about removal process

  * @param key  key value to hash and remove from table

  */
"
52486,"	}

 	return subset[arraySize][sum], nil

 }
"
31768,"package Maths;

 import java.util.Random;

 public class MaxValue {

   /** Driver Code */
"
18956,"            /**

              * Creates convex hull of a set of n points.

              * There must be 3 points at least for the convex hull to exist

              *

              * @returns an vector array containing points in space
"
23226,"// like Organization, we have made it global to keep things simple 

 void globalRaiseSalary(Employee *emp[], int n) 

 { 

     for (int i = 0; i < n; i++) 
"
97844," * @param [out] theta pointer to store polar angle (in radian)

  */

 void to_polar(double x, double y, double *r, double *theta)
"
26913,"    {'11111': ['ab', 'ac', 'df', 'bd', 'bc']}

     """"""

     nodes = {}

     for i, item in enumerate(frequency_table):
"
13045,"def print_path(old_path: str, new_path: str) -> str:

     old_parts = old_path.split(os.sep)

     for i, new_part in enumerate(new_path.split(os.sep)):

         if i + 1 > len(old_parts) or old_parts[i] != new_part:
"
32605,"            this.seg_t[index] = arr[start];

             return arr[start];

         }

         

         int mid = start + (end - start) / 2;

         this.seg_t[index] = constructTree(arr, start, mid, index*2 + 1) +
"
13387,"/* Binary Search: https://en.wikipedia.org/wiki/Binary_search_algorithm

  *

  * Search a sorted array by repeatedly dividing the search interval

  * in half. Begin with an interval covering the whole array. If the value of the

  * search key is less than the item in the middle of the interval, narrow the interval
"
34812,"bool Isposs(int a, int b, int c) {

   return (c % gcd(a, b) == 0);

 }

 //Driver function for Linear Diophantine Equations

 int main() {

   int a = 3, b = 6, c = 9;
"
15776,"    }

     return distance;

 }"
24306,"package Maths;

 import java.util.ArrayList;

 import java.util.Collections;

 /**

  * n number theory, a vampire number (or true vampire number) is a composite natural number with an
"
19061,"            // Act

             var result = KeithNumberChecker.IsKeithNumber(number);

             // Assert

             Assert.IsTrue(result);
"
21577,"    for i, slist in enumerate(score_lists):

         for j, ele in enumerate(slist):

             final_scores[j] = final_scores[j] + ele
"
18728,"        {

             Action act = () => Algorithms.Other.FloodFill.DepthFirstSearch(GenerateTestBitmap(), (-1, -1), black, white);

             act.Should().Throw<ArgumentOutOfRangeException>();

         }

         [Test]

         public static void BreadthFirstSearch_Test1()
"
81442,"        return self._insert(self._trailer._prev, element, self._trailer)

     # DEqueu Remove Operations (At the front, At the end)

     def remove_first(self):

         """"""removal from the front

         >>> d = LinkedDeque()

         >>> d.is_empty()
"
27837,"			if tc.expectedLen != actualLen {

 				t.Fatalf(""expecting a sequence of len %d to be found but the actual len was %d; input: %v"", tc.expectedLen, actualLen, tc.elements)

 			}
"
32936,"uint64_t editDistDP(std::string str1, std::string str2, uint64_t m, uint64_t n) {

   /// Create a table to store results of subproblems

   std::vector<std::vector<uint64_t>>dp(m+1, std::vector<uint64_t>(n+1)); /// creasting 2D vector dp to store the results of subproblems

   /// Fill d[][] in bottom up manner

   for (uint64_t i = 0; i <= m; i++) {
"
10421,"                for layer in self.layers[:0:-1]:

                     gradient = layer.back_propagation(gradient)

             mse = all_loss / x_shape[0]

             self.train_mse.append(mse)
"
18370,"        }

     }

     else if (game_table[2] == game_table[5] && game_table[5] == game_table[8])

     {
"
25133,"    Fun f1 = getAddr(pt, 0);

     (*f1)();

     Fun f2 = getAddr(pt, 1);

     (*f2)();

     delete pt;

     return 0;
"
48679,"*

 * Hence the first 12 terms will be:

 *

 * F1 = 1
"
13488,"    if key <= 0:

         raise ValueError(""Height of grid can't be 0 or negative"")

     if key == 1 or len(input_string) <= key:

         return input_string

     for position, character in enumerate(input_string):
"
21937,"uuid = ""23fbe1c1-3f47-55db-b15f-69d7ec21a316""

 version = ""0.15.6""

 [[LibCURL]]

 deps = [""LibCURL_jll"", ""MozillaCACerts_jll""]

 uuid = ""b27032c2-a3e7-50c8-80cd-2d36dbcbfd21""
"
10260,"/**

  * \file

  * \brief [Kohonen self organizing

  * map](https://en.wikipedia.org/wiki/Self-organizing_map) (data tracing)
"
21603,"            Func<char, int> weightSelector = x => wt[Array.IndexOf(items, x)];

             Func<char, double> valueSelector = x => val[Array.IndexOf(items, x)];

             var expected = new[] { 'A', 'B', 'C', 'D', 'F' };

             //Act

             var solver = new DynamicProgrammingKnapsackSolver<char>();

             var actual = solver.Solve(items, capacity, weightSelector, valueSelector);
"
52135,"	for _, x := range data {

 		count[x-aMin]++

 	}

 	z := 0
"
14097,"    }

     // Insert the copied number at the correct position

     // in sorted part.

     unsortedList[j + 1] = tmp

   }
"
47339,"    std::cout << ""\nEnter the size of the Array : "";

     std::cin >> size;

     int *array = new int[size];

     int key;

     // Input array
"
15254,"    assert(exponential_search(arr_found, 3, 10) == -1);

     // element found in an array of length 1

     int64_t arr_one[] = {1};

     assert(exponential_search(arr_found, 1, 1) == 0);

     // find the first element in an array of length 2
"
28071,"package search

 // Interpolation searches for the entity in the given sortedData.

 // if the entity is present, it will return the index of the entity, if not -1 will be returned.

 // see: https://en.wikipedia.org/wiki/Interpolation_search

 // Complexity

 // 		Worst: O(N)
"
21280,"        return self.user_data[""edge_follow""][""count""]

     @property

     def number_of_posts(self) -> int:

         return self.user_data[""edge_owner_to_timeline_media""][""count""]

     @property

     def profile_picture_url(self) -> str:
"
14833,"        public static BitArray operator ~(BitArray one)

         {

             var ans = new BitArray(one.Length);

             var sequence = one.ToString();

             var result = string.Empty;
"
70533,"        public void MultiplyVector_ShouldCalculateDotProductMultiplicationResult()

         {

             // Arrange
"
33736," * @brief The main function implements search algorithm

  * @tparam T type of array

  * @param in_arr the input array
"
44887,"            {

                 throw new ArgumentException($""{nameof(number)} must be positive"");

             }

             // converts to binary representation

             var binaryNumber = Convert.ToString(number, 2);

             // precondition II
"
10547,"        """"""

         Returns ValueError for any negative weight value in the list

         :return: ValueError
"
28996,"	g0 := &testGraph{

 		Graph:      &coloring.Graph{},

 		ColorsUsed: 3,
"
16098,"            var current = 1;

             for (var i = 1; i < input.Length; i++)

             {

                 if (input[i] == input[i - 1])

                 {
"
15016,"    topological_sort(graph, visited)

     print(stack)

     print_stack(stack, clothes)
"
25063,"  Reference: https://www.cuemath.com/measurement/volume-of-cylinder/

   return PI * radius^2 * height

 */

 const volCylinder = (radius, height) => {
"
20357,"  });

   test(('Balanced Bracket'), () {

     expect(isBalancedBrackets('()([])'), isTrue);
"
13629," 

 // Method to carry out the partial-pivoting Gaussian

 // elimination.  Here index[] stores pivoting order.

  
"
84666,"        case '[':

             store[k++] = s[i];

             break;

         case ')':

             if (k < 1 || store[--k] != '(')
"
27590,"    void *value_copy = malloc(sizeof(void *));

     memcpy(value_copy, value, sizeof(void *));

     return value_copy;

 }"
16769,"    double **X = (double **)malloc(N * sizeof(double *));

     double **W = (double **)malloc(num_out * sizeof(double *));

     for (int i = 0; i < max(num_out, N); i++)

     {
"
29657,"            var one = dll.GetAt(1);

             var three = dll.GetAt(3);

             Assert.AreEqual(one.Data, 1);

             Assert.AreEqual(three.Data, 3);
"
94886,"        {

             free(prev->rlink);

             prev->rlink = replacement;
"
19757,"  /** Driver Code */

   public static void main(String[] args) {

     Random rand = new Random();

     /* rand size */
"
13566,"        cout << ""id1="" << id1 << endl;

         cout << ""id2="" << id2 << endl;

         cout << ""param="" << param << endl;
"
32922,"		return low, nil

 	}

 	return -1, ErrNotFound

 }
"
14997,"        private double[] StartVector(int length) => new Random(111111).NextVector(length);

     }

 }
"
26535,"        IEnumerator<(DateTime Time, TValue Value)> IEnumerable<(DateTime Time, TValue Value)>.GetEnumerator()

             => timeline.GetEnumerator();

         /// <inheritdoc />

         public bool Equals(Timeline<TValue>? other)

             => other is not null && this == other;

         /// <summary>
"
23468,"    return -1;

   }

   /**
"
12947,"# => [1,1]
"
23406,"                { float.PositiveInfinity, 3, 4, float.PositiveInfinity, float.PositiveInfinity },

                 { 3, float.PositiveInfinity, float.PositiveInfinity, 6, 2 },

                 { 4, float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity },

                 { float.PositiveInfinity, 6, float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity },

                 { float.PositiveInfinity, 2, float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity }
"
47435,"template<typename Body>

 struct WhileLoop<true, Body> {

     typedef typename WhileLoop<

             Body::cond_value,

             typename Body::next_type>::type

             type;
"
10333,"      for (int i = 0; i < V; i++) parent.add(-1);

       Queue<Integer> q = new LinkedList<>();

       parent.set(source, source);

       q.add(source);
"
40815,"                    sequence2 = tmp.ToString();

                 }

                 else

                 {
"
17174,"			differenceSet.Add(item)

 		}

 	}
"
24643,"        Could elaborate to offer more than one choice

         """"""

         dy = abs(self.pos_x - self.goal_x)
"
29033,"    expect(sphenic_number(501), isFalse);

   });

   test(""Test sphenic_no returns true for sphenic numbers"", () {
"
12665,"                min_index = i

         return min_index

 class FilesArray:

     def __init__(self, files):

         self.files = files

         self.empty = set()
"
17832,"        1.f - 2.f * (in_quat->q2 * in_quat->q2 + in_quat->q3 * in_quat->q3));

     return out_euler;

 }

 /**

  * Function to multiply two quaternions.

  * \f{eqnarray*}{
"
31692,"    return sundays

 if __name__ == ""__main__"":

     print(solution())
"
31876,"using System;

 namespace Utilities.Extensions

 {

     public static class VectorExtensions

     {

         /// <summary>
"
32548,"    node *t = root->left;

     node *u = t->right;

     t->right = root;

     root->left = u;
"
89821,"    elif n % 2 == 1:

         return (binary_exponentiation(a, n - 1, mod) * a) % mod

     else:

         b = binary_exponentiation(a, n / 2, mod)
"
28756,"public class MinimizingLateness {

   private static class Schedule { // Schedule class

     int t = 0; // Time required for the operation to be performed

     int d = 0; // Time the job should be completed

     int s = 0; // Start time of the task
"
17629,"            StringBuilder decoded_text_hex = new StringBuilder();

             foreach (ulong block in blocks_list_encoded)

             {

                 uint temp = 0;

                 // decompose a block to two subblocks 0x0123456789ABCDEF => 0x01234567 & 0x89ABCDEF
"
15325," *    --K Means Algorithm--

  * 1. Assign each observation to one of k groups

  *    creating a random initial clustering

  * 2. Find the centroid of observations for each

  *    cluster to form new centroids

  * 3. Find the centroid which is nearest for each
"
29191,"	description string

 	input       string

 	expected    string

 }{

 	{
"
12066,"    ///     The type that will be stored.

     ///     Has to be IComparable of T.

     /// </typeparam>

     public class PriorityQueue<T>
"
21960,"int maxArea(int *height, int heightSize)

 {

     // Start with maximum container width
"
79715,"        // Swap the numbers

         [items[j], items[j - 1]] = [items[j - 1], items[j]]

       }

     }

   }

   return items
"
21389,"    [<DataRow(""CRATE"", ""TRACE"", 0.7333333333333334)>]

     [<DataRow(""test"", ""dbdbdbdb"", 0.0)>]

     [<DataRow(""test"", ""test"", 1.0)>]
"
41404,"uuid = ""1270edf5-f2f9-52d2-97e9-ab00b5d0237a""

 version = ""2020.7.14+2""

 [[x265_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]

 git-tree-sha1 = ""487da2f8f2f0c8ee0e83f39d13037d6bbf0a45ab""

 uuid = ""dfaa095f-4041-5dcd-9319-2fabd8486b76""
"
19590,"  public static void main(String[] args) {

     HashSet<Edge>[] graph = new HashSet[7];

     for (int i = 0; i < graph.length; i++) {

       graph[i] = new HashSet<>();

     }
"
11175,"            Assert.IsTrue(q.IsEmpty(), ""Queue is empty"");

             Assert.IsFalse(q.IsFull(), ""Queue is full"");

         }

         [Test]

         public static void PeekWorksCorrectly()
"
22210,"        int class =

             rand() % num_classes;  // select a random class for the point

         // create random coordinates (x,y,z) around the centre of the class

         data[i][0] = _random(centres[class][0] - R, centres[class][0] + R);
"
18746,"    sequence.push(sequence[i - 1] + sequence[i - 2])

   }

   return sequence

 }

 const FibonacciRecursive = (number) => {

   return (() => {
"
32062,"                       &vec)  // the segment tree will be built from the values

                               // in ""vec"", ""vec"" is 0 indexed

     {

         if (vec.empty()) {

             return;
"
26246,"        t = a[i];

         r = rand() % n;

         a[i] = a[r];

         a[r] = t;

     }
"
16691,"        lazy_sort(names, COUNT);

         clock_t end_time = clock();

         printf(""\nLazy sort: %.4g millisecond\n"",

                1e3 * (end_time - start_time) / CLOCKS_PER_SEC);
"
32861,"    while (ptr != NULL)

     {

         printf(""%d->"", ptr->data);

         ptr = ptr->next;

     }

     printf(""NULL\n"");
"
81628,"      ++move

     }

   }

   // insertion

   for (j = 1; j < n; j++) {
"
65813,"})
"
95121,"        if i >= j:

             return i

         array[i], array[j] = array[j], array[i]

         i += 1
"
32172,"// 	currentOcc := 0

 // 	pos = 0

 // 	if debugMode == true {

 // 		fmt.Printf(""\n\nWe are reading backwards in %q, searching for %q\n\nat position %d:\n"", t, p, pos+m-1)

 // 	}

 // 	for pos <= n-m {
"
18203,"int lengthOfLongestSubstring(char *str)

 {

     int n = strlen(str);

     if (!n)

         return 0;
"
12835,"	void sety(int n){y=n;	}

 	void sety(){	y=getx();    }

 	void showy()	{	cout<<y<<endl;   }

 };

 int main(){
"
30391,"puts binary_count_setbits(0)

 # 0

 puts binary_count_setbits(1)

 # 1
"
12845,"s = 'rat'

 t = 'car'

 puts(is_anagram(s, t))

 # => false

 s = 'a'
"
25338,"    if (shiftValues.get(c) != null) {

       return shiftValues.get(c);

     } else {

       return patternLength;

     }
"
33947," * @author 光城

  * @version v1

  * @date 2019-07-21
"
24026,"func TestMeanUsingRightShift(t *testing.T) {

 	tests := getTests()

 	for _, tv := range tests {
"
13168,"		r[i+j] = b[j]

 		j++

 	}

 	return r

 }
"
14046,"	for i, tt := range getTestGraphsForNegativeTests() {

 		t.Run(strconv.Itoa(i), func(t *testing.T) {

 			if err := tt.Graph.ValidateColorsOfVertex(tt.VertexColors); err == nil {

 				t.Errorf(""ValidateColorsOfVertex() error = nil, want some err"")

 			}

 		})
"
69480,"    return -1

 end
"
35043,"		}

 		result.WriteRune('#')

 	}

 	return result.String()
"
12121," */

 #include <stdio.h>  /// for Standard Input Output

 /**

  * @brief Function validEntryLineColumn
"
11068,"            givenString.substring(

                 1)); // recursive call to get subsequences of substring starting from index

     // position=1
"
28027,"        }

         Node *next_node = node->GetNextPossibleChild(item);

         if (next_node->Is34Node()) {

             node = next_node;
"
96997,"}
"
24457,"}; // This struct do have a ""type"" and won't fail on access.

 template<class T>

 typename enable_if<hasSerialize<T>::value, std::string>::type serialize(const T &obj) {

     return obj.serialize();

 }
"
92735,"            temp = temp.next;

             count++;

         }

         Node connectedPoint = temp;
"
27942,"    int sqrt = (int) Math.sqrt(number);

     return sqrt * sqrt == number;

   }

 }
"
22616,"                if(!bipartite(V, adj, color, i)){

                     return false;

                 }

             }
"
61401,"                    leftIndex = middleIndex + 1;

                     continue;

                 }

                 if (item.CompareTo(sortedData[middleIndex]) < 0)

                 {

                     rightIndex = middleIndex - 1;
"
40620,"}

 void destroyqueue() { q.front = q.rear = NULL; }

 int main()

 {

     int x, ch;

     createqueue();
"
26837,"        public static (double[,] U, double[] S, double[,] V) Decompose(

             double[,] matrix,

             double epsilon,
"
73085,"    return base * height;

 }

 /**

  * @brief surface area of a [cube](https://en.wikipedia.org/wiki/Cube) ( 6 * (l
"
29168,"    pattern = ""Lue""

     assert not rabin_karp(pattern, text)

     print(""Success."")

 if __name__ == ""__main__"":

     test_rabin_karp()
"
84842,"                for (int j = 0; j < boardSize; j++) {

                     sb.append(j == columns[i] ? ""Q"" : ""."");

                 }
"
53102,"# Input: arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]

 # Output: []

 #

 #
"
10802,"if __name__ == ""__main__"":

     print(r""| /\ | |- |  |-  |--| |\  /| |-"")

     print(r""|/  \| |- |_ |_  |__| | \/ | |_"")

     K = 1
"
70941,"    candidates = []

     for number in prime_list:

         tmp_numbers = []

         for prime_member in permutations(list(str(number))):

             prime = int("""".join(prime_member))

             if prime % 2 == 0:
"
32839,"""""""

 In physics and astronomy, a gravitational N-body simulation is a simulation of a

 dynamical system of particles under the influence of gravity. The system

 consists of a number of bodies, each of which exerts a gravitational force on all

 other bodies. These forces are calculated using Newton's law of universal

 gravitation. The Euler method is used at each time-step to calculate the change in
"
18726,"#include <stdlib.h>

 #include <string.h>

 /**
"
55357," */

 int main(int argc, char const *argv[]) {

     test();  // run self-test implementations
"
33498,"            printf(""\nCLIENT : %s\n"", recvbuff);

             sleep(5);

             // break;
"
71756,"end

 puts ""Enter a space-separated list:""

 arr = gets.chomp.split(' ').map(&:to_i)

 puts ""Enter a value to be searched:""
"
25279,"    63783299490636259666498587618221225225512486764533

     67720186971698544312419572409913959008952310058822

     95548255300263520781532296796249481641953868218774
"
30236,"const calculateCurrentCharacterPermutation = (allPermutations, currentCharacter) => {

   const currentPermutations = []

   allPermutations.forEach(permutation => {

     let index = 0
"
32256,"            {

                 var foundQueen = false;

                 for (var j = 0; j < solution.GetLength(0); j++)

                 {

                     foundQueen = ValidateCell(foundQueen, solution[j, i]);

                 }
"
15741,"        {

             // Arrange

             var q = new ArrayBasedQueue<int>(2);
"
32752,"    else

         return countUpper == len;

 }

 /* Another way */

 bool isAllUpper(char *word)

 {
"
32206,"                printMessage(msg8);

             }

             else if (nm == 3)

             {

                 printMessage(msg9);

             }
"
13771,"                termsArray[k] = sum;

                 k++;

             }

             return sum == number;

         }

     }
"
99773,"#define _WINSOCK_DEPRECATED_NO_WARNINGS  // will make the code invalid for next

                                          // MSVC compiler versions

 #include <winsock2.h>

 #define close closesocket /**< map BSD name to Winsock */
"
24123,"        ""5     	 1         	 is \n""

         ""6     	 1         	 n \n""

         ""7     	 1         	 test \n""

         ""8     	 1         	 this \n""
"
77957,"#include <stdlib.h>

 /** Node, the basic data structure in the tree */

 typedef struct node

 {
"
18249,"}

 func BenchmarkJump(b *testing.B) {

 	testCase := generateBenchmarkTestCase()

 	b.ResetTimer() // exclude time taken to generate test case

 	for i := 0; i < b.N; i++ {
"
31477,"    struct list* next;  //!< pointer to next link in the chain

 } node,                 /**< define node as one item list */

     *link;              ///< pointer to nodes

 node hashtab[HASHMAX];  ///< array of nodes
"
18985,"﻿using System;

 using System.Collections.Generic;

 using System.Linq;

 using DataStructures.BinarySearchTree;
"
31618,"            tree.AddRange(new List<int> { 5, 3, 4, 2, 7, 6, 8 });

             Assert.AreEqual(2, tree.GetMin()!.Key);

         }

         [Test]

         public static void GetMin_EmptyTree_ReturnsDefaultValue()

         {
"
10425,"//

 // Created by light on 19-12-17.

 //

 #include <vector>

 #include <iostream>

 // “首先是内存分配。如果 new 出错，按照 C++ 的规则，一般会得到异常 bad_alloc，对象的构造也就失败了。
"
16330,"    if left == right:

         return nums[left]

     mid = (left + right) >> 1  # the middle

     left_max = find_max(nums, left, mid)  # find max in range[left, mid]

     right_max = find_max(nums, mid + 1, right)  # find max in range[mid + 1, right]

     return left_max if left_max >= right_max else right_max
"
43354,"            graph.Count.Should().Be(10);

             graph.Vertices.Should().OnlyContain(x => x != null && x.Data == 'A');

             addOverflow.Should().Throw<InvalidOperationException>()

                 .WithMessage(""Graph overflow."");

         }
"
19429,"        error();  /// If binding is unsuccessful

     }

     /**
"
20319,"    if (!is_numeric($decimalNumber)) {

         throw new \Exception('Please pass a valid Decimal Number for Converting it to a Hexadecimal Number.');

     }

     while ($decimalNumber > 0) {

         $remainder = ($decimalNumber % 16);

         $decimalNumber /= 16;
"
26518,"import re

 def indian_phone_validator(phone: str) -> bool:

     """"""

     Determine whether the string is a valid phone number or not
"
33961,"        sig[i + 8] = (c0 >> (8 * i)) & 0xFF;

         sig[i + 12] = (d0 >> (8 * i)) & 0xFF;

     }
"
17556,"        //return sparcity

         return ((double)zero/(mat.length*mat[1].length));

     }

     //Driver method

     public static void main(String [] args){

         Scanner in = new Scanner(System.in);
"
86246,"int main(int argc, const char *argv[])

 {

     /* Intializes random number generator */

     srand(time(NULL));
"
18476,"    except IndexError:

         print(""Please provide a search term."")

         raise
"
17987,"const FloydWarshall = (dist) => {

   // Input:- dist: 2D Array where dist[i][j] = edge weight b/w i and j

   // Output:- dist: 2D Array where dist[i][j] = shortest dist b/w i and j

   const n = dist.length

   for (let k = 0; k < n; k++) {

     for (let i = 0; i < n; i++) {
"
17273,"        throw(DomainError(""area_ellipse() only accepts non-negative values""))

     end

     return π * radius_x * radius_y
"
22585,"  int max = 0;

   for (int i = 100; i < 1000; i++) {

     for (int j = 100; j < 1000; j++) {

       int result = i * j;
"
11176,"    return returnData;

   }

   bool isEmpty() {

     return this.size == 0;
"
92025," * @details

  * A Maze is given as N*N binary matrix of blocks where source block is the

  * upper left most block i.e., maze[0][0] and destination block is lower

  * rightmost block i.e., maze[N-1][N-1]. A rat starts from source and has to

  * reach destination. The rat can move only in two directions: forward and down.

  * In the maze matrix, 0 means the block is dead end and 1 means the block can
"
60575,"            /* storing the terms of the series */

             var termsArray = new int[number];

             for (var i = digitsInNumber - 1; i >= 0; i--)

             {

                 termsArray[i] = tempNumber % 10;

                 tempNumber /= 10;
"
96591,"#define PORT 8080    /**< port number to connect to */

 #define MAXLINE 1024 /**< maximum characters per line */

 #ifdef _WIN32

 /** Cleanup function will be automatically called on program exit */

 void cleanup() { WSACleanup(); }

 #endif
"
73915,"    IterativeBinarySearch search = new IterativeBinarySearch();

     int atIndex = search.find(integers, shouldBeFound);

     System.out.println(

         String.format(

             ""Should be found: %d. Found %d at index %d. An array length %d"",

             shouldBeFound, integers[atIndex], atIndex, size));
"
75840,"    expect(() => { validateEmail(null) }).toThrow('Email Address String Null or Empty.')

   })

 })
"
19004,"""""""

 Highly divisible triangular numbers

 Problem 12

 The sequence of triangle numbers is generated by adding the natural numbers. So

 the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten

 terms would be:
"
38005,"/**

  * @param {number[]} height

  * @return {number}
"
72313,"            if vertice not in visited:

                 sort = topological_sort(vertice, visited, sort)

     # return sort
"
42221,"// Empty test file to keep track of all the tests for the algorithms.

 package strings
"
33065,"/**

  * @file

  * @brief pancake sort sorts a disordered stack of pancakes by flipping any

  * number of pancakes using a spatula using minimum number of flips.

  *
"
15620,"    expect(radixSort([34, -2, 122, 24435, 23, 434, 232, 1323]),

         equals([-2, 23, 34, 122, 232, 434, 1323, 24435]));

   });

   final seed = 10, rnd = Random(), length = 10;

   var list =
"
24696,"	// In: checks whether item is present in set or not.

 	In(item interface{}) bool

 	// IsSubsetOf: checks whether set is subset of set2 or not.

 	IsSubsetOf(set2 Set) bool

 	// IsSupersetOf: checks whether set is superset of set2 or not.
"
22750,"	s = make([]int, len(stateIsTerminal)) //supply function

 	i := 0                                //root of acTrie

 	acToReturn = acTrie

 	s[i] = -1
"
13216," *

  * @author [Nitin Sharma](https://github.com/foo290)

  * */

 #include <cassert>   ///  for assert
"
14816,"  }

   Node get tail {

     return this._tailNode;

   }

   void insert(Node newNode) {

     if (head == null) {
"
28634,"import * as coordinate from '../Coordinate'

 describe('Testing euclideanDistance calculations', () => {

   it('Should give a numeric output (distance between 2 points) with 4 numeric arguments', () => {

     const euclideanDistance = coordinate.euclideanDistance(2, 2, -10, -7)
"
11439,"        plainText = addRoundKey(plainText, roundKeys[10]);

         return plainText;

     }

     /**
"
99726,"    # >>> solution()

     # 76576500

     """"""

     tNum = 1
"
26553,"				t.Errorf(""List Back is not correct expected %v but got %v"", 212.545454, result)

 			}

 		})

 		t.Run(""List Length"", func(t *testing.T) {

 			listQueue.Enqueue(""Snap"")
"
29430,"  private static int[][] m;

   private static int[][] s;

   private static int[] p;

   public static void main(String[] args) {

     int count = 1;
"
52445,"    return array[index] > array[index + 1]

     // array end

   } else if (index === array.length - 1) {
"
24026,"    fn1[1] = 1;

     unsigned int index = 1, digit_count = 1;

     clock_t start_time = clock();

     do

     {
"
26742,"        ///     balance factor in the range [-1, 1].

         /// </summary>

         /// <param name=""node"">Node to rebalance.</param>

         /// <returns>New node that has been rebalanced.</returns>

         private AvlTreeNode<TKey> Rebalance(AvlTreeNode<TKey> node)

         {
"
19783,"  const primes = new Array(n + 1)

   primes.fill(true) // set all as true initially

   primes[0] = primes[1] = false // Handling case for 0 and 1

   const sqrtn = Math.ceil(Math.sqrt(n))

   for (let i = 2; i <= sqrtn; i++) {

     if (primes[i]) {
"
26612,"    }

     public function testIsPrime()

     {

         assertTrue(isPrime(73));
"
22520,"    int number;

     fastinput(&number);

     std::cout << number << std::endl;

     return 0;

 }
"
83202,"version = ""4.0.4""

 [[DataAPI]]

 git-tree-sha1 = ""ee400abb2298bd13bfc3df1c412ed228061a2385""
"
29438,"/**

  * @brief Test function for ::xor8

  * \returns None

  */

 void test_xor8()

 {
"
10656,"        public I getKey() {

             return key;

         }

         public void setKey(I key) {

             this.key = key;

         }
"
27009,"        while n % 2 == 0:

             n = int(n / 2)

     # the n input value must be odd so that

     # we can skip one element (ie i += 2)

     i = 3
"
48453,"    assert stack.pop() == 4;

     System.out.println(""Top element of stack currently is: "" + stack.peek());

   }
"
10863,"int dist[MAX];

 int q[MAX];

 int qp = 0;

 void enqueue(int v) { q[qp++] = v; }

 int cf(void *a, void *b)

 {
"
86935,"      inOrder(localRoot.right);

     }

   }

   /**

    * Prints root - leftChild - rightChild

    *
"
24779,"                for (var j = 0; j < matrix.GetLength(1); j++)

                 {

                     result[i, j] = matrix[i, j];

                 }

             }
"
20568,"  print(list);

 }

 void shellSort<E extends Comparable>(List<E> a) {

   for (var i = _initInterval(a); i > 0; i = (i - 1) ~/ 3) {
"
51465,"				args[0], args[1], args[2], result, expected)

 		}

 	}

 }

 func BenchmarkRGBToHEX(b *testing.B) {
"
92505,"    {

         // printf(""\t s[i]=%c\n"", s[i]); //DEBUG

         if (s[i] == '{' || s[i] == '(' ||

             s[i] == '[')  // if opening bracket then push
"
29408,"   *     firstFit method.

    */

   public static void printMemoryAllocation(ArrayList<Integer> memAllocation) {

     System.out.println(""Process No.\tBlock No."");

     System.out.println(""===========\t========="");
"
56461,"        case '7':

             bin += 111;

             break;

         case '8':

             bin += 1000;

             break;
"
31758,"                    {

                         s[j] = j - i;

                     }

                     j = f[j];

                 }
"
20094,"while fib_second < 4_000_000

   even_fib_sum += fib_second if fib_second.even?

   fib_second += fib_first
"
28830,"//     graph[id][aid] = 1

 //     if (!graph[aid]) { graph[aid] = {} }

 //     graph[aid][id] = 1

 //   })

 // }

 // // choose start node
"
32688,"func JosephusProblem(cl *Cyclic, k int) int {

 	for cl.Size > 1 {

 		cl.Rotate(k)

 		cl.Delete()
"
22807,"nums = [2, 3, 4]

 target = 6

 print(two_sum(nums, target))
"
18323,"        /// </summary>

         /// <exception cref=""InvalidOperationException"">Thrown if the queue is empty.</exception>

         public T Peek()

         {
"
46813,"    /**

      * @brief The standard deviation of a geometrically distributed random

      * variable X

      * @returns \sigma = \sqrt{V[X]}

      */

     float standard_deviation() const { return std::sqrt(variance()); }
"
11868,"﻿namespace Algorithms.Tests.Strings

 open Microsoft.VisualStudio.TestTools.UnitTesting

 open Algorithms.Strings
"
31896,"        final var next = /* recursive call */ gcd(b, a % b, stubWrapper);

         previous.getSolution().setX(next.getSolution().getY());

         previous.getSolution().setY(next.getSolution().getX() - (a / b) * (next.getSolution().getY()));

         previous.setGcd(next.getGcd());
"
34023,"    public <T extends Comparable<T>> int find(T[] array, T key) {

         int fibMinus1 = 1;

         int fibMinus2 = 0;

         int fibNumber = fibMinus1 + fibMinus2;
"
25962,"  }

   List<int> pattern =

       new List<int>.generate(subString.length, (int index) => -1);
"
33627,"// details:

 // 	Queue Data Structure : https://www.geeksforgeeks.org/queue-data-structure/

 //  Queue (abstract data type) : https://en.wikipedia.org/wiki/Queue_(abstract_data_type)
"
39199,"            |> Array.filter (fun chars -> chars <> ' ')

             |> Array.sort

             |> System.String.Concat

         let b =

             string2.ToLower().ToCharArray()

             |> Array.filter (fun chars -> chars <> ' ')
"
58295,"            // If extreme right is null it is made to point to currrent node

             // (will be used for backtracking)

             if (temp->right == NULL) {
"
20761,"}

 // Example

 /**

  * Generates a random range of data, with values between 0 and 2^31 - 1

  * @param {number} length The number of data items to generate

  * @returns {Iterable<number>} Random iterable data
"
31366,"package ahocorasick

 import (

 	""fmt""

 	""reflect""

 	""strings""
"
98861,"                case 4: return Color.FromArgb(255, t, p, v);

                 default: return Color.FromArgb(255, v, p, q);

             }
"
15451,"/**

  * Check if a number is present in given array

  * \param[in] N number to check
"
25641,"            if (bitmapWidth <= 0)

             {

                 throw new ArgumentOutOfRangeException(

                     nameof(bitmapWidth),

                     $""{nameof(bitmapWidth)} should be greater than zero"");
"
61591,"     * result

      * @param curr pointer to the current node, which has value = the sum of

      * elements whose index x satisfies i<=x<=j

      * @returns sum of elements whose index x satisfies l<=x<=r
"
11941," *     between colors on the web. This is used to calculate the readability of a foreground color on

  *     top of a background color.

  * @since 2020-10-15

  * @see [Color Contrast Ratio](https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-procedure)
"
29417," * @author Unknown

  */

 public class DoublyLinkedList {

   /** Head refers to the front of the list */

   private Link head;

   /** Tail refers to the back of the list */
"
10726,"			= new PriorityQueue<HuffmanNode>(n, new MyComparator()); 

 		for (int i = 0; i < n; i++) { 

 			// creating a Huffman node object 

 			// and add it to the priority queue. 
"
25456,"/**

  * The first value in the array determines the minimum distance and the

  * second value represents the parent node from which the minimum distance has been calculated
"
15721,"        else temp.parent.right = temp.left;

         return true;

       }

     }

   }
"
14742,"		case 1: // LL

 			llRotation(root)

 		case -1: // LR
"
27098," * \f}

  *

  * @param [in] in_quat1 first input quaternion instance
"
99571,"    // First add all dependents (that is, children) to stack

     while (temp != NULL)

     {

         int connectedVertex = temp->vertex;
"
15584,"/*

 Pattern matching is case insensitive as

 the inputs are converted to lower case before the
"
12261,"        union_set[i] = i;

     }

     // p = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

     join(union_set, 3, 5);

     printf(""The array is now: "");
"
13079,"        /// <param name=""x"">Given point.</param>

         /// <param name=""error"">Last term error value.</param>

         /// <returns>Approximated value of the function in the given point.</returns>

         /// <exception cref=""ArgumentException"">Error value is not on interval (0.0; 1.0).</exception>
"
22285,"  test(""ocatal_to_binary 75"", () {

     expect(ocatal_to_binary(""75""), equals(""111101""));

   });

   test(""ocatal_to_binary -62"", () {
"
23933,"                }

                 while (taken[nextPos]);

                 taken[nextPos] = true;

                 newArray[nextPos] = array[i];

             }

             for (var i = 0; i < array.Length; i++)
"
20135,"        /// <param name=""node"">Node to rotate about.</param>

         /// <returns>New node with rotation applied.</returns>

         private AvlTreeNode<TKey> RotateRight(AvlTreeNode<TKey> node)

         {

             var temp1 = node;
"
49944,"        }

         [Test]

         public void Sin_TermsForm_InvalidCase() =>

             Assert.Throws<ArgumentOutOfRangeException>(() => Maclaurin.Sin(0, -1));

         [TestCase(0, 1, 0.001)]

         [TestCase(1, 7, 0.001)]
"
98513,"    else if (x >= mat[i_low][j_mid + 1] && x <= mat[i_low][m - 1])

         binarySearch(mat, i_low, j_mid + 1, m - 1, x);

     // Search element on 1st half of 2nd row
"
22880,"struct node *head;  // declaring head pointer globally assigned to NULL

 void push(char x)  // function for pushing

 {

     struct node *p = head, *temp;

     temp = (struct node *)malloc(sizeof(struct node));
"
30325,"     * @brief 8 8 16  派生类继承多个虚函数，会继承所有虚函数的vptr

      */

     cout<<sizeof(A)<<"" ""<<sizeof(B)<<"" ""<<sizeof(C);
"
19797,"        /// </summary>

         /// <list type=""bullet"">

         ///     <item>
"
15091,"            return 0;

         }

         

         int mid = start + (end - start)/2;

         return getSumTree(start, mid, q_start, q_end, seg_index*2 + 1) + getSumTree(mid + 1, end, q_start, q_end, seg_index*2 + 2);
"
16225,"          }

         }

       }

     }

     if (temp.size() > 0) {
"
11108,"export set_ch

 export Splay

 # Exports: knapsack
"
28358,"end

 function Base.insert!(tree::BinaryTree,from::Int,value,place::Bool)

     tree.n+=1

     tree.par[tree.n]=from

     if place

         tree.rch[from]=tree.n
"
23777,"            return;

           }

         case 5:

           {

             System.out.println(""Enter the Key to find and print:  "");
"
31947,"                )

                 .reduce(

                         List.of(),

                         (list, current) ->
"
33019,"      if (i == rear) {

         break;

       }
"
29657," */

 int count(int *arr, const int size){

   int k=0;

   for(int i=0;i<=size;i++){

     if(arr[i]==1){

       k++;
"
69258,"        ""\ttime ="",

         timeit(""z.num_digits_fast(z.medium_num)"", setup=""import __main__ as z""),

         ""seconds"",

     )

     print(
"
18268,"        splice!(weights, index)

     end

     return total_max_value

 end"
15288,"// Recursion problem

 // Given the denominations of currencies available in a system, find the number

 // of ways an ATM machine can generate notes for an entered amount N.

 #include <stdio.h>
"
21784,"	""github.com/TheAlgorithms/Go/math/min""

 )

 const emptyLazyNode = -1
"
27231,"			cost: 20,

 		},

 		{

 			n: 3,

 			graph: []Edge{

 				{
"
12448,"    return top;

 }

 /*
"
20097,"          return insert(iter, Node.new(val)) if cnt == index - 1

           iter = iter.next

           cnt += 1

         end

       else

         iter = @tail
"
15162," * 3D space with centroids at the points

  * * \f$(0,5, 0.5, 0.5)\f$

  * * \f$(0,5,-0.5, -0.5)\f$

  * * \f$(-0,5, 0.5, 0.5)\f$

  * * \f$(-0,5,-0.5, -0.5)\f$

  *
"
30200,"    Return a tuple (b, a) when given two integers a and b

     >>> swap(2,3)

     (3, 2)

     >>> swap(3,4)

     (4, 3)

     >>> swap(67, 12)
"
69899,"    int a, b, c, d, r, v;

     if (n <= 1)

         return;

     a = rand() % n;

     swap(0, a);

     v = i2c(0);
"
27717,"  if (max !== i) {

     swap(input, i, max)

     heapRoot(input, max)

   }
"
22375,"/*

  * Find the mode of an array of numbers

  *

  * The mode of an array of numbers is the most frequently occurring number in the array,

  * or the most frequently occurring numbers if there are multiple numbers with the same frequency
"
94417,"	// Reverse the negative array and restore signs

 	for i, j := 0, len(negatives)-1; i <= j; i, j = i+1, j-1 {

 		negatives[i], negatives[j] = -negatives[j], -negatives[i]

 	}
"
33459,"  return triangle

 }

 export { generate }
"
13253,"    *   - a sequence of integers

     * @param elem

     *   - a integer to search for in the @args

     * @param lo

     *   - lowest value index

     * @param hi
"
98902,"    with no remainder) by all of the numbers from 1 to n.

     >>> solution(10)

     2520

     >>> solution(15)

     360360

     >>> solution(22)
"
11732,"    }

 }

 /** Test that creates a random set of points distributed in six clusters in

  * 3D space. The following

  * [CSV](https://en.wikipedia.org/wiki/Comma-separated_values) files are created

  * to validate the execution:
"
44409,"     * \end{cases}

      * \f]

      * @param x input value to apply activation on

      * @return activation output
"
27851,"void freeTreeMemory(struct Node *node)

 {

     if (node != NULL)

     {
"
28638,"- `f`: the function to integrate. (at the momment only single variable is suported)

 - `a`: Start of the integration limit.

 - `b`: End of the integration limit.

 - `n`: Number of points to sample. (as n increase, error decrease)
"
31556,"  }

 }
"
10273,"            var encoder = new FeistelCipher();

             // Assert

             Assert.Throws<ArgumentException>(() => encoder.Decode(TestCase, Key));
"
22720,"					Start:  1,

 					End:    2,

 					Weight: 6,

 				},
"
28468,"                { new DateTime(2000, 1, 1), ""TestTime2"" },

                 { new DateTime(2005, 1, 1), ""TestTime3"" },

                 { new DateTime(2010, 1, 1), ""TestTime4"" },

                 { new DateTime(2015, 1, 1), ""TestTime5"" },

             };

             timeline.ValuesCount
"
22179,"            Assert.IsTrue(list.TryRemove(value));

             CollectionAssert.AreEqual(expectingValues, list);

         }

         [Test]

         public void Clear_ArrayAdded_ListCleaned_ListIsEmpty(

             [Random(1, 20, 1, Distinct = true)] int count)
"
28216,"         v          |        |        |0

          1--------->2<-------4------->5

               0         1        1

         >>> g = AdjacencyList(11)

         >>> g.add_edge(0, 1, 0)

         >>> g.add_edge(0, 3, 1)
"
23329,"        double x0 = ((rand() % range) - range2) / 100.f;

         double x1 = ((rand() % range) - range2) / 100.f;

         double x2 = ((rand() % range) - range2) / 100.f;
"
23582,"        /// <param name=""numberToTest"">Input number.</param>

         /// <param name=""timesToCheck"">Number of times to check.</param>

         /// <returns>True if is a prime; False otherwise.</returns>

         public static bool IsPrime(int numberToTest, int timesToCheck)

         {

             // You have to use BigInteger for two reasons:
"
23568," * - must be a square

  * - must not contain values other than {@code 0} and {@code 1}

  *
"
23540,"""""""

 Based on ""Skip Lists: A Probabilistic Alternative to Balanced Trees"" by William Pugh

 https://epaperpress.com/sortsearch/download/skiplist.pdf

 """"""
"
10424,"            printf(""%sBacktrack (%d,%d) <- %"" SCNu8 "" (counter=%"" SCNu32 "")\n"",

                    prefix, i, j, a->a[i * a->N + j], counter);

             prefix[strlen(prefix) - 2] = '\0';  // truncate the prefix

             a->a[i * a->N + j] = 0;
"
29519,"        segment_tree_init(arr, sizeof(*arr), 10, &identity, minimum);

     segment_tree_build(tree);

     int32_t result;

     segment_tree_query(tree, 3, 6, &result);

     assert(result == 2);

     segment_tree_query(tree, 8, 9, &result);
"
72708,"deps = [""LinearAlgebra"", ""Random"", ""Statistics""]

 git-tree-sha1 = ""3240808c6d463ac46f1c1cd7638375cd22abbccb""

 uuid = ""90137ffa-7385-5640-81b9-e52037218182""
"
19375,"/**

  * BucketSort implementation.

  *

  * Wikipedia says: Bucket sort, or bin sort, is a sorting algorithm that works by distributing the elements of an array

  * into a number of buckets. Each bucket is then sorted individually, either using a different sorting algorithm, or by
"
19281,"puts roman_to_int(s)

 # Output: 1994

 # Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
"
16949,"     * This enables the two to communicate and exchange data

      */

     connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr));

     printf(""Client is connected...\n"");
"
51928,"                node = RemoveRecolor(node);

             }

             while (node is not null && node.Parent is not null);    // Case 2: Reached root

             Count--;

         }
"
87504,"            // Arrange

             var testObj = new BitArray(arrLen);

             // Act

             void Act() => testObj.Compile(sequence);
"
22475,"	}

 	return intersectionSet

 }

 func (st *set) Difference(st2 Set) Set {

 	differenceSet := New()
"
76279,"/*

  * CArrayTests.c

  *

  * Author: Leonardo Vencovsky

  * Created on 19/03/2018

  *
"
31690,"    variance /= number_of_samples;

     std::cout << ""<<<<<<<< Test Function >>>>>>>>"" << std::endl

               << ""Expected: Mean: "" << mean << ""\t Variance: "" << variance

               << std::endl;

     std::cout << ""\tMethod 1:""
"
27557,"    }

   }

   return frequency.size === 26

 }
"
46554,"            for (int j=n-2; j>=0; --j) 

             {

                 x[j][i] = b[index[j]][i];

                 for (int k=j+1; k<n; ++k) 

                 {
"
12509,"            }

             return GetItemsFromPath(items, lastNodeOfOptimalPath);

         }

         // determine items taken based on the path

         private static T[] GetItemsFromPath(T[] items, BranchAndBoundNode lastNodeOfPath)
"
30454,"     */

     std::vector<int> parent;

     /** \brief Stores the distance from the root. */

     std::vector<int> level;
"
91762,"    skip_list.insert(""Key1"", 12)

     skip_list.insert(""V"", 13)

     skip_list.insert(""X"", 14)
"
87867,"git-tree-sha1 = ""d735490ac75c5cb9f1b00d8b5509c11984dc6943""

 uuid = ""aacddb02-875f-59d6-b918-886e6ef4fbf8""

 version = ""2.1.0+0""
"
20322,"    }

     printf(""Test 2 Passed in %.3g sec\n\n"", dtime);

     free(A);

 }

 /**
"
30382,"    # split the data with 75% train and 25% test sets.

     X_train, X_test, y_train, y_test = train_test_split(

         X, y, random_state=0, test_size=0.25
"
20940," * This implementation uses an iterative approach to calculate the values

  */

 /**

  *

  * @param {Number} arg1 first argument

  * @param {Number} arg2 second argument
"
18448,"  canvas.height = height

   const ctx = canvas.getContext('2d')

   for (let x = 0; x < width; x++) {
"
38680,"  }

   /** Create an empty bag */

   public Bag() {

     firstElement = null;

     size = 0;
"
12489,"    *second = temp;

 }

 /**

  * @brief Returns the index having minimum value using recursion

  * @param arr array to be sorted
"
10110,"public class StoogeSort implements SortAlgorithm {

     @Override

     public <T extends Comparable<T>> T[] sort(T[] unsortedArray) {

         sort(unsortedArray, 0, unsortedArray.length);

         return unsortedArray;
"
17865," * 2. Variables e.g. y in 3y^2

  * 3. Exponents e.g. 5 in y^5

  *

  * Class Polynomial constructs the polynomial using Array as an argument.
"
29209,"    };

     public Node<T> FindSet(Node<T> node) {

         if (node != node.parent) {

             node.parent = FindSet(node.parent);
"
26812,"    System.out.println(myQueue.toString()); // Will print [2, 5, 3, 7]

   }

 }
"
32939,"    place = 1;

     /* Binary to octal conversion */

     while (bin > 0)
"
99493,"    return null;

   }

   /**

    * Inserts certain value into the Binary Tree

    *
"
29068,"            43661, 43669, 43691, 43711, 43717, 43721, 43753, 43759, 43777, 43781, 43783, 43787, 43789, 43793, 43801,

             43853, 43867, 43889, 43891, 43913, 43933, 43943, 43951, 43961, 43963, 43969, 43973, 43987, 43991, 43997,

             44017, 44021, 44027, 44029, 44041, 44053, 44059, 44071, 44087, 44089, 44101, 44111, 44119, 44123, 44129,

             44131, 44159, 44171, 44179, 44189, 44201, 44203, 44207, 44221, 44249, 44257, 44263, 44267, 44269, 44273,

             44279, 44281, 44293, 44351, 44357, 44371, 44381, 44383, 44389, 44417, 44449, 44453, 44483, 44491, 44497,

             44501, 44507, 44519, 44531, 44533, 44537, 44543, 44549, 44563, 44579, 44587, 44617, 44621, 44623, 44633,
"
18637,"        /// <returns>The next y-value.</returns>

         private static double EulerStep(

             double xCurrent,

             double stepSize,
"
25796,"}

 /* Recursive version */

 int searchInsert(int *nums, int numsSize, int target)

 {

     int idx = numsSize - 1;
"
17214,"from __future__ import annotations

 from typing import Iterator

 class RedBlackTree:

     """"""
"
76980,"{

 }

 int Apple::add(int num){

     take(num);
"
17560,"  private

   # check if it already exists

   # if not add character to node

   def insert(character, trie)
"
21392,"	""math""

 	""strings""

 )

 // Polybius is struct having size, characters, and key

 type Polybius struct {
"
12300,"            foreach (var key in keys)

             {

                 Root = Add(key, Root);

                 Count++;
"
25926,"                    node.Right = RotateRight(node.Right);

                 }

                 return RotateLeft(node);

             }
"
18993,"test('Set bit number 1 in 10:', () => {

   const setBitPos = setBit(10, 1)

   expect(setBitPos).toBe(10)

 })

 test('Set bit number 2 in 10:', () => {

   const setBitPos = setBit(10, 2)
"
20307,"        for (j = 0; j < a->N; j++)

             printf(""%"" SCNu8 ""%c"", a->a[i * a->N + j],

                    (j == a->N - 1 ? '\n' : ' '));

 }

 /**
"
28236,"  return true

 }

 // testing
"
22460,"    for j in range(len(digits)):

         a_n += digits[j] * 10 ** j

     return a_n

 if __name__ == ""__main__"":
"
29085,"            continue;

         unsigned int b = sum_of_divisors(i);

         if (b >= MAX_N)

             flags[i] = -1;

         else if (flags[b] == -1)

             continue;
"
64470,"    for (i = 0; i < size; i++) arr[(int)pattern[i]] = i;

 }

 /* Boyer Moore Search algorithm  */

 void boyer_moore_search(char *str, char *pattern)

 {

     int n = strlen(str);
"
30375,"            while(i<=mid){

                 a[k] = a[k] + (a[i]

                         % maxele) * maxele;

                 k++;

                 i++;
"
31860,"    }

     /* put items back to original array */

     for (j = 0, i = 0; i < NBUCKET; ++i)

     {
"
23914,"    4,5,2,6,7,3,1,

     """"""

     if not isinstance(node, TreeNode) or not node:

         return
"
25667,"                diff, dn, _kk = jumps[max_jump]

                 # since the difference between jumps is cached, add c

                 new_c = diff + c

                 for j in range(min(k, len(a_i))):

                     new_c, a_i[j] = divmod(new_c, 10)

                 if new_c > 0:
"
17299,"uuid = ""9fa8497b-333b-5362-9e8d-4d0656e87820""

 [[GLFW_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Libglvnd_jll"", ""Pkg"", ""Xorg_libXcursor_jll"", ""Xorg_libXi_jll"", ""Xorg_libXinerama_jll"", ""Xorg_libXrandr_jll""]

 git-tree-sha1 = ""dba1e8614e98949abfa60480b13653813d8f0157""

 uuid = ""0656b61e-2033-5cc2-a64a-77c0f6c09b89""
"
15817,"	""errors""

 	""regexp""

 )
"
32328,"type KnuthMorrisPrattTests () =

     [<TestMethod>]

     member this.getFailureArray () =

         let actual = KnuthMorrisPratt.getFailureArray(""aabaabaaa"")
"
17306,"#

 # Time Complexity: O(1)

 #

 def is_power_of_two(n)

   result_exponent = Math.log(n) / Math.log(2)

   result_exponent % 1 == 0
"
29903,"   * @return {@code true} if {@code n} is palindrome number, otherwise {@code false}

    */

   public static boolean isPalindrome(int number) {

     if (number < 0) {
"
13931,"		encrypt, errEncrypt := Encrypt([]rune(s), keyWord)

 		if errEncrypt != nil &&

 			!errors.Is(errEncrypt, &NoTextToEncryptError{}) &&

 			!errors.Is(errEncrypt, &KeyMissingError{}) {
"
61228,"# Examples

 ```julia

 vol_sphere(5)  # returns 523.5987755982989
"
96143,"   * @param elementIndex index

    * @return heapElement

    */

   public HeapElement getElement(int elementIndex) {

     if ((elementIndex <= 0) || (elementIndex > maxHeap.size()))
"
26130,"        )

 def encrypt_message(key: int, message: str) -> str:

     """"""

     >>> encrypt_message(4545, 'The affine cipher is a type of monoalphabetic '

     ...                       'substitution cipher.')
"
12856,"        fprintf(stderr, ""invalid number of digits argumet!\n"");

         return -1;

     }

     for (int i = start_pos; i >= end_pos; i--) putchar(number[i] + 0x30);
"
15499,"      try {

         fis = new FileInputStream(fileName); // open the file

         int in = 0;

         String s = """"; // init a empty word

         in = fis.read(); // read one character
"
19131,"        ///     Gets the largest element in the tree. (ie. the element in the right most node).

         /// </summary>

         /// <returns>The largest element in the tree according to the stored comparer.</returns>

         /// <exception cref=""InvalidOperationException"">Thrown if the tree is empty.</exception>

         public TKey GetMax()

         {
"
14900,"//

 // Created by light on 19-11-4.

 //

 #include <iostream>

 using namespace std;

 namespace light {
"
10448,"        }

     }

 }
"
28182,"    System.out.println(""example 1:"");

     BiFunction<Double, Double, Double> exampleEquation1 = (x, y) -> x;

     ArrayList<double[]> points1 = eulerFull(0, 4, 0.1, 0, exampleEquation1);

     assert points1.get(points1.size() - 1)[1] == 7.800000000000003;

     points1.forEach(

         point -> System.out.println(String.format(""x: %1$f; y: %2$f"", point[0], point[1])));
"
26533,"  print(""Bitwise conversion.\n"");

   while (n != 0) {

     d = (n & 1);

     b += d * (pow(10, c++).toInt());
"
16101,"  }

   /**

    * This method checks if first element is greater than the other element
"
28569,"    def __multiply(self):

         dftA = self.__DFT(""A"")

         dftB = self.__DFT(""B"")

         inverseC = [[dftA[i] * dftB[i] for i in range(self.C_max_length)]]

         del dftA
"
12811,"                while qi < qe and not self.lvl[sink]:

                     v = self.q[qi]

                     qi += 1

                     for e in self.adj[v]:

                         if not self.lvl[e[0]] and (e[2] - e[3]) >> (30 - l):
"
11338," * @version v1

  * @date 2019-07-20

  */

 #include<iostream> 
"
12198,"            {

                 list.Add(i);

             }
"
23174,"        static int a;

         static void fun3();

         void fun();

         void fun1();
"
26910,"            102191, 102197, 102199, 102203, 102217, 102229, 102233, 102241, 102251, 102253, 102259, 102293, 102299,

             102301, 102317, 102329, 102337, 102359, 102367, 102397, 102407, 102409, 102433, 102437, 102451, 102461,

             102481, 102497, 102499, 102503, 102523, 102533, 102539, 102547, 102551, 102559, 102563, 102587, 102593,
"
10723,"}
"
20274,"typedef char mykey_t[8];

 typedef std::array<char, 8> mykey_t1;

 int main() {

     int a[8];

     test(a);
"
16362,"uuid = ""56ddb016-857b-54e1-b83d-db4d58db5568""

 [[LoopVectorization]]

 deps = [""ArrayInterface"", ""DocStringExtensions"", ""IfElse"", ""LinearAlgebra"", ""OffsetArrays"", ""Polyester"", ""Requires"", ""SLEEFPirates"", ""Static"", ""StrideArraysCore"", ""ThreadingUtilities"", ""UnPack"", ""VectorizationBase""]

 git-tree-sha1 = ""6643933c619b292cb1fe566f5a411dddddec3db9""

 uuid = ""bdcacae8-1622-11e9-2a5c-532679323890""

 version = ""0.12.63""
"
41365,"            using (new AssertionScope())

             {

                 foreach (var (time, value) in timeline)

                 {

                     array[i].Time

                         .Should()
"
12091,"	if(st.top == 9)	{		// overflow condition

 		printf(""Stack overflow..."");

 		exit(1);

 	}

 	st.top++;

 	st.stack[st.top] = opd;
"
24050,"@testset ""Math"" begin

     @testset ""Math: abs.jl(Absolute Value) "" begin

         @test abs_val(-100) == 100

         @test abs_val(0) == 0

         @test abs(123.1) == 123.1
"
25544,"  }

   return distanceMatrix[b.length][a.length]

 }

 export { levenshteinDistance }
"
30570,"                for (var j = 0; j < length; j++)

                 {

                     chars[j] = (char)TestContext.CurrentContext.Random.Next(97, 123);
"
65040,"# using dfs for finding eulerian path traversal

 def dfs(u, graph, visited_edge, path=None):

     path = (path or []) + [u]

     for v in graph[u]:

         if visited_edge[u][v] is False:
"
82719,"        let actual = LevenshteinDistance.levenshteinDistance(firstWord, secondWord )

         Assert.AreEqual(expected, actual)
"
23974,"    newNode->next = NULL;

     return newNode;

 }

 // Allocate memory for the entire graph structure

 struct Graph *createGraph(int vertices)
"
18426,"export { isTetrahedral }

 export { isPentatope }

 export { checkAll }
"
66106,"    }

     if (n == 1) {  // if there is only one house

         return money[0];

     }

     if (n == 2) {  // if there are two houses, one with the maximum amount of

                    // money will be robbed
"
26812,"                    }

                     PushDownMin(minIndex);

                 }
"
85397," * ""abc"", ""abcde"", ""abcdefg"", ""abcddef"" and if the search key is ""abcdezz"", then

  * the longest common prefix is ""abcde"" and hence search results will be

  * ""abcde"", ""abcdefg"".
"
15941,"}

 func TestDelete(t *testing.T) {

 	td := []struct {

 		name     string

 		input    int

 		expElems []int
"
92593,"  })

   it('should evaluate for negative values', () => {

     const polynomial = new Polynomial([-1, -3, -4, -7])

     expect(polynomial.evaluate(-5)).toBe(789)
"
35073,"  /// The fast pointer jumps 2 nodes at a time

   /// and the slow pointer jumps one node at a time

   /// eventually the fast and slow will coincide on a node

   ///

   /// Then we place one of the node back to the head.

   /// The node where these two nodes coincide again will be the
"
21863,"	var p float64

 	p = 1

 	if a < 0 && int(b)&1 != 0 {

 		p = -1

 	}
"
55047,"            Action act = () => RgbHsvConversion.HsvToRgb(400, 0, 0);

             act.Should().Throw<ArgumentOutOfRangeException>();

         }

         [Test]
"
31502,"    // Checking for 50

     // Key to be searched in the array

     key = 50;

     // Search the key using ternarySearch

     p = ternarySearch(l, r, key, ar);

     // Print the result
"
29881,"		System.out.println(endAlgo()+""ms"");

 		int[] strg=new int [n+1];

 		startAlgo();

 		System.out.println(bpRS(0,n,strg));
"
10644,"        series.append(f""1/{pow(temp + 1, int(power))}"" if series else 1)

     return series

 if __name__ == ""__main__"":
"
26013,"            std::cout << ""The entered choice is not correct"" << std::endl;

         }

     }

     return 0;

 }
"
14406,"            }

             if (Count > 0)

             {
"
19176,"            new object[]

             {

                 new double[,] { { 2, 2, -1 }, { 0, -2, -1 }, { 0, 0, 5 } },

                 new double[,] { { 2 }, { 2 }, { 3 } },
"
23033,"    else

     {

 		int n = check_placex();

 		placex(n);

     }

 }
"
74359,"	expectedIsFound := false

 	t.Run(""Test Dfs"", func(t *testing.T) {

 		if !reflect.DeepEqual(expected, actual) || !reflect.DeepEqual(actualIsFound, expectedIsFound) {

 			t.Errorf(""got route: %v, want route: %v"", actual, expected)

 			t.Errorf(""got isFound: %v, want isFound: %v"", actualIsFound, expectedIsFound)

 		}
"
18504,"      }

     }

   }
"
30536,"    /// </summary>

     /// <param name=""sortedData"">Sorted array to search in.</param>

     /// <param name=""item"">Item to search for.</param>

     /// <returns>Index of item that equals to item searched for or -1 if none found.</returns>
"
20258,"        /// <summary>

         ///     Gets the amount of nodes in the list.

         /// </summary>

         public int Count { get; private set; }

         /// <summary>
"
19805,"                    .Be(2);

                 timeline

                     .Should()

                     .Contain(query);

             }
"
46680,"using DataStructures.SegmentTrees;

 using NUnit.Framework;

 namespace DataStructures.Tests.SegmentTrees

 {
"
24579,"      if (pat.charAt(ns - 1) == x) {

         for (int i = 0; i < ns - 1; i++) {

           if (pat.charAt(i) != pat.charAt(state - ns + i + 1)) {

             break;

           }
"
25509,"        return init;

     unsigned long const min_per_thread = 25;

     unsigned long const max_threads = (length + min_per_thread - 1) / min_per_thread;

     cout<<max_threads<<endl;
"
19144,"// author(s) [red_byte](https://github.com/i-redbyte)

 // see reversebits_test.go

 package binary

 // ReverseBits This function initialized the result by 0 (all bits 0) and process the given number starting
"
11663,"Node *Tree234::Merge(Node *parent, int8_t index) {

     assert(parent);

     // bool is_parent_2node = parent->Is2Node();

     Node *left_child = parent->GetItemLeftChild(index);

     Node *right_child = parent->GetItemRightChild(index);
"
17932," * functions. When one of the clients or servers is sending, the other can only

  * receive and vice-versa. In this way, the Half Duplex Form of communication

  * can be represented using the TCP server-client model & socket programming

  */

 #include <netdb.h>  /// For structures returned by the network database library - formatted internet addresses and port numbers
"
27045,"      p.turnAroundTime = 0;

       p.waitTime = 0;

       p.remainingTime = p.burstTime;
"
10011,"            if (r == 0)

             {

                 swap(c, d);

                 d--;

             }
"
28607,"        [Test]

         public static void Remove_EmptyTree_ReturnsFalse()

         {

             var tree = new BinarySearchTree<int>();
"
28579,"        }

         /// <summary>

         ///     Remove a node from the tree.

         /// </summary>
"
26912,"static void test()

 {

     vec_3d a = {1., 2., 3.};

     vec_3d b = {1., 1., 1.};

     float d;

     // printf(""%s"", print_vector(&a, ""a""));
"
59679,"    TypeError: Sequence must be list of non-negative integers

     >>> bead_sort(""Hello world"")

     Traceback (most recent call last):

     ...
"
25806,"    if (choice == 1) {

         std::cout << ""Enter "" << n << "" numbers:\n"";

         for (int i = 1; i <= n; i++) {

             std::cout << i << "": "";

             std::cin >> arr[i];
"
12239,"            // Assert

             Assert.Throws<ArgumentException>(() => Act(nonSquareMatrix, coefficients));

         }
"
24011,")

 type Vertex int

 // Edge describes the edge of a weighted graph

 type Edge struct {

 	Start  Vertex

 	End    Vertex
"
17274,"/**

  * Author: dephraiim

  * License: GPL-3.0 or later

  *
"
13571," * Decryption is then just the reverse process of writing the matching (same index) letter from the first row instead of the second row

  * 'Aogg ujngw' -> 'Hello world'

  *

  * Non alphabetical characters (space, exclamation mark, ...) are kept as they are

  */

 const alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
"
25978,"    if num >= 5:

         numerals += ""V""

         num -= 5

     numerals += num * ""I""

     return numerals

 def solution(roman_numerals_filename: str = ""/p089_roman.txt"") -> int:
"
24454,"      ""05886116467109405077541002256983155200055935729725""

       ""71636269561882670428252483600823257530420752963450"";

   largestAdjacentNumbers(series, {adjacentLength = 4}) {

     var largestProduct = 0;
"
32270,"package trie

 import (

 	""fmt""
"
97664,"    preOrder(root.right, result);

   }

   return result;

 }
"
25125,"    return res

 def b_expo_mod(a, b, c):

     res = 0

     while b > 0:

         if b & 1:

             res = ((res % c) + (a % c)) % c
"
12643,"    {

         if (nums[i] != val)

             nums[start++] = nums[i];

     }
"
21063,"      left = null;

       right = null;

       parent = null;

     }
"
11893,"    """"""

     return "" "".join(sorted(set(sentence.split())))

 if __name__ == ""__main__"":
"
49896,"	}

 }

 //Query on interval [firstIndex, leftIndex]
"
44681,"	85: ""1010101"", 86: ""1010110"", 87: ""1010111"", 88: ""1011000"", 89: ""1011001"",

 	90: ""1011010"", 91: ""1011011"", 92: ""1011100"", 93: ""1011101"", 94: ""1011110"",

 	95: ""1011111"", 96: ""1100000"", 97: ""1100001"", 98: ""1100010"", 99: ""1100011"",

 	100: ""1100100"",

 }

 func TestDecimalToBinary(t *testing.T) {
"
22641,"#ifdef _OPENMP  // check if OpenMP based parallellization is available

 #include <omp.h>

 #endif

 /**

  * @addtogroup machine_learning Machine learning algorithms
"
27245,"    for i in range(V - 1):

         u = minDist(mdist, vset, V)

         vset[u] = True

         for v in range(V):
"
20355,"package conversion

 import ""testing""

 var HEX = []uint{

 	0x1abc9c,
"
72556,"            else:

                 raise Exception(

                     ""vector must have the same size as the ""
"
38445,"  describe('#dotProduct', () => {

     it('should calculate the dot product correctly', () => {

       expect(new Vector2(1, 0).dotProduct(new Vector2(0, 1))).toBe(0)

       expect(new Vector2(1, 2).dotProduct(new Vector2(3, 4))).toBe(11) // 1 * 3 + 2 * 4

     })

   })
"
15466,"/**

  * @file

  * @author [sunzhenliang](https://github.com/HiSunzhenliang)

  * @brief A-law algorithm for encoding and decoding (16bit pcm <=> a-law).

  * This is the implementation of [G.711](https://en.wikipedia.org/wiki/G.711)

  * in C.
"
30956,"        temp += result;

         result = temp;

         carry = (firstBit & secondBit) | (secondBit & carry) |
"
15155,"    const pattern = 'AABA'

     const SUT = checkIfPatternExists(text.toLowerCase(), pattern.toLowerCase())

     expect(SUT).toBe('Given pattern is found at index 0')

   })
"
14333,"  List<int> _heapify(List<int> array) {

     int firstParent = (array.length - 2) ~/ 2;

     for (int i = firstParent; i >= 0; i--) {
"
22620,"uint16_t isEmpty() {

 	if(st.top == -1) {

 		return 1;
"
40872,"using NUnit.Framework;

 namespace Algorithms.Tests.Sequences

 {

     public class RecamansSequenceTests
"
27785," * a pass-by-value and hence a copy of the array gets created which is then

  * modified by the function and returned.

  * @tparam T type of data variables in the array
"
18862,"}
"
21172,"        # Store the previous row

         previous_row = current_row

     # Returns the last element (distance)

     return previous_row[-1]

 if __name__ == ""__main__"":

     first_word = input(""Enter the first word:\n"").strip()
"
23685," *

  * By starting at the top of the triangle below and moving to adjacent numbers

  * on the row below, the maximum total from top to bottom is 23 :
"
53412,"# Euclid's algorithm for the greatest common divisor

 def gcd(a, b)

   b.zero? ? a : gcd(b, a % b)

 end
"
87461,"    unsigned int j = 0;

     /* the current read character in the first for-loop */

     char current_char = ' ';

     /* return status */

     bool status = true;

     /* contains the length of the given string */
"
24908,"#!/bin/python3

 # Doomsday algorithm info: https://en.wikipedia.org/wiki/Doomsday_rule

 DOOMSDAY_LEAP = [4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]

 DOOMSDAY_NOT_LEAP = [3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]

 WEEK_DAY_NAMES = {
"
22464,"/** Main function */

 int main(int argc, char **argv)

 {

     int MAX_DIVISORS = 500;

     long i = 1, num_divisors;
"
15300,"    * @param hi

     *   - highest value index

     * @return

     */

   def lowerBound(arr: List[Int], elem: Int, lo: Int, hi: Int): Int = {
"
33950,"      std::unique_lock<std::mutex> lock(mtx_);

       //wait for not full

       not_full_.wait(lock, [=] { return pos_ < array_.size(); });

       usleep(1000 * 400);

       array_[end_pos_] = n;
"
15538,"                    ni.node = node_info.node->GetChild(1);

                     ni.index = index;

                     q.push(ni);

                 }
"
34836,"	return Result{notFoundPosition,

 		c,

 	}

 }
"
12055,"            //Arrange

             var graph = new DirectedWeightedGraph<int>(10);

             var vertex1 = graph.AddVertex(1);

             var vertex2 = graph.AddVertex(20);

             var vertex3 = graph.AddVertex(40);
"
18974,"    ///     corresponding ""(char)value"" instead.

     /// </summary>

     public class HillEncoder : IEncoder<double[,]>

     {
"
30273,"#

 # Approach 1: Hash it!

 #

 # Complexity Analysis

 # Time Complexity: O(N)
"
32572,"        }

     }

 }
"
31930," * @param number positive integer number to convert

  * @returns integer with digits representing binary value representation of

  * number.

  */
"
33807,"        self.goal_x = goal_x

         self.goal_y = goal_y

         self.g_cost = g_cost

         self.parent = parent

         self.f_cost = self.calculate_heuristic()
"
13244,"            ulong[] pPow = new ulong[Math.Max(pattern.Length, text.Length)];

             pPow[0] = 1;

             for (var i = 1; i < pPow.Length; i++)

             {

                 pPow[i] = pPow[i - 1] * p % m;

             }
"
10746,"                 j -= gap)

                 strcpy(data[j], data[j - gap]);

             strcpy(data[j], tmp_buffer);

         }

     }
"
11303,"    insertEdge(g, e);

     e.v = 3;

     e.w = 8;

     insertEdge(g, e);

     e.v = 4;
"
28189,"                    9,

                     6,

                     float.PositiveInfinity

                 },

                 {
"
22725,"﻿using System;

 using FluentAssertions;

 using NUnit.Framework;
"
24177,"// But is more relevant to limit it's scope to Base 

 Base *Base::Create(int id) 

 { 
"
20914,"        [TestCase(0b1000101110100101000011010101110101010101110101001010000011111000,

             ""1000101110100101000011010101110101010101110101001010000011111000"")]

         [TestCase(ulong.MaxValue - 1, ""1111111111111111111111111111111111111111111111111111111111111110"")]

         [TestCase(ulong.MaxValue, ""1111111111111111111111111111111111111111111111111111111111111111"")]

         public static void GetsBinary(ulong input, string expected)
"
32024,"        }

         if(power(i,X)<N) {

         	//calling the sum function with next natural number after backtracking if when it is raised to X is still less than X.
"
32657,"        }

         printf(""\n"");

     }

 }
"
26378,"    return y // Returns the removed element and replaces it with a star

   }

   // checks if the queue is empty or not

   checkEmpty () {

     if (this.front === 0 && this.rear === 0) {
"
97676,"            low = mid + 1;

         else

             high = mid - 1;

     }
"
21058,"# You are a professional robber planning to rob houses along a street.

 # Each house has a certain amount of money stashed, the only constraint stopping you

 # from robbing each of them is that adjacent houses have security systems connected

 # and it will automatically contact the police if two adjacent houses
"
46196,"	}

 }

 // Get returns value associated with given key

 func (hm *HashMap) Get(key interface{}) interface{} {
"
27596,"        let mutable prefixLen = 0

         let mutable c1C2BoolList : bool list = []

         if str1.Length = str2.Length then

             for c1, c2 in Array.zip (str1.[..4].ToCharArray()) (str2.[..4].ToCharArray()) do

                 if c1 = c2 then

                     c1C2BoolList <- List.append c1C2BoolList [true]
"
10524,"     * @throws NoSuchAlgorithmException  (from Cipher)

      * @throws InvalidKeyException       (from Cipher)

      * @throws BadPaddingException       (from Cipher)

      * @throws IllegalBlockSizeException (from Cipher)

      */

     public static byte[] encryptText(String plainText, SecretKey secKey)
"
21685,"        /// </summary>

         /// <param name=""matrix"">The matrix.</param>

         /// <returns>The transposed matrix.</returns>

         public static double[,] Transpose(this double[,] matrix)

         {
"
31867,"}
"
37893,"    """"""

     points = sorted(_validate_input(points))

     n = len(points)
"
18183,"    }

     // Else return -1

     return -1

   }
"
21306,"    public static void main(String [] args) {

         Random r = ThreadLocalRandom.current();

         int size = 100;

         int maxElement = 100000;
"
98384,"        public void SetSiblings(FHeapNode<T> left, FHeapNode<T> right)

         {

             Left = left;
"
26936,"    let previousNode

     let currentIndex = 0

     // Check if index is out of bounds of list
"
17408,"            var searcher = new FastSearcher();

             var arr = new int[1000];

             var present = 0;

             var index = searcher.FindIndex(arr, present);
"
16596,"        public (string encoded, int index) Encode(string s)

         {

             if (s.Length == 0)
"
12766,"class TimSort {

   int array[];

   int array_length;

   int RUN = 32;

   /**

    * @brief A constructor which takes in the array specified by the user.
"
26495,"// CutRodRec solve the problem recursively: initial approach

 func CutRodRec(price []int, length int) int {

 	if length == 0 {

 		return 0
"
38696,"        x = Vector([1, 2, 3])

         self.assertEqual(""(14,32,50)"", str(A * x))

         self.assertEqual(""|2,4,6|\n|8,10,12|\n|14,16,18|\n"", str(A * 2))

     def test_change_component_matrix(self) -> None:

         """"""
"
53225,"        let actual = ZFunction.findPattern(pattern, inputString)

         Assert.AreEqual(expected, actual)

     [<TestMethod>]

     member this.zFunction () =

         let expected = [0; 0; 0; 1; 0; 1; 0; 4; 0; 0; 1]
"
62075,"        public int Length => storage.Length;

         public ISequentialStorageReader<int> GetReader() => new InMemoryReader(storage);

         public ISequentialStorageWriter<int> GetWriter() => new InMemoryWriter(storage);

         private class InMemoryReader : ISequentialStorageReader<int>

         {

             private readonly int[] storage;
"
93976,"                     model.matrix(~color-1,diamonds) %>% as_tibble(),

                      model.matrix(~clarity-1,diamonds) %>% as_tibble())

 #setting parameters alpha and lambda

 lasso_expand<-expand.grid(alpha = 1, lambda = seq(0.001,0.1,by = 0.0005))

 lasso_mod <- train(x=dia.trans %>% select(-price), y=dia.trans$price, method='glmnet', 
"
27441,"					las[i][1] = las[j][0] + 1;

 			}

 			/* Pick maximum of both values at index i */

 			if (result < Math.max(las[i][0], las[i][1]))

 				result = Math.max(las[i][0], las[i][1]);
"
97155,"      max = list[i];

     }

   }

   return max;
"
20649,"            {

                 a[i] = bucket[k][j];

                 i++;

             }

         }
"
27248,"                {

                     dist[i] = dist[u] + mat[u][i];

                 }

             }

         }

     }
"
13433,"}

 List<int> postOrder(TreeNode root, List<int> result) {

   if (root != null) {
"
24567,"}

 /**

  * @brief Main function

  * @returns 0 on exit

  */
"
11625,"// C++ program to implement gravity/bead sort

 #include <cstdio>

 #include <cstring>

 #define BEAD(i, j) beads[i * max + j]

 // function to perform the above algorithm

 void beadSort(int *a, int len) {
"
50554,"version = ""1.8.1""

 [[MultivariatePolynomials]]

 deps = [""DataStructures"", ""LinearAlgebra"", ""MutableArithmetics""]

 git-tree-sha1 = ""45c9940cec79dedcdccc73cc6dd09ea8b8ab142c""
"
14056,"[[FastBroadcast]]

 deps = [""LinearAlgebra""]

 git-tree-sha1 = ""26be48918640ce002f5833e8fc537b2ba7ed0234""

 uuid = ""7034ab61-46d4-4ed7-9d0f-46aef9175898""
"
27856,"#     include SortTests

 #

 #     # SortTests requires sort method which receives an array of integers

 #     # and returns a sorted one.

 #     def sort(input)
"
26861,"    # Initialize solution guess, residual, search direction.

     x0 = np.zeros((np.shape(load_vector)[0], 1))

     r0 = np.copy(load_vector)

     p0 = np.copy(r0)

     # Set initial errors in solution guess and residual.
"
81581,"    // 后台运行线程

     std::thread t(f);

     t.detach();

     assert(!t.joinable());

     return 0;
"
15078,"{  cout<<global<<endl;}

 int main()

 {

     Application::f();

     Application::g();

     system(""pause"");
"
24981,"    /**

      * @brief Remove item from tree

      * @param item item to remove

      * @return true if item found and removed, false otherwise

      */

     bool Remove(int64_t item);
"
11574,"    }

     return arr;

 }

 }  // namespace wave_sort

 }  // namespace sorting
"
27294,"        from the solution that the method took as an input

     Example:

     >>> find_neighborhood(['a', 'c', 'b', 'd', 'e', 'a'],

     ...                   {'a': [['b', '20'], ['c', '18'], ['d', '22'], ['e', '26']],

     ...                    'c': [['a', '18'], ['b', '10'], ['d', '23'], ['e', '24']],

     ...                    'b': [['a', '20'], ['c', '10'], ['d', '11'], ['e', '12']],
"
14537,"    /// </summary>

     public class LuhnTests

     {

         [Test]

         [TestCase(""89014103211118510720"")] // ICCID

         [TestCase(""071052120"")] // Social Security Code
"
20006,"  // Base case

   if (string.length < 2) return true

   // Check outermost keys
"
88941,"    if (low == high) {

       return array[low]; // or array[high]

     }

     int mid = (low + high) >>> 1;

     int leftMin = min(array, low, mid); // get min in [low, mid]

     int rightMin = min(array, mid + 1, high); // get min in [mid+1, high]
"
28526,"  { value: 3, left: 6, right: null },

   { value: 4, left: null, right: null },

   { value: 9, left: 7, right: 8 },

   { value: 2, left: 9, right: null },

   { value: 8, left: null, right: null },

   { value: 10, left: null, right: null },
"
65548,"  /*Caller of bitonicSort for sorting the entire array

   of length N in ASCENDING order */

   void sort(int a[], int N, int up) {
"
26533,"    scanf(""%d"", &m);

     int *coin = (int *)malloc(m * sizeof(int)), i;

     for (i = 0; i < m; i++)
"
41166,"        if (temp->llink == NULL && temp->rlink == NULL)

         {

             replacement = NULL;

         }

         else if (temp->llink == NULL && temp->rlink != NULL)
"
61534,"import 'package:test/test.dart';

 bool checkIsSubSequence(List<int> array, List<int> sequence) {

   if (array.isEmpty) {

     return false;
"
26289,"            if (source.GetLength(0) != source.GetLength(1))

             {

                 throw new ArgumentException(""Source matrix is not square shaped."");

             }
"
64818,"	int pos = 0;

 	if (!ptrToReturn)

 	{

 		return NULL;
"
20578,"        rear->next = pnode;

         rear = pnode;

     }

 }

 int removes()

 {
"
22083," * if a is one of these liars the equation will hold even though p is composite.

  *

  * But not everything is lost! It's been proven that at least half of all integers

  * aren't Fermat Liars (these ones called Fermat Witnesses). Thus, if we keep

  * testing the primality with random integers, we can achieve higher reliability.
"
44555,"            self.heap[self.idx_of_element[node]].val > newValue

         ), ""newValue must be less that current value""

         node.val = newValue
"
92874,"// author(s) [red_byte](https://github.com/i-redbyte)

 // see longestpalindrome_test.go

 package manacher

 import (
"
92101,"        N = atoi(argv[1]);

     clock_t start_time = clock();

     for (unsigned int i = 1; i <= N; i++)

     {
"
30391,"# Find All Duplicates in an Array

 #

 # Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array),

 # some elements appear twice and others appear once.

 #

 # Find all the elements that appear twice in this array.
"
12194,"    while (fibM < n)

     {

         fibMMm2 = fibMMm1;

         fibMMm1 = fibM;
"
24121,"  }

 }
"
10365,"        /// </summary>

         /// <param name=""l"">Left border of the subarray.</param>

         /// <param name=""r"">Right border of the subarray.</param>

         /// <param name=""value"">Value with which each element of the interval is calculated.</param>

         public void Apply(int l, int r, int value)

         {
"
33514," */

 #include <stdio.h>

 /** Main function */
"
21302,"              data[i][j] = '.'

             }

           }
"
25820,"			encrypted, err := p.Encrypt(tc.text)

 			if err != nil {

 				if err.Error() != tc.want {

 					t.Errorf(""failed Encrypt: %v"", err)

 				}
"
35181,"            graph.AddEdge(vertex3, vertex2, 4);

             graph.AddEdge(vertex4, vertex3, -5);

             graph.AddEdge(vertex4, vertex1, 2);

             graph.AddEdge(vertex5, vertex4, 6);

             var actualDistances = new double[,]

             {
"
17478,"    assert graph.addEdge(1, 2);

     assert graph.addEdge(1, 5);

     assert graph.addEdge(2, 5);

     assert !graph.addEdge(1, 2);
"
17717,"    end

     @testset ""Math: Babylonian Square Root"" begin

         @test bab_sqrt(100) ≈ sqrt(100)

         @test bab_sqrt(π, guess = -100, tolerance = 1e-10) ≈ sqrt(π)

         @test bab_sqrt(π, tolerance = π) ≈ π/2 # since inital guess should be π / 2

         @test bab_sqrt(0) == 0
"
24475,"    string = 'aabc';

     subString = 'abc';

     expect(stringCompare(string, subString), isTrue);

   });

   test(('KMP: '), () {
"
16648,"puts set_bit(8, 3)

 # 8

 puts set_bit(8, 4)

 # 24
"
13428,"package Others;

 import java.util.Scanner;

 public class CountChar {

   public static void main(String[] args) {
"
66143,"function UnionFind (n, key) {

   if (!(this instanceof UnionFind)) return new UnionFind(n)

   if (key && typeof key !== 'function') {

     throw new Error('key has to be a function or else left undefined')

   }
"
17004,"            free(X[i]);

         if (i < num_out)

             free(W[i]);

     }

 }
"
24498,"                return temp;

             } else {

                 // Go right

                 return nearestRightKey(root.right, x0);

             }

         }
"
71794,"     * The CLIENT is then prompted to type in a message and send it to the

      * server. (send())

      *
"
15022,"                // and encode by array chars (remaining four bits of second byte

                 // and first two of third byte)

                 base64_string.push_back(chars[((third_byte & 0xC0) >> 6) |

                                               ((second_byte & 0x0F) << 2)]);

                 // Encode remaining 6-bit of third byte by array chars
"
28252,"  }

   /**

    * Deletes the passed node from the current list

    *

    * @param z Element to be deleted

    */
"
17717,"    Apple a(2);

     cout<<a.getCount()<<endl;

     a.add(10);

     const Apple b(3);

     b.add(100);

     return 0;
"
11518,"        /// Traverses graph from start vertex.

         /// </summary>

         /// <param name=""graph"">Graph instance.</param>

         /// <param name=""startVertex"">Vertex that search starts from.</param>
"
10806,"			if computed != testCases[i].expected {

 				t.Errorf(""Word 1: %s, Word 2: %s, Expected: %d, Computed: %d"", testCases[i].first, testCases[i].second, testCases[i].expected, computed)

 			}

 		})

 	}
"
13857,"""""""

 function permutation(n, r)

     function factorial(n)        
"
31170,"            temp = root->children[character - 97];

             word++;

             root = temp;

         }

         else

         {
"
33967,"    private func setupBoard() {

         self.stackView = UIStackView()

         self.stackView.translatesAutoresizingMaskIntoConstraints = false

         self.stackView.axis = .vertical

         self.stackView.alignment = .fill
"
28557,"    }

   }

   return result

 }

 export { checkWordOccurrence }
"
12188,"  public static boolean isPerfectSquare(int number) {

     int sqrt = (int) Math.sqrt(number);

     return sqrt * sqrt == number;

   }

   /**
"
16573,"	""testing""

 )

 func TestDynamicArray(t *testing.T) {
"
26006,"class background_task {

 public:

     void operator()() const {
"
30794,"    }

 }
"
94261,"        into blocks and then does a series of operations for each block (including

         expansion).

         For each block, the variable h that was initialized is copied to a,b,c,d,e
"
86981,"            // adds the new element to the last one

             tempElement.Next = newListElement;

             return newListElement;

         }

         /// <summary>
"
26750,"    int wt[] = new int[] {10, 20, 30};

     int W = 50;

     int n = val.length;

     System.out.println(knapSack(W, wt, val, n));

   }
"
57275,"            data[0] = data[^1];

             data.RemoveAt(data.Count - 1);

             HeapifyDown(0);
"
31790," * Time Complexity : O(Nlog(N))

  */

 #include <assert.h>   /// for assert

 #include <stdio.h>    /// for IO operations

 #include <stdlib.h>   /// for dynamic memory allocation
"
16212,"    86515506006295864861532075273371959191420517255829

     71693888707715466499115593487603532921714970056938

     54370070576826684624621495650076471787294438377604
"
31477,"  // it means that it has not been actually allocated.

   /**

    * Method to find the index of the memory block that is going to fit the given process based on

    * the worst fit algorithm.

    *

    * @param blocks: the array with the available memory blocks.
"
63840,"                i = i.parent

         # Merge heaps

         self.mergeHeaps(newHeap)

         return min_value

     def preOrder(self):

         """"""
"
17081,"   * Calculate the area of a triangle

    *

    * @param base base of triangle
"
26634,"    j++;

   }

 }

 void timSort(List list, int n) {

   for (int i = 0; i < n; i += RUN) {
"
30330,"    assert Arrays.equals(sortedRange(new int[] {1, 2, 3, 3, 3, 4, 5}, 4), new int[] {5, 5});

     assert Arrays.equals(sortedRange(new int[] {0, 1, 2}, 3), new int[] {-1, -1});

   }
"
20175,"    return null;

   }

   T get end {

     if (_dataStore.isNotEmpty) {

       return _dataStore.last.item;
"
27541,"// sorting of array list using Radix sort

 #include <stdio.h>

 #include <stdlib.h>

 #define range 10  // Range for integers is 10 as digits range from 0-9

 // Utility function to get the maximum value in ar[]
"
14395,"    const insertTo = Math.floor(Math.random() * readSoFar)

     if (insertTo < newOutput.length) {

       newOutput[insertTo] = iterator.value

     }

   }

   return newOutput
"
10284,"using System;

 namespace DataStructures.Tests.Fenwick

 {
"
16871,"func TestHashMap(t *testing.T) {

 	mp := New()

 	t.Run(""Test 1: Put(10) and checking if Get() is correct"", func(t *testing.T) {

 		mp.Put(""test"", 10)
"
98610,"        if (cnt_s[c] != cnt_t[c])

             return false;

     return true;

 }
"
21806,"        // Execute topological sort on all elements

         if (graph->visited[i] == 0)

         {

             topologicalSortHelper(i, graph, stack);

         }

     }
"
81928,"                    node.Next.Previous = node.Previous;

                 }

             }

         }

         private void Map(T newItem, PairingHeapNode<T> newNode)

         {
"
27914,"x <- cbind(x_train,y_train)

 # Train the model using the training sets and check score

 logistic <- glm(y_train ~ ., data = x,family='binomial')

 summary(logistic)

 # Predict Output
"
20087,"        Positions.append(x)

         nodePosition.append(x)

     TreeEdges = []

     visited[0] = 1

     Distance_TV[0] = sys.maxsize
"
15869,"   *

    * @param a the base.

    * @param b the exponent.

    * @return the value {@code a}<sup>{@code b}</sup>.
"
17675,"[[LightGraphs]]

 deps = [""ArnoldiMethod"", ""DataStructures"", ""Distributed"", ""Inflate"", ""LinearAlgebra"", ""Random"", ""SharedArrays"", ""SimpleTraits"", ""SparseArrays"", ""Statistics""]

 git-tree-sha1 = ""432428df5f360964040ed60418dd5601ecd240b6""

 uuid = ""093fc24a-ae57-5d10-9952-331d41423f4d""
"
19036,"    if (result)

         result = OKcol(a, x, y, v);

     if (result)

         result = OKbox(a, x, y, v);
"
25114,"/*

 һʱܹ࣬¼ʱ֡룬++ÿִһ++㣬ʱ1룬ҪʹʱܹԶλ

 */

 #include<iostream>

 using namespace std;

 class Time{
"
14450,"    skip_list.insert(""X"", 14)

     skip_list.insert(""Key2"", 15)

     skip_list.delete(""V"")

     skip_list.delete(""Key2"")

     assert skip_list.find(""V"") is None
"
12027,"version = ""1.1.0""

 [[Serialization]]

 uuid = ""9e88b42a-f829-5b0c-bbe9-9e923198166b""

 [[Setfield]]

 deps = [""ConstructionBase"", ""Future"", ""MacroTools"", ""Requires""]

 git-tree-sha1 = ""d5640fc570fb1b6c54512f0bd3853866bd298b3e""
"
90061,"  it('should throw a statement for one value less than 1', () => {

     expect(findLcm(1, 0)).toBe('Please enter values greater than zero.')

     expect(findLcm(0, 1)).toBe('Please enter values greater than zero.')

   })

   it('should return an error for values non-integer values', () => {
"
31138,"        end

     end

     if l<r_pos quick_sort!(arr,l,r_pos) end

     if l_pos<r quick_sort!(arr,l_pos,r) end

 end"
13460,"        private (Dictionary<string, string> compressionKeys, Dictionary<string, string> decompressionKeys) GetKeys(

             ListNode tree)

         {

             var compressionKeys = new Dictionary<string, string>();
"
18242,"    }

 }

 int main()

 {

     int EXAMPLE_LENGTH = 8;
"
26883,"    ///     A generic implementation of a Fibonacci heap.

     /// </summary>

     /// <remarks>
"
28081,"        prettyurls=get(ENV, ""CI"", ""false"") == ""true"",

         canonical=""https://TheAlgorithms.github.io/Julia"",

         assets=String[],
"
11846,"#endif

 static bool paused = 0; /**< flag to set pause/unpause animation */

 static const int animation_speed = 25; /**< animation delate in ms */

 static const double step = 0.01;   /**< animation step size */
"
88980,"            }

             while(j<=end){

                 a[k] = a[k] + (a[j]

                         % maxele) * maxele;

                 k++;
"
23488,"  return 1 if n == 0

   until temp.zero?

     count += 1

     temp /= 10
"
69453,"#

 puts abs_min(2, '-1')

 # Error: Provide number only!
"
20379,"    }

     // input

     node = new Node();

     node.data = scn.nextInt();
"
17803,"    case '1101': return 'D'

     case '1110': return 'E'

     case '1111': return 'F'
"
14119,"    int currentStep = 0;

     for (int step = 0; step < maxStep; step++) {

       currentStep = step;
"
29401,"        """"""Repair the coloring from inserting into a tree.""""""

         if self.parent is None:

             # This node is the root, so it just needs to be black

             self.color = 0

         elif color(self.parent) == 0:
"
21827,"        insertTail(x);

       } else {

         Link newLink = new Link(x);
"
86724,"}

 // BstDelete removes the node

 func BstDelete(root *Node, val int) *Node {

 	if root == nil {
"
26522," * @param height maximum height for game tree

  * @return maximum or minimum number

  */

 template <size_t T>

 int minimax(int depth, int node_index, bool is_max,

             const std::array<int, T> &scores, double height) {
"
48583,"      currPriority = this._heap[currPos][1]

     } catch {

       return

     }

     while (child2Pos < this._heap.length &&
"
16832,"    n -= 1

   end

   fac

 end
"
13788,"                { new DateTime(2015, 1, 1), ""TestTime5"" },

             };

             timeline.GetTimesByValue(eventName)[0]

                 .Should()

                 .Be(eventDate);
"
12941,"}

 /**

  * @brief Function printTable

  * Responsible for printing the board

  * @param logic return of the logical matrix
"
13274,"            66377, 66383, 66403, 66413, 66431, 66449, 66457, 66463, 66467, 66491, 66499, 66509, 66523, 66529, 66533,

             66541, 66553, 66569, 66571, 66587, 66593, 66601, 66617, 66629, 66643, 66653, 66683, 66697, 66701, 66713,

             66721, 66733, 66739, 66749, 66751, 66763, 66791, 66797, 66809, 66821, 66841, 66851, 66853, 66863, 66877,

             66883, 66889, 66919, 66923, 66931, 66943, 66947, 66949, 66959, 66973, 66977, 67003, 67021, 67033, 67043,

             67049, 67057, 67061, 67073, 67079, 67103, 67121, 67129, 67139, 67141, 67153, 67157, 67169, 67181, 67187,

             67189, 67211, 67213, 67217, 67219, 67231, 67247, 67261, 67271, 67273, 67289, 67307, 67339, 67343, 67349,
"
32694,"    int c = 0, b = 0, e = 0, d = 0;

     if (mat[line][column] == 10)

     {

         mat[line][column] = 50;

         return 2;

     }
"
14342," *  data =  5, 7, 8, 11, 12, 15, 17, 18, 20

  *  

  *  x = 15
"
12778,"export { Month }

 // const x = new Month()

 // x.generateMonthCal('1/2021')
"
11472,"            .toArray(Integer[]::new);

     // The element for which the lower bound is to be found

     int val = integers[r.nextInt(size - 1)] + 1;

     LowerBound search = new LowerBound();
"
12057,"    }

     while (arr(a) < elem) {

       a = a + 1
"
10930,"    }

     public function testReverseString()

     {

         assertEquals('txet emos si sihT', reverse_string('This is some text'));

         assertEquals('mADaM', reverse_string('MaDAm'));
"
29307,"		return val, nil

 	}

 	return """", fmt.Errorf(""error queue is empty"")
"
75944,"    for (let j = sum; j >= array[i]; j--) {

       if (j - array[i] >= 0) {

         dp[j] += dp[j - array[i]]
"
12396,"    second_word = input(""Enter the second word:\n"").strip()

     result = levenshtein_distance(first_word, second_word)

     print(f""Levenshtein distance between {first_word} and {second_word} is {result}"")
"
96860,"        XCTAssertEqual(allFieldsAreEmpty(), true)

     }

     func testSymbolForPosition() {

         let player = Player(type: .human, symbol: .circle)

         let position = Position(0, 0)
"
20225,"                std::cin >> key;

                 Entry entry = table[linear_probing::linearProbe(key, true)];

                 if (entry.key == linear_probing::notPresent) {
"
49113,"  //the data of the Node

   T data;

   Node next;
"
53243,"                          << std::abs(delta) << ""\n"";

                 // return std::pair<uint32_t, double>(iter, tol_condition);

                 break_loop = true;

             }
"
47496," * Rotation](https://www.javatpoint.com/program-to-right-rotate-the-elements-of-an-array)

  * algorithm.

  * @details Shifting an array to the right involves moving each element of the
"
21282,"print(shuffle(nums, n))

 # Output: [1,2,1,2]

 #

 # Approach 2: Use Ruby methods .insert() and .delete_at()

 #
"
27743,"    print(""$i! ~= ${factorial(i.toDouble())}"");

   }

 }
"
24100,"  /**

    * This method converts an octal number to a decimal number.

    *

    * @param inputOctal The octal number

    * @return The decimal number

    */
"
18732," * Find the next abundant number after N and not including N

  */

 unsigned long get_next_abundant(unsigned long N)

 {
"
22919,"    std::cout << "" , Encrypted text (with key = REALLY) : "" << encrypted2;

     std::cout << "" , Decrypted text : ""<< decrypted2 << std::endl;

 }

 /** Driver Code */

 int main() {

     // Testing
"
31797,"#else

 #include <math.h>

 #endif
"
29533,"    // a new edge would be needed for that

     new Graph.Edge(""a"", ""b"", 7),

     new Graph.Edge(""a"", ""c"", 9),

     new Graph.Edge(""a"", ""f"", 14),

     new Graph.Edge(""b"", ""c"", 10),
"
26601,"  g.addVertex(4)

   g.addVertex(5)

   g.addEdge(1, 2)

   g.addEdge(1, 3)

   g.addEdge(2, 4)

   g.addEdge(2, 5)
"
30998,"    public static class SoundexEncoderTest

     {

         private static readonly string[] _names =

         {

             ""Robert"", ""Rupert"", ""Rubin"", ""Ashcraft"", ""Ashcroft"", ""Tymczak"", ""Pfister"", ""Honeyman"",

         };
"
18558,"  // Output: is_prime: List<bool> denoting whether ith element is prime or not

   List<bool> is_prime = new List.filled(n + 1, true);

   is_prime[0] = false;

   is_prime[1] = false;

   for (int i = 2; i * i <= n; i++) {

     if (is_prime[i]) {
"
22483,"  });

   test(('Balanced Bracket'), () {

     expect(isBalancedBrackets('()[]{}{'), isFalse);
"
32345,"            // Arrange

             BigInteger number = BigInteger.Parse(testcase);

             // Recommended number of checks' rounds = Log2(number) as Biginter has no Log2 function we need to convert Log10
"
32788,"package Mathematics

 import org.scalatest.flatspec.AnyFlatSpec

 class StreamSieveSpec extends AnyFlatSpec {
"
61665,"    stringInBaseTwo = baseTwoCharacters.charAt(remainder) + stringInBaseTwo

     value /= stringTwoBase

   }

   const baseTwoZero = baseTwoCharacters.charAt(0)

   return stringInBaseTwo.replace(new RegExp(`^${baseTwoZero}+`), '')
"
11024,"	}

 }

 // rotations
"
97240,"  }

   public static void main(String[] args) {

     test();

   }

 }
"
44874,"            # Flag to check if node can be deleted

             delete_curr = _delete(char_node, word, index + 1)

             if delete_curr:

                 del curr.nodes[char]

                 return len(curr.nodes) == 0

             return delete_curr
"
29135," */

 void prime(int *p)

 {

 	for(long long int i=3;i<=MAX_SIZE;i+=2) { p[i]=1; }

 	for(long long int i=3;i<=MAX_SIZE;i+=2)

 	{
"
85329,"        int64_t y =

             ST[g][r - (1 << g) + 1];  ///< represents minimum value over the

                                       ///< range [g, r - pow(2,g) + 1]

         return (A[x] <= A[y] ? x : y);  ///< represents minimum value over

                                         ///< the whole range [l,r]
"
24734,"                    LFUCache.decorator_function_to_instance_map[func] = LFUCache(size)

                 result = LFUCache.decorator_function_to_instance_map[func].get(args[0])

                 if result is None:
"
12011,"  if (n % 2 === 0) return false

   for (let i = 3; i * i <= n; i += 2) {

     if (n % i === 0) {

       return false
"
24697,"  })

 })
"
80145,"  def print_list

     puts '[' + to_a.join(', ') + ']'

   end
"
29284,"    /// This will be the simple version which only assumes one pattern is being searched

     /// for but it's not hard to modify

     ///

     /// 1) Calculate pattern hash

     ///

     /// 2) Step through the text one character at a time passing a window with the same
"
33688," * * \f$\rho\f$ is physical distance of marker from centre of inner circle

  * * \f$r\f$ is the radius of inner circle

  * * \f$k=\frac{r}{R}\f$ is the ratio of radius of inner circle to outer circle

  * and \f$0<k<1\f$

  * * \f$R\f$ is the radius of outer circle
"
33280,"  end

   result_array.uniq

 end

 Benchmark.bmbm do |x|

   x.report('execute algorithm 1') do

     print(find_duplicates(array))
"
22505,"      System.out.println(data + "" is present in given BST."");

       return true;

     }
"
44329,"        /// </summary>

         public int Height { get; private set; }

         /// <summary>

         ///     Gets the balance factor of the node.

         /// </summary>

         public int BalanceFactor { get; private set; }
"
30975,"    /**

      * Divides this complex number by a scalar.

      *

      * @param n The divisor which is a real number.

      * @return The quotient.
"
32529,"            minHeap.Extract();

             Action act = () => minHeap.UpdateKey(1, 10);

             act.Should().Throw<ArgumentException>();

         }
"
30490,"            56087, 56093, 56099, 56101, 56113, 56123, 56131, 56149, 56167, 56171, 56179, 56197, 56207, 56209, 56237,

             56239, 56249, 56263, 56267, 56269, 56299, 56311, 56333, 56359, 56369, 56377, 56383, 56393, 56401, 56417,

             56431, 56437, 56443, 56453, 56467, 56473, 56477, 56479, 56489, 56501, 56503, 56509, 56519, 56527, 56531,

             56533, 56543, 56569, 56591, 56597, 56599, 56611, 56629, 56633, 56659, 56663, 56671, 56681, 56687, 56701,
"
31372,"public class MagicSquare {

     public static void main(String[] args) {

         Scanner sc = new Scanner(System.in);

         System.out.print(""Input a number: "");
"
31512," *

  * This example implements a powerful unsupervised learning algorithm called as

  * a self organizing map. The algorithm creates a connected network of weights

  * that closely follows the given data points. This thus creates a topological
"
20184,"   * @param number the number to be converted

    * @param radix the radix

    * @return another radix

    * @throws ArithmeticException if <tt>number</tt> or <tt>radius</tt> is invalid

    */

   private static String convert(int number, int radix) {
"
20686,"        Time complexity: O(n! * n),

         where n denotes the length of the given sequence.

 """"""
"
33367,"/**

  * @brief Self-test implementations

  * @returns void

  */

 static void test() {

     /* check sample test case
"
44319,"  let counter = 0

   const flood = (row, col) => {

     if (row < 0 || col < 0) return // Off the map above or left

     if (row >= matrix.length || col >= matrix[row].length) return // Off the map below or right

     const tile = matrix[row][col]
"
27953,"    while (child2Pos < this._heap.length &&

       (child1Priority < currPriority || child2Priority < currPriority)) {

       if (child1Priority < currPriority && child1Priority < child2Priority) {

         this._swap(child1Pos, currPos)
"
21314,"}

 /**

  * @brief Addition of points

  * @details Add given point to generate third point. More description can be

  * found
"
45880,"                    }

                     else

                     {

                         greatGrandParent->right = child;

                     }
"
19766,"    :return: a float representing the length of the curve

     >>> def f(x):

     ...    return 5

     >>> '%.3f' % trapezoidal_area(f, 12.0, 14.0, 1000)

     '10.000'
"
27021,"	g2.Graph.AddEdge(3, 1)

 	g2.Graph.AddEdge(1, 2)

 	// Graph 3rd:

 	//  1---2   4
"
26080,"# Challenge name: Shuffle the array

 #

 # Given the array nums consisting of 2n elements

 # in the form [x1,x2,...,xn,y1,y2,...,yn].
"
18062,"        }

     }

 }
"
15831,"// // create graph

 // const graph = {}

 // const layout = {

 //   R: ['2'],

 //   2: ['3', '4'],

 //   3: ['4', '6', '13'],
"
26868," * 

  * @returns `void`

  */

 static void test_find_min() {
"
20060,"}

 }  // namespace machine_learning

 /** @} */

 using machine_learning::kohonen_som_tracer;

 /** Creates a random set of points distributed *near* the circumference
"
27040,"    System.out.println(fibMemo(n));

     System.out.println(fibBotUp(n));

     System.out.println(fibOptimized(n));

     sc.close();

   }
"
11656,"    }

 }
"
33862,"	if err != nil {

 		t.Fatalf(""failed NewPolybius: %v"", err)

 	}

 	for _, tc := range cases {

 		t.Run(tc.name, func(t *testing.T) {

 			encrypted, err := p.Encrypt(tc.text)
"
55894," * \returns 1 if N is abundant

  * \returns 0 if N is perfect

  */
"
12396,"            45821, 45823, 45827, 45833, 45841, 45853, 45863, 45869, 45887, 45893, 45943, 45949, 45953, 45959, 45971,

             45979, 45989, 46021, 46027, 46049, 46051, 46061, 46073, 46091, 46093, 46099, 46103, 46133, 46141, 46147,

             46153, 46171, 46181, 46183, 46187, 46199, 46219, 46229, 46237, 46261, 46271, 46273, 46279, 46301, 46307,

             46309, 46327, 46337, 46349, 46351, 46381, 46399, 46411, 46439, 46441, 46447, 46451, 46457, 46471, 46477,

             46489, 46499, 46507, 46511, 46523, 46549, 46559, 46567, 46573, 46589, 46591, 46601, 46619, 46633, 46639,
"
20788,"            IndexError, ""The length of profit and weight must be same.""

         )

 if __name__ == ""__main__"":

     unittest.main()
"
18014,"    }

     public static String decrypt(final String message, final String key) {

         StringBuilder result = new StringBuilder();

         for (int i = 0, j = 0; i < message.length(); i++) {

             char c = message.charAt(i);
"
29618,"        for (int j = 0; j < COLUMNS; j++) scanf(""%lf"", &A[i][j]);

     print_matrix(A, ROWS, COLUMNS);

     double **R = (double **)malloc(sizeof(double *) * ROWS);

     double **Q = (double **)malloc(sizeof(double *) * ROWS);

     if (!Q || !R)
"
13948,"        }

         else if (prev->llink == temp)

         {
"
15675,"71890743894732897510875895783297591085738975837897

 10783974839479879857895789758975981735870175835789

 01494787857897583758975849758475107589754897589789

 09939858758919788017587897587387585775289757982898

 74718478978758758975897589789789798789178957789789`
"
31833," *

  * <p>Worst-case performance O(log n) Best-case performance O(1) Average performance O(log n)

  * Worst-case space complexity O(1)

  *
"
25131,"{

     public function testCaesarCipher()

     {
"
13587,"    }

 }
"
33823,"        }

         /// <summary>

         ///     Gets the minimum value in the heap, as defined by the comparer.
"
21997,"    array[i - 1] = array[m]

     array[m] = n

   }

 }
"
76908,"            }

             Tail = Head;

             // temp can be null on empty list

             if (temp is not null)

             {
"
29309,"        _quickSort(from: left, to: pivotIndex - 1)

         _quickSort(from: pivotIndex + 1, to: right)

     }

     

     /// This method is where the pivot is chosen, so the smaller elements get moved to the left,

     /// and the bigger ones to the right.
"
15384,"	   expected output: 4

 	 */

 	char temp1[50] = ""2 10 + 9 6 - /"";
"
29890,"    }

     if (guide == 'V')

     {

         if ((10 - line) < boat)
"
33345,"    struct node *p = head, *temp;

     temp = (struct node *)malloc(sizeof(struct node));

     temp->data = x;
"
73715,"}
"
20928,"#include <iostream>

 using namespace std;

 class Base1 {
"
18594,"            }

             else if (node.Parent is null)

             {
"
23138,"        bestScore = miniMaxAlgorith.miniMax(0, isMaximizer, 0, verbose);

         if (verbose) {

             System.out.println();

         }

         System.out.println(Arrays.toString(miniMaxAlgorith.getScores()));
"
33289,"    Link temp = head;

     head = head.next; // oldHead <--> 2ndElement(head)

     if (head == null) {
"
30573," * partitions to find the minimum you are given a string and you need to give

  * minimum number of partitions needed to divide it into a number of palindromes

  * [Palindrome Partitioning]

  * (https://www.geeksforgeeks.org/palindrome-partitioning-dp-17/) overall time
"
22308,"	}

 	

 	/* hexa */
"
24078,"    for (int i = 0; i < n; i++)

     {

         printf(""%d "", arr[i]);

     }
"
16846,"version = ""1.20.0""

 [[PoissonRandom]]

 deps = [""Random"", ""Statistics"", ""Test""]
"
31839,"		t.Run(strconv.Itoa(i), func(t *testing.T) {

 			if err := tt.Graph.ValidateColorsOfVertex(tt.VertexColors); err != nil {

 				t.Errorf(""ValidateColorsOfVertex() error = %v, wantErr nil"", err)

 			}

 		})
"
29768,"		}

 	}

 	return concat

 }

 // GetParent Function that finds the first previous state of a state and returns it.

 // Used for trie where there is only one parent.
"
24668,"#

 # Approach 1: is using Ruby function (for sure)!

 #

 def sorted_squares(nums)

   nums.map! { |num| num**2 }.sort

 end
"
30137,"	if root.left.val != 80 {

 		t.Errorf(""left child should have value = 80"")

 	}

 	if root.right.val != 100 {

 		t.Errorf(""right child should have value = 100"")
"
13963,"        s1 += i * i;

         s2 += i;

     }
"
92960,"    {

         switch (s[i])

         {

         case '(':

         case '{':
"
32982,"     * Display skip list level

      */

     void displayList() {

         std::cout << ""Displaying list:\n"";

         for (int i = 0; i <= level; i++) {
"
11790,"      }

       values.add(newRow);

     }
"
22094,"            93949, 93967, 93971, 93979, 93983, 93997, 94007, 94009, 94033, 94049, 94057, 94063, 94079, 94099, 94109,

             94111, 94117, 94121, 94151, 94153, 94169, 94201, 94207, 94219, 94229, 94253, 94261, 94273, 94291, 94307,

             94309, 94321, 94327, 94331, 94343, 94349, 94351, 94379, 94397, 94399, 94421, 94427, 94433, 94439, 94441,

             94447, 94463, 94477, 94483, 94513, 94529, 94531, 94541, 94543, 94547, 94559, 94561, 94573, 94583, 94597,

             94603, 94613, 94621, 94649, 94651, 94687, 94693, 94709, 94723, 94727, 94747, 94771, 94777, 94781, 94789,

             94793, 94811, 94819, 94823, 94837, 94841, 94847, 94849, 94873, 94889, 94903, 94907, 94933, 94949, 94951,
"
26420,"            max_len_num = i; /* starting number */

         }

 #if defined(_OPENMP) && defined(DEBUG)

         printf(""Thread: %2d\t %3lld: \t%5lld\n"", omp_get_thread_num(), i, L);

 #elif defined(DEBUG)

         printf(""%3lld: \t%5lld\n"", i, L);
"
19369,"        f1.display();

         ADTFraction f2 = new ADTFraction(7, 8);

         f2.display();

         ADTFraction f3 = f1.plus(f2);

         f3.display();
"
18635,"            *p_str = '\0';

             strncat(words[index], p_start, 80);

             index++;

             p_start = p_str + 1;
"
26979,"    # small (elements smaller than k)

     # + pivot (kth element)

     # + big (elements larger than k)

     if len(small) == k - 1:

         return pivot
"
11025,"  end

   def bogosort

     ### randomly shuffles until sorted
"
25910,"            // Act

             sorter.Sort(testArray, intComparer);

             Array.Sort(correctArray, intComparer);

             // Assert

             Assert.AreEqual(testArray, correctArray);

         }
"
13191,"            break

     sock.shutdown(1)

     sock.close()

 if __name__ == ""__main__"":
"
67719,"export { permutate }
"
28947,"		})

 	}

 }
"
20748," * currently being explored and push it onto the stack.

  *

  * @param adj graph

  * @param start starting vertex for DFS
"
24068,"	}

 	return result.String()

 }

 func LongestPalindrome(s string) string {

 	boundaries := makeBoundaries(s)
"
21795,"#include <unistd.h>  /// For miscellaneous symbolic constants and types, and miscellaneous functions

 #define PORT 8100  /// Define port over which communication will take place

 /**
"
22450,"            return false;

         } else if (!node->left) {

             ret_value = node->value;

             return true;

         }
"
90691,"    const int gap_len = 8;

     int i, j, g;

     for (g = 0; g < gap_len; g++)
"
18011,"    ptr->data = data;

     return ptr;

 }
"
81040,"git-tree-sha1 = ""926af861744212db0eb001d9e40b5d16292080b2""

 uuid = ""cc61e674-0454-545c-8b26-ed2c68acab7a""

 version = ""1.1.0+4""

 [[Xorg_xcb_util_image_jll]]
"
22753,"        /// </summary>

         public TValue[] GetAllValues()

             => timeline.Select(pair => pair.Value)

                 .ToArray();

         /// <summary>

         ///     Get all <see cref=""TValue"" /> associated with <paramref name=""time"" />.
"
17125,"        @test weight_conversion(""short-ton"", ""short-ton"", 3) == 2.9999999725344

         @test weight_conversion(""short-ton"", ""pound"", 2) == 4000.0000000294335

         @test weight_conversion(""short-ton"", ""ounce"", 4) == 128000.00000021611

         @test weight_conversion(""short-ton"", ""carrat"", 4) == 18143680.0
"
12774,"      const buck = buckets[b]

       for (let k = 0; k < buck.length; k++) {

         items[a] = buck[k]

         a++

       }

     }
"
12134,"    q.deQueue();

     std::cout << ""After Hai, Jeff left the queue: "" << std::endl;

     q.display();

     return 0;
"
29977,"        $decimalNumber /= 2;

     }

     return $binaryNumber;

 }
"
15811,"    # Numpy implementation.

     # Get eigen values and eigen vectors using built in numpy

     # eigh (eigh used for symmetric or hermetian matrices).

     eigen_values, eigen_vectors = np.linalg.eigh(input_matrix)

     # Last eigen value is the maximum one.
"
27149,"					} else {

 						strg[row][col] = false;

 					}
"
91820,"		root := NewTree()

 		Insert(&root, 5)

 		Insert(&root, 4)

 		Insert(&root, 3)

 		if root.Key != 4 {

 			t.Errorf(""root should have value = 4"")
"
37424,"        } else {

           parent.right = replacement;

         }

       }

     }
"
32504,"    cout << s << endl;

     unordered_map<complex<double>,

             double>

             umc{{{1.0, 1.0}, 1.4142},

                 {{3.0, 4.0}, 5.0}};

     cout << umc << endl;
"
23347,"				B[i][j] = B[i-1][j-1] + B[i-1][j]

 			}

 		}

 	}

 	return B[n][k]

 }
"
30704,"uuid = ""38540f10-b2f7-11e9-35d8-d573e4eb0ff2""

 version = ""0.2.0""

 [[CommonSubexpressions]]
"
83539,"//   [3, 5, 14],

 //   [3, 4, 9],

 //   [4, 5, 10]

 // ]

 // const graph = createGraph(V, E)

 // const distances = djikstra(graph, V, 0)
"
11776," * @param func the combine_function used to build segment tree

  *

  * @returns pointer to sgement tree build

  */
"
13243,"        raise ValueError(""All numbers must be positive"")

     most_bits = max(len(bin(x)[2:]) for x in list_of_ints)

     return _msd_radix_sort(list_of_ints, most_bits)

 def _msd_radix_sort(list_of_ints: list[int], bit_position: int) -> list[int]:

     """"""
"
27217,"    # elements are added to buckets

     # according to the current place-value digit

     array.each do |j|

       n = (j / base_i) % base

       n += base if j >= 0

       buckets[n] << j
"
73708,"            // Arrange

             var sorter = new PancakeSorter<int>();

             var intComparer = new IntComparer();
"
47411,"        @test combination(6,3) == 20

         @test combination(7,5) == 21

         @test combination(12,3) == 220

         @test combination(5,5) == 1

         @test combination(4,2) == 6
"
20312,"    main()
"
17922,"			go Sieve(ch, ch1, testTenPrimes[i])

 			ch = ch1

 		}
"
20335,"        # Size validation

         assert isinstance(u, Matrix) and isinstance(v, Matrix)

         assert self.row == self.column == u.row == v.row  # u, v should be column vector

         assert u.column == v.column == 1  # u, v should be column vector

         # Calculate
"
81730,"}
"
23624,"""""""

 Return an image of 16 generations of one-dimensional cellular automata based on a given

 ruleset number

 https://mathworld.wolfram.com/ElementaryCellularAutomaton.html

 """"""
"
20489,"                }

                 out_file << std::endl;

             }
"
87507,"/**

  * Input:

  * 10

  * 0 1

  * 0 2

  * 1 5
"
91849,"                    return node;

                 }

                 node = node.Left;
"
69451,"    void testCase_1() {

         const int64_t inputSize = 1;

         log(""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~""

             ""~"");

         log(""This is test case 1 for Random Pivot Quick Sort Algorithm : "");

         log(""Description:"");
"
23814,"        public void Cos_ErrorForm_ValidCases(double point, double error)

         {

             // Arrange

             var expected = Math.Cos(point);
"
30427,"}

 /**

  * Return first order derivative of the function.

  * \f$f'(x)\f$

  */
"
35278,"            var vertex4 = graph.AddVertex(40);

             var vertex5 = graph.AddVertex(40);

             var vertex6 = graph.AddVertex(40);
"
92791,"    int size = 200;

     int maxElement = 100;

     Integer[] integers =

         Stream.generate(() -> r.nextInt(maxElement)).limit(size).toArray(Integer[]::new);
"
43728,"    end

 end

 # See Issue https://github.com/TheAlgorithms/Julia/issues/34

 """"""

     binary_search(arr::AbstractArray{T,1}, l::T, r::T, x::T) where {T<:Real}

 The implementation of this binary Search is recursive and requires O(Log n) space. With iterative Binary Search, we need only O(1) space. Useful for the implementation of `exponential_search`.
"
27785,"        }

       }

     }

     // Final cycle for negative checking
"
27418,"            if (bitmapWidth <= 0)

             {

                 throw new ArgumentOutOfRangeException(

                     nameof(bitmapWidth),
"
25993,"            // for appropriate scaling

             if (binaryNumber.Length < field.Length)

             {

                 var difference = field.Length - binaryNumber.Length;
"
11113,"                if x = pattern.[0] then

                     (i, s.[i..(i + (pattern.Length - 1))])

                 else
"
12331,"    struct node *temp = adjList;

     // Add vertex to visited list and print it

     graph->visited[vertex] = 1;

     printf(""%d "", vertex);

     // Recursively call the dfs function on all unvisited neighbours

     while (temp != NULL)
"
11646,"    joined = """"

     for word_or_phrase in separated:

         if not isinstance(word_or_phrase, str):

             raise Exception(""join() accepts only strings to be joined"")
"
24129,"            {

                 Height = Left!.Height + 1;

                 BalanceFactor = -Height;

             }
"
17231,"    /// <summary>

     ///     Class that implements insertion sort algorithm.

     /// </summary>
"
12163," * @returns 0 on exit

  */

 int main() {
"
30010,"     *

      * @return subtraction Output

      */

     public static BigInteger subBytes(BigInteger ciphertext) {
"
28468,"    public static class MiddlePointQuickSorterTests

     {

         [Test]
"
29190,"        public static void CalculateSum_NegativeInput_ExceptionIsThrown(int number)

         {

             // Arrange

             Action act = () => AliquotSumCalculator.CalculateAliquotSum(number);

             // Assert
"
38293,"// // mat ^ 0 = [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ]

 // MatrixExponentiationRecursive(mat, 0)

 // // mat ^ 1 = [ [ 1, 0, 2 ], [ 2, 1, 0 ], [ 0, 2, 1 ] ]

 // MatrixExponentiationRecursive(mat, 1)
"
35071,"            // Act

             sorter.Sort(main, temp, intComparer);

             Array.Sort(correctArray, intComparer);

             // Assert

             var reader = main.GetReader();
"
50454," * We have 3 numbers a, b, p

  * To compute (a/b)%p

  * (a/b)%p ≡ (a*(inverse(b)))%p ≡ ((a%p)*inverse(b)%p)%p

  * NOTE: For the existence of inverse of 'b', 'b' and 'p' must be coprime
"
27483,"    // Check if a given key is present in the queue

     return (key in this.keys)

   }

   update (key, priority) {
"
32906,"  const distanceMatrix = Array(b.length + 1)

     .fill(null)

     .map(() => Array(a.length + 1).fill(null))
"
19956,"        return aesCipher.doFinal(plainText.getBytes());

     }

     /**

      * Decrypts encrypted byte array using the key used for encryption.

      *
"
11550,"            var nodes = GetListNodesFromText(uncompressedText);

             var tree = GenerateHuffmanTree(nodes);

             var (compressionKeys, decompressionKeys) = GetKeys(tree);

             return (translator.Translate(uncompressedText, compressionKeys), decompressionKeys);

         }

         /// <summary>
"
24525,"end

 def q

   @q ||= random_prime_number

 end
"
31522,"  11000

   11000

   00100

   00011
"
61508,"#include <stdlib.h>

 /** Compute the product of two numbers in a file

  *
"
14437,"				t.Errorf(""Expected matches for pattern '%s' for string '%s' are: %v, but actual matches are: %v"", tc.pattern, tc.input, tc.expected, actual)

 			}

 		})

 	}

 }
"
14705,"  end

 end

 #

 # Approach 2: Sort and Compare Adjacent Elements
"
10909,"        public static void AddMany<TKey, TValue>(

             this Dictionary<TKey, TValue> keys,

             IEnumerable<(TKey, TValue)> enumerable) where TKey : notnull

         {

             foreach (var (key, value) in enumerable)
"
33498,"        private readonly Dictionary<T, List<PairingHeapNode<T>>> mapping = new();

         private PairingHeapNode<T> root = null!;

         public int Count { get; private set; }

         public PairingHeap(Sorting sortDirection = Sorting.Ascending)
"
20077,"            // Text length

             var n = t.Length;

             // For each symbol of the alphabet, the position of its rightmost occurrence in the pattern,

             // or -1 if the symbol does not occur in the pattern.

             int[] badChar = BadCharacterRule(p, m);
"
16510,"                        break

                     else:

                         parent_node = parent_node.right

             new_node.parent = parent_node
"
16064,"stack.push(20)

 stack.push(30)

 print(stack.count)

 print(stack.peek)

 print(stack.isEmpty)
"
33853,"		memoryInformation = tmp->next;

 		free(toFree->ptr);

 		free(toFree);

 		if (memoryInformation)

 		{

 			memoryInformation->previous = NULL;
"
16522,"﻿using System.Collections.Generic;

 using System.Numerics;

 namespace Algorithms.Sequences

 {

     /// <summary>
"
31941,"      int leftIndex = root * 2 + 1;

       int rightIndex = root * 2 + 2;

       boolean hasLeftChild = leftIndex < heap.length;

       boolean hasRightChild = rightIndex < heap.length;

       if (hasRightChild) { // if has left and right
"
23938,"        }

     }

     return 0;
"
12415,"            this.key = key;

             this.value = value;

         }

         public Entry<I, J> getPreEntry() {

             return preEntry;

         }
"
28988,"     * If the length of array is less than

      * this then we simply perform insertion sort

      */
"
59234,"//Title:Fibonacci Search

 //Author:Shawn

 //Email:stepfencurryxiao@gmail.com

 int fibMaonaccianSearch(List arr, int x, int n) {

   //Initialize fibonacci numbers
"
32535,"using FluentAssertions;

 namespace Algorithms.Tests.Numeric

 {
"
19401,"    if (node == null) {

       System.out.println(""No such data present in BST."");

     } else if (node.data.compareTo(data) > 0) {
"
24681,"    }

     /**

      * Constructor. Creates a complex number.

      *

      * @param r The real part of the number.
"
19306,"  private static int calculate_distance(String a, String b) {

     int len_a = a.length() + 1;

     int len_b = b.length() + 1;

     int[][] distance_mat = new int[len_a][len_b];

     for (int i = 0; i < len_a; i++) {

       distance_mat[i][0] = i;
"
14404,"  Node head;

   int size;

   LinkedList() {

     head = null;

     size = 0;
"
32877,"    expect(array).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

   })

 })
"
61156,"# => num_ans_str = ""FizzBuzz""

 #

 # Complexity Analysis

 #

 # Time Complexity: O(N)
"
92181,"                g_function[neighbours] = float(""inf"")

             if valid(neighbours) and g_function[neighbours] > g_function[s] + 1:

                 g_function[neighbours] = g_function[s] + 1
"
21687,"  it('should return an all-uppercase string when input is an mixed-case string with punctuation', () => {

     expect(upperCaseConversion('mixeD-CaSe INPuT!')).toEqual('MIXED-CASE INPUT!')

   })
"
33130,"import { bogoSort, isSorted } from '../BogoSort'

 describe('isSorted', () => {

   it('should return true for empty arrays', () => {

     expect(isSorted([])).toBe(true)

   })

   it('should return true for single-element arrays', () => {
"
55451,"  private void setData(Item item) {

     this.data = item;

   }

 }
"
11229,"        int n = 0;

         // filling the table with multiple asterisks

         for (int i = 0; i < 9; i++) game_table[i] = '*';

         // displaying the main menu

         printf(""***************************************\n"");

         printf(""*************TIC TAC TOE***************\n"");
"
65481,"""""""

 Problem 120 Square remainders: https://projecteuler.net/problem=120

 Description:

 Let r be the remainder when (a−1)^n + (a+1)^n is divided by a^2.

 For example, if a = 7 and n = 3, then r = 42: 6^3 + 8^3 = 728 ≡ 42 mod 49.
"
79152,"    create_polynomial(&poly1, 5, 0);

     display_polynomial(poly1);

     printf(""\nSecond Polynomial:\n"");  // Defining the 2nd polynomial

     create_polynomial(&poly2, 2, 5);

     create_polynomial(&poly2, 3, 3);

     create_polynomial(&poly2, 7, 1);
"
19822,"def num_islands(grid)

   return 0 if grid.empty?

   # init num of islands

   islands = 0
"
63145,"            // Act

             var result = a.IsEqual(b);

             // Assert
"
22643,"// Package cipher is a package containing different implementations of certain ciphers

 package cipher
"
18091,"        self.connections[node1][node2] = weight

         self.connections[node2][node1] = weight

     def kruskal(self) -> GraphUndirectedWeighted[T]:
"
24352,"    System.out.print(data + "" "");

     if (right != null) {

       right.printInOrder();

     }

   }

   public void printPreOrder() {
"
71161,"            }

         }

         [Test]

         public void BuildMinHeap_UpdateNonExistingNode_ThrowException()

         {

             var minHeap = new PairingHeap<int>();
"
33013,"    // MARK: -- Public function's

     public init(size: Int) {

         self.size = size

         self.table = []

         self.clear()
"
37183,"    }

     if (result > __INT_MAX__)

     {

         return __INT_MAX__;

     }

     else if (result < __INT_MAX__ * -1 - 1)
"
26419,"int main() {

     int cmd = 0, hash = 0, key = 0;

     std::cout << ""Enter the initial size of Hash Table. = "";

     std::cin >> totalSize;

     table = std::vector<Entry>(totalSize);

     bool loop = true;
"
30635," * @param wordDict a vector of words to be used as dictionary to look into

  * @returns `true` if s can be formed by a combination of strings present in

  * wordDict

  * @return `false` otherwise

  */

 bool wordBreak(const std::string &s, const std::vector<std::string> &wordDict) {
"
15098,"  // printing the sortedBool value

   print(""After sorting the array: $arr"");

 }
"
97602,"     */

     VectorCrossProduct crossProduct(VectorCrossProduct b){

         VectorCrossProduct product=new VectorCrossProduct();

         product.x = (y * b.z) - (z * b.y);

         product.y = -((x * b.z) - (z * b.x));

         product.z = (x * b.y) - (y * b.x);
"
28990,"        q->rear++;

         q->items[q->rear] = value;

     }

 }

 // Returns item at front of queue and removes it from queue

 int dequeue(struct queue *q)
"
21164,"  print(""distance(moskov, seoul) = ${distance(moskov, seoul)}km"");

 }
"
19300,"            for (i = 1; i < LONGEST_SUB_LENGTH; i++)

                 LONGEST_SUB[i] = TEMPORARY_ARRAY[i - 1];

         }

         *RESULT = LONGEST_SUB;

         *RESULT_LENGTH = LONGEST_SUB_LENGTH;

     }
"
29622,"require 'minitest/autorun'

 require_relative './sort_tests'

 require_relative './selection_sort'

 class TestSelectionSort < Minitest::Test

   include SortTests
"
22736,"// Effective computation of large exponents modulo a number

 // Function binpow to calculate (x^n mod m)

 int binPow(int a, int b, int m) {

   int result = 1;

   a %= m;
"
67064,"  }

   /**

    * Method to find a Node with a certain value

    *
"
61264,"int fib(int N)

 {

     if (N == 0)

         return 0;
"
13478,"  numbers.forEach((element) => result += element);

   return result;

 }

 BigInt solution3(List<BigInt> numbers) {
"
95805," *

  * <p>Array must be sorted

  *

  * @author Ujjawal Joshi

  * @date 2020.05.18
"
25889,"		cout << endl;

 		if (p->left)

 		{

 			cout << ""\n\nLeft:\n"";

 			display(p->left);

 		}
"
30716,"            while (arr.Contains(item));

             return item;

         }

         public static int GetItemSmallerThanAllIn(int[] arr) => arr.Min() - 1;

         public static int GetItemBiggerThanAllIn(int[] arr) => arr.Max() + 1;
"
15700,"        {

             if (node?.Left is null || node.Left.Level != node.Level)

             {
"
27003,"    expect(swapbits(43), equals(23));

   });

   test(""swapbits returns 43 for 23"", () {

     expect(swapbits(23), equals(43));

   });

 }
"
24060,"        /// <param name=""terms"">List of terms.</param>

         /// <returns>Source names.</returns>

         public IEnumerable<string> Or(IEnumerable<string> terms)

         {
"
51828," * Non alphabetical characters (space, exclamation mark, ...) are kept as they are

  */

 const alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
"
28394,"};

 int main() {

     Zoo z;

     Zoo z1(1, 2);

 //    Zoo z2=z;   // error copy ctor delete
"
20892,"package Strings;

 import java.util.List;

 import java.util.Arrays;

 import java.util.LinkedList;
"
23488,"  public void insertHash(int key) {

     int hash = hashing(key);

     buckets[hash].insert(key);

   }

   public void deleteHash(int key) {

     int hash = hashing(key);
"
25310,"}

 /**

  * @brief Self-test implementations

  * @returns void

  */

 static void test() {
"
11985,"			return false;

 		}

 		if (src.length() == 0 && pat.length() != 0) {

 			for (int i = 0; i < pat.length(); i++) {

 				if (pat.charAt(i) != '*') {
"
16163," */

 void singlemode()

 {

     int m;

     int k = 0;

     int table_fill_count=0;
"
50482,"		""a"":       false,

 		""aa"":      true,

 		""aaa"":     false,

 		""aaaa"":    true,

 		""aaaaa"":   true,

 		""aaaaaa"":  false,
"
31531,"        public int Count

             => timeline.Count;

         /// <summary>

         ///     Clear the timeline, removing all events.
"
22428,"            perror(""found inavlid character in the number!"");

             return -1;

         }

         else

         {
"
84794,"    List<Character> letters = new ArrayList<Character>();

     for (char c : allChars.toCharArray()) letters.add(c);

     // Inbuilt method to randomly shuffle a elements of a list

     Collections.shuffle(letters);

     StringBuilder password = new StringBuilder();

     // Note that size of the password is also random
"
77477,"{

     /// <summary>

     ///     Fermat's prime tester https://en.wikipedia.org/wiki/Fermat_primality_test.
"
21641,"   * @param elementIndex int containing the position in the heap of the element to be deleted.

    */

   void deleteElement(int elementIndex);
"
24648,"    return π*radius^2*height/3.0

 end

 """"""

     vol_prism(area_of_base, height)

 Compute the Volume of a Prism.
"
27520,"    std::array<int, 8> scores = {90, 23, 6, 33, 21, 65, 123, 34423};

     double height = log2(scores.size());

     std::cout << ""Optimal value: "" << backtracking::minimax(0, 0, true, scores, height)

               << std::endl;

     return 0;

 }
"
50761,"    ///     Similar to a Singly Linked List but each node contains a refenrence to the previous node in the list.

     ///     <see cref=""System.Collections.Generic.LinkedList{T}"" /> is a doubly linked list.

     ///     Compared to singly linked lists it can be traversed forwards and backwards.

     ///     Adding a node to a doubly linked list is simpler because ever node contains a reference to the previous node.

     /// </summary>

     /// <typeparam name=""T"">Generic type.</typeparam>
"
26178,"  // prints the heap

   public void print() {

     for (int i = 1; i <= this.capacity; i++) System.out.print(this.heap[i] + "" "");

     System.out.println();
"
33064,"      return null

     }

   }

   // Get the indexOf item
"
16975,"      return 0;

     }

     char[] chars = s.toCharArray();

     int n = chars.length;

     int[] res = new int[n];

     res[0] = 0;
"
31138,"        359,

         367,

         373,

         379,
"
12858,"               ? 1

                : 0;

 }

 int contains_hash(hash_set_t *set, long long hash)

 {
"
63323,"        cout<<endl;

     }

     system(""pause"");
"
28116,"            suggestionsRec(pCrawl, prefix); 

             return 1; 

         }

         
"
12322,"        // for item in InsertionSort.Sort list do

         //    System.Console.WriteLine item

         Math.Fibonacci.PrintSerie 1 0

         0
"
34014," * minimum number of edits

  * (operations) required to convert

  * 'str1' into 'str2'/
"
81402," * @returns 0 on exit

  */

 int main() {

     // Testing

     test();
"
21299,"version = ""1.3.0""

 [[JSON]]

 deps = [""Dates"", ""Mmap"", ""Parsers"", ""Unicode""]
"
17387,"  it('expects to generate 2 different combinations', () => {

     const text = '12'

     const SUT = createPermutations(text)

     expect(SUT).toStrictEqual(['12', '21'])
"
31806,"          new ActionListener() {

             public void actionPerformed(ActionEvent e) {

               updateStacks();

             }

           });

   public void startGame() {
"
87304,"            var weights = new[] {23, 26, 20, 18, 32, 27, 29, 26, 30, 27};

             var capacity = 67;

             Func<char, int> weightSelector = x => weights[Array.IndexOf(items, x)];

             Func<char, double> valueSelector = x => values[Array.IndexOf(items, x)];
"
12939,"        /// <summary>

         ///     Recursive function to remove an element from the tree.

         /// </summary>
"
11044," */

 #include <cassert>

 #include <functional>

 #include <iostream>
"
20038,"         (iter < MAX_ADALINE_ITER) && (avg_pred_error > ADALINE_ACCURACY);

          iter++)

     {

         avg_pred_error = 0.f;

         // perform fit for each sample
"
55077,"- `n`: Positive integers of items to choose from

 - 'r': Positive integers of items to choose

 Contributed By:- [Mayur Dahibhate](https://github.com/mayurdahibhate)

 """"""

 function permutation(n, r)

     function factorial(n)        
"
25988,"""""""

 Project Euler Problem 8: https://projecteuler.net/problem=8

 Largest product in a series
"
28994,"        }

     }

     if (temp == NULL)

         return;

     else

     {
"
24915,"    if (!output._isMockFunction) {

       output('\n')

     }

     for (const row of this.board) {

       output(row)
"
30278," * Returns the index of the maximum number of a subarray in a given array

  *

  * @param {number[]} array The array to found the maximum number's index

  * @param {*} startIndex The start of the subarray

  * @param {*} endIndex The end of the subarray
"
15450,"                       cluster* centroid)

 {

     size_t i = 0;
"
24507,"    """"""

     r, g, b = rgb[:, :, 0], rgb[:, :, 1], rgb[:, :, 2]

     return 0.2989 * r + 0.5870 * g + 0.1140 * b

 def gray2binary(gray: np.array) -> np.array:
"
85920,"    *   - a sequence of unsorted integers

     * @return

     *   - sequence of sorted integers @array
"
83387,"    root.postOrder(root.getRoot());

   }

   private static Node createBst(int[] array, int start, int end) {

     // No element left.
"
32280," * @param num: integer

  * @details Factorial of n = n * (n - 1) * (n - 2) * ... * 1

  * @returns integer: Factorial of the number.

             NaN: if negative number is provided.

  */

 const factorial = (n) => {
"
51812,"    Scanner scanner = new Scanner(System.in);

     System.out.print(""Enter a number: "");

     int n = scanner.nextInt();

     if (isPrime(n)) {
"
24312,"                    i++;

                 }

                 if (j == pat.Length)
"
33637,"void print(const std::vector<int32_t> &array) {

     for (int32_t i : array) {

         std::cout << i << "" "";  /// Print each value in the array

     }

     std::cout << ""\n"";  /// Print newline
"
15988,"X[which(X$var2 > 8), ]

 ##   var1 var2 var3

 ## 4    1   10   11

 ## 5    4    9   13

 # Sorting

 sort(X$var1)
"
17846,"  it('should return an expression and evaluate it', () => {

     const polynomial = new Polynomial([1, 2, 3, 4])

     expect(polynomial.display()).toBe('(4x^3) + (3x^2) + (2x) + (1)')

     expect(polynomial.evaluate(2)).toEqual(49)

   })
"
11550,"	var result string = """"

 	for num > 0 {

 		result += strconv.Itoa(num & 1)

 		num >>= 1

 	}

 	return Reverse(result), nil
"
18992,"// 	}

 // }

 // // Function bom performing the Backward Oracle Matching algorithm.

 // // Prints whether the word/pattern was found + positions of possible multiple occurrences
"
28116,"    const nextGenerationRow = []

     for (let j = 0; j < cells[i].length; j++) {

       // Get the number of living neighbours
"
12100,"/* Driver */

 void main() {

   assert(fibonacci(1) == 1);

   assert(fibonacci(2) == 1);
"
21165,"void show_array (const std::array <T, N> &arr) {

     for (int x : arr) {

         std::cout << x << ' ';
"
28905,"     * Function to get prediction of model on single sample.

      * @param X array of feature vectors

      * @return returns predictions as vector

      */

     std::vector<std::valarray<double>> single_predict(
"
97641,"    n = sqrtf(n);

 #endif

     return n;

 }

 /**
"
19862,"/*

  * Places the `k` smallest elements in `array` in the first `k` indices: `[0..k-1]`

  * Modifies the passed in array *in place*
"
26872,"      queue[count] = element;

       count++;

     }

   }
"
29906,"            var rand = new Random();

             var tolerance = .05;

             HashSet<int> actual = new ();

             for (var i = 0; i < 5000; i++)

             {

                 var k = rand.Next(20000);
"
30430,"    """"""

     assert len(donor_pref) == len(recipient_pref)

     n = len(donor_pref)

     unmatched_donors = list(range(n))
"
10950,"#include <assert.h>

 #include <stdio.h>

 #include <stdlib.h>
"
34259,"    root.left = new TreeNode(2);

     root.right = new TreeNode(3);

     root.left.right = new TreeNode(4);

     root.left.right.right = new TreeNode(5);

     root.left.right.right.right = new TreeNode(6);

     Tree t = new Tree(root);
"
26504,"    save_nd_data(""w21.csv"", W, num_out,

                  features);  // save initial random weights

     kohonen_som_tracer(X, W, N, features, num_out, 0.01);  // train the SOM

     save_nd_data(""w22.csv"", W, num_out,

                  features);  // save the resultant weights

     for (int i = 0; i < max(num_out, N); i++)
"
11333,"int main() {

     int N = 21;

     int A[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 10};
"
17636,"          dp[i][j] = true;

         } else {

           dp[i][j] = dp[i - 1][j];
"
62568,"#include <time.h>       /// for random number generation

 #include <inttypes.h>   /// for int32_t types

 /**

  * @brief Swap numbers by reference(using pointers)
"
12736,"     * use it as the number of digits to compute

      * successive product for

      */

     if (argc == 2)
"
13031,"// function to take hex value as string and return binary value as string

 String hexadecimal_to_binary(String hex_value) {

   // checking for unexpected values

   hex_value = hex_value.trim();

   if (hex_value == null || hex_value == """") {
"
19312,"namespace Algorithms.Tests.Graph.MinimumSpanningTree

 {

     internal class PrimTests

     {

         [Test]
"
10577,"    {

         int temp = *((heap->p) + index);

         *((heap->p) + index) = *((heap->p) + parent);

         *((heap->p) + parent) = temp;

         up_heapify(heap, parent);

     }
"
12149,"        /// <returns>Sum of the subarray between <c>l</c> and <c>r</c> (including <c>l</c> and <c>r</c>).</returns>

         // Editing of query start at node with 1.

         // Node with index 1 includes the whole input subarray.
"
20094,"            }

         }

     }

 }
"
31230,"          swap(heap, rightIndex, rootIndex);

           heapSubtree(rightIndex, lastChild);

         }

       } else if (leftIndex <= lastChild) { // if no right child, but has left child
"
12898,"            // Taken from https://oeis.org/A001462

             var expected = new BigInteger[] {

                 1, 2, 2, 3, 3, 4, 4, 4, 5, 5,

                 5, 6, 6, 6, 6, 7, 7, 7, 7, 8,

                 8, 8, 8, 9, 9, 9, 9, 9, 10, 10,

                 10, 10, 10, 11, 11, 11, 11, 11, 12, 12,
"
19636,"            using (new AssertionScope())

             {

                 query.Count
"
72625," * \f[\beta = \left(X^TXX^T\right)Y\f]

  * \param X feature matrix with rows representing sample vector of features

  * \param Y known regression value for each sample

  * \returns fitted regression model polynomial coefficients
"
12969,"	Insert(root, 95)

 	Insert(root, 105)

 	a := AccessNodesByLayer(root)

 	b := [][]int{{90}, {80, 100}, {70, 85, 95, 105}}

 	if !reflect.DeepEqual(a, b) {
"
33155,"int main() {

     int n = 0;

     /// n stores the input from the user
"
31843,"        public static void ToArrayTest()

         {

             var timeline = new Timeline<string>

             {
"
18704,"}

 //driver code

 void main() {

   int limit = 4000000;

   print(evenFibSum(limit));

 }
"
11303,"    steps: int = 100,

 ) -> float:

     """"""
"
20506," */

 int main()

 {

     /* Intializes random number generator */

     srand(time(NULL));
"
53099,"  const numLength = numbers.length

   numbers = numbers.sort(sortNumbers)

   if (numLength % 2 === 0) {

     median = (numbers[numLength / 2 - 1] + numbers[numLength / 2]) / 2

   } else {
"
29440,"        [](const double x) { return cos(x) * tan(x) * x * x + exp(x); },

         .00001);

     std::cout << ""Test Case 4"" << std::endl;

     std::cout << ""function: cos(x)*tan(x)*x^2 + e^x"" << std::endl;

     std::cout << ""range: [.101, .505]"" << std::endl;
"
25018,"	for i := 0; i < b.N; i++ {

 		f(98, 56)

 	}
"
16698,"    do  // iterate for each step of independent variable

     {

         if (save_to_file && fp)

             fprintf(fp, ""%.4g,%.4g,%.4g\n"", x, y[0], y[1]);  // write to file
"
26197," * in the interval \f$[-2,10]\f$

  * \n Expected result: \f$e\approx 2.71828182845904509\f$

  */

 void test2() {
"
47633,"    {

         [Test]

         public void First50ElementsCorrect()

         {
"
32561,"        if self.hasEmptyField() { return BoardStatus.continues } else { return BoardStatus.draw }

     }

     // MARK: -- Private function's

     private func foundWinInRows(_ playerSymbol: PlayerSymbol) -> Bool {

         for i in 0 ..< self.size {

             var theSameSymbolsInRowCount = 0
"
55376,"   */

   private static boolean subsetSum(int[] arr, int sum) {

     int n = arr.length;
"
33386,"                a[i] = temp % 10;

                 temp = temp / 10;

             }
"
31017,"        ///     space complexity: O(1),

         ///     where n - array length.

         /// </summary>

         /// <param name=""array"">Array to sort.</param>
"
32915,"package Others;

 // Java Program to implement Auto-Complete 

 // Feature using Trie
"
69244,"        c = std::getchar();

     }

     // Keep on extracting characters if they are integers

     // i.e ASCII Value lies from '0'(48) to '9' (57)

     for (; (c > 47 && c < 58); c = std::getchar())
"
45516,"{

     /** Variable Declarations */

     uint32_t sockfd,

         conn;  ///< socket descriptors - Like file handles but for sockets

     char server_msg[10000],

         client_msg[10000];  ///< character arrays to read and store string data
"
27068,"      result = true

     }

     return result

   }
"
11201,"// Example

 // const maxHeap = new BinaryHeap()

 // maxHeap.insert([4])

 // maxHeap.insert([3])
"
18368,"            q = (x - v) * (fx - fw);

             p = (x - v) * q - (x - w) * r;

             q = 2.f * (q - r);

             if (q > 0)

                 p = -p;
"
22806,"            bp_out2 = self.sig(bp_net_j)

             bp_net_k = bp_out2 * self.wkj.T - self.thre_bp3

             bp_out3 = self.sig(bp_net_k)
"
13877,"#include <stdbool.h>

 #include <stdio.h>

 #include ""Graph.h""

 // Return the number of vertices that v is

 // connected to
"
31823,"            {

                 // Find index of the maximum element in

                 // array[0..curr_size-1]

                 var mi = FindMax(array, currSize, comparer);

                 // Move the maximum element to end of current array
"
27281,"                // Going through each element and find correct position for element

                 for (uint64_t i = 0; i < top - 1; i++) {

                     // check for the correct position

                     if (data[i] <= val && val <= data[i + 1]) {

                         pos = i + 1; // assign correct pos to the index var

                         break; // to get out from the loop
"
85214,"{

     if (!is_numeric($octalNumber)) {

         throw new \Exception('Please pass a valid Octal Number for Converting it to a Decimal Number.');

     }

     $decimalNumber = 0;

     $octalDigits   = array_reverse(str_split($octalNumber));
"
25173," * @param c character to search in array `chars`

  * @returns integer denoting position of character in array `chars`

  */

 uint8_t find_idx(const char c) {

     if (c >= 'A' && c <= 'Z') {

         return c - 'A';
"
12714,"export { absVal }
"
20701,"  this.deleteTail = function () {

     this.removeAt(length - 1)

   }
"
13312,"    this.parent = null

   } else {

     this.parent = parent

   }

 }
"
20505,"/**

  * \file

  * \brief [Problem 21](https://projecteuler.net/problem=21) solution

  * \author [Krishna Vedala](https://github.com/kvedala)

  */
"
28092,"   * @param key The number you are looking for

    * @param left The lower bound

    * @param right The upper bound

    * @return the location of the key

    */
"
21265,"            var nonExistantRemoveSucess = testObj.DeleteElement(""F"");

             var resultString = testObj.GetElementByIndex(0) + testObj.GetElementByIndex(1);

             // Assert

             Assert.AreEqual(""HI"", resultString);

             Assert.IsTrue(xRemoveSucess);
"
14059,"    classifier.fit_generator(

         training_set, steps_per_epoch=5, epochs=30, validation_data=test_set

     )
"
25746," */

 function pad (str, bits) {

   let res = str

   while (res.length % bits !== 0) {

     res = '0' + res

   }
"
29948,"        [TestCase(5, 3, 8, 4, ""1101"")]

         public static void TestOperatorOrAndDiffSizes(int t1, int s1, int t2, int s2, string expected)

         {

             // Arrange

             var testObj1 = new BitArray(s1);
"
23102,"    Priority 0: [10, 100, 128]

     Priority 1: [70, 7, 64]

     Priority 2: [1, 5, 4]

     >>> fpq.dequeue()

     10

     >>> fpq.dequeue()
"
24808,"    assert pow(2, 0) == Math.pow(2, 0); // == 1

     assert pow(0, 2) == Math.pow(0, 2); // == 0

     assert pow(2, 10) == Math.pow(2, 10); // == 1024

     assert pow(10, 2) == Math.pow(10, 2); // == 100
"
25694,"            else if(color[it] == color[node]){

                 return false;

             }

         }
"
25340," *      chunkify(""this is a test"", 2)

  */

 function chunkify (str, size) {
"
32266,"    this.epoch = { month: 1, year: 1900 }

     this.monthDays = [31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

     this.monthDaysLeap = [31, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

   }

   printCal (days, startDay, output = value => console.log(value)) {

     output('M   T   W   Th  F   S   Su')
"
77295,"import 'dart:math';

 import 'package:test/test.dart';

 int minimumNumberOfJumps(List<int> array) {

   List<int> jumps = List.generate((array.length), (index) => 1000000000000);

   jumps[0] = 0;

   int length = array.length;
"
19824,"    return 0;

 }

 // By

 //  .----------------.  .----------------.  .----------------.
"
27297,"      }

     }

   }

   /**

    * @brief Utility function to lable the nodes so that heavy chains have a
"
15428,"        for (int j = 0; j < i; ++j) {

             if (a[i] > a[j] && lis[i] < lis[j] + 1) {

                 lis[i] = lis[j] + 1;

             }

         }

     }
"
12961,"    if (root == NULL)

         return nn;

     if (item < root->data)

         root->left = insert(root->left, item);

     else
"
18311," */

 void test()

 {
"
22140,"namespace ciphers {

 /**

  * @brief namespace elliptic_curve_key_exchange

  * @details Demonstration of [Elliptic Curve
"
73994,"                        visited,

                         g_function,

                         close_list_anchor,

                         close_list_inad,

                         open_list,
"
15087,"git-tree-sha1 = ""4036a3bd08ac7e968e27c203d45f5fff15020621""

 uuid = ""ae029012-a4dd-5104-9daa-d747884805df""

 version = ""1.1.3""

 [[ResettableStacks]]

 deps = [""StaticArrays""]

 git-tree-sha1 = ""256eeeec186fa7f26f2801732774ccf277f05db9""
"
17136,"public class NodeStack<Item> {

   /** Entry point for the program. */

   public static void main(String[] args) {

     NodeStack<Integer> Stack = new NodeStack<Integer>();

     Stack.push(3);

     Stack.push(4);
"
32066,"	for cur.left != nil {

 		cur = cur.left

 	}

 	return cur

 }
"
13600,"                ['q'] = 2,

                 ['s'] = 2,

                 ['x'] = 2,

                 ['z'] = 2,

                 ['d'] = 3,

                 ['t'] = 3,
"
21523,"using NUnit.Framework.Internal;

 namespace Algorithms.Tests.Sorters.External

 {

     public static class ExternalMergeSorterTests

     {
"
89993,"}

 // push add value to last index

 func (ll *Stack) push(n interface{}) {

 	newStack := &Node{} // new node
"
16876,"{

     /// <summary>

     /// Floyd Warshall algorithm on directed weighted graph.
"
75296,"  expect(uf.find(2)).toBe(1)

   expect(uf.find(3)).toBe(3)

   expect(uf.find(4)).toBe(3)

   expect(uf.find(0)).toBe(3)

 })

 test('should always change the id of the smaller tree and preserve the id of the larger one', () => {
"
32347,"    this.endSymbol = '*';

   }

   public void add(String str) {
"
87630,"""""""

 Counting Summations

 Problem 76: https://projecteuler.net/problem=76

 It is possible to write five as a sum in exactly six different ways:

 4 + 1
"
22756,"    while (true) {

       sop(""1. Insert\n2. Search\n3. Delete\n4. Quit"");

       try {

         int t = scan.nextInt();

         switch (t) {

           case 1:
"
15367,"                self.output[i][j] = self.img[self.get_y(i)][self.get_x(j)]

     def get_x(self, x: int) -> int:

         """"""

         Get parent X coordinate for destination X

         :param x: Destination X coordinate

         :return: Parent X coordinate based on `x ratio`
"
22333," * are palindrome i.e remove spaces, symbols, punctuations etc

  * and the case of the characters doesn't matter

  *

  * This is one of the questions/projects that we have to solve for the

  * JavaScript Algorithms and Data Structures course on https://www.freecodecamp.org

  *
"
29411,"{

     int v;

     for (v = 0; v < graph->numVertices; v++)

     {

         struct node *temp = graph->adjLists[v];
"
32285,"  expect(uf.connected(3, 0)).toBe(true)

   expect(uf.connected(4, 0)).toBe(true)

   expect(uf.connected(1, 3)).toBe(false)

   expect(uf.connected(1, 4)).toBe(false)
"
25205,"    def test_remove(self) -> None:

         t = self._get_binary_search_tree()

         t.remove(13)

         r""""""

               8

              / \
"
25611,"using System;

 using System.Drawing;

 using Algorithms.Other;
"
33254,"Dictionary *create_dict(void)

 {

     Dictionary *p_dic = malloc(sizeof(Dictionary));

     if (p_dic)
"
20821,"    >>> is_prime(87)

     False

     >>> is_prime(23)

     True

     >>> is_prime(25363)
"
16362,"	c.out = c.out[:len(c.out)-1]

 }
"
32735,"    if l>=r

         return

     end

     max = maximum(arr)
"
12171,"// 		s := args[2]

 // 		for i := 3; i < len(args); i++ {

 // 			s = s + "" "" + args[i]

 // 		}

 // 		if len(args[1]) > len(s) {
"
16724,"# => [""c"",""o""]
"
10539,"    public static class FastSearcherTests

     {

         [Test]

         public static void FindIndex_ItemPresent_IndexCorrect()

         {
"
80261,"   *

    * @return element at the front of the queue

    */

   public int peek() {
"
41757,"        /// <summary>

         ///     Check if timeline contains any of the time of the provided <paramref name=""times""/>.

         /// </summary>

         /// <param name=""times"">The times to checks.</param>

         /// <returns>True if any of the times is stored in the timeline.</returns>

         public bool ContainsTime(params DateTime[] times)
"
54232,"      cur = cur.next;

     }

     Node destroy = cur.next;
"
38190,"    if (n <= mat_size)

         return fib_b[n - 1];

     // F1

     vector<ll> F1(mat_size + 1);
"
26577,"        return catalanArray[n];

     }

     // Main method

     public static void main(String[] args) {

         Scanner sc = new Scanner(System.in);
"
15599,"        }

     }

     return -1;
"
30825,"""""""

 from __future__ import annotations

 import string

 from itertools import cycle, product
"
12445,"  private static void insertAtEnd(int temptop) {

     if (stack.isEmpty()) {

       stack.push(temptop); // If stack is empty push the element

     } else {
"
22870,"        words[i] = (char *)malloc(80 * sizeof(char));

         strcpy(words[i], """");

     }

     /* rewind string */

     p_str = str;
"
31450,"	}

 	

 	/* negative dec*/

 	reference = ""18446744073709551615"";

 	ret = decimal_to_anybase(-1, ""0123456789"");
"
15771,"    {

         if (cur->val == cur->next->val)

             cur->next = cur->next->next;

         else
"
19120,"            var elems = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

             foreach (var i in elems)

             {

                 heap.Push(i);
"
24377,"            };

             Assert.Throws<ArgumentException>(() => PrimMatrix.Solve(matrix, 0));

         }

         [Test]

         public void ValidateMatrix_UnconnectedGraph_ThrowsException()
"
30468,"    private void printPath() {

       if (this == this.previous) {

         System.out.printf(""%s"", this.name);

       } else if (this.previous == null) {

         System.out.printf(""%s(unreached)"", this.name);
"
63451,"            Position = position;

             TraversalCostMultiplier = traverseMultiplier;

         }

         /// <summary>
"
25434,"    /**

      * @brief Algorithm for scheduling CPU processes according to the First Come

      * First Serve(FCFS) scheduling algorithm.

      *

      * @details FCFS is a non-preemptive algorithm in which the process which
"
32408,"            if (a2 != pts2)

             {

                 printMessage(""Player 2 DROPPED A BOAT!"");
"
73176,"                ['u'] = 0,

                 ['y'] = 0,

                 ['h'] = 8,
"
21122,"}
"
32197,"        /// </returns>

         private bool CanMatrixBeUsed(double[,] matrix) => matrix?.Length == RowCount * (RowCount + 1) && RowCount > 1;

         /// <summary>

         ///     To prepare given matrix by pivoting rows.
"
30555,"            // Act

             var expectedOccurrences = new[] { 0, 6, 10 };

             var actualOccurrences = NaiveStringSearch.NaiveSearch(content, pattern);

             var sequencesAreEqual = expectedOccurrences.SequenceEqual(actualOccurrences);

             // Assert
"
46561,"        if (current.left == null) return current; // The key isn't exist, returns the parent

         current = current.left;

       } else if (key > current.data) {

         if (current.right == null) return current;

         current = current.right;

       } else { // If you find the value return it
"
32129,"			if r1 != test.expected1 || r2 != test.expected2 {

 				t.Logf(""FAIL: %s"", test.description)

 				t.Fatalf(""Nodes '%v' and Edges '%v' start from '%d' and end in '%d' ""+
"
71913,"	for i := range subsetSumTestData {

 		t.Run(fmt.Sprintf(subsetSumTestData[i].description), func(t *testing.T) {

 			array := subsetSumTestData[i].array
"
46528,"    print(exchange_sort(unsorted))
"
24581,"{

     float tmp[ARRAY_SIZE][ARRAY_SIZE];

     float max = fabs(m[i][i]);

     int j, k = i;

     for (j = i; j < n; j++)
"
15000,"        System.out.println(findWays(6, 3, 8)); 

         System.out.println(findWays(4, 2, 5)); 

         System.out.println(findWays(4, 3, 5)); 

     }
"
25757,"// exponentiation.go

 // description: Implementation of Modular Exponentiation Algorithm

 // details:

 // A simple implementation of Modular Exponentiation - [Modular Exponenetation wiki](https://en.wikipedia.org/wiki/Modular_exponentiation)

 // author(s) [Taj](https://github.com/tjgurwara99)
"
16474,"    graph.add_edge(0, 7, 8)

     graph.add_edge(1, 2, 8)

     graph.add_edge(1, 7, 11)
"
24326,"    }

     // MST Generation from the 'parent' object

     const graph = new GraphWeightedUndirectedAdjacencyList()
"
83755,"    ///         OEIS: https://oeis.org/A000045.

     ///     </para>

     /// </summary>

     public class FibonacciSequence : ISequence

     {

         /// <summary>
"
24995,"#include <string>     /// for std::string

 #include <vector>     /// for std::vector

 /**

  * @namespace ciphers

  * @brief Algorithms for encryption and decryption
"
67208,"    {

         perror(""Unable to open file 'num.txt'."");

         free(txt_buffer);

         free(sum);
"
85590,"# however every time I run this program, memory exceeded...

 # so I used 4.80 Algorithm in

 # Handbook of Applied Cryptography(CRC Press, ISBN : 0-8493-8523-7, October 1996)
"
83082,"    expect(polynomial.evaluate(-5)).toBe(789)

   })

 })
"
90681," * */

 int atexitCalled = 0;

 /**

  * @brief addMemInfo function add a memory allocation in the memoryInfo list.

  * @details This function creates a new element and add it on top of the list

  * @param memoryInfo Pointer to the doubly linked list used to store all of the allocations
"
48790,"    total = 0

     while j <= n:

         if j % 2 == 0:

             total += j

         i, j = j, i + j
"
18665,"            return false;

         }

     }

     /// check the second diagonal

     for (int i = row, j = col; i <= n - 1 && j >= 0; i++, j--) {
"
17194,"    test(); // Execute the tests

     return 0;

 }
"
91911,"            return true;

         }

     }
"
33247,"    [<TestMethod>]

     [<DataRow(1, 1)>]

     [<DataRow(2, 2)>]

     [<DataRow(3, 6)>]

     [<DataRow(5, 120)>]

     [<DataRow(8, 40320)>]
"
13567,"L List_init(void)

 {

     L list;
"
25992,"    // n = 56 m = 15 return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

     std::cout << ""4th test"";

     std::vector<uint64_t> arr4 = math::n_bonacci::N_bonacci(
"
14354,"                * ((double) matchCount / (double) str1.Length

                    + (double) matchCount / (double) str2.Length

                    + ((double) matchCount - transpositions)

                      / (double) matchCount)
"
29323,"end

 s = 'A man, a plan, a canal: Panama'

 puts is_palindrome(s)

 # Output: true

 # Explanation: ""amanaplanacanalpanama"" is a palindrome.

 s = 'race a car'
"
20392,"    tests::test4();

     tests::test5();

 }
"
72993,"Compute the Volume of a Circular Cylinder.

 # Examples

 ```julia-repl

 julia> vol_circular_cylinder(1, 1)

 3.141592653589793
"
95222,"    1582700

     """"""

     sum_cubes = (n * (n + 1) // 2) ** 2

     sum_squares = n * (n + 1) * (2 * n + 1) // 6

     return sum_cubes - sum_squares
"
11204,"    stack1.append(n)

     while stack1:  # to find the reversed order of post order, store it in stack2

         n = stack1.pop()

         if n.left:

             stack1.append(n.left)

         if n.right:
"
11289,"        case .power: return false

         case .plus, .minus, .times, .divide: return true

         }

     }
"
33073,"      p2 += 1

     else

       p3 += 1

     end
"
25394,"      print(curr_no.toString() + ""->"");

     }

     //condition for odd number
"
49567,"    free(L);

     free(U);

     return 0;

 }"
20836,"  }

 }

 var queue = Queue<String>()
"
16297,"        [Test]

         public void SolveMatrix_Graph1_CorrectAnswer()

         {

             /* Graph

              *       (1)

              *       / \
"
17461,"        return NULL;

     else

         return buildBST(head, NULL);

 }
"
10511,"        /// <summary>

         ///     Perform case 2 of insertion by pushing blackness down from parent.

         /// </summary>

         /// <param name=""node"">Parent of inserted node.</param>

         /// <returns>Grandparent of inserted node.</returns>
"
32056,"          lo++

         }

         hi--

         while (comparator(array[hi], array[pivot]) > 0 && hi !== start) {
"
54396,"                }

             }

         }

         return maxEval
"
23713,"      final tree = Node<String>(-50, -50, 100, 100);

       expect(tree.insert(""a"", Point(-75, 0)), isFalse);

       expect(tree.insert(""b"", Point(75, 0)), isFalse);

       expect(tree.insert(""c"", Point(0, -75)), isFalse);
"
37823,"  }

   private int[][] adjacency() {

     return this._adjacency;

   }
"
16460,"require 'minitest/autorun'

 require_relative './sort_tests'

 require_relative './bogo_sort'
"
77054,"  public String toString() {

     return Arrays.toString(Arrays.stream(this.elements).filter(Objects::nonNull).toArray());

   }

   /**

    * Creates and returns a new Dynamic Array Iterator

    *
"
29121,"# to that value multiply that with the index of the word in the array

 # add the same to the result

 def total_rank(words)

   result = 0
"
19263,"arr2 = [1, 2, 5, 7, 9]

 arr3 = [1, 3, 4, 5, 8]

 print(sorted_arrays_intersection(arr1, arr2, arr3))

 # Output: [1,5]

 arr1 = [197, 418, 523, 876, 1356]
"
14796,"    if (x && y)

     {

         glBegin(GL_LINES);         // draw line segments

         glColor3f(0.f, 0.f, 1.f);  // blue
"
98434,"        [Test]

         public static void ArraySorted(

             [Random(0, 1000, 100, Distinct = true)]

             int n)
"
28642,"    private static Object[][] tableBuilder(String word) {

         Object[][] table = new Object[numberOfRows(word) + 1][keyword.length()];

         char[] wordInChards = word.toCharArray();

         // Fils in the respective numbers

         table[0] = findElements();
"
26070,"    }

     return P

   }
"
26393,"	return """", fmt.Errorf(""stack list is empty"")

 }

 // Length return length of our stack

 func (sl *SList) Length() int {
"
31709,"﻿using System;

 namespace Algorithms.Other

 {

     /// <summary>

     ///     Luhn algorithm is a simple

     ///     checksum formula used to validate
"
15052,"				} else {

 					replaced++

 				}

 				pi = delChar(pi, i-k)

 				pi = pi[:i-k] + strconv.Itoa(replaced) + pi[i-k:]
"
63958,"  print(""x=${solution[0]}, y=${solution[1]}, z=${solution[2]}"");

   Matrix input = Matrix.zeros(10, 3);

   Matrix output = Matrix.zeros(10, 1);

   Random rng = new Random();
"
27786,"    expect(() => binary_to_octal(""-1011a01""), throwsFormatException);

   });

   test(""binary_to_octal of empty string raises error"", () {

     expect(() => binary_to_octal(""""), throwsFormatException);

   });
"
27368,"package graph

 // Assumes that graph given is valid and possible to

 // get a topo ordering.

 // constraints are array of []int{a, b}, representing
"
48216,"      // Printing a warning message if the input is not a valid octal

       // number:

       System.out.println(""Invalid Input, Expecting octal number 0-7"");

       return -1;
"
94942,"    {

         da->items[i] = da->items[i + 1];

     }

     da->size--;

     free(da->items[da->size]);
"
33817,"/*

     Author: Lorenzo Lotti

     Name: Timeline (DataStructures.Timeline<TValue>)

     Type: Data structure (class)

     Description: A collection of dates/times and values sorted by dates/times easy to query.

     Usage:
"
21809,"    }

 }

 // Allocate memory for a node
"
28755,"            TypifyString(word).Equals(TypifyString(ReverseString(word)));

         // Typify string to lower and remove white spaces.

         private static string TypifyString(string word) =>
"
18877,"    NodeStack.setSize(NodeStack.getSize() + 1);

   }

   /**
"
10268,"                    {

                         newNode = new RedBlackTreeNode<TKey>(key, node);

                         node.Left = newNode;

                         break;

                     }

                     else
"
15571,"    E_t[0] = 0;  // edges for current vertex

     V_t[0] = 1;  // list of visited vertices

     for (uint16_t i = 1; i < V; i++)

     {

         E_t[i] = G[i][0];

         path[i] = 0;
"
27360,"      T element = get(index);

       remove(element);

     }
"
12287,"        public static void GetElementByIndex_IndexOutOfRange_ArgumentOutOfRangeExceptionThrown()

         {

             // Arrange

             var list = new SinglyLinkedList<int>();

             // Act
"
95182,"    red = convertToInt(matchValue)

     green = convertToInt(secondLargestComponent + matchValue)

     blue = convertToInt(chroma + matchValue)

   } else if (hueSection > 4 && hueSection <= 5) {

     red = convertToInt(secondLargestComponent + matchValue)
"
27571,"            if (leftIndex < leftLength)

             {

                 output.Write(l);

                 Copy(left, output, leftLength - leftIndex - 1);
"
23532,"		if res == num-1 {

 			return true, nil

 		}

 	}

 	return false, nil
"
12309,"/**

  * \file

  * \brief [Problem 2](https://projecteuler.net/problem=2) solution

  *
"
10113," * The function alphaNumericPlaindrome() receives a string with varying formats

  * like ""racecar"", ""RaceCar"", and ""race CAR""

  * The string can also have special characters

  * like ""2A3*3a2"", ""2A3 3a2"", and ""2_A3*3#A2""
"
14155,"	// We have three choices, all with cost of 1 unit

 	return 1 + min.Int(EditDistanceRecursive(first, second, pointerFirst, pointerSecond-1), // Insert

 		EditDistanceRecursive(first, second, pointerFirst-1, pointerSecond),   // Delete

 		EditDistanceRecursive(first, second, pointerFirst-1, pointerSecond-1)) // Replace

 }
"
28438,"		if !set.In(n) {

 			t.Errorf(""expecting %d to be present in the set but was not; set is %v"", n, set.GetItems())

 		}
"
25448,"    int getCount() const;

 };
"
19602,"    expect(maxContiniousSubarraySum, equals(34));

   });

 }
"
14599," * [C++ Lower Bound](http://www.cplusplus.com/reference/algorithm/upper_bound/)

  * 

  * It is assumed that an integer array is provided

  * and the second parameter is also a integer

  * 

  * @param array of integers
"
19956,"    b2 = big_a * (pmc - aa2)

     a0 = ppmc + aa2

     a1 = -2 * pmpc

     a2 = ppmc - aa2

     filt = IIRFilter(2)

     filt.set_coefficients([a0, a1, a2], [b0, b1, b2])
"
31243,"puts(add_digits(284))

 # # => 5

 #
"
31599,"#include <stdlib.h>

 /**

  * @addtogroup sorting Sorting algorithms
"
82736,"    // Calculate d term, taking care to not divide by zero

     float d =

         dt == 0 ? 0 : ((error - controller->lastError) / dt) * controller->kD;

     controller->lastError = error;

     return p + controller->integral + d;

 }
"
27041,"    // Tests to check if words were added to correct position in tree and also

     // if their frequencies were added correctly

     assert(strcmp(root->word, ""hey"") == 0);

     assert(root->frequency == 1);

     assert(strcmp(root->left->word, ""a"") == 0);
"
21690,"                                            // greater than j + 1, then it

                                             // means the location.

             }

         }

     }
"
79580," ******************************************************/

 function keyFinder (str) { // str is used to get the input of encrypted string

   const wordBank = [
"
33095,"    case '1':

         return ""C"";

     case '0':

         return """";

     default:

         return NULL;
"
16321,"			continue;

 		} 

 		if ((game_table[n1-1] == 'x') || (game_table[n1-1]) == 'o' || (n1== 0)){
"
32763," * @brief   Example function

  * @returns void

  */
"
19519,"    data.push(temp)

   }

   introsort(data, c)
"
18541,"  while (i < str.length) {

     // Case 1.  S[i] == P[j] so we move to the next index in `S` and `P`

     if (str.charAt(i) === word.charAt(j)) {

       i++

       j++
"
23506,"    // MARK: -- Private variable's

     private var playersList: [Player]!

     private var movementsSequence: [Int]!

     private var actualPlayerIndex: Int!

     private var actualPlayer: Player {
"
33730,"// > Guid()

 // 'edc848db-3478-1760-8b55-7986003d895f'
"
12376,"def longest_prefix(input_str: str) -> int:

     """"""

     Prefix-function use case

     Finding longest prefix which is suffix as well

     >>> longest_prefix(""aabcdaabc"")
"
10260," * region by extracting the largest element from it and inserting

  * it into the sorted region.

  *

  * Unlike selection sort,
"
30404,"    expect(iterate([new Vector2(0, 0), new Vector2(1, 0)], 1)[4])

       .toEqual({ x: 1, y: 0 })

   })

 })
"
12014,"        /// <param name=""aNode"">The given node.</param>

         /// <param name=""items"">All items to choose from.</param>

         /// <param name=""capacity"">The maximum weight capacity of the knapsack to be filled.</param>

         /// <param name=""weightSelector"">

         ///     A function that returns the value of the specified item
"
17704,"    int i, j;

     for (i = 0; i < n; i++)

     {

         for (j = 0; j <= n; j++)

         {
"
23778,"    public:

         short a;

         long b;

 };
"
99028,"	var i, j int

 	rune := []rune(clean_text)

 	for i = 0; i < len(rune)/2; i++ {

 		j = len(rune) - 1 - i
"
45101,"    iStack.setEmpty(); 

     cStack.setEmpty();    	

     cout<<""-------intStack----\n"";

     int i;

     for(i=1;i<11;i++) 

         iStack.push(i);
"
31731,"            var simpleObjectInserted = new SimpleObject(""foo"", 1);

             var simpleObjectNotInserted = new SimpleObject(""foo"", 1);

             filter.Insert(simpleObjectInserted);

             Assert.False(filter.Search(simpleObjectNotInserted));
"
15813,"#include <stack>          /// for std::stack

 #include <unordered_map>  /// for std::unordered_map

 #include <vector>         /// for std::vector

 /**
"
32778,"    if (position > -1 && position < length) {

       let current = head

       let previous = 0

       let index = 0

       // Removing first item

       if (position === 0) {
"
10181,"export function cocktailShakerSort (items) {

   for (let i = items.length - 1; i > 0; i--) {

     let j

     // Backwards
"
65507,"    x_numpy = np.linalg.solve(spd_matrix, b)

     # Our implementation.

     x_conjugate_gradient = conjugate_gradient(spd_matrix, b)

     # Ensure both solutions are close to x_true (and therefore one another).

     assert np.linalg.norm(x_numpy - x_true) <= 1e-6

     assert np.linalg.norm(x_conjugate_gradient - x_true) <= 1e-6
"
33118," * @date 2019-07-24

  */

 virtual static void fun()  { }

 static void fun() const { }
"
32945,"    col = int(""0b"" + data[1:3], 2)

     return bin(s[row][col])[2:]

 def function(expansion, s0, s1, key, message):

     left = message[:4]
"
36204,"            // Arrange

             // Act

             var result = Factorial.Calculate(input);

             // Assert

             Assert.AreEqual(expected, result);
"
43194,"    throw new TypeError('Only string arguments are allowed')

   }

   [baseOneCharacters, baseTwoCharacters].forEach(baseString => {

     const charactersInBase = [...baseString]

     if (charactersInBase.length !== new Set(charactersInBase).size) {
"
23624,"/**

  * @namespace tests

  * @brief Testcases to check intersection of Two Arrays.

  */

 namespace tests {
"
30290,"                max = maxHeap.Extract();

                 Assert.AreEqual(max, i + 1);

             }
"
28010,"			t.Errorf(""right child should have value = 5"")

 		}

 		if root.Right.Height != 1 {

 			t.Errorf(""height of right should be 1"")
"
92363,"/* *

 ** Sink operation, delete operation is equivalent to

 ** after an element is assigned to the root element, the sink  operation is performed on the root element

 * @param arr
"
69294,"        /// <param name=""from"">Start node.</param>

         /// <param name=""to"">end node.</param>

         /// <returns>Path from start to end.</returns>
"
26284," * @author Tanmay Joshi

  */

 public class HexToOct {

   /**

    * This method converts a Hexadecimal number to a decimal number
"
20864,"        return 0;

     }

     /* error case */

     return -1;
"
28406,"    }

     selectionSort(arr, size);

     for (uint8_t i = 0; i < size - 1; ++i)
"
28606,"  if (!pattern || !text) {

     return [] // no results

   }

   // lps[i] = length of proper prefix of pattern[0]...pattern[i-1]
"
20886,"        for (int i = 0; i < n; i++) {

             a[i] = np.nextInt();

         }

         sort012(a);}
"
42696,"            adj.get(from).add(to);

         }

         //parent[v1] gives parent of a vertex v1

         int[] parent = new int[v];
"
26049,"    return res;

 }
"
19901,"}
"
30129,"                        .Should()

                         .Be(time);

                     array[i].Value

                         .Should()

                         .Be(value);
"
14436,"type Node struct {

 	Key         int

 	Height      int
"
26627,"  print(list);

 }
"
21741,"        }

     }

     /**
"
14410,"# This is a pure ruby implementation of the radix sort algorithm

 # the function returns collection ordered by ascending

 # Example:

 # pry(main)> radix_sort([6, 22, 43, 16, 0, 15, 9])

 # => [0, 6, 9, 15, 16, 22, 43]

 def radix_sort(array, base = 10)
"
30534,"  @Override

   public void deleteElement(int elementIndex) {

     if (maxHeap.isEmpty())
"
67290,"    }

     return memo.back().back();

 }

 }  // namespace abbreviation

 }  // namespace dynamic_programming

 /**
"
24600,"    if (string[i] == subString[j]) {

       if (j == subString.length - 1) {

         return true;

       }

       i++;

       j++;
"
21644,"    # Can only calculate for positive numbers

     if S < 0

         throw(DomainError(""Input must be greater than zero""))

     end
"
50162,"import { getRGBData } from '../Mandelbrot'

 describe('Mandelbrot', () => {

   it('should produce black pixels inside the set', () => {

     const blackAndWhite = getRGBData(800, 600, -0.6, 0, 3.2, 50, false)

     expect(blackAndWhite[400][300]).toEqual([0, 0, 0]) // black

     const colorCoded = getRGBData(800, 600, -0.6, 0, 3.2, 50, true)
"
28821,"package Sorts;

 import static Sorts.SortUtils.*;

 /**

  * @author Varun Upadhyay (https://github.com/varunu28)

  * @author Podshivalov Nikita (https://github.com/nikitap492)

  * @see SortAlgorithm
"
45524,"}

 /**

  * @brief Main function

  * @param argc commandline argument count (ignored)

  * @param argv commandline array of arguments (ignored)

  * @returns 0 on exit
"
10987,"   * @param blocks: the array with the available memory blocks.

    * @param process: the size of the process.

    * @return the index of the block that fits, or -255 if no such block exists.

    */

   private static int findWorstFit(int[] blockSizes, int processSize) {
"
17483,"public class KnightsTour {

     private final static int base = 12;

     private final static int[][] moves = {{1,-2},{2,-1},{2,1},{1,2},{-1,2},{-2,1},{-2,-1},{-1,-2}}; // Possible moves by knight on chess

     private static int[][] grid;    // chess grid

     private static int total;   // total squares in chess
"
26238," * @brief Function for testing

  * @return N/A

  */
"
33413,"		cout<<""Ա֤ţ""<<endl;  				is>>s.name>>s.id>>s.age;                       	

 		return s;

 }

 void main(){

 		Sales s1(""ſ"",""214198012111711"",40);   		//L1
"
54413,"git-tree-sha1 = ""0e0dc7431e7a0587559f9294aeec269471c991a4""

 uuid = ""d091e8ba-531a-589c-9de9-94069b037ed8""

 version = ""5.0.3+4""

 [[Xorg_libXi_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg"", ""Xorg_libXext_jll"", ""Xorg_libXfixes_jll""]
"
22725,"#!/usr/bin/env bash

 export USER_TOKEN=""""

 """"""

 from __future__ import annotations

 import os
"
22633,"        }

         /// <summary>

         ///     Returns string of the binary representation of given Int.

         /// </summary>
"
29003,"        [Test]

         public static void PeekEmptyQueueThrowsInvalidOperationException()

         {
"
42453," * @tparam T Data type of Arrival time

  * @tparam E Data type of Burst time

  * @param t1 First tuple

  * @param t2 Second tuple

  * @returns true if t1 and t2 are in the CORRECT order

  * @returns false if t1 and t2 are in the INCORRECT order
"
28548,"    }

     // Function to implement Hill Cipher

     static void hillcipher(String message) {

         message.toUpperCase();

         System.out.println(""What do you want to process from the message?"");
"
95271,"      j++

     }

     const newArr = arr.map(e =>

       e.trim().split(' ').map(Number)

     )
"
56474,"puts 'GCD(3, 5) = ' + euclidean_gcd(3, 5).to_s

 puts 'GCD(3, 6) = ' + euclidean_gcd(3, 6).to_s

 puts 'GCD(6, 3) = ' + euclidean_gcd(6, 3).to_s
"
37184,"    assert !isPairedSum(arr, key);

   }

   /**

    * Given a sorted array arr (sorted in ascending order). Find if there exists any pair of elements

    * such that their sum is equal to key.
"
15515," *

  * n! means n × (n − 1) × ... × 3 × 2 × 1

  *

  * For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
"
33919,"  return lps

 }

 /**

  * Returns all indices where pattern starts in text

  * @param {*} text a big text in which pattern string is to find

  * @param {*} pattern the string to find
"
33425,"    waiting_times = [0] * len(duration_times)

     for i in range(1, len(duration_times)):

         waiting_times[i] = duration_times[i - 1] + waiting_times[i - 1]

     return waiting_times
"
31510,"    return (

         root_1.real if not root_1.imag else root_1,

         root_2.real if not root_2.imag else root_2,

     )
"
24426,"      canvas.fillRect(130 + i * 230 - 2, 670 - 170, 4, 170);

     }

     // Disks in stack1
"
27671,"    /// </summary>

     /// <example>

     /// <code>

     /// naive_pattern_search(""ABAAABCDBBABCDDEBCABC"", ""ABC"")

     /// [4, 10, 18]
"
17450,"            }

         }

         return false
"
24245,"  print(someList);

   shuffle(someList);

   print(someList);

   shuffle(someList);
"
78661,"    62229893423380308135336276614282806444486645238749

     30358907296290491560440772390713810515859307960866

     70172427121883998797908792274921901699720888093776

     65727333001053367881220235421809751254540594752243

     52584907711670556013604839586446706324415722155397
"
14214,"        else

             curr_no = (curr_no * 3) + 1;  // condition for odd number

     }

     printf(""1\nNumber of steps: %llu\n"", num_steps);
"
18662,"     * Returns the real part of the complex number.

      *

      * @return The real part of the complex number.

      */
"
78290,"    int num_out = 30;

     std::vector<std::valarray<double>> X(N);

     std::vector<std::vector<std::valarray<double>>> W(num_out);

     for (int i = 0; i < std::max(num_out, N); i++) {

         // loop till max(N, num_out)

         if (i < N) {  // only add new arrays if i < N
"
72916,"               condition samples after first loop.

         """"""

         while True:
"
44415,"}

 /* Create and return a list */

 L List_list(L list, void *val, ...)
"
32986,"    expect(getFib(5), equals(5));

   });

   test(""getFib(n) equals getFib(n - 1) + getFib(n - 2)"", () {

     expect(getFib(7), equals(getFib(6) + getFib(5)));

     expect(getFib(14), equals(getFib(13) + getFib(12)));

   });
"
31012,"            68371, 68389, 68399, 68437, 68443, 68447, 68449, 68473, 68477, 68483, 68489, 68491, 68501, 68507, 68521,

             68531, 68539, 68543, 68567, 68581, 68597, 68611, 68633, 68639, 68659, 68669, 68683, 68687, 68699, 68711,

             68713, 68729, 68737, 68743, 68749, 68767, 68771, 68777, 68791, 68813, 68819, 68821, 68863, 68879, 68881,

             68891, 68897, 68899, 68903, 68909, 68917, 68927, 68947, 68963, 68993, 69001, 69011, 69019, 69029, 69031,
"
19486,"//   'Alpha',

 //   'Bravo',

 //   'Charlie',

 //   'Delta',

 //   'Echo',

 //   'Foxtrot',
"
16472,"        x--

       }

     }

     /**
"
27521,"    assert convert(30, 10).equals(""30"");

     assert convert(30, 16).equals(""1E"");

   }

   /**
"
23090,"                result = 1;

                 printf(""(%.3g) "", eig_vals[j]);

             }

         }
"
29118,"}

 // By

 //  .----------------.  .----------------.  .----------------.

 //  .-----------------.  .----------------.  .----------------.

 // | .--------------. || .--------------. || .--------------. ||

 // .--------------. | | .--------------. || .--------------. | | |  _________ |
"
11456,"export function TopologicalSorter () {

   const graph = {}

   let isVisitedNode

   let finishTimeCount

   let finishingTimeList

   let nextNode
"
32502,"                                                 gradients[j] * learning_rate;

                     }

                 }
"
32611,"    >>> sorted_collection = [(0, 0), (5, 5), (7, 7), (10, 10), (15, 15)]

     >>> item = (5, 5)

     >>> insort_right(sorted_collection, item)

     >>> sorted_collection

     [(0, 0), (5, 5), (5, 5), (7, 7), (10, 10), (15, 15)]
"
13800,"        return True

     for position in get_valid_pos(pos, len(board)):

         y, x = position

         if board[y][x] == 0:
"
41470,"            {

                 query.Count

                     .Should()

                     .Be(2);

                 timeline

                     .Should()
"
12130,"int validEntryLineColumn(int line, char column)

 {

     if ((line >= 1 && line <= 10) && (column >= 65 && column <= 74))
"
33693,"            if index > i:

                 break

             item += partitions[i - index] * sign

             item %= number

         if item == 0:

             return i
"
65939,"using Utilities.Extensions;

 namespace Algorithms.Tests.Numeric.Decomposition

 {

     public class LUTests
"
32504,"// === RUN   ExampleNode

 // --- PASS: ExampleNode (0.00s)

 // goos: linux

 // goarch: amd64
"
11736,"        self.parent = parent

 class BreadthFirstSearch:

     """"""

     # Comment out slow pytests...
"
17194,"Arguments:

  - s - a string =#

 """"""

 function is_palindrome(s) # Named function
"
36438,"#           backtrack called with ()(() 3 2 [""((()))"", ""(()())"", ""(())()""]

 #             backtrack called with ()(()) 3 3 [""((()))"", ""(()())"", ""(())()""]

 #           backtrack return with ()(() 3 2 [""((()))"", ""(()())"", ""(())()"", ""()(())""]

 #         backtrack return with ()(( 3 1 [""((()))"", ""(()())"", ""(())()"", ""()(())""]

 #         backtrack called with ()() 2 2 [""((()))"", ""(()())"", ""(())()"", ""()(())""]
"
18543,"   */

   public int getSize() {

     return size;

   }

 }
"
25519,"                toDelete->left->color = 1;

             }

         }

         toDelete->color = 0;

         return;

     }
"
77811,"int main(){

     f(1);

 }
"
41088,"            var rows = source.GetLength(0);

             var cols = source.GetLength(1);

             var result = new double[rows, cols];

             for (var i = 0; i < rows; i++)
"
27242,"        {

             if(!mapping.ContainsKey(currentValue))

             {

                 throw new ArgumentException(""Current value is not present in this heap."");

             }

             var node = mapping[currentValue]?.Where(x => x.Value.Equals(currentValue)).FirstOrDefault();
"
14074,"            struct node *tmp = p;

             p = p->link;

             free(tmp);

         }

         c = 0;

     }
"
18161,"if __name__ == ""__main__"":

     n = int(sys.argv[1])

     print(f""fibonacci({n}) is {fibonacci(n)}"")
"
25428," *

  * the left and right child node must be 2-node. The 3 items will be merged

  * into a 4-node. In our case the parent can be a 2-node iff it is the root.

  * Otherwise, it must be 3-node or 4-node.

  *
"
35333,"using namespace std;

 #define ARRAY_LEN(a) \

   (sizeof(a) / sizeof((a)[0]))

 void test(int a[8]) {

     cout << ARRAY_LEN(a) << endl;

 }
"
35503,"        /// <param name=""text"">Text to be encoded.</param>

         /// <param name=""key"">Key that will be used to encode the text.</param>

         /// <returns>Encoded text.</returns>
"
57730," */

 namespace data_structures {

 /**

  * @namespace linked_list

  * @brief Functions for singly linked list algorithm

  */
"
12985,"    ///     </para>

     ///     <para>

     ///         References:
"
48784,"}
"
32335,"            int length)

         {

             //Arrange

             var solver = new DynamicProgrammingKnapsackSolver<int>();
"
16389," * width=""400"" alt=""Error evolution during root approximations computed every

  * iteration.""/> <img

  * src=""https://raw.githubusercontent.com/TheAlgorithms/C/docs/images/numerical_methods/durand_kerner_roots.svg""

  * width=""400"" alt=""Roots evolution - shows the initial approximation of the

  * roots and their convergence to a final approximation along with the iterative
"
14327,"		{""Is 1024 a power of 2? - YES"", 1024, true},

 		{""Is 0 a power of 2? - NO"", 0, false},

 		{""Is 9223372036854775807 a power of 2? - NO"", math.MaxInt64, false},
"
17397,"        public static void TestBlackAndWhite()

         {

             Bitmap bitmap = Mandelbrot.GetBitmap(useDistanceColorCoding: false);

             // Pixel outside the Mandelbrot set should be white.
"
76095,"            (numMisses / (double)insertedItems.Count).Should().BeLessOrEqualTo(.05);

         }

     }
"
15212,"                while (

                     self.find_next_state(state, self.adlist[child][""value""]) is None

                     and state != 0

                 ):

                     state = self.adlist[state][""fail_state""]
"
14842,"package genetic

 import (

 	""testing""

 )
"
12161,"            0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,

             0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,

             0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,

             0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,

             0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,

             0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
"
13658,"    if key_size < block_size * 8:

         sys.exit(

             ""ERROR: Block size is %s bits and key size is %s bits. The RSA cipher ""

             ""requires the block size to be equal to or greater than the key size. ""

             ""Either decrease the block size or use different keys.""

             % (block_size * 8, key_size)
"
33133,"			return true;

 		}

 		char chs = src.charAt(svidx);
"
24327,"# Save model (can be loaded again via lgbm.booster.load(filename))

 lgbm.booster.save(handle.booster, filename = ""/tmp/model.txt"")

 # Catboost

 set.seed(1)

 require(titanic)

 require(caret)
"
19875,"	// Graph 2nd:

 	//      1---2

 	//      |

 	//  4---3   0

 	// Min number of colors required = 2
"
64581,"/**

  * function to add two string numbers

  * \param [in] a first number in string to add

  * \param [in] b second number in string to add

  * \returns sum as a std::string
"
21608,"    this.inputStack.push(item)

   }

   dequeue () {
"
39108,"import 'dart:math';

 import 'package:test/test.dart';

 /// we build an array which calculates the min coins for all amounts upto n

 ///

 ///  bottom up approach where we calculate the number of coins used for each

 ///  amount from 1 to n for each coin.
"
10614,"/**

  * Class for calculating the Fast Fourier Transform (FFT) of a discrete signal using the

  * Cooley-Tukey algorithm.
"
21993,"	{

 		""string with no pattern match"",

 		""ABCDEFGHIJKLMN"",

 		""XYZ"",

 		[]int(nil),

 	},
"
20565,"          ......

           ......

           *If you want the order of original array to have the same order as the output array use can change this to decremental for loop

 - STEP 5: Assign the 'ouput' list back to 'x'
"
72322,"		""sitting"",

 		1,

 		1,

 		1,

 		3,
"
19523,"using System;

 using System.Collections.Generic;

 namespace Algorithms.Sorters.Comparison

 {

     /// <summary>

     ///     TODO.
"
10625,"import Foundation

 public class GameModel {

     // MARK: -- Public variable's
"
16659,"        public static void EnqueueFullQueueThrowsInvalidOperationException()

         {

             // Arrange

             var q = new ArrayBasedQueue<int>(1);

             q.Enqueue(0);

             Exception? exception = null;
"
15167,"        {

             for (var i = 0; i < field.Length; i++)

             {

                 field[i] = flag;

             }

         }
"
15726,"}
"
46436," * of two abundant numbers.

  * \returns 1 - if yes

  * \returns 0 - if not
"
10246,"        709,

         719,

         727,

         733,

         739,

         743,
"
23448,"            70271, 70289, 70297, 70309, 70313, 70321, 70327, 70351, 70373, 70379, 70381, 70393, 70423, 70429, 70439,

             70451, 70457, 70459, 70481, 70487, 70489, 70501, 70507, 70529, 70537, 70549, 70571, 70573, 70583, 70589,

             70607, 70619, 70621, 70627, 70639, 70657, 70663, 70667, 70687, 70709, 70717, 70729, 70753, 70769, 70783,

             70793, 70823, 70841, 70843, 70849, 70853, 70867, 70877, 70879, 70891, 70901, 70913, 70919, 70921, 70937,

             70949, 70951, 70957, 70969, 70979, 70981, 70991, 70997, 70999, 71011, 71023, 71039, 71059, 71069, 71081,
"
20744,"      }

       // if i<n-m then hash value of the first character of the text is subtracted and hash value of

       // the next character after the end

       // of the evaluated characters is added to get the hash value of the next window of characters

       // in the text
"
20021,"    expect(cocktailShakerSort([1, 2, 3])).toEqual([1, 2, 3])

     expect(cocktailShakerSort([5, 6, 7, 8, 1, 2, 12, 14])).toEqual([1, 2, 5, 6, 7, 8, 12, 14])

   })

   it('should work for empty arrays, too', () => {
"
12711,"}
"
14389,"package DataStructures.Trees;

 public class SegmentTree {

     private int seg_t[];

     private int n;

     private int arr[];

     
"
44476,"/**

  *

  * \file

  *
"
17012,"        {

             // Arrange

             var items = new[] {'A', 'B', 'C', 'D'};
"
28150,"   * @brief Performs Insertion Sort Algorithm on given array with bounded indices.

    * @param array: The array on which the algorithm is to be performed.

    * @param start_idx: The starting index from which the algorithm is to be performed.

    * @param end_idx: The ending index at which the algorithm needs to stop sorting.

    */

   public void insertion_sort(int[] array, int start_idx, int end_idx) {
"
14743,"    fclose(fp);

     printf(""\nTotal number of names: %lu\n"", COUNT);

     if (method == 0)
"
19671,"git-tree-sha1 = ""ef18e47df4f3917af35be5e5d7f5d97e8a83b0ec""

 uuid = ""8913a72c-1f9b-4ce2-8d82-65094dcecaec""

 version = ""0.3.8""

 [[OffsetArrays]]

 deps = [""Adapt""]
"
26721,"            visited.Add(startVertex);

             foreach (var vertex in graph.GetNeighbors(startVertex))

             {

                 if (vertex == null || visited.Contains(vertex))
"
38604,")

 // SList is our struct that point to stack with container/list.List library

 type SList struct {
"
20597,"  ""9"": ""1001"",

   ""A"": ""1010"",

   ""B"": ""1011"",

   ""C"": ""1100"",

   ""D"": ""1101"",

   ""E"": ""1110"",
"
26082,"#include<iostream>

 #include<typeinfo>

 using namespace std; 

 class B { virtual void fun() {} }; 
"
10639,"    a = map(lambda x: x.rstrip(""\r\n"").split("" ""), triangle)

     a = list(map(lambda x: list(map(lambda y: int(y), x)), a))

     for i in range(1, len(a)):

         for j in range(len(a[i])):

             if j != len(a[i - 1]):
"
52980,"      inOrder(node.left);

     }

     System.out.print(node.data + "" "");
"
21053,"          rotateLeft(x.p);

           x = root;

         }
"
15725,"            public int Read() => storage[offset++];

         }

         private class InMemoryWriter : ISequentialStorageWriter<int>

         {

             private readonly int[] storage;

             private int offset;
"
23338,"/**

  * @file using_global.cpp

  * @brief using各种使用

  * @author 光城

  * @version v1

  * @date 2019-08-07
"
22884,"import random

 def partition(A, left_index, right_index):

     pivot = A[left_index]
"
32768,"   *

    * @param arr the array contains elements

    * @return min value of given array

    */

   public static int min(int[] arr) {

     int min = arr[0];
"
22862,"    n = int(bits, 2)

     return n.to_bytes((n.bit_length() + 7) // 8, ""big"").decode(encoding, errors) or ""\0""

 # Functions of hamming code-------------------------------------------

 def emitterConverter(sizePar, data):

     """"""
"
33070,"version = ""0.7.0""

 [[SharedArrays]]

 deps = [""Distributed"", ""Mmap"", ""Random"", ""Serialization""]
"
14827," * Ex.1. [30,20,40,10,25,35,50] represents level order traversal of a binary search tree. Find ceil for 10.

  * Answer: 20

  *

  * Ex.2. [30,20,40,10,25,35,50] represents level order traversal of a binary search tree. Find ceil for 22

  * Answer: 25

  *
"
29196,"type WeightedGraph [][]float64

 // Defining maximum value. If two vertices share this value, it means they are not connected

 var Inf = math.Inf(1)

 // FloydWarshall Returns all pair's shortest path using Floyd Warshall algorithm

 func FloydWarshall(graph WeightedGraph) WeightedGraph {
"
20577,"            total_max_value += max_value 

             capacity -= weights[index]

         end

         splice!(values, index)

         splice!(weights, index)
"
84722,"    ""mm"" => 0.001,

     ""cm"" => 0.01,

     ""m"" => 1,

     ""km"" => 1000,
"
25881,"#include <stdlib.h>

 #include ""stack.h""

 /*

    actual stack data structure

    This pointer will pointing at the actual field (of void * pointers)
"
14184,"{

     int temp = *first;

     *first = *second;

     *second = temp;

 }

 /*Partition method which selects a pivot
"
32156,"a0==a6 (palindrome of center a3)

 so a4==a6

 so we can say that palindrome at center a5 is at least as long as palindrome at center

 a1 but this only holds if a0 and a6 are inside the limits of palindrome centered at a3

 so finally ..
"
20356," */

 int main()

 {
"
64448,"/**

  * @file

  * @author [@sinkyoungdeok](https://github.com/sinkyoungdeok)
"
10641,"	tmp->bytes += bytes;

 }

 /**

  * @brief malloc_dbg function is a wrapper around the malloc function.
"
48647,"        @test weight_conversion(""short-ton"", ""gram"", 3) == 2721552.0

         @test weight_conversion(""short-ton"", ""milligram"", 1) == 907184000.0

         @test weight_conversion(""short-ton"", ""metric-ton"", 4) ≈ 3.628736
"
33647,"             *        \     / \

              *         6   8   9

              *          \ /     \

              *          (5)--11-(6)

              */
"
19081,"        }

     }

     else if (game_table[1] == game_table[4] && game_table[4] == game_table[7])

     {

         if (game_table[1] == 'x' && game_table[4] == 'x' &&

             game_table[7] == 'x')
"
12468,"    var mid2 = (r - (r - 1) / 3).toInt();

     //Check if key is present at any mid

     if (arr[mid1] == key) return mid1;
"
12608,"		s.Update(2*node+1, mid+1, rightNode, max.Int(firstIndex, mid+1), lastIndex, value)

 		s.SegmentTree[node] = s.SegmentTree[2*node] + s.SegmentTree[2*node+1]

 	}
"
18268,"         */

         System.out.println(data + "" is present in the BST."");

         return true;
"
28344,"        ///     from the <paramref name=""items"">items</paramref> list.

         /// </param>

         /// <param name=""valueSelector"">

         ///     A function that returns the weight of the specified item
"
26893," * @author Varun Upadhyay (https://github.com/varunu28)

  * @author Podshivalov Nikita (https://github.com/nikitap492)

  * @see SortAlgorithm
"
10234,"import { digitSum } from '../DigitSum'

 describe('digitSum', () => {

   it('is a function', () => {

     expect(typeof digitSum).toEqual('function')
"
87759,"    } else {

       if (atPoint.y > _center.y) {

         return _children[_lowerLeftIndex].insert(item, atPoint);

       } else {
"
16131,"    }

 }

 class Solution {

     public String longestPalindrome(String s) {

         if (s == null || s.length() == 0) {
"
88568,"    // 6 C 2 = 30, 30%5 = 0

     assert(ncrObj.ncr(6, 2, 5) == 0);

     // 7C3 = 35, 35 % 29 = 8

     assert(ncrObj.ncr(7, 3, 29) == 6);
"
10924,"   * @return the smaller of {@code a} and {@code b}.

    */

   public static int min(int a, int b) {
"
10794,"		}

 	})

 }
"
15121,"surfarea_sphere(5)  # returns 314.1592653589793

 surfarea_sphere(1)  # returns 12.566370614359172

 surfarea_sphere(-1) # returns DomainError

 ```

 """"""
"
29971,"            <pre>

             3

             4 none

             4 4
"
33543,"class DoubleLinkedListNode {

   // Double Linked List Node built specifically for LRU Cache

   constructor (key, val) {

     this.key = key
"
31976,"func TestTablePairApproach(t *testing.T) {

 	var tests = []struct {

 		name     string
"
16925,"#include <thread>

 #include <chrono>

 using namespace std::chrono;

 using namespace std;
"
33876,"                throw new ArgumentOutOfRangeException(nameof(hue), $""{nameof(hue)} should be between 0 and 360"");

             }

             if (saturation < 0 || saturation > 1)

             {
"
24585,"            if (Tail is null)

             {

                 Head = null;

                 Count = 0;

                 return;

             }
"
16686,"  # Finding the block where element is

   # present (if it is present)

   while arr[[step, n].min - 1] < x
"
14338," */

 public class OctalToHexadecimal {

   /**

    * This method converts a Octal number to a decimal number

    *

    * @param s The Octal Number
"
79399," * Builds a Segment tree

  * It is assumed that leaves of tree already contains data.

  * @param tree pointer to segment tree to be build

  */

 void segment_tree_build(segment_tree *tree)
"
24282," * \see ode_midpoint_euler.c, ode_semi_implicit_euler.c

  */

 #include <math.h>

 #include <stdio.h>

 #include <stdlib.h>
"
33351,"[[SimpleTraits]]

 deps = [""InteractiveUtils"", ""MacroTools""]

 git-tree-sha1 = ""5d7e3f4e11935503d3ecaf7186eac40602e7d231""

 uuid = ""699a6c99-e7fa-54fc-8d76-47d257e15c1d""

 version = ""0.9.4""

 [[Sockets]]
"
17616,"        /// <param name=""weightSelector"">Maps item to its weight.</param>

         /// <param name=""valueSelector"">Maps item to its value.</param>

         /// <returns>Items that were chosen.</returns>

         T[] Solve(T[] items, double capacity, Func<T, double> weightSelector, Func<T, double> valueSelector);
"
11453,"}

 export { rot13 }

 // > rot13('Uryyb Jbeyq')
"
13531,"# Challenge name: Roman to Integer

 #

 # Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

 #
"
17217,"      b.toString() +

       "" is "" +

       lcm(a, b).toString());

   //Test case2:

   a = 12;
"
60794,"        int minimum = (*vec)[low];

         int minimumindex = low;

         int maximum = (*vec)[high];

         int maximumindex = high;

         for (int i = low; i <= high; i++) {
"
65602,"    closeFile(file);     // closes test file

     remove(""file.txt"");  // deletes test file from storage

     file = fopen(""wordcount.txt"", ""a"");  // creates write file

     fprintf(file, ""%-5s \t %9s \t %s \n"", ""S/N"", ""FREQUENCY"",

             ""WORD"");  // prints the heading to `wordcount.txt`

     writeContentOfTreeToFile(
"
23963,"            var q = new ArrayBasedQueue<int>(1);

             q.Enqueue(0);

             Exception? exception = null;
"
71392,"    for (let i = arguments.length - 1; i >= 0; i--) {

       const p = arguments[i]

       if (p >= length) throw new Error('Index out of bounds. The maximum index can be length-1')

     }

   }

 }
"
11340,"  }

   ArrayList<Edge> edgeList;

   ArrayList<Node> nodeList;
"
10042,"version = ""1.6.4""

 [[StochasticDiffEq]]

 deps = [""ArrayInterface"", ""DataStructures"", ""DiffEqBase"", ""DiffEqJump"", ""DiffEqNoiseProcess"", ""DocStringExtensions"", ""FillArrays"", ""FiniteDiff"", ""ForwardDiff"", ""LinearAlgebra"", ""Logging"", ""MuladdMacro"", ""NLsolve"", ""OrdinaryDiffEq"", ""Random"", ""RandomNumbers"", ""RecursiveArrayTools"", ""Reexport"", ""SparseArrays"", ""SparseDiffTools"", ""StaticArrays"", ""UnPack""]

 git-tree-sha1 = ""d9e996e95ad3c601c24d81245a7550cebcfedf85""

 uuid = ""789caeaf-c7a9-5a7d-9973-96adeb23e2a0""

 version = ""6.36.0""
"
11904,"    let diff = 0

     while (startDate.year !== endDate.year) {

       diff += (this.isLeapYear(startDate.year)) ? 366 : 365

       startDate.year = startDate.year + 1
"
30242,"  int currentWeight = weights[numberOfItems - 1];

   if (weights[numberOfItems - 1] <= capacity) {

     return max(
"
12686,"                combined_roots_list.append((j, False))

                 j = j.parent

         # Insert links between them

         for i in range(len(combined_roots_list) - 1):

             if combined_roots_list[i][1] != combined_roots_list[i + 1][1]:
"
16187," * and save to disk.

  *

  * \param [in] fname filename to save in (gets overwriten without confirmation)
"
23030,"    else head.previous = newLink; // newLink <-- currenthead(head)

     newLink.next = head; // newLink <--> currenthead(head)

     head = newLink; // newLink(head) <--> oldhead

     ++size;

   }

   /**
"
30832,"    *r = sqrt(x * x + y * y);

     if (x != 0)

     {

         if (y != 0)

         {
"
21290,"    }

   }

 }
"
61351,"// If a target is found, the index of the target is returned. Else the function return -1 and ErrNotFound.

 func Binary(array []int, target int, lowIndex int, highIndex int) (int, error) {

 	if highIndex < lowIndex || len(array) == 0 {
"
12087," */

 void Tnode::SearchSuggestions(const std::string &key) {

     Tnode *cur_pos = nullptr, *prev_pos = nullptr;

     cur_pos = prev_pos = this;  // maintaining 2 pointers, initialized to root
"
61244," * @brief Functions for the [Subset

  * sum](https://en.wikipedia.org/wiki/Subset_sum_problem) implementation

  */
"
19917,"    public var isEmpty: Bool {

         return elements.isEmpty

     }

     

     public var count: Int {

         return elements.count
"
72409,"			name:   ""left is min"",

 			left:   1,

 			middle: 5,
"
44731,"  expect(hammingDistance('abc', 'add')).toBe(2)

 })

 test('should calculate difference between two strings', () => {

   expect(hammingDistance('1011101', '1001001')).toBe(2)

 })
"
35849," * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

  */

 void main() {

   int number = 21;

   LOOP:

   while (true) {
"
22544,"/**

  * @brief   Print list function

  * @param   list    a doubly linked List

  * @returns void

  */

 void print(List *list)
"
11296,"    assert skip_list.find(""V"") is None

     assert skip_list.find(""X"") is None

     assert skip_list.find(""Key1"") is None
"
24546," * \f}

  * The exact solution for the above problem is:

  * \f{eqnarray*}{

  * u(x) &=& \cos(x)\\

  * v(x) &=& -\sin(x)\\

  * \f}
"
26036,"import java.util.Scanner;

 public class MatrixChainMultiplication {

   private static Scanner scan = new Scanner(System.in);
"
35170,"        ///     Returns element if it compares larger to the top/root of the heap, else

         ///     inserts element into the heap and returns the top/root of the heap.

         /// </summary>

         /// <param name=""element"">The element to check/insert.</param>

         /// <returns>element if element compares larger than top/root of heap, top/root of heap otherwise.</returns>

         public T PushPop(T element)
"
25366,"        {

             comparer = customComparer;

         }

         /// <summary>

         ///     Add a single node to the tree.
"
11620,"    printf(""Time spent sorting: %.4g s\n"", (t2 - t1) / CLOCKS_PER_SEC);

     free(array);

     return 0;

 }
"
81663,"    list.insert(3);

     list.insertNth(1, 4);

     assert list.toString().equals(""10->7->5->3->1"");

     /* Test search function */
"
22123,"                a[i] = a[j];

                 a[j] = temp;

             }

         }
"
61244,"  } else if (hueSection > 2 && hueSection <= 3) {

     red = convertToInt(matchValue)

     green = convertToInt(chroma + matchValue)

     blue = convertToInt(secondLargestComponent + matchValue)

   } else if (hueSection > 3 && hueSection <= 4) {
"
94889,"uuid = ""8197267c-284f-5f27-9208-e0e47529a953""

 version = ""0.5.3""

 [[IterTools]]
"
20223," */

 #include <math.h>

 #include <stdio.h>

 #include <stdlib.h>
"
85062,"s = 'leetcodeisacommunityforcoders'

 puts(remove_vowels(s))

 # => ""ltcdscmmntyfrcdrs""

 s = 'aeiou'

 puts(remove_vowels(s))
"
22706,"}
"
31234,"				t.Errorf(""failed %s: %v"", tc.name, tc.edges)

 			}

 		})

 	}
"
61033,"        }

         [Test]

         public static void Peek_EmptyHeap_ThrowsCorrectException()

         {

             var heap = new BinaryHeap<int>();

             Assert.Throws<InvalidOperationException>(() => heap.Peek());
"
28558,"                    node.Key = successor.Key;

                 }

                 else

                 {

                     var predecessor = GetMax(node.Left);
"
28631,"    mysvm.fit()

     plot_partition_boundary(mysvm, train_data, ax=ax)

 def plot_partition_boundary(
"
33174,"    /// initialise all nodes with empty lists.

     /// each node will have a list as value which stores

     /// the nodes to which it is connected to

     for (int i = 0; i < this.nodes.length; i++) {
"
52442,"    int num_weights; /**< number of weights of the neural network */

 };

 /** convergence accuracy \f$=1\times10^{-5}\f$ */

 #define ADALINE_ACCURACY 1e-5

 /**

  * Default constructor
"
26314,"    int rear;

 };

 Queue queue;

 void enqueue(node *n) { queue.t[queue.rear++] = n; }

 node *dequeue() { return (queue.t[queue.front++]); }

 void Insert(node *n, int x) {
"
14450,"            var intComparer = new IntComparer();

             var (correctArray, testArray) = RandomHelper.GetArrays(n);

             // Act
"
19753,"  'Thirty',

   'Forty', // [It's 'Forty' NOT 'Fourty'](https://www.grammarly.com/blog/forty-fourty/)

   'Fifty',

   'Sixty',
"
29473,"{

     int i;

     for (i = 0; i < len; i++) printf(""%3d "", arr[i]);

     printf(""\n"");

 }

 void swap(int *a, int *b)
"
29377,"}

 // Driver Function

 int main()
"
18206,"    const meanFunction = mean([1, 2, 4, 5])

     expect(meanFunction).toBe(3)

   })

 })
"
30159,"  }

   // Driver code

   public static void main(String args[]) {
"
21234,"                dict_of_neighbours[line.split()[0]] = _list

             else:

                 dict_of_neighbours[line.split()[0]].append(
"
68296,"      if the tile is water

         return

       make tile water(flood tile)

       invoke flood on the neighbor coordinates

     iterate over the matrix (col, row)
"
20735,"  if (str.length === 1 || str.length === 0) {

     return true

   }

   if (str[0] !== str[str.length - 1]) {

     return false
"
75630,"// FrontQueue return the Front value

 func FrontQueue() interface{} {

 	return ListQueue[0]

 }
"
18554,"};

 // Structure for storing a graph

 struct Graph

 {
"
45613,"    {

         perror(""Unable to open file"");

         return -1;

     }

     /*

      * Loops to get total number of rows and columns in the file
"
22942,"# 6          5.4         3.9          1.7         0.4  setosa

 iris<-iris[,-5]

 head(iris)

 # Sepal.Length Sepal.Width Petal.Length Petal.Width

 # 1          5.1         3.5          1.4         0.2

 # 2          4.9         3.0          1.4         0.2
"
36500,"            }

             // Regular binary tree insertion

             var node = Add(root, key);

             // Get which side child was added to
"
16777,"// quickSelectSearch(arr, 7) // [ 19, 5, 21, 41, 28, 66, 333, 7777, 11110, 1121111 ]
"
61088," * Utility-method to render the Koch snowflake to a canvas.

  *

  * @param vectors The vectors defining the edges to be rendered.

  * @param canvasWidth The width of the canvas.

  * @param canvasHeight The height of the canvas.
"
31425,"              if (G[i][j] == 0)

                   G[i][j] = INF;

           }

       }

       prim(&(*G),&(*MST),V);

       printf(""minimum spanning tree:\n"");
"
33130,"        @test isleaf(tree,2) == false

         @test ch(tree,1,true) == 3

         @test tree.val[left(tree)] == 50

         @test height(tree) == 2
"
11243,"    // 2- make the os point to the next of the  @var{availableNodeIndex}

     int availableNext = cursorSpace[availableNodeIndex].next;

     cursorSpace[os].next = availableNext;

     // this to indicate an end of the list , helpful at testing since any err

     // would throw an outOfBoundException
"
47662,"        Complex w = new Complex(1, 0);

         for (int j = 0; j < len / 2; j++) {

           Complex u = x.get(i + j);

           Complex v = w.multiply(x.get(i + j + len / 2));

           x.set(i + j, u.add(v));
"
48733,"    }

     assert list.count() == 5;

   }

   /**

    * Calculate the count of the list manually using recursion.

    *
"
29870,"    grid_hash = Hash.new(0)

     board.first(3).each do |row|

       next if row[i] == '.'

       grid_hash[row[i]] += 1
"
29294,"export { levenshteinDistance }
"
24679,"end

 """"""

     factorial_recursive(n)

 Finds factorial of anumber using recursive method

 # Example
"
11126," * @{

  */

 /**

  * Function to convert given Euler angles to a quaternion.

  * \f{eqnarray*}{
"
27035,"        a[i] = j;

     }

     free(beads);

 }
"
14782,"    var description: String { name }

 }

 extension Kruskal.Edge: CustomStringConvertible {

     var description: String { ""\(from) --(\(weight))-- \(to)"" }

 }
"
92534,"    const max = this.heap[0]

     const tmp = this.heap.pop()

     if (!this.empty()) {
"
79037,"            }

         }

     }

 }
"
26022,"    cursorSpace = new Node[CURSOR_SPACE_SIZE];

     for (int i = 0; i < CURSOR_SPACE_SIZE; i++) {

       cursorSpace[i] = new Node<>(null, i + 1);

     }

     cursorSpace[CURSOR_SPACE_SIZE - 1].next = 0;
"
22248,"export function quickSelectSearch (array, k) {

   if (!array || array.length <= k) {

     throw new Error('Invalid arguments')
"
18694," * \f}

  * \param[out] data matrix to store data in

  * \param[in] N number of points required

  */

 void test_lamniscate(double *const *data, int N)

 {
"
16587,"	}

 }
"
29363,"      newElement = num / 2

     } else {

       newElement = (3 * num) + 1
"
50920,"package DynamicProgramming

 /** An implementation of famous dynamic programming Coin Change Problem Problem Statement: Given an amount and a

   * list of coin change, find number of possible combinations to get the amount

   */

 object CoinChange {

   /** @param coins
"
25589,"    let parentPriority = Infinity

     if (parentPos >= 0) {

       parentPriority = this._heap[parentPos][1]

     }
"
13108,"    # ""extended trapezoidal rule""

     # int(f) = dx/2 * (f1 + 2f2 + ... + fn)

     h = (boundary[1] - boundary[0]) / steps

     a = boundary[0]
"
22076,"        values[i] = Character.toUpperCase(values[i]);

       }

     }

     return new String(values);

   }

 }
"
12385,"        size++;

         return;

       }

       if (hash + 1 < hsize) {

         hash++;
"
29012,"	free(iptr);

 	// free(cptr);

 	return 0;

 }
"
28068,"    }

     // Print out value

     output(this.value)

     // Recursively go right

     if (this.right !== null) {

       this.right.visit()
"
28864,"import { mean } from '../AverageMean'

 describe('Tests for average mean', () => {

   it('should be a function', () => {

     expect(typeof mean).toEqual('function')
"
97659,"        ///     Gets an enumerable based on the data in the list reversed.

         /// </summary>

         /// <returns>The data in the list in an IEnumerable. It can used to create a list or an array with LINQ.</returns>

         public IEnumerable<T> GetDataReversed()

         {

             var current = Tail;
"
30739,"  1. The conversion will start from Least Significant Digit (LSB) to the Most Significant Bit (MSB).

   2. We divide the bits into sections of 4-bits starting from LSB to MSB.

   3. If the MSB get less than 4 bits, then we pad 0s to the front of it.

   For Example:

   Binary String = '1001101'
"
22646,"        }

     }

     /**

      * Method to calculate Lowest Common Ancestor
"
26979,"    number = Random.rand(1..1000)

   end

   number

 end

 def main()

   puts ""Enter the message you want to encrypt and decrypt with RSA algorithm: ""
"
20437,"	newMemInfo->bytes = bytes;

 	newMemInfo->line = line;

 	newMemInfo->fileName = filename;
"
16046,"    return nil

     }

       guard head.next != nil else {
"
17622,"/**

  * Loops through each pair of adjacent vectors.

  *

  * Each line between two adjacent vectors is divided into 4 segments by adding 3 additional vectors in-between the

  * original two vectors. The vector in the middle is constructed through a 60 degree rotation so it is bent outwards.

  *
"
13319,"                // but there are rounding errors

                 (s[i] - s[i - 1]).Should().BeLessThan(1);

             }
"
23347,"  public SinglyLinkedList(Node head, int size) {

     this.head = head;

     this.size = size;

   }

   /**
"
18738,"package DataStructures.DisjointSets;

 public class DisjointSets<T> {

     public Node<T> MakeSet(T x) {
"
23034," * @param *p : used as a pointer variable of stack

  * @returns x or \0 on exit

  */
"
17008,"	if (*root).Key < key {

 		Insert(&(*root).Right, key)

 	} else if (*root).Key > key {
"
22218,"    public double getImaginary() {

       return img;

     }

     /**
"
24231,"# @param {Integer[]} arr3

 # @return {Integer[]}

 def sorted_arrays_intersection(arr1, arr2, arr3)
"
20933,"    nums.unshift('removed')

     result_length -= 1

     shift_length += 1

   end

   nums.shift(shift_length)

   result_length
"
24671," * 尽管虚函数表vtable是在编译阶段就已经建立的，但指向虚函数表的指针vptr是在运行阶段实例化对象时才产生的。 如果类含有虚函数，编译器会在构造函数中添加代码来创建vptr。 问题来了，如果构造函数是虚的，那么它需要vptr来访问vtable，可这个时候vptr还没产生。 因此，构造函数不可以为虚函数。

  * 我们之所以使用虚函数，是因为需要在信息不全的情况下进行多态运行。而构造函数是用来初始化实例的，实例的类型必须是明确的。

  * 因此，构造函数没有必要被声明为虚函数。

  * 尽管构造函数不可以为虚函数，但是有些场景下我们确实需要 “Virtual Copy Constructor”。 “虚复制构造函数”的说法并不严谨，其只是一个实现了对象复制的功能的类内函数。 举一个应用场景，比如剪切板功能。 复制内容作为基类，但派生类可能包含文字、图片、视频等等。 我们只有在程序运行的时候才知道我们需要复制的具体是什么类型的数据。

  *

  * @author 光城
"
19891,"    e.v = 4;

     e.w = 2;

     insertEdge(g, e);
"
74325,"    Link current = head;

     while (current.value != x) { // Find the position to delete

       if (current != tail) {

         current = current.next;

       } else { // If we reach the tail and the element is still not found
"
24818,"      return cache[arg]

     }

     /**

      * If the argument is not yet present in the cache,
"
33636,"# Approach 2: Use Ruby .count()

 #

 # Time Complexity: O(n^2)
"
13810,"        // The only option left is rotation.

         Node *greatGrandParent = grandParent->par;

         // Right Case

         if (grandParent->right == parent)

         {
"
24337,"   *

    * @param data the value that needs to be searched for

    * @return boolean representing if the value was find

    */
"
28859,"    dst_xy = np.sqrt((np.square(dst_x)) + (np.square(dst_y)))

     dst_xy = dst_xy * 255 / np.max(dst_xy)

     dst = dst_xy.astype(np.uint8)

     theta = np.arctan2(dst_y, dst_x)

     return dst, theta
"
10178,"	return true

 }
"
32447,"  const arrRev = [...arr]

   // you can use arrRev.reverse() to reverse the array

   // or else you can use the below method

   // iterate through the arr and check the condition of palindrome

   for (let i = 0; i < arr.length; i++) {

     if (arr[i] !== arrRev[arr.length - 1 - i]) {
"
34229,"  /**

    * Insert an element at the tail of the list

    *

    * @param data element to be added

    */

   public void insert(int data) {
"
30196,"    /* move the head to point to the new node */

     (*head_ref) = new_node;

 }

 // A utility function to print a given linked list

 void printList(struct Node *ptr)
"
29343,"	""XVIII"": 18, ""XIX"": 19, ""XX"": 20, ""XXXI"": 31, ""XXXII"": 32,

 	""XXXIII"": 33, ""XXXIV"": 34, ""XXXV"": 35, ""XXXVI"": 36, ""XXXVII"": 37,

 	""XXXVIII"": 38, ""XXXIX"": 39, ""XL"": 40, ""XLI"": 41, ""XLII"": 42,

 	""XLIII"": 43, ""XLIV"": 44, ""XLV"": 45, ""XLVI"": 46, ""XLVII"": 47,

 	""XLVIII"": 48, ""XLIX"": 49, ""L"": 50, ""LXXXIX"": 89, ""XC"": 90,

 	""XCI"": 91, ""XCII"": 92, ""XCIII"": 93, ""XCIV"": 94, ""XCV"": 95,
"
14832,"  }

 }

 export { Graph }
"
18972,"using Algorithms.Graph;

 using DataStructures.Graph;

 using NUnit.Framework;
"
66542,"func postOrderRecursive(n *Node, traversal *[]int) {

 	if n == nil {

 		return

 	}

 	postOrderRecursive(n.left, traversal)
"
20174,"            game_table[8] == 'o')

         {

             return -2;

         }
"
13067," * r &\in& [1-\delta r, 1+\delta r)\\

  * \theta &\in& [0, 2\pi)\\

  * x &=& r\cos\theta\\

  * y &=& r\sin\theta

  * \f}

  *
"
73375,"   *

    * @param a array of LinkedList

    * @param N size of array
"
33223,"    double *y = &(Y0[0]);

     printf(""Finding exact solution\n"");

     clock_t t1 = clock();

     do

     {
"
32279,"#

 # Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

 #
"
27938,"                              double alpha, int R)

 {

     int x, y, k;

     double d_min = 0.f;

 #ifdef _OPENMP
"
30563," * @brief [Decimal to any-base](http://codeofthedamned.com/index.php/number-base-conversion) is a C function wich convert positive decimal

  * integer to any positive ascii base with the base's alphabet given in input and return it in a dynamically allocated string(recursive way)

  */
"
15220,"public struct Player {

     // MARK: -- Public variable's

     public var type: PlayerType

     public var symbol: PlayerSymbol

     // MARK: -- Public function's

     public init(type: PlayerType, symbol: PlayerSymbol) {
"
32424,"    return result

 end
"
28498,"    >>> n.calculate_heuristic()

     2

     >>> l = [k, n]

     >>> n == l[0]

     False
"
16600,"    /**

      * The very first call to quicksort

      * this initiates sort routine

      */

     quickSort(0, len, maxDepth)
"
98601,"    if (InSameUnion(1, 2)) {

         cout << ""Fail"" << endl;

     }

     Union(1, 2);
"
27119,"        ++minute;

         if(minute>=60){

             minute=0;
"
11178,"strs = %w[10 0 1]

 m = 1

 n = 1

 puts find_max_form(strs, m, n)
"
13538,"        X[i][3] = x0 * x0;

         X[i][4] = x1 * x1;

         X[i][5] = x2 * x2;

         Y[i] = (x0 * x0 + x1 * x1 + x2 * x2) <= 1 ? 1 : -1;

     }

     printf(""------- Test 3 -------\n"");
"
87656,"    doctest.testmod()
"
24713,"""""""

 This is pure Python implementation of interpolation search algorithm

 """"""

 def interpolation_search(sorted_collection, item):

     """"""Pure implementation of interpolation search algorithm in Python

     Be careful collection must be ascending sorted, otherwise result will be
"
13631,"        private void HeapifyDown(int elemIdx)

         {

             var left = 2 * elemIdx + 1;

             var right = 2 * elemIdx + 2;

             var leftLargerThanElem = left < Count && comparer.Compare(data[elemIdx], data[left]) < 0;

             var rightLargerThanElem = right < Count && comparer.Compare(data[elemIdx], data[right]) < 0;
"
11762,"   * image-coordinates that refer to the pixels and figure-coordinates that refer to the complex

    * numbers inside and outside the Mandelbrot set. The figure-coordinates in the arguments of this

    * method determine which section of the Mandelbrot set is viewed. The main area of the Mandelbrot

    * set is roughly between ""-1.5 < x < 0.5"" and ""-1 < y < 1"" in the figure-coordinates.

    *

    * @param imageWidth The width of the rendered image.
"
26522,"# Complexity Analysis

 #

 # Time Complexity: O(n), where n is the total length of all of the

 # input arrays.

 # Space Complexity: O(1), as we only initiate three integer variables
"
18162," * initial value. It is the most basic explicit method for numerical integration of ordinary

  * differential equations. The method proceeds in a series of steps. At each step the y-value is

  * calculated by evaluating the differential equation at the previous step, multiplying the result
"
11009,"	n.Insert(insert...)

 	// Reset timer and run benchmark for finding non existing

 	b.ResetTimer()

 	for i := 0; i < b.N; i++ {

 		n.Find(""0.3213213244346546546546565465465"") // does not exists

 	}
"
31166,"            boolean resS = false;

             if (isValid(word)) resS = obj.search(word);

             else sop(""Invalid string: allowed only a-z"");

             if (resS) sop(""word found"");
"
20808,"        sum += factorial;

         originalNumber /= 10;

     }

     return number == sum;

 }
"
31417,"            var sequence = new MakeChangeSequence().Sequence.Take(test.Length);

             sequence.SequenceEqual(test).Should().BeTrue();

         }

     }

 }
"
18672,"    }

   }

   return is_negative ? -1 * decimal_val : decimal_val;

 }
"
60915,"            }

             printf(""%.3f %.3f c\n"", (pts[j].x - cx) * scale + W / 2,

                    (pts[j].y - cy) * scale + H / 2);
"
28539,"    assert pow(10, 2) == Math.pow(10, 2); // == 100

   }

   /**
"
21864," * @param hex Hexadecimal number to convert.

  * @returns A pointer to the converted octal string.

  */
"
14683,"  })

   it('should give error on non-numeric arguments', () => {

     expect(() => extendedEuclideanGCD('240', 46)).toThrowError(new TypeError('Not a Number'))
"
19446,"            19219, 19231, 19237, 19249, 19259, 19267, 19273, 19289, 19301, 19309, 19319, 19333, 19373, 19379, 19381,

             19387, 19391, 19403, 19417, 19421, 19423, 19427, 19429, 19433, 19441, 19447, 19457, 19463, 19469, 19471,

             19477, 19483, 19489, 19501, 19507, 19531, 19541, 19543, 19553, 19559, 19571, 19577, 19583, 19597, 19603,

             19609, 19661, 19681, 19687, 19697, 19699, 19709, 19717, 19727, 19739, 19751, 19753, 19759, 19763, 19777,

             19793, 19801, 19813, 19819, 19841, 19843, 19853, 19861, 19867, 19889, 19891, 19913, 19919, 19927, 19937,

             19949, 19961, 19963, 19973, 19979, 19991, 19993, 19997, 20011, 20021, 20023, 20029, 20047, 20051, 20063,
"
12813,"    """"""

     Inplace implementation of the MSD radix sort algorithm.

     Sorts based on the binary representation of the integers.
"
22711,"        merge_sort!

         quick_sort!

         selection_sort!

     ]

     for f in sorts
"
11588,"            67651, 67679, 67699, 67709, 67723, 67733, 67741, 67751, 67757, 67759, 67763, 67777, 67783, 67789, 67801,

             67807, 67819, 67829, 67843, 67853, 67867, 67883, 67891, 67901, 67927, 67931, 67933, 67939, 67943, 67957,

             67961, 67967, 67979, 67987, 67993, 68023, 68041, 68053, 68059, 68071, 68087, 68099, 68111, 68113, 68141,
"
18650,"    }

     // Do binary search in middle column.

     // Condition to terminate the loop when the 2 desired rows are found.

     int i_low = 0, i_high = n - 1, j_mid = m / 2;

     while ((i_low + 1) < i_high)

     {
"
72125,"            var condition = node.Left is not null && node.Level - node.Left.Level != 1;

             return !condition;

         }

         /// <summary>

         ///     Checks if right node's level is either equal to or one less than node's level.

         /// </summary>
"
19539,"        /// <summary>

         ///     Checks whether current queen can be placed in current position,

         ///     outside attacking range of another queen.
"
20800,"List<double> solve(Matrix x, List<double> y) {

   if (x.nColumns != y.length) {

     throw new MatrixDimensionError();
"
24412,"{

     int *range;

     int length;
"
21134,"    *first = *second;

     *second = temp;

 }

 // Function sort the array using Cycle sort
"
32914,"    if (index >= heap->count)

         return;

     int left = index * 2 + 1;

     int right = index * 2 + 2;

     int leftflag = 0, rightflag = 0;
"
22753,"export function insertionSort (unsortedList) {

   const len = unsortedList.length

   for (let i = 1; i < len; i++) {

     let j

     const tmp = unsortedList[i] // Copy of the current element.

     /* Check through the sorted part and compare with the number in tmp. If large, shift the number */
"
96926,"int pop(struct Stack *stack)

 {

     if (stack->top == -1)
"
33031,"        /// </summary>

         /// <param name=""array"">Array to sort.</param>

         /// <param name=""comparer"">Compares elements.</param>

         public void Sort(T[] array, IComparer<T> comparer)

         {
"
16808,"end

 if $0 == __FILE__

   puts 'Enter a list of numbers separated by space'

   list = gets.split.map(&:to_i)

   p heap_sort(list)

 end
"
94226,"            if (z.Child != null)

             {

                 foreach (var x in SiblingIterator(z.Child))
"
76115,"    s = new int[size + 1][size + 1];

     p = new int[size + 1];

     for (int i = 0; i < size + 1; i++) {

       Arrays.fill(m[i], -1);

       Arrays.fill(s[i], -1);
"
10304,"                vis.add(i)

                 flag = 1

                 print(i)

                 break

         if not flag:

             S.pop()
"
14791,"    ///

     /// capitalize(""123 hello world"")

     /// '123 hello world'

     ///
"
16201,"""""""

 Simple multithreaded algorithm to show how the 4 phases of a genetic algorithm works

 (Evaluation, Selection, Crossover and Mutation)

 https://en.wikipedia.org/wiki/Genetic_algorithm

 Author: D4rkia

 """"""
"
20951,"        return temp

     visited = [0 for i in range(len(l))]

     Nbr_TV = [-1 for i in range(len(l))]  # Neighboring Tree Vertex of selected vertex

     # Minimum Distance of explored vertex with neighboring vertex of partial tree

     # formed in graph

     Distance_TV = []  # Heap of Distance of vertices from their neighboring vertex
"
21184,"        }

         /// <summary>

         ///     Single term for e^x function approximation: x^i / i!.

         /// </summary>
"
17226,"  return encryptedAlphabet

 }

 function translate (sourceAlphabet, targetAlphabet, message) {
"
14064,"    }

     return min;

   }

   /** Driver Code */
"
15253,"        {

             // precondition I

             if (sequence.Length > field.Length)

             {
"
83069,"            // Q:=M4+M6

             int[][] C12 = add(M3, M5);

            

             // R:=M5+M7

             int[][] C21 = add(M2, M4);

            
"
25019,"                # f = (B & C) | (not32(B) & D)

                 f = D ^ (B & (C ^ D))

                 g = i
"
12430,"            return 1  # any number raised to 0 is 1

 if __name__ == ""__main__"":  # Main function

     # Read two numbers from input and typecast them to int using map function.

     # Here x is the base and y is the power.

     prompt = ""Enter the base and the power separated by a comma: ""
"
20977,"  char endSymbol;

   public Trie() {

     this.root = new TrieNode();

     this.endSymbol = '*';
"
84693,"    [<TestMethod>]

     [<DataRow(""ABABX"", ""ABABZABABYABABX"")>]

     [<DataRow(""AAAB"", ""ABAAAAAB"")>]

     [<DataRow(""abcdabcy"",""abcxabcdabxabcdabcdabcy"")>]

     [<DataRow(""Lü"",""Lüsai"")>]
"
23810," * \right] \f}

  * where

  * * \f$R\f$ is the scaling parameter that we will consider \f$=1\f$

  * * \f$l=\frac{\rho}{r}\f$ is the relative distance of marker from the centre

  * of inner circle and \f$0\le l\le1\f$
"
12293,"}

 /**

  * @brief Main function

  * @returns 0 on exit
"
33974,"//END TESTS

 func benchmarkFramework(b *testing.B, f func(arr []int) []int) {

 	var sortTests = []struct {

 		input    []int

 		expected []int

 		name     string
"
30282,"# Find the Highest Altitude

 # There is a biker going on a road trip. The road trip

 # consists of n + 1 points at different altitudes. The

 # biker starts his trip on point 0 with altitude equal 0.

 # You are given an integer array gain of length n where
"
10874,"     *

      * @return subtraction Output

      */

     public static BigInteger subBytesDec(BigInteger ciphertext) {
"
23539,"    public Node getPromisingNode(Node rootNode) {

         Node promisingNode = rootNode;

         // Iterate until a node that hasn't been expanded is found.

         while (promisingNode.childNodes.size() != 0) {
"
32223,"function verlet_integration(f,x0,tspan,Δt= 1.0e-3)

         s,e = tspan

         N = floor((e-s)/Δt) |> Int

         x = Vector{Float64}(undef,N)

         t = collect(s:Δt:(e - Δt))
"
48142," * <p>Source for the explanation: https://en.wikipedia.org/wiki/Fibonacci_number

  *

  * Problem Statement: print all Fibonacci numbers that are smaller than your given input N 

  */
"
22788,"import { integralEvaluation } from '../MidpointIntegration'

 test('Should return the integral of f(x) = sqrt(x) in [1, 3] to be equal 2.797434', () => {

   const result = integralEvaluation(10000, 1, 3, (x) => { return Math.sqrt(x) })

   expect(Number(result.toPrecision(6))).toBe(2.79743)

 })

 test('Should return the integral of f(x) = sqrt(x) + x^2 in [1, 3] to be equal 11.46410161', () => {
"
67244,"    // Printing the result storing inorder.

     std::cout << ""\nInOrder Traversal Is : "" << std::endl;

     for (auto i : result) {

         std::cout << i << ""  "";
"
16850,"    {

         public void RawCut(FHeapNode<int> x, FHeapNode<int> y)

         {

             Cut(x, y);

         }

         public void RawCascadingCut(FHeapNode<int> y)
"
21074," * nested. A sequence of brackets s is considered properly nested if any of the following conditions

  * are true: - s is empty - s has the form (U) or [U] or {U} where U is a properly nested string - s

  * has the form VW where V and W are properly nested strings For example, the string ""()()[()]"" is

  * properly nested but ""[(()]"" is not. The function called is_balanced takes as input a string S
"
71777,"// Stack Linked-List

 // description: based on `geeksforgeeks` description Stack is a linear data structure which follows a particular order in which the operations are performed.

 //	The order may be LIFO(Last In First Out) or FILO(First In Last Out).

 // details:

 // 	Stack Data Structure : https://www.geeksforgeeks.org/stack-data-structure-introduction-program/

 // 	Stack (abstract data type) : https://en.wikipedia.org/wiki/Stack_(abstract_data_type)
"
17589,"        'A' => 10,

         'B' => 11,

         'C' => 12,

         'D' => 13,

         'E' => 14,

         'F' => 15,
"
31242,"def run_gradient_descent():

     global parameter_vector

     # Tune these values to set a tolerance value for predicted output

     absolute_error_limit = 0.000002
"
21705,"            if (text.Length % 16 != 0)

             {

                 throw new ArgumentException($""The length of {nameof(key)} should be divisible by 16"");

             }

             List<ulong> blocks_list_encoded = GetBlocksFromEncodedText(text);
"
94048,"package DataStructures.Buffers;

 import java.util.Random;

 import java.util.concurrent.atomic.AtomicInteger;

 public class CircularBuffer {
"
14242,"/**

  * @file

  * @author [Timothy Maloney](https://github.com/sl1mb0)

  * @brief [Prim's algorithm](https://en.wikipedia.org/wiki/Prim%27s_algorithm)

  * implementation in C to find the MST of a weighted, connected graph.

  * @details Prim's algorithm uses a greedy approach to generate the MST of a weighted connected graph.
"
69631,"            Assert.AreEqual(typeof(InvalidOperationException), exception?.GetType());

         }

         [Test]

         public static void PeekEmptyQueueThrowsInvalidOperationException()
"
19484,"    }

 }

 // The code below can be used for testing

 var stack = Stack<Int>()
"
18793,"#include <iostream>

 #include <string>

 #include <cstring>
"
90948,"void sort(int *a, int n)

 {

     while (!check_sorted(a, n)) shuffle(a, n);

 }

 int main()

 {
"
20565,"    return np.linalg.norm(a - b)

 def heuristic_2(P: TPos, goal: TPos):

     # integer division by time variable

     return consistent_heuristic(P, goal) // t
"
11290,"    }

   }

   
"
31438,"    // else we move right

     return find(arr, row, col + 1, key);

   }

   /**
"
24137,"    int fibMMm1 = 1;               // (m-1)'th Fibonacci No.

     int fibM = fibMMm2 + fibMMm1;  // m'th Fibonacci

     /* fibM is going to store the smallest Fibonacci

        Number greater than or equal to n */

     while (fibM < n)

     {
"
85373,"        bzero(buff, MAX);

         n = 0;

         // copy server message in the buffer

         while ((buff[n++] = getchar()) != '\n')

         {
"
13215,"            Assert.IsTrue(heap.Contains(10));

             Assert.IsFalse(heap.Contains(11));

         }

         [Test]

         public static void Contains_EmptyHeap_ReturnsCorrectAnswer()
"
30960,"deps = [""InteractiveUtils"", ""Logging"", ""Random"", ""Serialization""]

 uuid = ""8dfed614-e22c-5e08-85e1-65c5234f0b40""

 [[ThreadingUtilities]]

 deps = [""ManualMemory""]

 git-tree-sha1 = ""03013c6ae7f1824131b2ae2fc1d49793b51e8394""

 uuid = ""8290d209-cae3-49c0-8002-c8c24d57dab5""
"
10987,"      matched = lps[matched - 1]

     }

   }
"
61490,"    False

     >>> check_bouncy(-12345)

     False

     >>> check_bouncy(0)

     False

     >>> check_bouncy(6.74)
"
18989,"            var expectedOccurrences = new int[0];

             var actualOccurrences = NaiveStringSearch.NaiveSearch(content, pattern);

             var sequencesAreEqual = expectedOccurrences.SequenceEqual(actualOccurrences);
"
22308,"            pos--;

             if (pos == 0)

                 pos = 1;

         }
"
17587,"    if (first_number % i == 0) first_number_proper_divisors.add(i);

   }

   for (int i = 1; i < second_number; i++) {

     if (second_number % i == 0) second_number_proper_divisors.add(i);
"
86119,"  Problem Statement:

   Given a linked list, rotate the list to the right by k places, where k is non-negative.

   Note:

   * While Solving the problem in given link below, don't use main() function.

   * Just use only the code inside main() function.
"
62788,"  return -1 if left > right

   return left if data[left] == key

   return right if data[right] == key
"
82691,"		if (p->parent != NULL)

 			cout << ""\nParent: "" << p->parent->key;

 		else

 			cout << ""\nThere is no parent of the node.  "";

 		if (p->right != NULL)
"
23847,"      print(""The queue is full!!!"");

       return;

     }

     if (end == start - 1) {

       print(""The queue is full!!!"");
"
21508,"            cout << ""Derived3 created"" << endl; 

         } 

         Derived3(const Derived3& rhs) 

         { 

             cout << ""Derived3 created by deep copy"" << endl; 

         } 
"
61460,"            var start = 0;

             while (start < i)

             {
"
33182," * @see BinarySearch

  */

 public final class IterativeBinarySearch implements SearchAlgorithm {

   /**

    * This method implements an iterative version of binary search algorithm
"
19042,"func calculateDepth(n *Node, depth int) int {

 	if n == nil {

 		return depth

 	}

 	return Max(calculateDepth(n.left, depth+1), calculateDepth(n.right, depth+1))

 }
"
10557,"package search

 // Binary search for target within a sorted array by repeatedly dividing the array in half and comparing the midpoint with the target.

 // This function uses recursive call to itself.
"
12203,"    if (len == 0) // empty array

     return 0;

     for (i = 0; i < len; i++) {
"
97224,"            printf(""%d - "", v);

             v = visited[v];

         }

         printf(""%d\n"", src);

     }

     return 0;
"
27830,"# => 15
"
17625,"            switch (hi)

             {

                 case 0: return Color.FromArgb(255, v, t, p);
"
16917,"                if ( q < m[i][j] )

                 {

                     m[i][j] = q;
"
61066,"    final Color foreground = new Color(23, 103, 154);

     final double foregroundLuminance = algImpl.getRelativeLuminance(foreground);

     assert foregroundLuminance == 0.12215748057375966

         : ""Test 4 Failed - Incorrect relative luminance."";

     final Color background = new Color(226, 229, 248);
"
96281,"     * @return the processed sample

      */

     public double process(double sample) {

         double result = 0.0;

         // Process

         for (int i = 1; i <= order; i++) {
"
25722,"        for (int level = 0; (1 << level) < tree.number_of_vertices(); ++level) {

             for (int vertex = 0; vertex < tree.number_of_vertices(); ++vertex) {

                 // up[vertex][level + 1] = 2^(level + 1) th ancestor of vertex =

                 // = 2^level th ancestor of 2^level th ancestor of vertex =

                 // = 2^level th ancestor of up[vertex][level]
"
21249,"  }

   return true;

 }
"
24091,"    Base b;

     b.who();

     // 此处的虚函数是通过指针调用的，呈现多态性，需要在运行时期间才能确定，所以不能为内联。  

     Base *ptr = new Derived();

     ptr->who();
"
41895,"        [TestCase(33, 33)]

         public static void TestToInt64(int number, int expected)

         {

             // Arrange
"
13685,"    * efficient way to generate fibonacci numbers (streams are memoized) Using streams as opposed to the classic

     * sieve ensures that we stay following functional principles and not change states

     */
"
30907,"		t.Run(""List Back"", func(t *testing.T) {

 			err := listQueue.Dequeue()

 			if err != nil {

 				t.Error(""got an unexpected error "", err)

 			}
"
26031,"}
"
24757,"#include <string.h>  /// Various functions for manipulating arrays of characters

 #include <sys/socket.h>  /// For macro definitions related to the creation of sockets

 #include <sys/types.h>  /// For definitions to allow for the porting of BSD programs

 #include <unistd.h>  /// For miscellaneous symbolic constants and types, and miscellaneous functions

 #define PORT 8100  /// Define port over which communication will take place
"
32932," */

 #include <cassert>        /// for assert

 #include <iostream>       /// for IO operations

 #include <memory>         /// for std::shared_ptr

 #include <stack>          /// for std::stack
"
95623," * https://gist.github.com/kvedala/27f1b0b6502af935f6917673ec43bcd7

  *

  * Try the highly unstable Wilkinson's polynomial:
"
45657,"  it('with correct args', () => {

     const areaTriangle = area.areaTriangle(1.66, 3.44)

     expect(areaTriangle).toBe(2.8552)

   })
"
29294,"        num->digits[i] = temp;

     }

     while (carry != 0)

     {
"
67626,"        match list with

         | [] -> []

         | [ x ] -> [ x ]

         | _ ->

             let (l1, l2) = split list

             merge (sort l1) (sort l2)
"
17789,"if __name__ == ""__main__"":

     import doctest

     doctest.testmod()
"
28557,"    if (n == null) return -1;

     return n.height;

   }

   private void setBalance(Node... nodes) {
"
29632,"    create_polynomial(&poly2, 2, 5);

     create_polynomial(&poly2, 3, 3);

     create_polynomial(&poly2, 7, 1);
"
69488,"end

 # ╔═╡ d6fc7669-2c25-44f0-9de7-878f7374f784

 p = [0.5/7.9E5, 0.33]  # initial parameters

 # ╔═╡ 311af29e-ac88-44f0-bd44-64ed26bd8ac0

 u0 = [7.9E5, 10.0, 0.0]

 # ╔═╡ 81418cb8-3382-4294-adef-cfa8aa921ea0
"
21769,"			{0, 1}, {1, 3}, {1, 5},

 			{0, 2}, {2, 4}, {2, 6}},

 	},

 }

 func TestTopological(t *testing.T) {

 	for _, tc := range testCases {
"
30234,"    if (D) /* if D is not NULL */

         D[0] = a + b;

     return;

 }

 /**

  * main function
"
82836,"	a      int64

 	b      int64

 	output int64

 }{

 	{""gcd of 10 and 0"", 10, 0, 10},
"
85198," * @brief Macro to return the minimum of two values

  */

 #define min(X, Y) ((X) < (Y) ? (X) : (Y))

 /**
"
44367,"    expect(test1).toBe(-143)

   })

 })
"
86176,"    expect(factorialDigitSum()).toBe(648)

     expect(factorialDigitSum(100)).toBe(648)

   })

   it('Factorial digit sum of 1000!', () => {

     expect(factorialDigitSum(1000)).toBe(10539)

   })
"
27387,"  def sort(input)

     raise NotImplementedError

   end
"
83954,"  public int countGraphs() {

     int count = 0;

     Set<Node> markedNodes = new HashSet<Node>();
"
93601,"   * @param data the value to be inserted

    */

   public void add(int data) {

     Node parent = null;

     Node temp = this.root;
"
20841,"                }

                 else

                 {

                     return true;

                 }

             }
"
30896,"	}

 }
"
21337,"    }

     static int Lookup_Chain(int m[][],int p[],int i, int j)

     {

         if ( i == j )

         {

             m[i][j] = 0;
"
18643,"            else

             {

                 toDelete->par->right = NULL;

             }

         }
"
17519,"only if x^n + y^n = z^n.

 By Fermat's Last Theorem, this means that the absolute value of n can not

 exceed 2, i.e. n is in {-2, -1, 0, 1, 2}. We can eliminate n = 0 since then the

 equation would reduce to 1 + 1 = 1, for which there are no solutions.

 So all we have to do is iterate through the possible numerators and denominators

 of x and y, calculate the corresponding z, and check if the corresponding numerator and
"
81479," * 

  * References used: [GeeksForGeeks](https://www.geeksforgeeks.org/bipartite-graph/)

  * @author [tushar2407](https://github.com/tushar2407)

  */

 #include <iostream> /// for IO operations

 #include <queue>    /// for queue data structure
"
22312,"            {

                 throw new InvalidOperationException(""The queue contains no items."");

             }
"
17788,"      System.err.printf(""Graph doesn't contain start vertex \""%s\""%n"", startName);

       return;

     }

     final Vertex source = graph.get(startName);

     NavigableSet<Vertex> q = new TreeSet<>();
"
10260,"git-tree-sha1 = ""256eeeec186fa7f26f2801732774ccf277f05db9""

 uuid = ""ae5879a3-cd67-5da8-be7f-38c6eb64a37b""

 version = ""1.1.1""

 [[Rmath]]
"
74622,"#include <netinet/in.h>

 #include <sys/socket.h>

 #include <sys/types.h>
"
27550,"            final Optional<BigDecimal> result = calculate(BigDecimal.ZERO);

             assertThat(result.isPresent(), true);

             result.ifPresent(value -> assertThat(value, BigDecimal.ZERO));
"
32700,"    tree.insert(6);

     tree.insert(8);

     // Prints 5 3 2 4 7 6 8

     System.out.println(""Pre order traversal:"");

     tree.printPreOrder();

     System.out.println();
"
11929,"// arithmeticmean.go

 // description: Arithmetic mean

 // details:

 // The most common type of average is the arithmetic mean. If n numbers are given, each number denoted by ai (where i = 1,2, ..., n), the arithmetic mean is the sum of the as divided by n or - [Arithmetic mean](https://en.wikipedia.org/wiki/Average#Arithmetic_mean)
"
32935,"{

   int  data ;

   struct  node  *next ;

 } ;
"
19890,"	numbers := DynamicArray{}

 	// check numbers is empty or nut

 	t.Run(""Check Empty Dynamic Array"", func(t *testing.T) {
"
30813,"int main(int argc, char const *argv[])

 {

     //ָ
"
22302,"                            420, 210, 276, 208, 320, 140, 360, 212, 240, 168, 430, 144, 432, 180, 224, 216, 396, 144, 438, 160,

                             252, 192, 442, 144, 352, 222, 296, 192, 448, 120, 400, 224, 300, 226, 288, 144, 456, 228, 288, 176,

                             460, 120, 462, 224, 240, 232, 466, 144, 396, 184, 312, 232, 420, 156, 360, 192, 312, 238, 478, 128,

                             432, 240, 264, 220, 384, 162, 486, 240, 324, 168, 490, 160, 448, 216, 240, 240, 420, 164, 498, 200,
"
13882,"		Root: NewNode(90),

 	}

 	root := BSTree.Root

 	Insert(root, 80)

 	Insert(root, 100)

 	Insert(root, 70)
"
25759,"				t.Error(""got an unexpected error "", err)

 			}

 			if listQueue.Len() != 3 {

 				t.Errorf(""List Dequeue is not correct expected %d but got %d"", 3, listQueue.Len())

 			}

 		})
"
13883,"    """"""

     Calculate the probability that a given instance will belong to which class

     :param instance_count: number of instances in class

     :param total_count: the number of all instances
"
17618,"            if (replacement is { })

             {

                 var (from, to) = replacement!.Value;

                 end = Replace(end, end.Length - from.Length, from.Length, to);
"
30159," *     struct TreeNode *left;

  *     struct TreeNode *right;

  * };

  */
"
15776,"                return Search(node.Left, key);

             }

             if (compareResult < 0)

             {

                 return Search(node.Right, key);
"
25609,"    System.out.println();

     float waitTimeTot = 0;

     float tatTime = 0;
"
15516,"puts(single_number(nums))

 # Output: 4

 nums = [1]

 puts(single_number(nums))
"
19533,"    }

     unsigned int len;

     int n;

     n = recvfrom(sockfd, (char *)buffer, MAXLINE, MSG_WAITALL,
"
24642,"# 	from data_structures/queues/queue.rb:83:in `<main>'
"
17732,"    """"""

     :param bwt_string: The string returned from bwt algorithm execution

     :param idx_original_string: A 0-based index of the string that was used to

     generate bwt_string at ordered rotations list

     :return: The string used to generate bwt_string when bwt was executed
"
33960,"    linkedList.add(1);

     linkedList.add(2);

     linkedList.add(3);

     linkedList.add(2);

     linkedList.remove(2);

     expect(linkedList, equals([1, 3]));
"
27663,"					tc.word, tc.text, tc.expected.numberOfComparison, tc.expected.resultPosition, actual.numberOfComparison, actual.resultPosition)

 			}

 		})

 	}

 }
"
15740," * @version v1

  * @date 2019-08-06

  */

 #include <stdio.h>
"
14858,"a↑↑(k+1) = a(a↑↑k).

 Thus we have e.g. 3↑↑2 = 3^3 = 27, hence 3↑↑3 = 3^27 = 7625597484987 and

 3↑↑4 is roughly 103.6383346400240996*10^12.

 Find the last 8 digits of 1777↑↑1855.

 References:

     - https://en.wikipedia.org/wiki/Tetration
"
38557," */

 int search(List *list, double value);

 /**

  * @brief   Print list function

  * @param   list    a doubly linked List
"
14461,"    ///     or least significant digit (LSD).

     ///     MSD radix sorts are most suitable for sorting array of strings with variable length

     ///     in lexicographical order.

     /// </summary>

     public class MsdRadixStringSorter : IStringSorter

     {
"
33102,"    this.head = null

   }

   // Class node (constructor)
"
26023,"//

 // Created by light on 20-2-6.

 //

 class singleton {

 private:
"
15620,"    ///     and at the same time efficiently update an entry

     ///     or apply a distributive operation to a subarray.

     ///     Idea:   Preprocessing special queries

     ///     Hint:   The query operation HAS to be associative (in this example addition).

     /// </summary>
"
34342,"    """"""Pure implementation of the selection sort algorithm in Python

     :param collection: some mutable ordered collection with heterogeneous

     comparable items inside

     :return: the same collection ordered by ascending

     Examples:

     >>> selection_sort([0, 5, 3, 2, 2])
"
79477,"        /// <returns>Items from all nodes.</returns>

         public IEnumerable<int> GetRolledItems()

         {
"
30669,"  base %= modulus // make sure that base < modulus

   while (exponent > 0) {

     // if exponent is odd, multiply the result by the base

     if (exponent % 2 === 1) {
"
43354,"    char *ptr = (char *)tree->root;

     for (; index >= 0; index--)

     {

         b = index * elem_size;
"
23119,"  }

 }
"
31227,"    for (let j = 0; j < E; j++) {

       if ((dis[graph[j][0]] + graph[j][2]) < dis[graph[j][1]]) { dis[graph[j][1]] = dis[graph[j][0]] + graph[j][2] }

     }
"
10636," * ```sh

  * ./k_means_clustering > image.eps

  * ```

  *

  * @param observations  observations array

  * @param len  size of observation array
"
19820,"* RULE 1 : a ^ b = (a*a) ^ (b/2) ---- example : 4 ^ 4 = (4*4) ^ (4/2) = 16 ^ 2

 * RULE 2 : IF b is ODD, then ---- a ^ b = a * (a ^ (b - 1)) :: where (b - 1) is even.

 * Once b is even, repeat the process to get a ^ b
"
29580,"        [Test]

         public void First100ElementsCorrect()

         {

             // Values from https://oeis.org/A000008/b000008.txt
"
30860,"public class DyanamicProgrammingKnapsack {

   static int max(int a, int b) {

     return (a > b) ? a : b;
"
95449,"        if N == 0:

             raise ValueError(""log10(0) is undefined."")

         return round(1 + log10(N / (1 + df)), 3)
"
13376,"    for outer_width in range(3, (t_limit // 4) + 2):

         if outer_width * outer_width > t_limit:

             hole_width_lower_bound = max(

                 ceil(sqrt(outer_width * outer_width - t_limit)), 1

             )
"
19963,"forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20

 letters. The use of ""and"" when writing out numbers is in compliance withBritish

 usage.
"
18016,"            Apply(l, r, value, m + 1, b, Right(i));

             // Recalculates the value of this node by its (possibly new) children.

             Tree[i] = Operand[i] * (Tree[Left(i)] + Tree[Right(i)]);

         }

     }

 }
"
25662,"            if (Set[r] == false && dist[r] <= min) {

                 min = dist[r];

                 min_index = r;

             }
"
29027,"python3 -m doctest -v fibonacci_search.py

 For manual testing run:

 python3 fibonacci_search.py

 """"""

 from functools import lru_cache
"
67387,"def solution(first_x_coord: float = 1.4, first_y_coord: float = -9.6) -> int:

     """"""

     Return the number of times that the beam hits the interior wall of the

     cell before exiting.

     >>> solution(0.00001,-10)

     1
"
18138,"            // Arrange

             var subject = new RecursiveBinarySearcher<int>();

             var randomizer = Randomizer.CreateRandomizer();
"
11198,"        {  // Left Case

             // Left Left Case

             if (parent->left == node)

             {
"
18999,"			t.Errorf(""got: %v, want: %v"", got, want)

 		}

 	})

 	list2 := Singly{}

 	list2.AddAtBeg(1)

 	list2.AddAtBeg(2)
"
32078,"        

         //Graph definition and initialization

         AdjacencyList<String> graph = new AdjacencyList<>();

         graph.addEdge(""a"",""b"");
"
29570,"    return 0;

 }
"
22679,"        Calculate the variance :

             We can calculate the variance for dataset in two steps :

                 1. Calculate the squared difference for each input variable from the

                    group mean.
"
18013,"end

 # optional function that returns boolean if string does contain the sub-string given

 function contain_substring_with_kmp(string::String, sub_string::String, ignore_case::Bool)::Bool

     return get_index_with_kmp(string, sub_string, ignore_case) != NO_SUBSTRING_INDEX

 end
"
52538,"                return index;

             }

             if (!rehashing) {

                 std::cout << ""Spot taken, looking at next (next index:""

                           << "" ""
"
12770,"                        }

                         break;

                     case 4:
"
65602,"import java.util.Random;

 import java.util.stream.Stream;

 /**
"
31296,"# Example 2:

 # Input: n = 16

 # Output: true
"
16735,"  print(list);

 }

 void insertSort(List<int> a) {
"
19566,"	""github.com/TheAlgorithms/Go/math/max""

 	""github.com/TheAlgorithms/Go/math/min""

 )

 // Pigeonhole sorts a slice using pigeonhole sorting algorithm.
"
14409,"                printf(""\n\tPrinting AVL Tree\n"");

                 printAVL(root, 1);

                 printf(""\n"");

             }

             break;
"
19143,"export { hexToInt, hexToDecimal }
"
29092,"  int oct;

   try {

     oct = int.parse(oct_val);

   } catch (e) {

     throw new FormatException(""An invalid value was passed to the function"");

   }
"
16308,"    for _ in range(N_POPULATION):

         population.append("""".join([random.choice(genes) for i in range(len(target))]))

     # Just some logs to know what the algorithms is doing
"
59285,"  n = n * n;

   // Now calculate ((2^n + 1)^2 ) - 2

   n = n - 2;

   // return nth Kynea number

   return n;
"
42296,"If one complete new layer is wrapped around the spiral above,

 a square spiral with side length 9 will be formed.

 If this process is continued,

 what is the side length of the square spiral for which

 the ratio of primes along both diagonals first falls below 10%?

 Solution: We have to find an odd length side for which square falls below
"
26506,"        n = -n; // take the absolute value of n

     }

     int number_of_divisors = 1;

     for (int i = 2; i * i <= n; i++) {

         // This part is doing the prime factorization.
"
15485,"deps = [""LinearAlgebra"", ""Statistics"", ""StatsAPI""]

 git-tree-sha1 = ""abe4ad222b26af3337262b8afb28fab8d215e9f8""

 uuid = ""b4f34e82-e78d-54a5-968a-f98e89d6e8f7""

 version = ""0.10.3""

 [[Distributed]]
"
96224,"		}

 		if root.Height != 2 {

 			t.Errorf(""height of root should be = 2"")

 		}

 		if root.Left.Key != 3 {

 			t.Errorf(""left child should have value = 3"")
"
18016,"    expect(Softmax([1, 1])).toEqual([0.5, 0.5])

     expect(Softmax([1, 1, 1, 1])).toEqual([0.25, 0.25, 0.25, 0.25])

   })
"
81031,"/*

  * Median: https://en.wikipedia.org/wiki/Median

  *

  * function averageMedian

  * to find the median value of an array of numbers
"
15028,"            // Node Found

             break;

         }

         if (val > buffRoot->val)

         {
"
22629,"    }

     public Node findKey(int key) {

       if (!isEmpty()) {
"
21608,"        public void ResetField()

         {

             for (var i = 0; i < field.Length; i++)

             {

                 field[i] = false;
"
84239,"import numpy as np

 from PIL import Image

 def rgb2gray(rgb: np.array) -> np.array:

     """"""

     Return gray image from rgb image
"
70391,"  it('should work for empty arrays, too', () => {

     expect(cocktailShakerSort([])).toEqual([])

   })
"
32214,"        }

         else if (ch >= 'a' && ch <= 'f')

         {

             ch = ch - 'a' + 10;
"
18870,"    double total_time = midpoint_euler(step_size, X0, X_MAX, Y0, 1);

     printf(""\tTime = %.6g ms\n"", total_time);

     /* compute exact solution for comparion */

     FILE *fp = fopen(""exact.csv"", ""w+"");

     if (fp == NULL)

     {
"
11314,"#include <stdio.h> 

 #include <assert.h> 

 int main() 

 { 

     int x = 7; 
"
32387,"    for (i = 0; i < index; i++)

     {

         /* capitalize the first character */
"
23252,"    return reversed;

   }

   /**

    * This method pads an ArrayList with zeros in order to have a size equal to the next power of two

    * of the previous size.

    *
"
23936,"        switch self {

         case .power: return 3

         case .divide, .times: return 2

         case .plus, .minus: return 1

         }
"
61736,"/**

  * @brief A Test to check an edge case (one empty array)

  * @returns void
"
72590,"    HashMap<Integer, String> hm = new HashMap<>();

     // String to store hexadecimal code

     String hex = """";
"
31848,"#include <stdlib.h>   /* for malloc, free */

 #include <string.h>   /* for memcpy, memset */

 /**

  * Function that combines two data to generate a new one

  * The name of function might be misleading actually combine here signifies the
"
23113,"/**

  * In mathematics and computational science, the Euler method (also called forward Euler method) is

  * a first-order numerical procedure for solving ordinary differential equations (ODEs) with a given
"
80512,"}
"
17806,"      ""17866458359124566529476545682848912883142607690042""

       ""24219022671055626321111109370544217506941658960408""

       ""07198403850962455444362981230987879927244284909188""

       ""84580156166097919133875499200524063689912560717606""
"
27090,"     * starting at the location pointed to, by writing zeros (bytes

      * containing '\0') to that area.

      *

      * We bind the server_addr to the internet address and port number thus

      * giving our socket an identity with an address and port where it can
"
97177,"    expect(mergeSort([1, 2, 3])).toEqual([1, 2, 3])

     expect(mergeSort([10, 5, 3, 8, 2, 6, 4, 7, 9, 1])).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

   })

 })
"
24079,"    */

   def abs(number: Int): Int = {

     if (number < 0)

       return number * -1

     return number;

   }
"
72381,"indexValue_form1    = cl.calculation(""CCCI"", red=red, green=green, blue=blue,

                                      redEdge=redEdge, nir=nir).astype(np.float64)

 indexValue_form2    = cl.CCCI()

 # calculating the index with the values directly -- you can set just the values
"
27305,"        cout<<""Derived constructor y=""<<y<<endl;

     }

     ~Derived(){ cout<<""Derived destructor...""<<endl; }
"
30623,"      // Swap the numbers

       [items[i], items[min]] = [items[min], items[i]]

     }

   }

   return items
"
16493,"        /// <returns>Returns True if there inputs aren't equal; False otherwise.</returns>

         public static bool operator !=(BitArray one, BitArray two) => !(one == two);

         /// <summary>

         ///     Compiles the binary sequence into the inner data structure.
"
16872,"  }

   Matrix transposition() {

     Matrix output = Matrix.zeros(nColumns, nRows);
"
26768,"    show_data(array, size);

     printf(""%s\n"", notation);

     printf(""Time spent sorting: %.4g ms\n"", time_spent * 1e3);
"
27691,"    {

         tmp[i][j] = m[i][j];

         m[i][j] = m[k][j];
"
82793,"    def preorder_traverse(self, node):

         if node is not None:

             yield node  # Preorder Traversal
"
33162,"            double[,] result = new double[m, n];

             Random random = new();

             for (var i = 0; i < m; i++)
"
25530,"}

 /**

  * @brief A Test to check an empty vector

  * @returns void
"
88501,"        }

         visited[str[i]] = i;

     }

     if (C_len > L_len)
"
11587,"class Node {

   Node left, right;

   int data;

   public Node(int data) {

     this.data = data;
"
33261,"  void _swap(int left, int right, List<int> array) {

     int temp;

     temp = array[left];

     array[left] = array[right];
"
30743,"deps = [""DiffEqBase"", ""DiffEqNoiseProcess"", ""LinearAlgebra"", ""Markdown"", ""RandomNumbers""]

 git-tree-sha1 = ""db08e0def560f204167c58fd0637298e13f58f73""

 uuid = ""5a0ffddc-d203-54b0-88ba-2c03c0fc2e67""
"
28841,"        expect(foundB.toSet().containsAll(foundA), isTrue,

             reason: ""not all items were found"");

       }

       expect(timesBetter / numberOfRuns > 0.5, isTrue,

           reason:
"
21219,"    for (int i = 0; i < a->N; i++)

     {

         for (int j = 0; j < a->N; j++)

         {

             if (a->a[i * a->N + j] == 0)

             {
"
28161," * ### Algorithm

  * Values can be added by iterating to the end of a list (by following

  * the pointers) starting from the first link. Whichever link points to null
"
31007,"            }

             isFull = false;

             isEmpty = startIndex == endIndex;

             return queue[dequeueIndex];
"
16905,"    // Initializing vector with array values

     int arr[] = {10, 20, 5, 23, 42, 15};

     int n = sizeof(arr) / sizeof(arr[0]);

     std::vector<int> vect(arr, arr + n);

     std::cout << ""Vector is: "";
"
30849,"	}{

 		{""symmetric difference of different sets"", New(1, 2, 3), New(4, 5, 6), New(1, 2, 3, 4, 5, 6)},

 		{""symmetric difference of sets with elements in common"", New(1, 2, 3), New(1, 2, 4), New(3, 4)},

 		{""symmetric difference of same sets"", New(1, 2, 3), New(1, 2, 3), New()},
"
84457,"        for button in self.buttons {

             button.isUserInteractionEnabled = true

         }

     }

     private func blockButtons() {

         for button in self.buttons {
"
30144,"        /// <returns>Returns True if 'position' successful increased; False otherwise.</returns>

         public bool MoveNext()

         {

             if (position + 1 >= field.Length)
"
25418,"end
"
11042,"func TestExponentiation(t *testing.T) {

 	for _, test := range testCases {

 		t.Run(test.name, func(t *testing.T) {

 			result, err := Exponentiation(test.base, test.exponent, test.mod)

 			if err != test.expectedError {
"
32174,"        public IEnumerable<BigInteger> Sequence

         {

             get

             {

                 yield return BigInteger.One;

                 for (BigInteger i = 2; ; i++)
"
33494,"   * @return If queue is not empty, element at the front of the queue. Otherwise, null

    */

   public T peek() {

     T result = null;

     if (this.hasElements()) {

       result = _queue.get(0);
"
72977,"""""""

 def prim(G, s):

     dist, known, path = {s: 0}, set(), {s: 0}

     while True:

         if len(known) == len(G) - 1:

             break
"
13074,"}
"
57749,"        end

     end

     if number > 1 == 1

         push!(factors, number)

     end
"
12966,"//   3: ['4', '6', '13'],

 //   4: ['5', '8'],

 //   5: ['7', '11'],

 //   6: ['13', '15'],

 //   7: ['10'],
"
25291," * \author [Krishna Vedala](https://github.com/kvedala)

  */

 #include <stdio.h>
"
24154,"        public static double[] NextVector(this Random rand, int size)

         {

             var vector = Enumerable.Range(0, size)
"
23487,"}

 /*This function returns that is it full binary tree or not*/

 bool is_full_binary_tree(var tree) {

   if (tree == null) {

     return true;
"
45958,"        public void Constructor_UseCustomComparer_FormsCorrectTree()

         {

             var tree = new AvlTree<int>(Comparer<int>.Create((x, y) => y.CompareTo(x)));

             tree.AddRange(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });

             tree.GetMin().Should().Be(10);

             tree.GetMax().Should().Be(1);
"
15365,"        if not 0 <= index <= len(self):

             raise IndexError(""list index out of range"")

         new_node = Node(data)
"
20991,"    }

     

     // Recursive function to print auto-suggestions 

     // for given node. 

     static void suggestionsRec(TrieNode root, String currPrefix) 
"
88394," * 3D space with centroids at the points

  * * \f$(0,5, 0.5, 0.5)\f$

  * * \f$(0,5,-0.5, -0.5)\f$
"
31498,"            101789, 101797, 101807, 101833, 101837, 101839, 101863, 101869, 101873, 101879, 101891, 101917, 101921,

             101929, 101939, 101957, 101963, 101977, 101987, 101999, 102001, 102013, 102019, 102023, 102031, 102043,

             102059, 102061, 102071, 102077, 102079, 102101, 102103, 102107, 102121, 102139, 102149, 102161, 102181,
"
79594,"//

 // Created by light on 19-11-4.

 //
"
22128,"    scanf(""%d"", &n);

     top += 1;

     a[top] = n;

 }

 // function for poping the element out

 void pop()
"
18073,"// Empty test file to keep track of all the tests for the algorithms.

 package math
"
31102,"                                       std::vector<T>(_mat_b[0].size(), 0));

     /**

      * Actual matrix multiplication.

      */

     for (uint32_t i = 0; i < _mat_a.size(); ++i) {

         for (uint32_t j = 0; j < _mat_b[0].size(); ++j) {
"
46934,"        /// <exception cref=""ArgumentException"">The length of the start vector doesn't equal the size of the source matrix.</exception>

         public static (double eigenvalue, double[] eigenvector) Dominant(

             double[,] source,

             double[] startVector,
"
28279,"# Information on binary shifts:

 # https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types

 # https://www.interviewcake.com/concept/java/bit-shift
"
33130,"    if not graph or start not in graph or target not in graph:

         return -1

     if start == target:

         return 0
"
22844,"package levenshtein

 // Distance Function that gives Levenshtein Distance

 func Distance(str1, str2 string, icost, scost, dcost int) int {

 	row1 := make([]int, len(str2)+1)

 	row2 := make([]int, len(str2)+1)
"
28784,"	p, err := NewPolybius(key, size, characters)

 	if err != nil {

 		log.Fatalf(""failed NewPolybius: %v"", err)
"
94762,"t = 'ab'

 puts(is_anagram(s, t))

 # => false

 #

 # Approach 2: Hash table
"
22344,"package Maths;

 import java.util.Arrays;

 import java.util.Random;

 public class FindMax {

   /** Driver Code */

   public static void main(String[] args) {
"
30442,"            //Assert

             Assert.AreEqual(expectedResult, result);

         }

     }
"
20529,"            DepthFirstFill(bitmap, location, targetColor, replacementColor);

         }

         private static void BreadthFirstFill(Bitmap bitmap, (int x, int y) location, Color targetColor, Color replacementColor, List<(int x, int y)> queue)

         {

             (int x, int y) currentLocation = queue[0];

             queue.RemoveAt(0);
"
24051,"        ///     Checking the validity of a sequence of numbers.

         /// </summary>

         /// <param name=""number"">The number that will be checked for validity.</param>

         /// <returns>
"
14378,"     * \brief Complex Constructor which initialises our complex number.

      * \details

      * Complex Constructor which initialises the complex number which takes
"
14761,"        }

         private static bool IsEngaged(Proposer proposer) => proposer.EngagedTo is not null;

         private static void DoSingleMatchingRound(IEnumerable<Proposer> proposers)

         {

             foreach (var newProposer in proposers)

             {
"
33957,"	space := ' '

 	keyLength := len(key)

 	textLength := len(text)

 	if keyLength <= 0 {

 		return """", &KeyMissingError{}

 	}
"
96303,"            digit %= 10

             digit += 1

         cc_number = cc_number[:i] + str(digit) + cc_number[i + 1 :]
"
46739,"            Assert.IsNotNull(tree.Search(""vvv""));

             Assert.AreEqual(""bbbb"", tree.Search(""vvv"")!.Right!.Key);

         }

         [Test]

         public static void Add_MultipleKeys_FormsCorrectBST()

         {
"
69421,"    int number = 0;

     for (int i = isNegative ? 1 : isPositive ? 1 : 0, length = s.length(); i < length; ++i) {

       if (!Character.isDigit(s.charAt(i))) {

         throw new NumberFormatException(""s="" + s);

       }

       number = number * 10 + s.charAt(i) - '0';
"
10321,"    range = max-min+1

     count = Vector{T}(undef, range)

     output = Vector{T}(undef, r)

     for i in 1:range

       count[i]=0
"
15411,"  // Find absolute value of `num`.

   'use strict'

   if (num < 0) {

     return -num

   }
"
19220,"      head = availableIndex;

     }

     int iterator = head;

     while (cursorSpace[iterator].next != -1) {
"
24926,"                 * @example ST[2][3] = min(ST[1][3], ST[1][5])

                  */

                 int64_t x = ST[j - 1][i];  ///< represents minimum value over
"
10900,"    """"""

     soup = BeautifulSoup(requests.get(base_url, params=params).content, ""html.parser"")

     div = soup.find(""div"", attrs={""class"": ""gs_ri""})

     anchors = div.find(""div"", attrs={""class"": ""gs_fl""}).find_all(""a"")
"
33021,"def factorial(number)

   number.downto(1).reduce(:*)

 end
"
28330,"            }

         }

         else if (d == 1)
"
34666,"                 EXCESSIVE_NUMBER_OF_WORDS -2

     The function manipulates the given structure of type word_count_word_t

     After that process the member count contains the number of occures.

 */

 int word_count(const char *input_text, word_count_word_t *words)

 {
"
26031,"      int k = Math.max(i - B.length + 1, 0);

       while (k < i + 1 && k < A.length) {

         convolved[i] += A[k] * B[i - k];

         k++;
"
12823,"package Backtracking;

 import java.util.Scanner;

 /*
"
13495,"    }

   }

   public void printPostOrder() {

     if (left != null) {

       left.printPostOrder();

     }
"
14657,"                pi.append(binary[i])

         if len(temp) == 0:

             return pi

         binary = list(set(temp))
"
15132,"  }

   if (slowNode == fastNode) {

     slowNode = headNode;
"
22874,"    double OutgoingLinks = 0;

     double DampingFactor = 0.85;

     double TempPageRank[] = new double[10];

     int ExternalNodeNumber;

     int InternalNodeNumber;

     int k = 1; // For Traversing
"
38802,"  result_hash = {}

   nums.each do |num|

     if result_hash[num]
"
32490,"    int a[200], n, counter, temp, i;

     a[0] = 1;

     counter = 0;
"
31516,"//

 // Created by light on 19-12-22.

 //
"
17289,"     * @param isMaximizer True if it is maximizers turn; otherwise false.

      * @param index       Index of the leaf node that is being evaluated.

      * @param verbose     True to show each players choices.
"
28620,"    printf(""Enter the elements of the array\n"");

     int i;

     int *arr = (int *)malloc(sizeof(int) * n);
"
27257,"#

 # Time Complexity: O(n)

 #

 def find_richest_customer_wealth(accounts)
"
11667,"    >>> tree_node3 = TreeNode(3)

     >>> tree_node4 = TreeNode(4)

     >>> tree_node5 = TreeNode(5)

     >>> tree_node6 = TreeNode(6)
"
23994,"    }

   }

 }
"
33499,"    """"""

     # avoid stretched display of graph

     axes = plt.gca()
"
26751,"        }

         [Test]

         public void And_GetSourcesWithAllInsideList_ReturnFirstSource()

         {

             var index = new InvertedIndex();
"
25600,"const TrieNode = function TrieNode (key, parent) {

   this.key = key

   this.count = 0

   this.children = Object.create(null)
"
14836,"    }

 }

 }   // namespace n_queens_all_solutions

 }  // namespace backtracking

 /**
"
36154,"	{

 		""Sentence from Rot13.go main function"",

 		""we'll just make him an offer he can't refuse... tell me you get the pop culture reference"",

 		""jr'yy whfg znxr uvz na bssre ur pna'g ershfr... gryy zr lbh trg gur cbc phygher ersrerapr"",

 	},
"
27932,"      // Display PageRank

       System.out.printf(""\n Final Page Rank : \n"");

       for (k = 1; k <= totalNodes; k++) {

         System.out.printf("" Page Rank of "" + k + "" is :\t"" + this.pagerank[k] + ""\n"");
"
27574,"# Challenge name: Number of good pairs

 #

 # Given an array of integers nums.

 # A pair (i,j) is called good if nums[i] == nums[j] and i < j.
"
83645,"    else

     {

         int PIVOT = ARRAY[0];
"
97513,"          B   C    LR    Br  C       RR       B    A

          / \       -->  /  \         -->    /     / \

         Bl  Br         B   UB              Bl    UB  C
"
22465,"                        greatGrandParent->left == grandParent)

                     {

                         greatGrandParent->left = parent;
"
33096,"    std::cout << ""\nMaximum element of vector is: "";

     std::cout << *max_element(vect.begin(), vect.end());

     std::cout << ""\nMinimum element of vector is: "";

     std::cout << *min_element(vect.begin(), vect.end());

     // Starting the summation from 0
"
12809,"    // Pixel outside the Mandelbrot set should be white.

     assert blackAndWhiteImage.getRGB(0, 0) == new Color(255, 255, 255).getRGB();

     // Pixel inside the Mandelbrot set should be black.
"
20213,"git-tree-sha1 = ""0fab0a40349ba1cba2c1da699243396ff8e94b97""

 uuid = ""12413925-8142-5f55-bb0e-6d7ca50bb09b""

 version = ""0.4.0+1""
"
26428,"        postorder_display(curr->llink);

         postorder_display(curr->rlink);

         printf(""%d\t"", curr->data);

     }
"
23024," * @throws TypeError When the given grid is invalid.

  */

 function validateGrid (grid) {

   if (!Array.isArray(grid) || grid.length === 0) throw new TypeError('Grid must be a non-empty array')
"
31376,"  }

   /** @param key : a number of primitive type 'int' */

   public HeapElement(int key) {

     this.key = key;

     this.additionalInfo = null;
"
83827,"})
"
31564,"      pointer1 += 1

     end

   end

   pointer1
"
31770,"import { diceCoefficient } from '../DiceCoefficient'

 describe('diceCoefficient', () => {

   it('should calculate edit distance between two strings', () => {

     // equal strings return 1 (max possible value)

     expect(diceCoefficient('abc', 'abc')).toBe(1)
"
15696," * \param [in,out] To  tower to move disk to

  */

 void TH(int n, tower *From, tower *Using, tower *To) {

     if (n == 1) {

         mov(From, To);
"
26622,"            graph.GetNeighbors(vertexB).Should().HaveCount(0);

             graph.GetNeighbors(vertexC).Should().HaveCount(0);

         }

         [Test]

         public void GraphRemoveVertexTest_ShouldThrowVertexNotInGraph()
"
22662,"        std::cout << ""\nThe paragraph is empty"" << std::endl;

     } else {

         int ch = 0;

         while (true) {
"
10811,"                var d = x.Degree;

                 var y = a[d];

                 // While A[d] is not empty, we can't blindly put x here

                 while (y != null)

                 {
"
86436,"    ///         OEIS:http://oeis.org/A000108.

     ///     </para>

     /// </summary>

     public class CatalanSequence : ISequence

     {

         /// <summary>
"
29894,"    ...     print(i)

     (2, 3)

     (3, 1)
"
13109,"            long countOfVisitedVertices = 0;

             //Act

             dfsSearcher.VisitAll(graph, vertex1, (Vertex<int> vertex) => countOfVisitedVertices++);
"
29438," * @param pow contains the degree

  * @returns none

  */

 void create_polynomial(struct term **poly, int coef, int pow)

 {
"
43032,"        msg = bytes(""Test String"", ""utf-8"")

         self.assertEqual(SHA256(msg).hash, hashlib.sha256(msg).hexdigest())

 def main() -> None:

     """"""

     Provides option 'string' or 'file' to take input
"
46140,"    std::cout << ""\nPre-order test Passed!"" << std::endl;

     test2(binaryTree, root);  // run postorder-iterative test

     std::cout << ""\nPost-order test Passed!"" << std::endl;

     test3(binaryTree, root);  // run inorder-iterative test

     std::cout << ""\nIn-order test Passed!"" << std::endl;
"
62413,"*/

 export const longestPalindromeSubsequence = function (s) {

   const n = s.length

   const dp = new Array(n).fill(0).map(item => new Array(n).fill(0).map(item => 0))
"
38999,"    if pt:

         alive -= 1

     else:

         dead -= 1

     # running the rules of game here.
"
13100,"			go Heaps(permutationsCh, i)

 			value = <-permutationsCh

 			sort.Strings(value)
"
28996,"        }

     }

 }
"
25518,"        public static double[,] Copy(this double[,] matrix)

         {

             var result = new double[matrix.GetLength(0), matrix.GetLength(1)];

             for (var i = 0; i < matrix.GetLength(0); i++)

             {
"
18790,"    if (newSize > index) {

       System.arraycopy(elements, index + 1, elements, index, newSize - index);

     }

     elements[this.size = newSize] = null;

   }
"
14104,"        public int IndexOf(T data)

         {

             var current = Head;

             var index = 0;

             while (current is not null)
"
71154,"<?php

 //get the digits value by it's place

 function getDigit($num,$i){

     return floor(abs($num) /pow(10,$i))%10;

 }

 function digitsCount($num){
"
59634,"        

         long b = a;

         int sum = 0;
"
17178,"package Maths;

 import java.util.*;

 import java.io.*;
"
19854," * table.

  */

 #include <stdio.h>

 #include <stdlib.h>

 #include <time.h>
"
21818,"static void place();      // used by the computer to place O

 static void placey(int);  // used in Double Player mode by the 2nd player to

                           // place the position of O
"
14970," * Returns a slice of the wanted elements for convenience

  * Efficient mainly because it never performs a full sort.

  *
"
21282,"                (""95%"", lambda x: x.quantile(0.95)),

                 (""max"", lambda x: x.max()),

                 (""count"", lambda x: x.count()),

                 (""stdev"", lambda x: x.std()),

                 (""mode"", lambda x: x.mode()[0]),

                 (""median"", lambda x: x.median()),
"
10407,"    MST_Array[0].key = 0;

 }

 void updateNear() {

     for (int v = 0; v < V; v++) {

         int min = INFINITY;
"
52138,"            42677, 42683, 42689, 42697, 42701, 42703, 42709, 42719, 42727, 42737, 42743, 42751, 42767, 42773, 42787,

             42793, 42797, 42821, 42829, 42839, 42841, 42853, 42859, 42863, 42899, 42901, 42923, 42929, 42937, 42943,

             42953, 42961, 42967, 42979, 42989, 43003, 43013, 43019, 43037, 43049, 43051, 43063, 43067, 43093, 43103,

             43117, 43133, 43151, 43159, 43177, 43189, 43201, 43207, 43223, 43237, 43261, 43271, 43283, 43291, 43313,

             43319, 43321, 43331, 43391, 43397, 43399, 43403, 43411, 43427, 43441, 43451, 43457, 43481, 43487, 43499,

             43517, 43541, 43543, 43573, 43577, 43579, 43591, 43597, 43607, 43609, 43613, 43627, 43633, 43649, 43651,
"
12844,"                { new DateTime(2015, 2, 2), ""TestTime2"" }, //Monday

                 { new DateTime(2015, 1, 6), ""TestTime3"" }, //Tuesday

                 { new DateTime(2015, 1, 7), ""TestTime4"" }, //Wednesday
"
83944,"    """"""

     # base case

     if points_counts <= 3:

         return dis_between_closest_pair(points_sorted_on_x, points_counts)
"
77288,"    ]

     _CARD_NAME = [

         """",  # placeholder as lists are zero indexed

         ""One"",
"
10648,"    std::cout << ""Enter "" << n << "" numbers: "";

     int num;

     // Input
"
21643,"                if (board[i, j])

                 {

                     return false;

                 }

             }

             // To check diagonal attack bottom-left range.
"
33674,"    return majorNum;

 }
"
20304,"{

     public static class GeneralStringAlgorithmsTests

     {

         [Test]
"
15156,"    /// </summary>

     public interface ISequence

     {

         /// <summary>

         ///     Gets sequence as enumerable.

         /// </summary>
"
31754,"void createGraph(struct Graph *G, int V)

 {

     G->vertexNum = V;

     G->edges = (int **)malloc(V * sizeof(int *));

     for (int i = 0; i < V; i++)

     {
"
14458,"        public void FailOnEliminateEquationWithNonSquareMatrix()

         {

             // Arrange

             var nonSquareMatrix = new double[,] { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 }, { 0, 0, 0 } };

             var coefficients = new double[] { 1, 2, 3, 4 };
"
11810,"                    queue.Enqueue(connected);

                 }

                 else if (current != connected)

                 {
"
19419,"func TestIntersection(t *testing.T) {

 	td := []struct {

 		name   string

 		s1     Set
"
25102,"    return mulDigits.equals(faktorDigits);

   }

   // methode to Split the numbers to Digits

   static String splitIntoDigits(int num, int num2) {

     StringBuilder res = new StringBuilder();
"
48120,"        donor_preference = donor_pref[donor]

         recipient = donor_preference[num_donations[donor]]

         num_donations[donor] += 1

         rec_preference = recipient_pref[recipient]

         prev_donor = rec_record[recipient]
"
77145,"      high_divisors = low_divisors.map { |div| number / div }

       (low_divisors + high_divisors).uniq - [number]

     end

   end

 end
"
18989,"/// [adjacencyMatrix] edge weights, distances between nodes

 class Graph {

   List<String> nodes;
"
47880,"            {

                 array[mainIndex++] = left[leftIndex++];

             }
"
15514,"          hc_size = Tree<X>::t_size[v];

           hc_id = v;

         }

       }

     }

     h_heavychlid[u] = hc_id;
"
86589,"# shift 4 >> it means to rotate 4 places

 #

 # After shifting

 # e f g h i j k l m n o p q r s t u v w x y z a b c d

 #
"
15405,"import { extendedEuclideanGCD } from '../ExtendedEuclideanGCD'

 describe('extendedEuclideanGCD', () => {

   it('should return valid values in order for positive arguments', () => {

     expect(extendedEuclideanGCD(240, 46)).toMatchObject([2, -9, 47])

     expect(extendedEuclideanGCD(46, 240)).toMatchObject([2, 47, -9])

   })
"
65184,"        if (comp == -1)

             System.out.println(""No other strings found ""+

                                     ""with this prefix\n"");

         else if (comp == 0) 

             System.out.println(""No string found with""+ 

                                         "" this prefix\n"");
"
67562,"                    var predecessor = GetMax(node.Left!);

                     node.Left = Remove(node.Left!, predecessor.Key);

                     node.Key = predecessor.Key;

                 }

             }
"
22211,"The conjecture states the sequence will always reach 1 for any starting value n.

 """"""

 function collatz_sequence(n::N)where N<:Integer

 	sequence = [n]

 	while n != 1

 		n = n % 2 == 1 ? 3 * n + 1 : div(n, 2)
"
14305,"        for (k = 1; k <= totalNodes; k++)

           System.out.printf("" Page Rank of "" + k + "" is :\t"" + this.pagerank[k] + ""\n"");

         ITERATION_STEP = ITERATION_STEP + 1;

       }

       // Add the Damping Factor to PageRank

       for (k = 1; k <= totalNodes; k++) {
"
21982,"                // the current path is still possible to reach or surpass the maximum value,

                 // add current node to nodesQueue so that nodes below it can be further explored

                 if (left.UpperBound > maxCumulativeValue && left.CumulativeWeight < capacity)

                 {
"
26786," */

 ///===========================================

 #define exp(s) printf(""test s is:%s\n"",s)
"
14291,"    for (int i = 1; i <= 2; i++)

     {

         for (int j = 1; j <= 6; j++)

         {

             if (i == 1)

             {
"
99836,"            var decoded = encoder.Decode(encoded, key);

             // Assert

             Assert.AreEqual(message, decoded);
"
26291,"    arr[arr.indexOf('X')] = n

   })

   return arr.join('')

 }

 export { formatPhoneNumber }
"
20840,"        }

         final Entry<K, V> entry = data.get(key);

         moveNodeToLast(entry);

         return entry.getValue();

     }

     private void moveNodeToLast(Entry<K, V> entry) {
"
26189,"import { getRGBData } from '../Mandelbrot'

 // plot the results if the script is executed in a browser with a window-object

 if (typeof window !== 'undefined') {

   const rgbData = getRGBData()

   const width = rgbData.length
"
27120,"    /* number of buckets */

     int numberOfBuckets = max - min + 1;

     List<List<Integer>> buckets = new ArrayList<>(numberOfBuckets);
"
19290,"	degreeOfVertex := make([]struct{ degree, vertex int }, 0, g.vertices)

 	for v, neighbours := range g.edges {

 		degreeOfVertex = append(degreeOfVertex,

 			struct{ degree, vertex int }{
"
10827,"    @Override

     public void remove() {

       if (this.cursor < 0) throw new IllegalStateException();

       DynamicArray.this.remove(this.cursor);

       this.cursor--;
"
62546,"    if(t[n][W] != -1) {

       return t[n][W];

     }

     if (n == 0 || W == 0) {

       return 0;

     }
"
21940,"    for (int i = 0; i < size; i++) {

       array[i] = random.nextInt() % 100;

     }

     assert Arrays.stream(array).min().getAsInt() == findMin(array);

   }

   /**
"
77477,"  Tree.prototype.search = function (val) {

     const found = this.root.search(val)

     if (found !== null) {

       return found.value
"
40947,"  print(""Add key 28"");

   h.insertHash(28);

   print(""Add key 1"");

   h.insertHash(1);

   print(""Delete Key 28"");
"
33021,"            {

                 throw new ArgumentException($""{nameof(number)} cannot be negative"");

             }

             var tempNumber = number;

             var stringNumber = number.ToString();

             var digitsInNumber = stringNumber.Length;
"
13360,"    for (int i = 0; i < array.length; i++) {

       int randomIndex = i + random.nextInt(length - i);

       SortUtils.swap(array, randomIndex, i);
"
19246,"	for _, tc := range testCases {

 		t.Run(tc.name, func(t *testing.T) {

 			actual := Kmp(tc.text, tc.word)

 			if !reflect.DeepEqual(actual, tc.expected) {

 				t.Errorf(""Expected matches for pattern '%s' for string '%s' are: %v steps at position %v, but actual matches are: %v steps at position %v"",
"
78885,"        ///     Is the opposit of the Compile(...) method.

         /// </summary>

         /// <returns>Returns a string representation of the inner data structure.</returns>

         public override string ToString()

         {

             // creates return-string
"
17251,"        i++;

       } else {

         array[k] = array2[j];
"
68215,"    of a prime square, prime cube, and prime fourth power.

     >>> solution(50)

     4

     """"""
"
17688,"    sc.close();

   }

   /**
"
88665,"    // element not found

     printf(""element not found\n"");

     return -1;
"
21805,"     * The bzero() function erases the data in the n bytes of the memory

      * starting at the location pointed to, by writing zeros (bytes

      * containing '\0') to that area. The variables are emptied and then
"
73529,"        [TestCase(0, 0, 1, 255, 255, 255)]

         [TestCase(0, 1, 1, 255, 0, 0)]

         [TestCase(60, 1, 1, 255, 255, 0)]

         [TestCase(120, 1, 1, 0, 255, 0)]

         [TestCase(240, 1, 1, 0, 0, 255)]
"
15235,"        z = np.dot(X, theta)

         h = sigmoid_function(z)

         gradient = np.dot(X.T, h - y) / y.size

         theta = theta - alpha * gradient  # updating the weights

         z = np.dot(X, theta)

         h = sigmoid_function(z)
"
13815,"       polynomial in temp and increase the pointer poly1

        */

         if (poly1->pow > poly2->pow)

         {
"
22558,"[[Xorg_libxkbfile_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg"", ""Xorg_libX11_jll""]

 git-tree-sha1 = ""926af861744212db0eb001d9e40b5d16292080b2""
"
10894,"		name    string

 		a       []int

 		missing int
"
29053,"	// <00110100> 10011000  11011011 &

 	//  11111111  00000000  00000000 =

 	// <00110100> 00000000  00000000 >> 16

 	//  00000000  00000000 <00110100> =

 	red = byte((hex >> 16) & 0xFF)
"
23750,"        /// <summary>

         ///     Sorts array using Hoare partition scheme,

         ///     internal, in-place,

         ///     time complexity average: O(n log(n)),

         ///     time complexity worst: O(n^2),

         ///     space complexity: O(log(n)),
"
28986,"            }

           });

   public void startGame() {
"
16716,"# Example 1:

 # Input: num = 9669

 # Output: 9969

 # Explanation:

 # Changing the first digit results in 6669.
"
29562,"            // that column, return false;

             if (board[r][col] == num)

             {

                 return false;

             }

         }
"
77074,"export { CircularQueue }
"
11473,"        return;

     }

     // First insert the new key at the end

     heap_size++;

     int i = heap_size - 1;
"
28806,"  lowerPoints.push(p1)

   for (let i = 1; i < pointsLen; i++) {

     if (i === pointsLen - 1 || orientation(p1, points[i], p2) !== -1) {

       let upLen = upperPoints.length

       while (upLen >= 2 && orientation(upperPoints[upLen - 2], upperPoints[upLen - 1], points[i]) === -1) {
"
28265,"            {

                 Count--;

             }
"
27575,"    while y:  # --> when y=0 then loop will terminate and return x as final GCD.

         x, y = y, x % y

     return abs(x)
"
22191,"	// so can be stored as bytes.

 	var stack []byte

 	for i := 0; i < len(input); i++ {

 		if input[i] == '(' || input[i] == '{' || input[i] == '[' {

 			stack = append(stack, input[i])
"
24212," *

  * @param rgbData The image to which the algorithm is applied.

  * @param location The start location on the image.

  * @param targetColor The old color to be replaced.

  * @param replacementColor The new color to replace the old one.
"
19912,"      >>> moles_to_volume(0.82, 3, 300)

       90

       >>> moles_to_volume(8.2, 5, 200)

       10

     """"""

     return round(float((moles * 0.0821 * temperature) / (pressure)))
"
15152,"		}

 		return strg[0][0];

 	}

 	public static void main(String[] args) {
"
11928,"    return difference.length()

   }

   /**

    * Vector dot product

    *
"
15738," *

  * 0 & 0 -> 0

  * 0 & 1 -> 0

  * 1 & 0 -> 0

  * 1 & 1 -> 1
"
94903,"        {

             place();

         }
"
31305," * This implements Queue using two Stacks.

  *

  * <p>Big O Runtime: insert(): O(1) remove(): O(1) amortized isEmpty(): O(1)
"
13421,"            44131, 44159, 44171, 44179, 44189, 44201, 44203, 44207, 44221, 44249, 44257, 44263, 44267, 44269, 44273,

             44279, 44281, 44293, 44351, 44357, 44371, 44381, 44383, 44389, 44417, 44449, 44453, 44483, 44491, 44497,

             44501, 44507, 44519, 44531, 44533, 44537, 44543, 44549, 44563, 44579, 44587, 44617, 44621, 44623, 44633,
"
16244,"  public static double calculatePi(int iterations) {

     if (iterations < 0 || iterations > 500) {

       throw new IllegalArgumentException(""Please input Integer Number between 0 and 500"");
"
17132,"    // 2) Put array elements in different buckets

     for (int i = 0; i < n; i++) {

         int bi = n * arr[i];  // Index in bucket
"
12077,"        821,

         823,

         827,

         829,
"
13547,"	expectedError error

 	name          string

 }

 // Note that these are immutable therefore they are shared among all the search tests.

 // If your algorithm is mutating these then it is advisable to create separate test cases.
"
26296,"        ///     Gets or sets the number of nodes in the child linked list.

         /// </summary>

         public int Degree { get; set; }

         public void SetSiblings(FHeapNode<T> left, FHeapNode<T> right)

         {

             Left = left;
"
31451,"        /// <param name=""number"">A positive integer number.</param>

         public void Compile(int number)

         {
"
21115,"            ans += chr(ord(ch) ^ key)

         return ans

     def decrypt_string(self, content: str, key: int = 0) -> str:

         """"""

         input: 'content' of type string and 'key' of type int

         output: decrypted string 'content'
"
40002,"    }

 }
"
14204," *

  * Problem:

  *
"
11784," * @author 光城

  * @version v1

  * @date 2019-07-21
"
59782,"    int mid = (start + end) / 2;

     ArrayList<Skyline> sky1 = this.findSkyline(start, mid);

     ArrayList<Skyline> sky2 = this.findSkyline(mid + 1, end);

     return this.mergeSkyline(sky1, sky2);

   }
"
18226,"	}

 	return arr

 }
"
31810,"                maximum = (*vec)[i];

                 maximumindex = i;

             }
"
11388,"    }

     return password.toString();

   }

 }
"
19013,"            Array.Copy(output, array, array.Length);

         }

     }
"
33617,"		{

 			input:    []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10},

 			expected: []int{-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10},

 			name:     ""Reversed Signed #2"",

 		},
"
17481,"if __name__ == ""__main__"":

     print(solution())
"
26657,"		if max != 1024 {

 			t.Fatalf(""Error: BitwiseMax returned bad value"")

 		}

 	})

 	t.Run(""Testing(32bit) a = -6 and m = -6: "", func(t *testing.T) {
"
19889,"                var (lsck, lsdk) = GetKeys(tree.LeftChild);

                 compressionKeys.AddMany(lsck.Select(kvp => (kvp.Key, ""0"" + kvp.Value)));

                 decompressionKeys.AddMany(lsdk.Select(kvp => (""0"" + kvp.Key, kvp.Value)));
"
31099,"		}

 		if !reflect.DeepEqual(got, want) {

 			t.Errorf(""got: %v, want: %v"", got, want)

 		}
"
23612,"            j--;

         } while (arr[j] > pivot);

         /* if two pointers met */

         if (i >= j)
"
15153,"/**

  * @brief Test function for ::crc32

  * \returns None
"
21135,"    binary_heap.insert(12)

     # pop root(max-values because it is max heap)

     print(binary_heap.pop())  # 15

     print(binary_heap.pop())  # 12

     # get the list and size after operations

     print(binary_heap.get_list)
"
18111,"# Return memo[n].

 # recurse(n, memo) - Recurrence Relation is n = (n - 1) + (n - 2)

 # return memo[n] if memo[n] exists.

 # otherwise, memo[n] = recurse(n - 1, memo) + recurse(n - 2, memo)

 # @param {Integer} n

 # @return {Integer}
"
13347,"                        visited.append(node[1])

                         ss = node[1]

                         break

             # check if all the children are visited
"
22271,"            self.open_nodes.sort()

             current_node = self.open_nodes.pop(0)

             if current_node.pos == self.target.pos:
"
84969,"    else {

       val m: Int = lo + (hi - lo) / 2

       arr(m) match {

         case mv if (mv < elem)  => lowerBound(arr, elem, m + 1, hi)

         case mv if (mv >= elem) => lowerBound(arr, elem, lo, m)

       }
"
21265,"    """"""

     assert (

         c % greatest_common_divisor(a, b) == 0

     )  # greatest_common_divisor(a,b) function implemented below

     (d, x, y) = extended_gcd(a, b)  # extended_gcd(a,b) function implemented below

     r = c / d
"
11200," * @param poly first term of the polynomial to be displayed

  * @returns none

  */

 void display_polynomial(struct term *poly)

 {

     while (poly != NULL)
"
58627,"     * @param ret_value Variable to hold the maximum value.

      * @return true If maximum value was successfully found.

      * @return false Otherwise.

      */

     bool find_max(T& ret_value) { return find_max(root_, ret_value); }
"
33006," * \brief Algorithms for encryption and decryption

  */

 namespace ciphers {

 /** \namespace atbash

  * \brief Functions for the [Atbash
"
89349,"                // N-bonacci func

     std::vector<uint64_t> output_array1 = {

         1, 1};  // It is the expected output series of length m

     assert(std::equal(std::begin(arr1), std::end(arr1),

                       std::begin(output_array1)));
"
56361,"    according to the arguments passed

     """"""

     # This circuit has num_qubits+1 qubits: the size of the input,

     # plus one output qubit

     oracle_qc = q.QuantumCircuit(num_qubits + 1)
"
15879,"    double **X = (double **)malloc(N * sizeof(double *));

     // cluster nodex in 'x' * cluster nodes in 'y' * 2

     struct kohonen_array_3d W;

     W.dim1 = num_out;

     W.dim2 = num_out;
"
12370,"// Method to remove minimum element (or root) from min heap

 int MinHeap::extractMin() {

     if (heap_size <= 0)

         return INT_MAX;

     if (heap_size == 1) {
"
14986,"  # where the key is the array element and the counter is the value

   # increase counter when duplicate is found

   array.each do |num|

     if result_hash[num].nil?

       result_hash[num] = 1
"
27440,"            match this with

             | c when c >= 'A' && c <= 'Z' -> true

             | _ -> false

         member this.IsLower(): bool =

             match this with
"
15627,"Statistics = ""10745b16-79ce-11e8-11f9-7d13ad32a3b2""

 Symbolics = ""0c5d862f-8b57-4792-8d23-62f2024744c7""

 [compat]

 DifferentialEquations = ""~6.18.0""

 ModelingToolkit = ""~5.26.0""

 Plots = ""~1.19.4""
"
18361,"  tree.left.right.left = Node(6);

   tree.right.left = Node(7);

   tree.right.left.left = Node(8);

   tree.right.left.left.right = Node(9);

   print(is_full_binary_tree(tree));
"
98267,"            fibMinus1 = fibNumber;

             fibNumber = fibMinus2 + fibMinus1;

         }

         int offset = -1;
"
23038,"{  

     //user-defined function that checks if the given number is Keith or not  

     static boolean isKeith(int x)  
"
73012,"    const negativeFactorial = calcFactorial(-5)

     expect(negativeFactorial).toBe(

       'Sorry, factorial does not exist for negative numbers.'

     )

   })

   it('should return the factorial of a positive number', () => {
"
27592,"            for (uint8_t cid = 0; cid < 4; cid++) {

                 blocks[bid] = (blocks[bid] << 8) +

                               padded_message[chunk * 64 + bid * 4 + cid];

             }

             // Extend the 16 32-bit words into 80 32-bit words
"
48890,"	})

 	t.Run(""Test DelAtBeg()"", func(t *testing.T) {

 		want := interface{}(3)

 		got := list.DelAtBeg()

 		if got != want {

 			t.Errorf(""got: %v, want: %v"", got, want)
"
21381,"  /** Value of node */

   public int value;

   /** This points to the link in front of the new link */

   public Link next;

   /** This points to the link behind the new link */
"
25931,"	},

 	{

 		name:          ""Error test 1"",

 		description:   ""Testing whether we receive the expected errors gracefully"",

 		base:          50,
"
26248,"}

 export { largestAdjacentNumber }
"
26752,"    k++;

   }

   while (j < length2) {

     list[k] = rightList[j];
"
20508,"    for i in range(2, max + 1):

         temp = pre_numerator

         e_cont = 2 * i // 3 if i % 3 == 0 else 1
"
25261,"puts(remove_vowels(s))

 # => """"
"
25794,"   */

   public Node findSuccessor(Node n) {

     if (n.right == null) return n;

     Node current = n.right;

     Node parent = n.right;
"
17001,"    char *t = base + index * elem_size;

     memcpy(t, val, elem_size);

     while (index > 0)

     {

         index = ((index - 1) >> 1);

         tree->combine(base + (2 * index + 1) * elem_size,
"
28879,"        |> Seq.mapi

             (fun i x ->

                 let myv = pattern.[0]

                 if x = pattern.[0] then

                     (i, s.[i..(i + (pattern.Length - 1))])
"
11141,"using System;

 using System.Collections.Generic;

 namespace Algorithms.Strings

 {
"
32037," * @param y array containing ordinates of points (must be pre-allocated)

  * @param N number of points in the the arrays

  */

 void display_graph(const double *x, const double *y, size_t N, double l,

                    double k)

 {
"
40217,"# A queue is like a waiting list.

 # Imagine you are waiting in line to buy the latest Android product

 # or getting a parking ticket. These are queues!

 #

 #

 # 1. An array can behave like a Queue if you use the right methods.
"
51457,"git-tree-sha1 = ""aa31987c2ba8704e23c6c8ba8a4f769d5d7e4f91""

 uuid = ""559328eb-81f9-559d-9380-de523a88c83c""

 version = ""1.0.10+0""
"
93784,"            }

             var item = heap.Push(10);

             for (var i = 0; i < 10; i++)
"
19901,"                root = null;

                 Count--;

                 return null;
"
25935,"/**

 * Implementation of Flash Sort

 */

 // const array = [3, 0, 2, 5, -1, 4, 1, -2]

 // flashSort(array)
"
20649,"    return 0;

 }
"
19162,"          lcsMatrix[i][j] = lcsMatrix[i - 1][j - 1] + 1;

         } else {

           lcsMatrix[i][j] =

               lcsMatrix[i - 1][j] > lcsMatrix[i][j - 1] ? lcsMatrix[i - 1][j] : lcsMatrix[i][j - 1];

         }
"
15565,"    _hash(seed, args...);

     return seed;

 }
"
13032,"			if err != nil {

 				t.Fatalf(""Failed to Decrypt test message:\n\tDescription: %v\n\tErrMessage: %v"", test.description, err)

 			}
"
12141,"    std::cin >> n;

     int *a = new int[n];

     int i;

     std::cout << ""Enter the n numbers:"" << std::endl;

     for (i = 0; i < n; i++) std::cin >> a[i];

     std::cout << ""GCD of entered n numbers:"" << gcd(a, n) << std::endl;
"
28664,"            }

             // Set current node as parent to move up tree

             return node.Parent.Parent;

         }
"
12356,"#       backtrack return with (() 2 1 [""((()))"", ""(()())"", ""(())()""]

 #     backtrack return with (( 2 0 [""((()))"", ""(()())"", ""(())()""]

 #     backtrack called with () 1 1 [""((()))"", ""(()())"", ""(())()""]

 #       backtrack called with ()( 2 1 [""((()))"", ""(()())"", ""(())()""]

 #         backtrack called with ()(( 3 1 [""((()))"", ""(()())"", ""(())()""]
"
29912,"# Example

 ```julia

 area_square(10) # returns 100

 area_square(-1) # returns DomainError

 ```
"
21466,"#

 # Input: n = 2

 # Output: 15

 # Explanation: The 15 sorted strings that consist of vowels only are

 # [""aa"",""ae"",""ai"",""ao"",""au"",""ee"",""ei"",""eo"",""eu"",""ii"",""io"",""iu"",""oo"",""ou"",""uu""].

 # Note that ""ea"" is not a valid string since 'e' comes after 'a' in the alphabet.
"
52501,"        }

         [Test]

         public void GraphAddVertexTest_Success()

         {

             var graph = new DirectedWeightedGraph<char>(10);
"
11750,"			""Encrypt a simple string with key 13"",

 			""hello"",

 			13,

 			""uryyb"",

 		},
"
10598,"                base64_string.push_back('=');  // padding characters

             }

         } else {

             // Take remaining two bits of first character as 6-bit number

             base64_string.push_back(chars[((first_byte & 3) << 4)]);
"
11507,"# K folds cross validation is essential for machine learning

 # createFolds function in package caret is easy to use

 # here we write our own function

 get_k_folds<-function(y = c(),k = 10, isList = TRUE, seed = 123){

   set.seed(seed)

   folds<-sample(1:length(y), length(y))
"
15149,"      int maxStep,

       boolean useDistanceColorCoding) {

     if (imageWidth <= 0) {

       throw new IllegalArgumentException(""imageWidth should be greater than zero"");
"
28629,"        lastElement = nums[numsSize - 1];

         for (j = numsSize - 1; j > 0; j--)

         {
"
12991,"number is the first example having seven primes among the ten generated numbers,

 yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993.

 Consequently 56003, being the first member of this family, is the smallest prime
"
30676,"		next:  next,

 	}

 }

 func (hm *HashMap) hash(key interface{}) uint64 {

 	h := fnv.New64a()

 	_, _ = h.Write([]byte(fmt.Sprintf(""%v"", key)))
"
24239,"    while not is_sorted(collection):

         random.shuffle(collection)

     return collection

 if __name__ == ""__main__"":

     user_input = input(""Enter numbers separated by a comma:\n"").strip()

     unsorted = [int(item) for item in user_input.split("","")]
"
13547,"    /// </summary>

     public static class EulerMethod

     {

         /// <summary>

         ///     Loops through all the steps until xEnd is reached, adds a point for each step and then

         ///     returns all the points.
"
15354,"                ny.Parent = nx;

             }

             else if (ny.Rank > nx.Rank)

             {

                 nx.Parent = ny;

             }
"
79411,"    }

     do {

         prev_mean = mean;

         // compute the section ratio width

         double ratio = (lim_b - lim_a) / M_GOLDEN_RATIO;
"
13457,"        public ArrayBasedQueue(int capacity)

         {

             queue = new T[capacity];

             Clear();

         }
"
19959,"if __name__ == ""__main__"":

     import doctest

     doctest.testmod()
"
87476,"or

 python3 -m doctest -v selection_sort.py

 For manual testing run:

 python selection_sort.py
"
28076,"            }

             printf(""%d\n"", maxNumber);

         }
"
21813,"        for i = 1 to lenSourceSeq + 1 do

             costs.[i].[0] <- i * deleteCost

             ops.[i].[0] <- sprintf ""D%s"" (sourceSeq.[i - 1])

         for i = 1 to lenDestinationSeq + 1 do

             costs.[0].[i] <- i * insertCost

             ops.[0].[i] <- sprintf ""I%s"" (destinationSeq.[i - 1])
"
27289,"}  // namespace machine_learning

 using machine_learning::adaline;

 /** @} */

 /**

  * test function to predict points in a 2D coordinate system above the line

  * \f$x=y\f$ as +1 and others as -1.
"
19098,"}
"
96509,"    }

     return array;

   }

   // Driver Program

   public static void main(String[] args) {

     // Integer Input
"
22870,"        private readonly int sizeNode;

         private UnrolledLinkedListNode start = null!;

         private UnrolledLinkedListNode end = null!;

         /// <summary>

         /// Initializes a new instance of the <see cref=""UnrolledLinkedList""/> class.

         /// Create a unrolled list with start chunk size.
"
23836,"}
"
14203,"        private static void Sort(string[] array, int l, int r, int d, string[] temp)

         {

             if (l >= r)

             {

                 return;
"
23011,"/**

  * @file

  * @brief This program aims at calculating the GCD of n numbers by division

  * method

  *

  * @see gcd_iterative_euclidean.cpp, gcd_recursive_euclidean.cpp
"
26435,"    while (q > 0) {

       now = q % 8;

       octnum = (now * (int) (Math.pow(10, i))) + octnum;
"
38498,"    int ans = minimalpartitions(word);

     System.out.println(

         ""The minimum cuts needed to partition \"""" + word + ""\"" into palindromes is "" + ans);

     input.close();

   }
"
12387,"    """"""

     arr_size = len(arr)

     for _ in range(arr_size):

         for i in range(_ % 2, arr_size - 1, 2):

             if arr[i + 1] < arr[i]:
"
25601,"    public synchronized String decrypt(String encryptedMessage) {

         return new String((new BigInteger(encryptedMessage)).modPow(privateKey, modulus).toByteArray());

     }

     /**
"
28599,"    // then this item cannot be included

     // in the optimal solution

     if (wt[n - 1] > W) return knapSack(W, wt, val, n - 1);

     // Return the maximum of two cases:

     // (1) nth item included

     // (2) not included
"
11811,"    })

     it('should correctly sort an input list that contains only decimal numbers', () => {

       expect(combSort([1.0, 1.42, 2.56, 33.45, 13.12, 2.3])).toEqual([1.0, 1.42, 2.3, 2.56, 13.12, 33.45])

     })

     it('should correctly sort an input list that contains only a mix of whole and decimal', () => {

       expect(combSort([32.40, 12.42, 56, 45, 12, 3])).toEqual([3, 12, 12.42, 32.40, 45, 56])
"
13030,"    for (int i = 0; i < mat_size; i++)

     {

         printf(""%d/5 Checking for %.3g --> "", i + 1, y[i]);

         char result = 0;

         for (int j = 0; j < mat_size && !result; j++)
"
80944,"        aux = s[i];

         s[i] = s[k];

         s[k] = aux;
"
31992,"    stack->count = 0;

     stack->head = NULL;

     return stack;

 }

 /* Check empty stack*/

 int Stack_empty(T stack)
"
27087,"            //  Let's be thorough.  500 phi values!

             //  Initial test of 69 number from table at https://oeis.org/A000010/list and passed test.

             //  Extended out to 500 values from https://primefan.tripod.com/Phi500.html and passed initial 69

             // along with remaining values.

             var check = new BigInteger[]
"
42587,"// details:

 // 	Queue Data Structure : https://www.geeksforgeeks.org/queue-data-structure/

 //  Queue (abstract data type) : https://en.wikipedia.org/wiki/Queue_(abstract_data_type)
"
33220,"        """"""

         Represents semi-circle with radius 2

         >>> [function_to_integrate(x) for x in [-2.0, 0.0, 2.0]]
"
87195,"})
"
17484,"    792070839848372100000

 */

 /**
"
16847,"end
"
24445,"            for (var i = 0; i < 9; i++)

             {

                 var newVal = heap.Pop();

                 Assert.True(currentVal < newVal);

                 currentVal = newVal;

             }
"
27584,"			expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},

 			name:     ""Sorted Unsigned"",

 		},
"
12744,"                    if (content[e + j] != pattern[j])

                     {

                         break;

                     }

                 }

                 if (j == m)
"
15530,"int main()

 {

     int n = 0;

     int sum = 0;
"
10155,"/** Main function */

 int main(int argc, char **argv)

 {

     srand(time(NULL));  // initialize random number generator
"
57680," */

 #include <cassert>   /// for assert

 #include <iostream>  /// for IO operations

 /**

  * @namespace bit_manipulation
"
12435,"   * @param radius radius of the floor

    * @param height height of the cylinder.

    */

   private static double surfaceAreaCylinder(double radius, double height) {

     return 2 * (Math.PI * radius * radius + Math.PI * radius * height);

   }
"
29880,"      expect(cycleSort([-1, -21, -2, -35])).toEqual([-35, -21, -2, -1])

     })

     it('should correctly sort an input list that contains only a mix of positive and negative numbers', () => {

       expect(cycleSort([-40, 42, 56, -45, 12, -3])).toEqual([-45, -40, -3, 12, 42, 56])

     })

     it('should correctly sort an input list that contains only whole numbers', () => {
"
20415,"        N2, sizeof(uint8_t)); /* array to store the sum of the large

 numbers. For safety, we make it twice the length of a number. */

     FILE *fp = fopen(""num.txt"", ""rt""); /* open text file to read */

     if (!fp)

     {
"
46533,"    if not arr:

         return solution

     sublist = [arr.pop(0)]

     for i, item in enumerate(arr):
"
31582,"        /// <summary>

         ///     Finds a factor of a given number or returns false if it's prime.

         /// </summary>

         /// <param name=""n"">Integer to factor.</param>

         /// <param name=""factor"">Found factor.</param>

         /// <returns><see langword=""true"" /> if factor is found, <see langword=""false"" /> if <paramref name=""n"" /> is prime.</returns>
"
27535,"   *

    * @param left the skyline of the left part of points

    * @param right the skyline of the right part of points

    * @return left the final skyline

    */
"
22375,"    >>> all(is_palindrome_recursive(key) is value for key, value in test_data.items())

     True

     """"""

     if len(s) <= 1:

         return True
"
31365,"                divisor -= 1

     raise ValueError(""That number is larger than our acceptable range."")

 if __name__ == ""__main__"":

     print(f""{solution() = }"")
"
86327,"   * This method adds an edge to the graph between two specified vertices

    *

    * @param from the data of the vertex the edge is from

    * @param to the data of the vertex the edge is going to

    * @return returns true if the edge did not exist, return false if it already did

    */
"
11485,"/**

  * @brief Find index of or value in an array

  *

  * @param [in,out] p array to search and update
"
82304,"            convex_hull[1] = points[i]

     i += 1

     for i in range(i, n):
"
29537,"   * double number is created. If that number is smaller than ber, then the spesific element

    * changes. On the other hand, if it's bigger than ber, it does not. Based on these changes. the

    * boolean variable messageChanged, gets the value: true, or false.

    */

   public void changeMess() {

     for (int y : message) {
"
31379,"];

 const TENS = [

   'Ten',

   'Twenty',

   'Thirty',

   'Forty', // [It's 'Forty' NOT 'Fourty'](https://www.grammarly.com/blog/forty-fourty/)
"
21086,"    free(inputString);

     return root;

 }

 /**
"
23072,"export interpolation_search

 export jump_search

 export linear_search

 # Exports: sorts
"
40406,"  // Wikipedia reference: https://en.wikipedia.org/wiki/Rankine_scale

   // Wikipedia reference: https://en.wikipedia.org/wiki/Fahrenheit

   return Math.round((rankine) - 459.67)

 }

 const rankineToKelvin = (rankine) => {
"
14911,"        return self.maximumFlowAlgorithm.getMaximumFlow()

     def setMaximumFlowAlgorithm(self, Algorithm):

         self.maximumFlowAlgorithm = Algorithm(self)

 class FlowNetworkAlgorithmExecutor:

     def __init__(self, flowNetwork):
"
25134,"                tempBoard.makeMove(player: opponent, position: (i, j))

                 let moveVal = minMax(board: tempBoard, player: opponent, opponent: player,

                                      depth: depth,

                                      alpha: GameStateValue.min.rawValue, beta: GameStateValue.max.rawValue,
"
22637,"        # Didn't find something in there

         return False

     return True
"
33026,"	exp := math.Exp(b * log)

 	result := exp * p

 	return math.Round(result)

 }
"
59037,"import 'dart:collection';

 import 'package:test/test.dart';

 /// Implementation of Depth First Search

 /// https://en.wikipedia.org/wiki/Depth-first_search
"
16273,"			HuffmanNode hn = new HuffmanNode(); 

 			hn.c = charArray[i]; 

 			hn.data = charfreq[i]; 

 			hn.left = null; 
"
32911,"                // set the cumulative weight of first node to cumulative weight of parent node + weight of the associated item,

                 // set the cumulative value of first node to cumulative value of parent node + value of current level's item.

                 left.CumulativeWeight = parent.CumulativeWeight + weightSelector(items[left.Level]);

                 left.CumulativeValue = parent.CumulativeValue + valueSelector(items[left.Level]);

                 right.CumulativeWeight = parent.CumulativeWeight;

                 right.CumulativeValue = parent.CumulativeValue;
"
22909,"            current_fwd_node = self.fwd_bfs.node_queue.pop(0)

             current_bwd_node = self.bwd_bfs.node_queue.pop(0)

             if current_bwd_node.pos == current_fwd_node.pos:

                 self.reached = True

                 return self.retrace_bidirectional_path(
"
72894,"    for (i = 0; i < n; i++) printf(""%d "", arr[i]);

     printf(""\n"");

 }
"
20395,"            // Act

             Action act = () => subject.FindIndex(collection, 42);

             // Assert
"
10756,"        public bool Contains(params (DateTime, TValue)[] timeline)

             => timeline.Any(@event => Contains(@event.Item1, @event.Item2));

         /// <summary>

         ///     Check if timeline contains any of the event of the provided <paramref name=""timeline""/>.

         /// </summary>
"
33777,"        /// <summary>

         ///     Sorts array using specified comparer,

         ///     internal, in-place, stable,
"
26855,"            else

                 ub2 = n - 1;

             i = lb1;
"
28977,"    }

     if (divisor < 0)

     {

         sign *= -1;

     }

     else
"
48370,"      20

       >>> pressure_and_volume_to_temperature(8.2, 5, 3)

       60
"
12892,"{

     unsigned short max_digits = 0, max_idx_number = 0;

     clock_t start_time = clock();

     short deno;
"
15716,"            // unit vector with single element should be [-1] or [+1]

             Math.Abs(ThinSvd.RandomUnitVector(1)[0]).Should().BeApproximately(1, epsilon);

             // two randomly generated unit vectors should not be equal 

             ThinSvd.RandomUnitVector(10).Should().NotBeEquivalentTo(ThinSvd.RandomUnitVector(10));

         }
"
23278,"""""""

 The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so

 the first ten triangle numbers are:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
"
24314,"import UIKit

 public class BoardView: UIView {

     // MARK: -- Public

     public var gameModel: GameModel!
"
76762,"   * Calculate the count of the list manually

    *

    * @return count of the list

    */

   public int count() {
"
17686,"    }

     uint32_t tortoise = in_arr[0];  ///< variable tortoise is used for the longer

                                     ///< jumps in the array
"
36232,"        break

       end

     end

     nums1[pointer1] = (nums1_value < max ? max : -1)

   end
"
15951,"    }

 }
"
18658,"        else if (sign == -1 && prev < value)

             return (0);

         i++;

     }

     return (value);

 }
"
29815,"    def appendleft(self, val: Any) -> None:

         """"""

         Adds val to the beginning of the deque.

         Time complexity: O(1)

         >>> our_deque_1 = Deque([2, 3])

         >>> our_deque_1.appendleft(1)
"
56747,"  b = parseInt(b, 16)

   const obj = { r, g, b }

   return obj

 }

 export { hexStringToRGB }

 // > hexStringToRGB('ffffff')
"
20782,"            else if (!Contains(key))

             {

                 throw new KeyNotFoundException($""Key {key} is not in the tree!"");

             }

             else

             {
"
28329,"    """"""

     if not isinstance(node, TreeNode) or not node:

         return

     stack: list[TreeNode] = []
"
30755,"            validate = Luhn.Validate(number);

             // Assert

             Assert.True(validate);
"
99589,"  return result

 }

 const FibonacciMatrixExpo = (n) => {

   // F(0) = 0, F(1) = 1
"
17496,"        for (int i = 0; i < cipherSmall.length(); i++) {

             cipherMap.put(beginSmallLetter++, cipherSmall.charAt(i));

             cipherMap.put(beginCapitalLetter++, cipherCapital.charAt(i));

         }

         for (int i = 0; i < message.length(); i++) {
"
54774,"    MinPriorityQueue q = new MinPriorityQueue(8);

     q.insert(5);

     q.insert(2);

     q.insert(4);
"
30053,"	return &Node{val, nil, nil}

 }
"
30569,"    i = 0;

     for (start = 0; start < arrSize; start++)

     {

         arr[start] = tmp[i];
"
10602,"            [Random(0, 1000, 10)] int n,

             [Random(-100, 1100, 10)] int missingItem)

         {
"
25776,"    s.pop();  /// remove the topmost element from the stack

     assert(s.top() == 1);

     s.push(5);             /// insert an element into the stack

     assert(s.top() == 5);  /// topmost element in the stack should now be 5

     s.pop();               /// remove the topmost element from the stack
"
26523,"            // Assert

             Assert.IsEmpty(indexes);

         }

         [Test]
"
14944,"    >>> solution(10, 22)

     49

     >>> solution(0, 0)

     0

     >>> solution(1, 1)

     0
"
11411,"    return new TypeError('Argument is not a number.')

   }

   // create a variable to store the sum of all digits factorial.

   let sumOfAllDigitFactorial = 0

   // convert the number to string for convenience.

   let newNumber = number
"
14764,"	0x1abc9c,

 	0x3498db,

 	0x9b59b6,
"
15523," */

 void segment_tree_update(segment_tree *tree, size_t index, void *val)

 {

     size_t elem_size = tree->elem_size;

     index = index + tree->length - 1;

     char *base = (char *)tree->root;
"
33030,"    sb.append(""["");

     for (int i = front; ; i = ++i % maxSize) {

       sb.append(queueArray[i]).append("", "");

       if (i == rear) {

         break;

       }
"
19695,"        // Num is assigned back its original value for the next iteration.

         num = num2;

         // Auxiliary method reverses the number.

         String reverse = reverse(newNum);

         // If the number is read the same as its reverse, then it is a palindrome.

         // The current base is returned.
"
29710,"}
"
33867,"[[Statistics]]

 deps = [""LinearAlgebra"", ""SparseArrays""]

 uuid = ""10745b16-79ce-11e8-11f9-7d13ad32a3b2""

 [[StatsAPI]]
"
14603," */

 function createGraph (V, E) {

   // V - Number of vertices in graph

   // E - Number of edges in graph (u,v,w)

   const adjList = [] // Adjacency list

   for (let i = 0; i < V; i++) {
"
12392,"git-tree-sha1 = ""024fe24d83e4a5bf5fc80501a314ce0d1aa35597""

 uuid = ""3da002f7-5984-5a60-b8a6-cbb66c0b333f""

 version = ""0.11.0""

 [[Colors]]

 deps = [""ColorTypes"", ""FixedPointNumbers"", ""Reexport""]
"
53221,"  result = case letter

            when 'a'

              count_vowel_strings(n - 1, letter = 'a') +

              count_vowel_strings(n - 1, letter = 'e') +

              count_vowel_strings(n - 1, letter = 'i') +

              count_vowel_strings(n - 1, letter = 'o') +
"
20501,"float profitPerUnit(Item x) { return (float)x.profit / (float)x.weight; }

 int partition(Item arr[], int low, int high) {

     Item pivot = arr[high];  // pivot

     int i = (low - 1);       // Index of smaller element

     for (int j = low; j < high; j++) {

         // If current element is smaller than or
"
99241,"                                type.measure=""auc""

                     )

 plot(cv.fit)

 # coefficients of each varibale
"
33591,"func Reverse(str string) string {

 	rStr := []rune(str)

 	for i, j := 0, len(rStr)-1; i < len(rStr)/2; i, j = i+1, j-1 {

 		rStr[i], rStr[j] = rStr[j], rStr[i]

 	}

 	return string(rStr)
"
24587,"    x = np.zeros((rows, 1), dtype=float)

     for row in reversed(range(rows)):

         sum = 0

         for col in range(row + 1, columns):

             sum += coefficients[row, col] * x[col]
"
12820,"python -m doctest -v p_series.py

 or

 python3 -m doctest -v p_series.py

 For manual testing run:
"
38525,"        gap = gap / SHRINK;

         int i = 0;

         while ((i + gap) < size)

         {  // similiar to the Shell Sort

             if (numbers[i] > numbers[i + gap])
"
56218," */

 struct Node {

     int64_t data = 0;      ///< The value/key of the node.

     struct Node *left{};   ///< struct pointer to left subtree.

     struct Node *right{};  ///< struct pointer to right subtree.
"
13130,"/**

  * @file

  * \brief Program to compute the [QR
"
24686,"  /**

    * Places element of type <E> at the desired index

    *

    * @param index the index for the element to be placed
"
32603,"        ///     Returns the Distance between this and other.

         /// </summary>

         /// <param name=""other"">Other vector.</param>

         /// <returns>The distance between this and other.</returns>
"
42460,"        output[15] = cells[3];

         return mergeCellsIntoBlock(output);

     }

     /**

      * Applies the Rijndael MixColumns to the input and returns the result.
"
67898,"    }

     if (p2 == r + 1)

     {

         while ((p1 < ((l + r) / 2) + 1))

         {

             b[c++] = a[p1];
"
24399,"  }

   /**

    * isEmpty helper method

    *
"
13417,"        }

         float getSalary(){

             return TotalMoney;

         }

         void print(){
"
21749,"  var x = 55;

   var index = jump_search(list, x);

   print('list:');

   print(list);

   print('Number ' + x.toString() + ' is at index ' + index.toString());

 }
"
12292,"def inorder_traversal(root)

   ans = []

   def traverse(node, ans)

     unless node.nil?

       traverse(node.left, ans)

       ans.push(node.val)
"
18492," * Query the segment tree

  * This function helps in range query of segment tree

  * This function assumes that the given range is valid

  * Performs the query in range [l,r]
"
31185,"    }

     return false;

   }

   /**

    * this method removes an edge from the graph between two specified vertices

    *
"
22921,"{

     // Start from the complete array and one by one reduce current size by one

     for (int curr_size = n; curr_size > 1; --curr_size)

     {
"
23297,"    candidate = 0

     for a in range(1, n // 3):

         # Solving the two equations a**2+b**2=c**2 and a+b+c=N eliminating c

         b = (n * n - 2 * a * n) // (2 * n - 2 * a)
"
24381,"import { LFUCache } from '../LFUCache'

 describe('LFUCache', () => {

   it('Example 1 (Small Cache, size=2)', () => {

     const cache = new LFUCache(2)

     cache.set(1, 1)
"
31733,"    return false;

 }
"
16109,"    }

 }

 int strStr(char *haystack, char *needle)

 {

     int i = 0; /* index for haystack */
"
18823,"        boolean exclude = subsetSum(arr, num - 1, Key);

         return include || exclude;

     }

 }
"
22833," * @brief 内联能提高函数效率，但并不是所有的函数都定义成内联函数！内联是以代码膨胀(复制)为代价，仅仅省去了函数调用的开销，从而提高函数的执行效率。

  * 如果执行函数体内代码的时间相比于函数调用的开销较大，那么效率的收货会更少！另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。

  * 以下情况不宜用内联：

  *  （1） 如果函数体内的代码比较长，使得内联将导致内存消耗代价比较高。

  *   (2)  如果函数体内出现循环，那么执行函数体内代码的时间要比函数调用的开销大。

  *
"
94389,"        int index = 0;

         for (int i = 0; i < arr.length; i++) {

             if (arr[i] < minKth) {

                 res[index++] = arr[i];

             }
"
11558,"     *

      * The bzero() function erases the data in the n bytes of the memory

      * starting at the location pointed to, by writing zeros (bytes

      * containing '\0') to that area. The variables are emptied and then

      * ready for use
"
25552,"    if (q.front == NULL) /* Queue contained only one node */

         q.rear = NULL;

     free(p);
"
32677,"    for (int k = 9; k >= 0; k--) {

       System.out.println(k);

     }

     // Reverse Function called

     reverseUsingRecursion(stack);
"
28858,"    assert Arrays.equals(hsvToRgb(330, 0.75, 0.5), new int[] {128, 32, 80});

     // Test rgbToHsv-method

     // approximate-assertions needed because of small deviations due to converting between
"
30493,"                { new DateTime(2015, 1, 1), ""TestTime5"" },

             };

             timeline[new DateTime(2000, 1, 1)] = new[] { eventName };

             timeline[new DateTime(2000, 1, 1)][0]

                 .Should()

                 .Be(eventName);
"
89822,"        return power(x, y / 2) * power(x, y / 2);

     return x * power(x, y / 2) * power(x, y / 2);

 }

 // Function to calculate order of the number

 int order(int x)
"
18042,"                ""Should be found: "" + shouldBeFound + "". Found ""+ integers[atIndex] + "" at index ""+ atIndex +"". An array length "" + size);

     }

 }"
15782,"    */

   def findMin(elements: List[Int]): Int = elements.foldLeft(elements.head) { (acc, i) => if (acc < i) acc else i }

 }
"
17802,"            double expectedSaturation,

             double expectedValue)

         {

             var hsv = RgbHsvConversion.RgbToHsv(red, green, blue);
"
12947,"        }

     } catch (const std::exception &e) {

         std::cerr << ""List is empty"" << e.what() << '\n';

     }
"
49542,"    int size = 6;

     int *numbers = malloc(size * sizeof(int));

     printf(""Insert %d unsorted numbers: \n"", size);

     int i;

     for (i = 0; i < size; ++i) scanf(""%d"", &numbers[i]);

     printf(""Initial array: "");
"
26033,"                yield return 2;

                 var queue = new Queue<int>();

                 queue.Enqueue(2);

                 var nextElement = 1;
"
25327,"  p merge_sort(list)

 end
"
26132,"        int mid = (right + left) / 2;

         struct TreeNode *new_val = malloc(sizeof(struct TreeNode));

         new_val->val = nums[mid];

         new_val->left = convertBST(nums, left, mid - 1);
"
12100,"puts lucas(3)

 # 4

 puts lucas('3')

 # Error: Provide number only!

 puts lucas(2)
"
31660,"        }

     }

 }
"
21694,"  let min = arr[0]

   let max = arr[0]

   for (let i = 0; i < arr.length; i++) {

     if (arr[i] > max) { max = arr[i] }

     if (arr[i] < min) { min = arr[i] }
"
19290,"    ///     ""a + b*i"": ""a"" is the real component, usually drawn on the x-axis, and ""b*i""

     ///     is the imaginary component, usually drawn on the y-axis. Most visualizations

     ///     of the Mandelbrot set use a color-coding to indicate after how many steps in

     ///     the series the numbers outside the set cross the divergence threshold.

     ///     Images of the Mandelbrot set exhibit an elaborate and infinitely

     ///     complicated boundary that reveals progressively ever-finer recursive detail
"
74720,"        // the last block is extended up to 8 bytes if the tail of the text is smaller than 8 bytes

         private static List<ulong> SplitTextToBlocks(string text)

         {

             List<ulong> blocks_list_plain = new List<ulong>();

             byte[] text_array = Encoding.ASCII.GetBytes(text);

             int offset = 8;
"
13904,"  */

 static void test()

 {

     const int size = rand() % 500; /* random array size */

     int *arr = (int *)calloc(size, sizeof(int));
"
19172,"				t.Errorf(""Wrong result! Expected:%v, returned:%v "", tv.missing, result)

 			}

 		})
"
27751,"        }

         private string AppendKey(string key, int length)

         {

             if (string.IsNullOrEmpty(key))

             {

                 throw new ArgumentOutOfRangeException($""{nameof(key)} must be non-empty string"");
"
61614,"    } // namespace shortest_common_supersequence

 } // namespace dynamic_programming

 /** 
"
17567," * @param filename File in which malloc or calloc has been called

  * @param line Line number in the file in which malloc or calloc has been called

  * @returns Position of the element in the list if the element is found, -1 otherwise.
"
80393,"}
"
21797,"class TwoPointers {

   public static void main(String[] args) {

     int[] arr = {10, 20, 35, 50, 75, 80};

     int key = 70;
"
31859,"        {

             // Arrange

             var testObj = new BitArray(5);

             // Act
"
16440,"}
"
68769,"   * or not

    */

   if (Array.isArray(array) === false) {

     return
"
20334,"    # Base Case

     if curr_ind == len(graph):

         # return whether path exists between current and starting vertices

         return graph[path[curr_ind - 1]][path[0]] == 1

     # Recursive Step

     for next in range(0, len(graph)):
"
30635,"		""I think RSA is really great"",

 	},

 }
"
86873,"// Result structure to hold occurrences

 type Result struct {

 	occurrences map[string][]int

 }

 // AhoCorasick Function performing the Basic Aho-Corasick algorithm.
"
25153,"{

     int union_set[MAX_SIZE];

     // Have all array indexes that you need to use reference themselves

     for (int i = 0; i < 10; i++)
"
12895,"}

 func BenchmarkIsPowerOfTwoBinaryMethod(b *testing.B) {

 	for i := 0; i < b.N; i++ {

 		IsPowerOfTwo(1024)

 	}
"
34008,"  public List<T> inorderSort() {

     List<T> sortedList = new ArrayList<>();

     inOrderSort(this.root, sortedList);
"
47183,"            }

             Count--;

         }

         /// <summary>

         ///     Removes edge between two vertices.
"
23500,"	while(n)

 	{

 		if(n%2)

 		{
"
69760,"    decimalNumber += binaryDigit * (Math.pow(2, index)) // Summation of all the decimal converted digits

   })

   return decimalNumber

 }
"
29937,"		for i := 0; i < N-l+1; i++ {

 			j := i + l - 1

 			if word[i] == word[j] {
"
31181,"        ...

     ValueError: area_ellipse() only accepts non-negative values

     >>> area_ellipse(-10, -20)

     Traceback (most recent call last):
"
27955,"                for (var k = i; k < pivot; k++)

                 {

                     if (i == k)

                     {
"
31021,"//Function sort the array using gnome sort

 void gnomeSort(List arr, var n) {

   if (arr == null || n == 0) return;
"
18283,"rescue StandardError => e

   puts e.message

 end
"
31637,"            TestAlgorithm(Algorithms.Other.FloodFill.BreadthFirstSearch, (1, 1), green, orange, (0, 1), violet);

         }

         [Test]

         public static void BreadthFirstSearch_Test3()
"
48356,"end

 puts 'Binary value of 4 is ' + decimal_to_binary(4).to_s

 # Binary value of 4 is 100

 puts 'Binary value of 31 is ' + decimal_to_binary(31).to_s

 # Binary value of 31 is 11111

 puts 'Binary value of 64 is ' + decimal_to_binary(64).to_s
"
31470,"""""""

 import numpy as np

 def softmax(vector):

     """"""
"
32214,"        }

     }

     return $number;

 }
"
27142,"  let binary = bin

   if (binary.length < 4) {

     binary = pad(binary, 4)

   }

   switch (binary) {
"
11339," * Hexadecimal Number.

  *

  * @param string $decimalNumber

  * @return string

  */
"
19829,"        parent.left = newNode;

         parent.left.parent = parent;

         return;

       } else {

         parent.right = newNode;
"
90711,"        313,

         317,

         331,
"
61458,"            Capacity = DefaultCapacity;

         }

         /// <summary>

         ///     Determines whether an element is in the <see cref=""ArrayBasedStack{T}"" />.
"
23495,"import ""dart:math"" show pow;

 import 'package:test/test.dart';

 // octal number to hex number

 Map<String, String> hex_table = {

   ""10"": ""A"",

   ""11"": ""B"",
"
25575,"                    output.Push(item);

                 }

             }

             return output.Peek();
"
29906,"package horspool

 // User defined.

 // Set to true to read input from two command line arguments

 // Set to false to read input from two files ""pattern.txt"" and ""text.txt""
"
91503,"      test(&(*G),&(*MST),V);

     }

     else
"
30715,"            Assert.AreEqual(9, heap.Pop());

             Assert.AreEqual(8, heap.Count);

             Assert.IsFalse(heap.Contains(9));

         }
"
94248,"    returns true if 'number' is odd, otherwise false.

     """"""

     # precondition
"
26135,"    ret = 1.0

     for i in range(1, r + 1):

         ret *= (n + 1 - i) / i

     return round(ret)

 def non_bouncy_exact(n: int) -> int:
"
18598,"        sut.makeMove(player: firstPlayer, position: position)

         sut.makeMove(player: secondPlayer, position: position)

         XCTAssertEqual(sut.symbol(forPosition: position), firstPlayer.symbol)

     }
"
41590,"        self.output = self.output_img = (

             np.ones((self.dst_h, self.dst_w, 3), np.uint8) * 255

         )
"
19132,"      // Euler method for next step

       yCurrent = eulerStep(xCurrent, stepSize, yCurrent, differentialEquation);

       xCurrent += stepSize;
"
16301,"# A customer's wealth is the amount of money they have in all

 # their bank accounts. The richest customer is the customer that

 # has the maximum wealth.

 #

 # Example 1:

 # Input: accounts = [[1,2,3],[3,2,1]]
"
23307,"    list[j + 1] = temp;

   }

 }

 void merge(List list, int left, int middle, int right) {

   int length1 = middle - left + 1, length2 = right - middle;
"
15815,"    save_nd_data(""test3.csv"", X, N, features);  // save test data points

     save_nd_data(""w31.csv"", W, num_out,

                  features);  // save initial random weights

     kohonen_som_tracer(X, W, N, features, num_out, 0.01);  // train the SOM
"
64163,"        True

         >>> BifidCipher().encode('Test Message') == 'qtltbdxrxlk'

         True

         >>> BifidCipher().encode('test j') == BifidCipher().encode('test i')

         True

         """"""
"
23092,"        }

         return TrinomialValue(n - 1, k - 1) + TrinomialValue(n - 1, k) + TrinomialValue(n - 1, k + 1);

     }

     public static void printTrinomial(int n) {

         for (int i = 0; i < n; i++) {
"
23016,"      expect.arrayContaining([1, 1, 2, 3, 5])

     )

   })

   it('should return number for FibonacciMatrixExpo', () => {

     expect(FibonacciMatrixExpo(0)).toBe(0)
"
29640,"#include <stdio.h>

 #include <stdlib.h>

 #include <time.h>
"
28338,"                    }

                 }

                 else

                 {
"
10679,"puts predefined_min(-11, -51, -10, -10)

 # The Min of the following elements [-11, -51, -10, -10] is -10.

 # Invalid inputs

 puts predefined_min('x', 5, 95, 2)

 # Error: Please provide number only!
"
55012,"    29

     >>> solution(10)

     5

     >>> solution(17)

     17
"
26906,"        public void GetMax_CorrectReturn()

         {

             var tree = new RedBlackTree<int>();

             tree.AddRange(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });
"
10903,"        pm = med3(pm - d, pm, pm + d);

         pn = med3(pn - 2 * d, pn - d, pn);

     }

     pm = med3(pl, pm, pn);

     swap2(a, pm);

     partval = ptr2char(a);
"
14125,"    {

         hash = ((hash << 5) + hash) + s[i];

         i++;

     }

     return hash;

 }
"
30432,"	var digits [10]int

 	var output = make([]int, len(arr))

 	for _, item := range arr {
"
31251,"   * Pop element at top of stack

    *

    * @return element at top of stack

    * @throws NoSuchElementException if stack is empty

    */
"
84730,"        {

             // Arrange

             var testObj = new SinglyLinkedList<string>();

             _ = testObj.AddLast(""X"");

             _ = testObj.AddLast(""H"");
"
14556," */

 #include <algorithm>  // for std::swap

 #include <array>      // for std::array

 #include <cassert>    // for assertions

 #include <iostream>   // for io operations

 /**
"
26120,"            action.Should().Throw<ArgumentException>().WithMessage(""The source matrix is not square-shaped."");

         }

         [Test]

         public void Dominant_ShouldThrowArgumentException_WhenStartVectorIsNotSameSizeAsMatrix()

         {
"
24182,"    input.close();

   }

 }
"
84055,"    Traceback (most recent call last):

     ValueError: Please enter positive integers for n and k where n >= k

     """"""

     # If either of the conditions are true, the function is being asked

     # to calculate a factorial of a negative number, which is not possible

     if n < k or k < 0:
"
30138,"    const mid1 = Math.floor(low + (high - low) / 3)

     const mid2 = Math.floor(high - (high - low) / 3)

     // check if key is found at any mid

     if (arr[mid1] === key) {

       // return index of key if found

       return mid1
"
20765,"            { 5, 2, 0, 0, 0, 0, 0, 0, 0 },

             { 0, 8, 7, 0, 0, 0, 0, 3, 1 },

             { 0, 0, 3, 0, 1, 0, 0, 8, 0 },
"
27689,"}
"
10545,"  (0...gain.count).each do |i|

     alt += gain[i]

     max_alt = alt if max_alt < alt
"
78357,"    :param left: left endpoint of sorting

     :param right: right endpoint of sorting

     :return: None
"
95201,"    int r = rand() % 100;

     return ((b - a) * r / 100.f) + a;

 }

 /**
"
13869,"            In.close();

             return;

           }

       }
"
18770,"int linear_search(List<int> a, number) {

   for (int i = 0; i < a.length; i++) {

     if (a[i] == number) {
"
19461,"                i++;

             }

             while (Math.Abs(termCoefficient) > error);
"
24197,"    Check if the triangle given by the points A(x1, y1), B(x2, y2), C(x3, y3)

     contains the origin.

     >>> contains_origin(-340, 495, -153, -910, 835, -947)
"
18188,"        hand_name(): Returns a string made up of two parts: hand name

             and high card.

     Supported operators:

         Rich comparison operators: <, >, <=, >=, ==, !=

     Supported builtin methods and functions:
"
10116,"    double b = 4.0*arctan(1.0/239.0);

     double pi = a-b;

     cout<<pi<<endl;

     system(""pause"");

     return 0;

 }
"
28846,"# If the queue is empty, calling pop will put your current

 # thread to sleep & wait until something is added to the queue.

 #

 #
"
18203,"        byte[] cipherText = encryptText(plainText, secKey);

         String decryptedText = decryptText(cipherText, secKey);

         System.out.println(""Original Text:"" + plainText);

         System.out.println(""AES Key (Hex Form):"" + bytesToHex(secKey.getEncoded()));

         System.out.println(""Encrypted Text (Hex Form):"" + bytesToHex(cipherText));

         System.out.println(""Descrypted Text:"" + decryptedText);
"
32263,"#else

 #include <cstring>  /// for string

 #endif

 #include <cassert>  /// for assert

 #include <vector>   /// for std::vector

 /**
"
20919,"   *

    * @param data the value to be removed

    */

   public void remove(T data) {

     this.root = delete(this.root, data);

   }
"
24237,"    while (n--) s += c;

     return s;

 }

 /** to convert to lowercase Roman Numeral

  * the function works recursively
"
26071,"         * @param cardNumber string representation of credit card number - 16 digits.

          *                   Can have spaces for digits separation

          * @return credit card object

          * @throws IllegalArgumentException if input string is not 16 digits
"
92329,"    :param items: a list containing all items(gaussian distribution of all classes)

     :param means: a list containing real mean values of each class

     :param total_count: the number of all instances
"
77829,"    """"""

     Calculate Greatest Common Divisor (GCD).

     >>> greatest_common_divisor(24, 40)
"
54410," */

 char is_leap_year(short year)

 {

     if ((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0)))

         return 1;

     return 0;
"
11127,"        table_fill_count++;

         int o = checkwin();

         if (o == -1 || o == -2)

         {

             if (o == -1)

             {
"
28665,"// container/list: is used as linked-list

 // fmt: used to return fmt.Errorf for the error part

 import (

 	""container/list""

 	""fmt""

 )
"
13379,"        double tmp;

         if (n > 0)

             coeffs[n] /= tmp; /* numerical errors less when the first
"
74686,"    {

         prev = value;

         value = value * 10 + sign * (str[i] - '0');
"
25604,"            sibling = childDir < 0 ? RotateRight(sibling) : RotateLeft(sibling);

             var distantNephew = childDir < 0 ? sibling.Right! : sibling.Left!;

             sibling.Color = NodeColor.Black;

             distantNephew.Color = NodeColor.Red;

             RemoveCase6(node, distantNephew, childDir);
"
19112,"                clusters[i].x = 0;

                 clusters[i].y = 0;

                 clusters[i].count = 0;

             }
"
89893,"                    pivotPointSum += upperTransform[j, 0] * l[i, j];

                 }

                 upperTransform[i, 0] = (coefficients[i] - pivotPointSum) / l[i, i];

             }
"
13127,"    return x ** 3 - 2 * x - 5

 if __name__ == ""__main__"":

     print(bisection(f, 1, 1000))

     import doctest
"
32932,"        public Node<T> MakeSet(T x) => new Node<T>(x);

         /// <summary>

         /// find the representative of a certain node.

         /// </summary>

         /// <param name=""node"">node to find representative.</param>

         /// <returns>representative of x.</returns>
"
63446,"    )

     rotorpos1, rotorpos2, rotorpos3 = rotor_position

     rotor1, rotor2, rotor3 = rotor_selection

     rotorpos1 -= 1

     rotorpos2 -= 1
"
16530," * \omega &=& 1\\

  * [x_0, u_0, v_0] &=& [0,1,0]\qquad\ldots\text{(initial values)}

  * \f}

  * The exact solution for the above problem is:
"
11656,"    return sum

 end
"
32181,"    int val;

     struct node *par;

     struct node *left;

     struct node *right;

     int color;
"
18884,"        return self.val < other.val

 class MinHeap:

     """"""

     >>> r = Node(""R"", -1)

     >>> b = Node(""B"", 6)

     >>> a = Node(""A"", 3)
"
21457,"}

 /**

  * @brief Function that perfoms depth first search algorithm on graph

  * and calculated the number of connected components.

  *

  * @param adj adjacency list of graph.
"
62566,"            ISequentialStorage<T> temporaryMemory,

             IComparer<T> comparer)

         {
"
59289,"uuid = ""e9f186c6-92d2-5b65-8a66-fee21dc1b490""

 version = ""3.2.2+0""

 [[Libgcrypt_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Libgpg_error_jll"", ""Pkg""]

 git-tree-sha1 = ""64613c82a59c120435c067c2b809fc61cf5166ae""
"
29572,"package Sorts;

 import java.util.Random;

 /**
"
21464,"        if (curr->left == NULL) {

             cout << curr->data << "" "";

             // If left of current node is NULL then curr is shifted to right

             curr = curr->right;
"
19934,"package queue

 // Node will be store the value and the next node as well

 type Node struct {

 	Data interface{}

 	Next *Node
"
24463,"/**

  * @namespace dynamic_programming

  * @brief Dynamic Programming algorithms

  */
"
31697,"	{

 		""Rotation on the rotation of 'hello world' gives 'hello world' back"",

 		""uryyb jbeyq"",

 		""hello world"",
"
18315,"      flip(array, index, array.length - 1 - i);

     }

     return array;

   }
"
92410,"           

             // S:=M1−M3−M4−M5

             int[][] C22 = add(sub(add(M1, M3), M2), M6);

             join(C11, R, 0, 0);

             join(C12, R, 0, n / 2);
"
67316,"        ///     swaping with its grandparent, until they are ordered correctly.

         ///     For node at max level algorithm is analogical.

         /// </summary>

         /// <param name=""index"">Index of the new node.</param>

         private void PushUp(int index)

         {
"
31968,"   83972241375657056057490261407972968652414535100474

    82166370484403199890008895243450658541227588666881

    16427171479924442928230863465674813919123162824586
"
30971,"{

     char data;

     struct node *link;

 };

 int c = 0;          // c used as counter to check if stack is empty or not

 struct node *head;  // declaring head pointer globally assigned to NULL
"
22247,"        t.put(10)

         r""""""

               8
"
23536," * \f{eqnarray*}{

  * \dot{u} &=& v\\

  * \dot{v} &=& -\omega^2 u\\

  * \omega &=& 1\\

  * [x_0, u_0, v_0] &=& [0,1,0]\qquad\ldots\text{(initial values)}

  * \f}
"
60149,"        print((""Actual output value:"", output(i, ""test"")))

         print((""Hypothesis output:"", calculate_hypothesis_value(i, ""test"")))

 if __name__ == ""__main__"":

     run_gradient_descent()

     print(""\nTesting gradient descent for a linear hypothesis function.\n"")

     test_gradient_descent()
"
23208,"#include <iostream>

 #ifdef _MSC_VER

 #include <string>  // use for MS Visual C++

 #else

 #include <cstring>  // for all other compilers
"
13625,"    expect(ReverseStringIterative('string')).toEqual('gnirts')

     expect(ReverseStringIterative('The Algorithms Javascript')).toEqual('tpircsavaJ smhtiroglA ehT')

   })

   it('expects to reverse a string with spaces in between', () => {

     expect(ReverseStringIterative('reverse me')).toEqual('em esrever')
"
17288,"formed, exactly forty-three strings would lead to a prize:

 OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA

 OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO
"
27173,"            // Arrange

             var a = new double[,] { { 1, 2, 3 }, { 1, 2, 3 }, { 1, 2, 3 } };

             var b = new double[,] { { 1, 2, 3 }, { 1, 2, 6 }, { 1, 2, 3 } };

             // Act

             var result = a.IsEqual(b);

             // Assert
"
36206,"		{[]int{}, []int{}, ""Empty""},

 		//Single-entry slice

 		{[]int{1}, []int{1}, ""Singleton""},

 	}

 	b.ResetTimer()
"
52683,"      exponent = exponent / 2 // exponent is even for sure

       base = (base * base) % modulus

     }

   }
"
23761,"  /**

    * Get max of array using recursion algorithm

    *

    * @param array contains elements

    * @param len length of given array
"
61159,"	// only one item

 	if ll.Head.Next == nil {

 		return ll.DelAtBeg()

 	}
"
25606,"}

 // Decrypt decrypts with polybius encryption

 func (p *Polybius) Decrypt(text string) (string, error) {

 	chars := []rune(strings.ToUpper(text))

 	decryptedText := """"
"
19537,"    /// Node represented the value and connections.

     /// </summary>

     /// <typeparam name=""T"">Type, supported comparing.</typeparam>

     public class PairingHeapNode<T>
"
16677,"    8

     >>> [kadanes(arr) for arr in test_data]

     [-2, 19, 1, 0, 0]

     """"""

     max_sum = negative_exist(arr)
"
26162,"    if (!eigen_vals)

     {

         perror(""Unable to allocate memory for eigen values!"");

         free(A);

         return -1;

     }
"
23729,"// > latticePath(20))

 // 137846528820
"
22337,"    } else {

       Node right = root.right;

       root.right = right.left;

       right.left.p = root;

       root.p = right;
"
70502,"    const colorCoded = getRGBData(800, 600, -0.6, 0, 3.2, 50, true)

     expect(colorCoded[400][300]).toEqual([0, 0, 0]) // black

   })

   it('should produce white pixels outside of the set', () => {

     const blackAndWhite = getRGBData(800, 600, -0.6, 0, 3.2, 50, false)
"
18320,"        }

         $decimalNumber += (pow(16, $power) * $hexDigit);

     }

     return $decimalNumber;
"
23926,"            free(head->next);

         }

     }

     --count;

     return returnData;

 }
"
51272,"    printf(""Enter size of array:\n"");

     scanf(""%d"", &n);  // E.g. 8 1 2 3

     printf(""Enter the elements of the array\n"");
"
19912,"	public static int WPBU(int[] arr) {

 		int n = arr.length;

 		int[][] strg = new int[n][n];

 		for (int slide = 0; slide <= n - 1; slide++) {

 			for (int si = 0; si <= n - slide - 1; si++) {
"
28651,"}

 // Inserting the first node is a special case. It will

 // point to itself. For other cases, the node will be added

 // to the end of the list. End of the list is Prev field of

 // current item. Complexity O(1).

 func (cl *Cyclic) Add(val interface{}) {
"
20900," * @returns void

  *

  */

 template <typename T>
"
13174,"    printf(""Enter the size of the array: "");

     scanf(""%d"", &n);

     int *arr = (int *)malloc(sizeof(int) * n);
"
14540,"        search2(Puzzle2, Ideal2);

     /**

      * Heuristic function: Manhattan distance
"
57482,"deps = [""ConstructionBase"", ""Future"", ""MacroTools"", ""Requires""]

 git-tree-sha1 = ""d5640fc570fb1b6c54512f0bd3853866bd298b3e""

 uuid = ""efcf1570-3423-57d1-acb7-fd33fddbac46""

 version = ""0.7.0""
"
15412,"            // Arrange

             var sorter = new ShellSorter<int>();

             var intComparer = new IntComparer();

             var (correctArray, testArray) = RandomHelper.GetArrays(n);
"
99898,"    {

         assertEquals([0, 1, 1, 2, 3], fibonacciRecursive(5));

         assertEquals([0, 1, 1, 2, 3, 5, 8, 13, 21, 34], fibonacciRecursive(10));

         assertEquals([0, 1, 1, 2, 3], fibonacciWithBinetFormula(5));

         assertEquals([0, 1, 1, 2, 3, 5, 8, 13, 21, 34], fibonacciWithBinetFormula(10));
"
13375,"using FluentAssertions;

 using NUnit.Framework;

 namespace Algorithms.Tests.Numeric
"
20201,"		})

 	}

 }

 func TestPolybiusEncrypt(t *testing.T) {

 	t.Parallel()

 	cases := []struct {
"
31359,"        public void setKey(I key) {

             this.key = key;

         }
"
73295,"    printf(""Enter an octal number: "");

     scanf(""%d"", &octalnum);

     // Calling the function octaltoBinary

     printf(""Equivalent binary number is: %ld"", octalToBinary(octalnum));

     return 0;

 }
"
49769,"    public class ListBasedStack<T>

     {

         /// <summary>

         ///     <see cref=""List{T}"" /> based stack.

         /// </summary>
"
21397,"```

 Contributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee) and [Rratic](https://github.com/Rratic)

 """"""

 function abs_min(x::Vector{N})where N<:Real
"
18693,"    this.size = 0;

   }

   //Add element at top of the stack
"
18500,"            Assert.AreEqual(collection.Min(), minValue);

         }

         [Test]

         public static void HeapSortUsingGet<T>(

             [ValueSource(""CollectionsSource"")] IEnumerable<T> collection,
"
60201,"        @test permutation(5,5) == 120

         @test permutation(4,2) == 12

     end

     
"
65637,"```julia

 abs_min([1,3,4]) # returns 1

 abs_min([-3,1,2]) # returns 1

 abs_min([-7,-3,6]) #returns -3

 ```

 Contributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee) and [Rratic](https://github.com/Rratic)
"
22518,"                }

             }

             return false;

         }
"
14403,"end

 # Min method will return the minimum element from the set of input elements provided

 def predefined_min(*array)

   ""The Min of the following elements #{array} is #{array.min}.""

 rescue StandardError
"
27734,"    // A number is converted from decimal to another base

     // by continuously dividing by the base and recording

     // the remainder until the quotient is zero. The number in the

     // new base is the remainders, with the last remainder

     // being the left-most digit.

     if (0 == decimalValue) return ""0"";
"
23856,"        )[: -padding * 2]

     else:

         binary_stream = """".join(

             bin(B64_CHARSET.index(char))[2:].zfill(6) for char in encoded_data

         )

     data = [
"
18460,"		t.Run(tc.name, func(t *testing.T) {

 			actual := AhoCorasick(tc.text, tc.words)

 			if !reflect.DeepEqual(actual, tc.expected) {

 				actualString := convertToString(actual)

 				expectedString := convertToString(tc.expected)
"
28474,"    }

   }

   @Override
"
31689,"public class BinaryTree {

   /**

    * This class implements the nodes that will go on the Binary Tree. They consist of the data in
"
81223,"}

 export { SearchArray, Search }

 // const ar = [1, 2, 3, 4, 5, 6, 7, 8, 9]

 // SearchArray(3, ar)

 // SearchArray(4, ar)

 // SearchArray(11, ar)
"
20149,"        element;  // Increment then add, as we start from -1

 }

 // Removes element from stack, or returns INT_MIN if stack empty

 int pop(struct Stack *stack)

 {

     if (stack->top == -1)
"
25868,"    if (child2Pos < this._heap.length) {

       child2Priority = this._heap[child2Pos][1]

     }

     if (parentPos >= 0 && parentPriority > currPriority) {

       this._shiftUp(currPos)
"
15674,"	ElementData []interface{}

 }

 // Put function is change/update the value in array with the index and new value

 func (da *DynamicArray) Put(index int, element interface{}) error {
"
17651,"      // Else store the characters without any modification.

       firstChar += word[0]

     }

     const newWordChar = word.slice(1).split('').map(char => {

       // Get the ASCII character code by the use charCodeAt method.
"
18440,"void main() {

   print(pow(10, 2)); // 100

   print(pow(2, 0)); // 1

   print(pow(2, 10)); // 1024

 }

 double pow(int a, int b) {
"
27426,"        int n = index.length;

         double c[] = new double[n];

  

  // Initialize the index

         for (int i=0; i<n; ++i) 

             index[i] = i;
"
18311,"        $string = strtolower($string); // Converting string to lowercase for case-insensitive check

     }

     $characters = str_split($string);

     for ($i = 0; $i < count($characters); $i++) {
"
37756,"    Σ = 0.5*f(a) +

         sum(f(i) for i in (a+Δₓ):Δₓ:(b-Δₓ)) +

         0.5*f(b)

     # approximate integral of f

     return Δₓ * Σ

 end
"
22709,"            root = insert(root, data);

             break;

         case 2:

             printf(""Enter the value to be removed:\n"");

             if (root != NULL)
"
10806,"    // Test GetKochSnowflake-method

     int imageWidth = 600;

     double offsetX = imageWidth / 10.;

     double offsetY = imageWidth / 3.7;

     BufferedImage image = GetKochSnowflake(imageWidth, 5);
"
11288," */

 #include <assert.h>     /// for assert

 #include <stdio.h>      /// for IO operations

 #include <stdlib.h>     /// for dynamic memory allocation

 #include <time.h>       /// for random numbers generation
"
19427,"        /// </summary>

         public bool IsFull() => false;

         /// <summary>

         ///     Returns the first item in the queue and keeps it in the queue.
"
27315,"coefficient<-coef(cv.fit$glmnet.fit, s=cv.fit$lambda.min)

 # predict the fitted probability of each test observation

 predict(cv.fit$glmnet.fit, 

         as.matrix(iris.mdy[1:5, 1:4]), 
"
10548,"    processes = [1, 2, 3]

     # ensure that we actually have processes

     if len(processes) == 0:

         print(""Zero amount of processes"")

         exit()
"
15871,"    expect(aliquotSum(28)).toBe(28)

   })

 })
"
23755,"            var s = ""AABAACAABAA"";

             // Act

             var expectedItem = new[] { 0, 1, 0, 1, 2, 0, 1, 2, 3, 4, 5 };

             var actualItem = searcher.FindLongestPrefixSuffixValues(s);

             // Assert
"
11892,"    public class NaiveKnapsackSolver<T> : IHeuristicKnapsackSolver<T>

     {

         /// <summary>

         ///     TODO.
"
17487,"/**

  * @file

  * @author [TheShubham99](https://github.com/TheShubham99)

  * @author [Krishna Vedala](https://github.com/kvedala)
"
17163,"    graph.resize(number_of_vertices, std::vector<int>());

     for (int i = 0; i < number_of_edges; ++i) {

         std::cin >> x >> y;

         x--, y--;  // to convert 1-indexed to 0-indexed

         graph[x].push_back(y);

     }
"
30276,"    const double omega = 1.F;             // some const for the problem

     dy[0][0] = y[0][1];                   // x dot

     dy[0][1] = -omega * omega * y[0][0];  // y dot
"
54761,"            return False

     return True

 def test_min_max() -> bool:

     """"""Tests the min and max functions in the tree.""""""

     tree = RedBlackTree(0)

     tree.insert(-16)
"
70402,"}

 int main(){

     Errhandler(1);

     Errhandler(2);

     Errhandler(3);
"
31035,"            timeline.Remove(new DateTime(2000, 1, 1), ""TestTime2"");

             using (new AssertionScope())

             {

                 timeline.Count

                     .Should()

                     .Be(4);
"
23792,"    const pattern = 'AAA'

     expect(KMPSearch(text, pattern)).toStrictEqual([0, 1, 2])

   })

   it('TC4: expects to return matching indices for pattern in text', () => {

     const text = 'ABCD'
"
32502,"	if (tmp)

 	{

 		printf(""Memory Leaks detected.\n"");

 	}

 	while (tmp)
"
22070,"  // Evaluates the given postfix expression string and returns the result.

   public static int postfixEvaluate(String exp) {

     Stack<Integer> s = new Stack<Integer>();
"
17401,"  // the key was not found

   return -1

 }

 export { ternarySearchRecursive, ternarySearchIterative }
"
14236,"/** @file

  * A sparse matrix is a matrix which has number of zeroes greater than

  * \f$\frac{m\times n}{2}\f$, where m and n are the dimensions of the matrix.
"
14979,"        public void Init()

         {

             testTree = new SegmentTreeUpdate(new[] { 8, 9, 1, 4, 8, 7, 2 });

         }
"
16448,"#ifdef _OPENMP

 #include <omp.h>

 #endif
"
93024," * Copyright: 2020, Open-Source

  * Last Modified: May 25, 2020

  */
"
11471,"    assert_equal AliquotSum.call(0), 0

   end

   def test_one

     assert_equal Abs.call(1), 1

   end
"
19525,"            temp = self.par[temp]

         path.append(src)

         path.reverse()

         print(f""----Path to reach {dest} from {src}----"")

         for u in path:
"
33551,"      assert toUpperCase(s).equals(s.toUpperCase());

     }

   }

   /**

    * Converts all of the characters in this {@code String} to upper case

    *
"
29817,"  }

   /**

    * Return size of queue

    *

    * @return size of queue

    */
"
20463,"        {

             comparer = customComparer;

         }
"
23831,"        [Test]

         public static void ArraySorted(

             [Random(0, 1000, 100, Distinct = true)]

             int n)
"
10612,"      sum += array[i];

     }

     return (int) (sum / array.length);

   }

 }
"
17151,"from __future__ import annotations

 def collatz_sequence(n: int) -> list[int]:

     """"""

     Collatz conjecture: start with any positive integer n. The next term is
"
28740,"    expect(mergeSort([])).toEqual([])

   })

   it('should sort arrays correctly', () => {

     expect(mergeSort([5, 4])).toEqual([4, 5])

     expect(mergeSort([8, 4, 10, 15, 9])).toEqual([4, 8, 9, 10, 15])
"
12102,"import { PrimeCheck } from '../PrimeCheck'

 describe('PrimeCheck', () => {

   it('should return true for Prime Numbers', () => {
"
28744,"#!/usr/bin/env python3

 """"""

 Illustrate how to implement bucket sort algorithm.
"
20332,"  expect(Number(result.toPrecision(10))).toBe(11.46410161)

 })

 test('Should return the integral of f(x) = log(x) + Pi*x^3 in [5, 12] to be equal 15809.9141543', () => {
"
11826,"            T temp = unsortedArray[start];

             unsortedArray[start] = unsortedArray[end - 1];

             unsortedArray[end - 1] = temp;
"
87763,"TemperatureConversion.celsius_to_kelvin(20)

 TemperatureConversion.kelvin_to_celsius(20)

 # Invalid input

 TemperatureConversion.kelvin_to_celsius('a')

 # celsius <-> fahrenheit

 TemperatureConversion.celsius_to_fahrenheit(-20)
"
28480," * @see union_of_two_arrays.cpp

  * @author [Alvin](https://github.com/polarvoid)

  */

 #include <algorithm>  /// for std::sort

 #include <cassert>    /// for assert
"
11711,"      if (chosenBlockIdx

           != NO_ALLOCATION) { // Only if a block was chosen to store the process in it,

         sizeOfBlocks[chosenBlockIdx] -= processSize; // resize the block based on the process size
"
14271," * @brief Functions for [Gram Schmidt Orthogonalisation

  * Process](https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process)

  */

 namespace gram_schmidt {

 /**

  * Dot product function.
"
29917,"		expected := []interface{}{2, 1}

 		for x := range result {

 			if result[x] != expected[x] {

 				t.Errorf(""Stack Push is not work, got %v but expected %v"", result, expected)

 			}
"
21018,"    >>> volume_conversion(1, ""cup"", ""kilolitre"")

     0.000236588

     >>> volume_conversion(4, ""wrongUnit"", ""litre"")

     Traceback (most recent call last):

       File ""/usr/lib/python3.8/doctest.py"", line 1336, in __run
"
23447,"function left(tree::Tree,from::Int=tree.root)where Tree<:AbstractBinaryTree_arr

     if tree.lch[from]==0

         return from

     else
"
15561," *

  * @param red Red-component of the color.

  * @param green Green-component of the color.
"
17283,"    /// <typeparam name=""T"">Type of elements in binary heap.</typeparam>

     public class FibonacciHeap<T> where T : IComparable

     {

         /// <summary>

         ///     Gets or sets the count of the number of nodes in the Fibonacci heap.
"
12578,"        }

         if (doublemode_table_count==4)

         {

             printf(""\nDRAW "");

             break;
"
96850,"                p = -p;

             else

                 q = -q;

             r = e;
"
31271,"    """"""

     return sorted(array, key=lambda x: x[column])

 def dis_between_closest_pair(points, points_counts, min_dis=float(""inf"")):

     """"""
"
18424,"        result = shiftedCharCode

       } else if (shiftedCharCode >= 65 && shiftedCharCode <= 90) {

         result = shiftedCharCode
"
27484," * @version v1

  * @date 2019-07-20

  */

 #include<iostream>

 using namespace std;
"
79682,"            }

             var result = new List<TKey>();

             result.Add(node.Key);

             result.AddRange(GetKeysPreOrder(node.Left));

             result.AddRange(GetKeysPreOrder(node.Right));
"
25533,"/**

  * Checks whether the given array is sorted in ascending order.

  */

 export function isSorted (array) {
"
25778,"	}

 	for _, test := range testCases {

 		t.Run(test.name, func(t *testing.T) {

 			returnedMax := Int(test.left, test.right)
"
19876,"        {

             replacement = temp->llink;

         }
"
56913,"		if number == p {

 			return true

 		}

 	}

 	return false

 }
"
84827," */

 #include <complex.h>

 #include <limits.h>
"
17585,"    Constructs the convex hull of a set of 2D points using a divide-and-conquer strategy

     The algorithm exploits the geometric properties of the problem by repeatedly

     partitioning the set of points into smaller hulls, and finding the convex hull of

     these smaller hulls.  The union of the convex hull from smaller hulls is the
"
95789,"public:

     Derived(int a,int b):Base(a){       //๹캯ĳʼб

         y=b;

         cout<<""Derived constructor y=""<<y<<endl;

     }
"
21644," * * Space Complexity : O(1) (without the array)

  */

 #include <iostream>

 /**
"
23255,"        {

             temp = temp->rlink;

         }

         else

         {

             temp = temp->llink;
"
28387,"const findLcm = (num1, num2) => {

   // If the input numbers are less than 1 return an error message.

   if (num1 < 1 || num2 < 1) {

     return 'Please enter values greater than zero.'

   }
"
11749,"  addNode (node) {

     // Function to add a node to the graph (connection represented by set)

     this.connections[node] = {}

     this.nodes += 1
"
11418,"the proportion of bouncy numbers first reaches 50% is 538.

 Surprisingly, bouncy numbers become more and more common and by the time we reach

 21780 the proportion of bouncy numbers is equal to 90%.

 Find the least number for which the proportion of bouncy numbers is exactly 99%.

 """"""
"
17128,"      size++;

       return;

     } else if (position == 0) {
"
29460,"	 * @param	head	head node of the linked list

 	 */

 	static void printList(Node head) {		

         Node cur = head;

         

         while (cur != null) {
"
39423,"class rectangle : public shape {

 public:

     rectangle() { cout << ""rectangle"" << endl; }

     void print() {

         cout << ""I am rectangle"" << endl;

     }
"
32270,"      expect(QuickSelect([10, 22, 33, 44, 55], 4)).toEqual(44)

       expect(QuickSelect([10, 22, 33, 44, 55], 5)).toEqual(55)

     })

     it('should return the kth smallest element of an input list that is in decreasing order', () => {

       expect(QuickSelect([82, 33.12, 4.0, 1], 1)).toEqual(1)
"
24662," * @param   qlow lower index of the required query

  * @param   qhigh higher index of the required query

  * @param   low lower index of query for this function call

  * @param   high higher index of query for this function call
"
28789,"  (1..num).inject(1) { |res, i| res * i }

 end

 row_index = 3

 print(get_row(row_index))
"
29908,"void push(struct Stack *p, char x)

 {

     if (p->tos == 9)  // check if stack has reached its max limit

     {

         printf(""Stack Overflow!"");

         return;
"
27252,"//

 // Created by light on 20-2-7.

 //

 #include <iostream>

 using namespace std;
"
26320,"# Approach: Interative

 #

 def factorial(n)

   return nil if n < 0
"
32347,"            int h = a.length - 1;

             int mid = 0;

             int temp ;

             while (mid <= h) {

                 switch (a[mid]) {

                     case 0: {
"
29362," */

 public interface Heap {

   /**

    * @return the top element in the heap, the one with lowest key for min-heap or with the highest

    *     key for max-heap
"
80570,"        [Test]

         public static void NonSquaredMatrixPseudoInverseMatrixWorks()

         {

             // Arrange
"
24151,"vec_3d vector_sub(const vec_3d *a, const vec_3d *b)

 {

     vec_3d out;
"
99011,"    printf(""Sorted Array: \n"");

     printArray(arr, size);

     return 0;
"
21131,"    return 0;

 }"
30853,"using System.Linq;

 using System.Text;

 namespace DataStructures

 {

     /// <summary>
"
15162,"            elif a2_new_unc <= L:

                 a2_new = L

             else:

                 a2_new = a2_new_unc
"
25770,"    20 is the root of the binary search tree.

     10 is the left child of key 20.

     12 is the right child of key 10.

     25 is the right child of key 20.

     37 is the right child of key 25.
"
19790,"bool isPerfectSquare(int num)

 {

     for (long i = 1; i * i <= num; i++)

         if (i * i == num)

             return true;

     return false;
"
55880,"    return false if ss.member?(board[row][col])

     ss.add board[row][col]

   end

   true

 end

 def check_rows(board)
"
27785,"        {

             Player1[i][j] = 0;

             Player2[i][j] = 0;

         }
"
19083,"}

 export { FibonacciDpWithoutRecursion }

 export { FibonacciIterative }

 export { FibonacciRecursive }

 export { FibonacciRecursiveDP }

 export { FibonacciMatrixExpo }
"
16411,"        /// <summary>

         ///     Get all <see cref=""TValue"" /> before <paramref name=""time"" />.

         /// </summary>

         public Timeline<TValue> GetValuesAfter(DateTime time)

             => new(this.Where(pair => pair.Time > time).ToArray());

         /// <summary>
"
16926,"        int r1 = find(y);

  

         if (r1 == r0) return;
"
11761,"        /// <summary>

         ///     Set child of node or delete leaf.

         /// </summary>
"
18211," */

 #include <cmath>

 #include <ctime>

 #include <iostream>

 #include <limits>
"
18126,"    3.4641016151377544

     >>> euclidean_distance(np.array([1, 2, 3, 4]), np.array([5, 6, 7, 8]))

     8.0

     >>> euclidean_distance([1, 2, 3, 4], [5, 6, 7, 8])

     8.0

     """"""
"
32152,"using System;

 using System.Numerics;

 namespace Algorithms.Other

 {
"
29740,"#include<iostream>

 using namespace std;

 //

 inline double CalArea(double radius);

 int main(int argc, char const *argv[])

 {
"
14999,"        {

             foreach (var item in items)

             {
"
23094,"  ""The Abs Min of #{x} and #{y} is #{min_value}.""

 rescue StandardError

   'Error: Provide number only!'

 end

 #
"
17289,"    for (int i = 0; i <= n; i++) {

       int f;

       if (i <= 1) {

         f = i;
"
25386,"end

 nums = [1, 2, 3, 1]

 puts rob(nums)
"
29985,"    assert_equal expected, sort(input)

   end

   def test_reversed_array

     input = [5, 4, 3, 2, 1]

     expected = [1, 2, 3, 4, 5]

     assert_equal expected, sort(input)
"
17351,"        [TestCase(-2)]

         public static void PerfectNumberShouldThrowEx(int number)

         {

             // Arrange

             // Assert

             Assert.Throws<ArgumentException>(() => PerfectNumberChecker.IsPerfectNumber(number));
"
22969,"*

 * We can also find the inverse of a matrix 

 */

 public class InverseOfMatrix 
"
14089,"  end

 end

 factors = (100..999).to_a
"
70320,"        if ((modulus = transpositionInput.length() % n) != 0) {

             modulus = n - modulus;

             for (; modulus != 0; modulus--) {

                 transpositionInput += ""/"";

             }
"
64442,"        exit(0);

     }

     else

     {

         printf(""Server listening..\n"");

     }
"
16381,"    if (root == NULL)

         return 1;

     int left = height(root->left);

     int right = height(root->right);
"
17648,"        assertEquals(countVowelsSimple(""This is a string with 7 vowels""), 7);

         assertEquals(countVowelsSimple(""hello world""), 3);

         assertEquals(countVowelsRegex(""Just A list of somE aaaaaaaaaa""), 16);
"
17164,"    {

         temp2 = (struct term *)malloc(

             sizeof(struct term));  // Dynamic node creation

         temp2->coef = coef;

         temp2->pow = pow;

         // Updating the null pointer with the address of the first node of the
"
30485,"    }

     report = (

         report.assign(

             Sorter1=lambda x: x.Type.map(sorter1),

             Sorter2=lambda x: list(reversed(range(len(x)))),
"
89673,"    const RootedTree &tree;

     /**

      * \brief for every vertex stores a list of its ancestors by powers of two

      * For each vertex, the first element of the corresponding list contains

      * the index of its parent. The i-th element of the list is an index of
"
21997," * @returns The canvas of the rendered Koch snowflake.

  */

 function getKochSnowflake (canvasWidth = 600, steps = 5) {

   if (canvasWidth <= 0) {

     throw new Error('canvasWidth should be greater than zero')

   }
"
28826,"# [3,]  -1.38072709  0.32731751  -1.39239929 -1.3110521482

 # [4,]  -1.50149039  0.09788935  -1.27910398 -1.3110521482

 # [5,]  -1.01843718  1.24503015  -1.33575163 -1.3110521482

 # [6,]  -0.53538397  1.93331463  -1.16580868 -1.0486667950

 # [7,]  -1.50149039  0.78617383  -1.33575163 -1.1798594716"
16313,"  return pat.test(varName)

 }

 export { checkCamelCase }
"
16132,"};

 struct Graph *createGraph(int);

 void addEdge(struct Graph *, int, int);

 void printGraph(struct Graph *);

 void dfs(struct Graph *, int);
"
70626,"package Others;

 import java.util.ArrayList;

 import java.util.Iterator;

 import java.util.Scanner;

 public class SkylineProblem {
"
20817,"  if (num === 1 || num === 2) {

     return 1

   }

   const result = fib(num - 1, cache) + fib(num - 2, cache)
"
11751,"        currIdx = swapIdx

         childOneIdx = currIdx * 2 + 1

       } else {

         return

       }
"
18566,"func (hm *HashMap) Contains(key interface{}) bool {

 	node := hm.getNodeByHash(hm.hash(key))

 	return node != nil

 }

 func (hm *HashMap) putValue(hash uint64, key interface{}, value interface{}) interface{} {

 	if hm.capacity == 0 {
"
54356,"        {

             // Arrange

             var a = new double[,] { { 1, 2, 3 }, { 1, 2, 3 }, { 1, 2, 3 } };

             var b = new double[,] { { 1, 2, 3 }, { 1, 2, 3 } };
"
19240,"    string = 'adafccfefbbbfeeccbcfd';

     subString = 'ecb';

     expect(stringCompare(string, subString), isFalse);

   });

   test(('KMP: '), () {
"
23992,"    srand(time(nullptr));

     std::array<int64_t, size> unsortedArray{};

     assert(from < to);

     int64_t i = 0;
"
23410,"    if a in factorial_sum_cache:

         return factorial_sum_cache[a]

     # Prepare a variable to hold the computation
"
23384,"prime_check(19) # returns true

 prime_check(23) # returns true

 prime_check(29) # returns true

 prime_check(30) # returns false

 ```

 Contributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee) and [Rratic](https://github.com/Rratic)
"
16146,"    a2 = 1 - alpha

     filt = IIRFilter(2)

     filt.set_coefficients([a0, a1, a2], [b0, b1, b0])

     return filt

 def make_bandpass(

     frequency: int, samplerate: int, q_factor: float = 1 / sqrt(2)
"
62405,"        private string ReplaceStep(string text, int i)

         {

             (string from, string to)[] replacements =

             {
"
23414,"        // get the corresponding output

         std::cin >> Y[rows];

     }

     std::vector<float> beta = fit_OLS_regressor(data, Y);

     std::cout << std::endl << std::endl << ""beta:"" << beta << std::endl;
"
27674,"        }

         [Test]

         public static void ValueOutOfRange_ThrowsArgumentOutOfRangeException()

         {
"
18583," }

  while(ch!=4) ;

  getch() ;

 }
"
16677,"}
"
12339,"// Push add a value into our stack

 func (sl *SList) Push(val interface{}) {

 	sl.stack.PushFront(val)

 }

 // Peak is return last value that insert into our stack
"
66254,"// checkisnumberpoweroftwo_test.go

 // description: Test for Is the number a power of two

 // author(s) [red_byte](https://github.com/i-redbyte)

 // see checkisnumberpoweroftwo.go
"
22396,"    >>> clause3 = Clause([""A3""])

     >>> clauses, symbols = generate_parameters(Formula([clause1, clause2, clause3]))

     >>> unit_clauses, values = find_unit_clauses(clauses, {})

     >>> unit_clauses

     ['A4', 'A3']

     >>> values
"
18620,"    free(p1);

     return min; /* DONT FORGET LAST 2 STATEMENTS.*/

 }

 void show()

 {
"
32229,"   *

    * @return element at the front of the queue

    */
"
11065,"      if (this.heap[2 * k] >= this.heap[k]) {

         if (2 * k + 1 <= this.size && this.heap[2 * k + 1] >= this.heap[k]) {

           break
"
19222,"def check_rows(board)

   (0..8).each do |row|

     return false unless check_row(board, row)

   end

   true
"
18597,"            var expected = new[,]

             {

                 { float.PositiveInfinity, float.PositiveInfinity, 2 },

                 { float.PositiveInfinity, float.PositiveInfinity, 2 },

                 { 2, 2, float.PositiveInfinity }
"
85153,"}

 void checkBlack(Node *temp, int c)

 {

     if (temp == NULL)

     {
"
29464,"    /*

        Will print following order

        3 9 30 40

     */
"
21259,"            Action poppingAnEmptyStack = () => stack.Pop();

             poppingAnEmptyStack.Should()

                 .Throw<InvalidOperationException>()
"
17915,"    ax.set_ylabel(""Predicted"")

     ax.set_title(""Truth vs Predicted"")

     # this show function will display the plotting

     plt.show()

 if __name__ == ""__main__"":

     main()
"
42545,"    const currPos = this.keys[key]

     this._heap[currPos][1] = priority

     const parentPos = getParentPosition(currPos)

     const currPriority = this._heap[currPos][1]

     let parentPriority = Infinity
"
12291,"                // Check For Double Red Problems

                 break;

             }

         }

         else
"
25868,"        /// </summary>

         /// <param name=""item"">The item to determine the slots for.</param>

         /// <returns>The slots of the filter to flip or check.</returns>

         private IEnumerable<int> GetSlots(T item)

         {
"
17266,"    tower.number_of_disks = number;

     tower.startGame();

     /*for(int i=0;i<tower.movements.size();i++) {

         System.out.println(tower.movements.get(i));

         //System.out.println(tower.Stack1.get(i));
"
20064,"    int a=10;

     int *p=&a;

     test1(p);

     test2(a);
"
30488,"      d = n % 2;

       b = b + d * (int) Math.pow(10, c++);

       n /= 2;

     } // converting decimal to binary

     System.out.println(""\tBinary number: "" + b);
"
55215,"    /**

      * @brief Returns the current state of the board

      */

     std::array<std::array<uint32_t, N>, N> get_state() { return board; }

     /**
"
18070,"	for pos < len(word) {

 		if word[pos-1] == word[cnd] {

 			cnd++

 			t[pos] = cnd

 			pos++

 		} else if cnd > 0 {
"
10669,"        return a;

     else

         return b;

 }
"
30088," * The test arrays and their respective sizes are then passed in to the oddEvenSort function.

  * To test if the algorithm works, a for loop is assigned to loop through the both arrays(test and solution) and check if the array elements 

  * of the test array correspond to the elements of the solution array.
"
30654,"  /** @param key : a number of object type 'Integer' */

   public HeapElement(Integer key) {

     this.key = key;

     this.additionalInfo = null;

   }

   /** @param key : a number of object type 'Double' */
"
90984,"package pi

 import (

 	""math/rand""

 	""time""

 )

 func MonteCarloPi(randomPoints int) float64 {
"
12253,"    """"""

     :param number: nth number to calculate in the sequence

     :return: the nth number in Proth number

     Note: indexing starts at 1 i.e. proth(1) gives the first Proth number of 3
"
33747,"}

 // function for pushing the element

 void push()

 {

     int n = 0;
"
39607,"      next if row[i] == '.'

       grid_hash[row[i]] += 1

       grids << grid_hash

     end
"
30176,"     */

     NeuralNetwork &operator=(NeuralNetwork &&) = default;

     /**
"
26767,"	for (int i = 0; i < strlen(reference) && i < strlen(ret); i++) {

 		assert(ret[i] == reference[i]);

 	}
"
63618,"					row2[j] = sub

 				}

 			}

 		}
"
31756,"     */

     public static BigInteger mixColumns(BigInteger ciphertext) {

         int[] cells = splitBlockIntoCells(ciphertext);

         int[] outputCells = new int[16];

         for (int i = 0; i < 4; i++) {
"
28123,"  end

   def test_zero

     assert_equal Abs.call(0), 0

   end

   def test_negative_number

     assert_equal Abs.call(-9), 9
"
20737,"		System.out.println(""Method 1: ""+regexRecursion(src, pat));

 		System.out.println(""Method 2: ""+regexRecursion(src, pat, 0, 0));

 		System.out.println(""Method 3: ""+regexRecursion(src, pat, 0, 0, new int[src.length()][pat.length()]));

 		System.out.println(""Method 4: ""+regexBU(src, pat));

 	}

 }
"
32327,"        return NULL;

     struct ListNode *slow = head, *fast = head;

     while (fast != tail && fast->next != tail)
"
68475,"/* Driver */

 void main() {

   assert(isPalindrome(""abcba"", 0, 4));

   assert(isPalindrome(""a"", 0, 0));

   assert(isPalindrome(""abbcba"", 0, 5) == false);

 }
"
27350,"      end

     end

   end

   array
"
68673,"                // passed root

                 return;

             }

             Tree[node] = Tree[Left(node)] + Tree[Right(node)];

             Propagate(Parent(node));
"
30266,"          return storage[m][n];

       }

       if (s1.charAt(0) == s2.charAt(0)) {

           storage[m][n] = editDistance(s1.substring(1), s2.substring(1), storage);
"
12698,"    /**

      * @return charValues

      */

     private static Object[] findElements() {
"
17269,"             *   |      \

              *  (2)     (3)

              */

             var expected = new[,]

             {

                 { float.PositiveInfinity, 3, 4, float.PositiveInfinity, float.PositiveInfinity },
"
52331,"    cout << ""1 and 2 are now in the same subset"" << endl;

     if (!InSameUnion(1, 2)) {

         cout << ""Fail"" << endl;

     }
"
13573,"    printf(""Tests passed\n"");

 }

 /** @} */

 /** Main function */
"
52231,"    for (const value of values) {

       // we deliberately want to check whether this constructor call fails or not

       // eslint-disable-next-line no-new

       expect(() => { new RatInAMaze(value) }).toThrow()

     }
"
24268,"                    cont++;

                 }

             }

         }

     }

     if (guide == 'V')
"
31908,"            var vertex4 = graph.AddVertex(40);

             graph.AddEdge(vertex1, vertex2, 1);

             graph.AddEdge(vertex2, vertex3, 1);
"
87813,"     * */

     void testCase_3() {

         const bool expectedOutput = false;  ///< Expected output of this test
"
15885,"int peakIndexInMountainArray(int *A, int ASize)

 {

     int low = 1, high = ASize;

     while (low <= high)
"
20286,"            {

                 Enqueue(item);

             }

         }

         /// <summary>

         ///     Gets Number of enqueued items.
"
59087,"      }

     } else {

       result += c

     }

     j = ++j % key.length

   }
"
30469,"            public void Write(int value) => writer.Write(value);

             public void Dispose() => writer.Dispose();

         }

     }
"
17343,"/**

  * \file

  * \brief [Problem 10](https://projecteuler.net/problem=10) solution

  * \author [Krishna Vedala](https://github.com/kvedala)
"
33423,"   *

    * @param s The Hexadecimal Number

    * @return The Decimal number

    */

   public static int hex2decimal(String s) {
"
20925,"        fast = fast->next->next;

         slow = slow->next;

         if (fast == slow)
"
99415,"    if len(squared_primes) == 0:

         return set()

     non_squarefrees = set()

     prime_squared_idx = 0

     for num in sorted(unique_coefficients):
"
24144,"            var tree = new BinaryIndexedTree(array);

             var expectedSum = 12;

             var resultedSum = tree.GetSum(5);

             resultedSum.Should().Be(expectedSum);

         }

         [Test]
"
11551,"deps = [""LinearAlgebra"", ""RecipesBase""]

 git-tree-sha1 = ""af883a26bbe6e3f5f778cb4e1b81578b534c32a6""

 uuid = ""c619ae07-58cd-5f6d-b883-8f17bd6a98f9""

 version = ""1.2.0""

 [[Distances]]

 deps = [""LinearAlgebra"", ""Statistics"", ""StatsAPI""]
"
14941,"        log_file.open(""durand_kerner.log.csv"");

         if (!log_file.is_open()) {

             perror(""Unable to create a storage log file!"");

             std::exit(EXIT_FAILURE);

         }
"
31788,"﻿using System;

 using Algorithms.Sorters.Comparison;

 using Algorithms.Tests.Helpers;
"
29626,"}

 }  // namespace tests

 /**

  * @brief Function to test the correctness of get_union() function

  * @returns void

  */
"
27599,"    a digit, punctuation or whitespace, then we know the key is incorrect, so return

     None.

     >>> try_key([0, 17, 20, 4, 27], (104, 116, 120))
"
91030,"    return 0;

 }
"
20783,"      Vector2 startVector = vectors.get(i);

       Vector2 endVector = vectors.get(i + 1);

       newVectors.add(startVector);

       Vector2 differenceVector = endVector.subtract(startVector).multiply(1. / 3);

       newVectors.add(startVector.add(differenceVector));

       newVectors.add(startVector.add(differenceVector).add(differenceVector.rotate(60)));
"
96718,"}

 // Insert 2 -- Faster version of Insert

 #define BUFSIZE 1000

 Tptr buffer;
"
46204,"    for (N = 1; N <= MAX_N; N++)

     {

         char ret = get_perfect_number(N);
"
51045,"        levels = atoi(argv[3]);

     }

     if (start_num < 0 || end_num < 0 || levels < 0)

     {

         fprintf(stderr, ""All numbers must be positive\n"");
"
15532,"  int get nodeValue {

     return this.value;

   }

   Node get nextNode {

     return this.next;

   }
"
11194," */

 const factorsExcludingNumber = (n) => {

   return [...Array(n).keys()].filter((num) => n % num === 0)

 }

 const perfectNumber = (n) => {
"
31466,"﻿using System;

 using System.Collections;

 using System.Collections.Generic;

 using System.Linq;

 using System.Text;

 using System.Text.Json;
"
63905,"    return total;

 }

 CArray *valuePositionsCArray(CArray *array, int value)

 {
"
14654,"//

 // Created by light on 19-12-9.

 //

 #include <iostream>

 class Obj {
"
60159,"}

 /**

  * @brief   Deletion by position into the list function

  * @param   list    a doubly linked List

  * @param   pos     a position into the list for value Deletion
"
12619,"        self.h: list[float] = []

         self.heap_size: int = 0

     def __repr__(self) -> str:

         return str(self.h)

     def parent_index(self, child_idx: int) -> int | None:
"
20032,"uuid = ""559328eb-81f9-559d-9380-de523a88c83c""

 version = ""1.0.10+0""

 [[FunctionWrappers]]

 git-tree-sha1 = ""241552bc2209f0fa068b6415b1942cc0aa486bcc""

 uuid = ""069b7b12-0de2-55c6-9aab-29f3d0a68a2e""
"
10777,"    for (o = 1; o < order; o++)

         y[o] += dx * dy[o];  // update remaining using new dy

     *x += dx;

 }

 /**

  * @brief Compute approximation using the semi-implicit-Euler
"
25957,"## 3    5    6   14

 X[order(X$var1, X$var3), ]

 ##   var1 var2 var3

 ## 4    1   10   11

 ## 1    2   NA   15

 ## 2    3   NA   12
"
13635,"#

 # Example:

 #
"
25947,"      output[max_index] = nums1_square

       p1 += 1

     else

       output[max_index] = nums1_square

       max_index -= 1
"
11290,"    >>> binary_and(58, 73)

     '0b0001000'

     >>> binary_and(0, 255)

     '0b00000000'

     >>> binary_and(256, 256)

     '0b100000000'
"
32940,"git-tree-sha1 = ""ad368663a5e20dbb8d6dc2fddeefe4dae0781ae8""

 uuid = ""ea2cea3b-5b76-57ae-a6ef-0a8af62496e1""

 version = ""5.15.3+0""

 [[QuadGK]]

 deps = [""DataStructures"", ""LinearAlgebra""]

 git-tree-sha1 = ""12fbe86da16df6679be7521dfb39fbc861e1dc7b""
"
92563,"      System.out.println(""This BST is empty."");

       return;

     }

     System.out.println(""Inorder traversal of this tree is:"");

     Stack<Node> st = new Stack<Node>();
"
25105,"    /// <typeparam name=""TKey"">Type of the key.</typeparam>

     public interface IEncoder<TKey>

     {

         /// <summary>

         ///     Encodes text using specified key.
"
28259,"  }

 }
"
10616,"    builder.replace(builder.length() - 2, builder.length(), ""]"");

     return builder.toString();

   }

   /* Driver Code */

   public static void main(String[] args) {
"
31898,"                    }

                     // else take the prev one and overwrite the next with the one behind the deleted

                     if (previousElement is not null)

                     {

                         previousElement.Next = currentElement.Next;
"
36683,"}
"
22061,"using System;

 using Utilities.Extensions;

 using M = Utilities.Extensions.MatrixExtensions;

 using V = Utilities.Extensions.VectorExtensions;

 namespace Algorithms.Numeric.Decomposition
"
32997,"        Return the letter corresponding to the position [index1, index2] in

         the polybius square

         >>> BifidCipher().numbers_to_letter(4, 5) == ""u""

         True

         >>> BifidCipher().numbers_to_letter(1, 1) == ""a""

         True
"
20837,"    if(d != NULL) 

         cout << ""works""<<endl; 

     else

         cout << ""cannot cast B* to D*""; 

  

     try {
"
23953,"                augM[k, 3] = vector[k];

             }

             _ = linearEquationSolver.Solve(augM);
"
16903,"      const alive = cells[i][j] === 1

       if ((alive && neighbourCount >= 2 && neighbourCount <= 3) || (!alive && neighbourCount === 3)) {

         nextGenerationRow.push(1)

       } else {

         nextGenerationRow.push(0)
"
30354,"  it('should give the correct output for prime and composite numbers', () => {

     expect(fermatPrimeCheck(2, 35)).toBe(true)

     expect(fermatPrimeCheck(10, 30)).toBe(false)
"
17879,"        roots[n] -= 50.f;

         roots[n] /= 25.f;

     }

     auto result = durand_kerner_algo(coeffs, &roots, false);

     for (int i = 0; i < roots.size(); i++) {
"
24326,"  /**

    * this method removes an edge from the graph between two specified vertices

    *
"
21666,"    public int getFrom() {

       return from;

     }

     public int getTo() {
"
32359,"export { MinPriorityQueue }
"
33214,"/**

  * @file

  * @brief Convert hexadecimal number to octal number (with decimal intermediary)

  * @details

  * The input is valid from 0 to 0xFFFF_FFFF_FFFF_FFFF.

  *
"
30608,"    *   - a sequence of unsorted integers

     * @return

     *   - sequence of sorted integers @array
"
83817,"""""""

     dna2rna(s::AbstractString)

 Given: A DNA string t

 having length at most 1000 nt.
"
18323,"    s2 = s3 = 0.0;

     for (i = 1; i < n; i += 3)

     {

         x = a + i * h;
"
21824,"	graph::depth_first_search::addEdge(&g3, 2, 4);

 	graph::depth_first_search::addEdge(&g3, 4, 1);

 	std::vector<size_t> expected3 {2, 4, 1, 3}; /// for the above sample data, this is the expected output
"
21459,"    assert checkIfPowerOfTwoOrNot(8);

     assert checkIfPowerOfTwoOrNot(16);

     assert checkIfPowerOfTwoOrNot(1024);

   }

   /**

    * Checks whether given number is power of two or not.
"
24453," */

 int main(int argc, char *argv[])

 {

     /* output alaw encoded by encode() */

     uint8_t coded[LEN];
"
90520,"            /* since no more updates we made, the array is already sorted

                 this is an optimization for early termination */

             break;

         }

     }

 }
"
15298,"encode_dict = {

     ""a"": ""AAAAA"",

     ""b"": ""AAAAB"",

     ""c"": ""AAABA"",
"
19317,"char *getOne(char c)

 {

     switch (c)

     {

     case '9':
"
23261,"#endif

 #include <assert.h>

 #include ""geometry_datatypes.h""

 /**

  * @addtogroup quats 3D Quaternion operations
"
18358,"        let from: Vertex

         let to: Vertex

         let weight: Int

     }

     typealias Graph = [Edge]

     static func kruskal(_ graph: Graph) -> Graph {
"
76733,"# Read specific rows and columns in Excel

 colIndex <- 2:3

 rowIndex <- 1:4

 cameraDataSubset <- read.xlsx(""./data/cameras.xlsx"", sheetIndex = 1, colIndex = colIndex, 

     rowIndex = rowIndex)

 cameraDataSubset
"
34078,"              sop(""word got deleted successfully"");

             } else {

               sop(""word not found"");
"
15301,"    ...         ""feel. Fat make met can must form into gate. Me we offending prevailed ""

     ...         ""discovery."")

     >>> calculate_prob(text)

     4.0

     7.0

     3.0
"
27680,"import { calcFactorial } from '../Factorial'

 describe('calcFactorial', () => {

   it('should return a statement for value ""0""', () => {
"
33931,"    socklen_t ClientLen;  /// size of address

     /**

      * The TCP socket is created using the socket function

      *

      * AF_INET (Family) - it is an address family that is used to designate the

      * type of addresses that your socket can communicate with
"
57563,"    printf(""\n%d\n"", searching);

     my_list = delete (my_list, 1);

     my_list = delete (my_list, 1);

     my_list = delete (my_list, 1);

     my_list = delete (my_list, 1);
"
26294," * @brief child class

  */

 typedef struct _B
"
17823,"  }

 }

 export { Queue }
"
20025,"    }

 }
"
21455,"        return self.__height

     def width(self) -> int:

         """"""

         getter for the width
"
15514,"# ╟─00000000-0000-0000-0000-000000000002
"
16780,"     * @brief A utility function which check whether i and j belongs to same set

      * or not

      * @param i element of some set
"
12706,"uuid = ""ca575930-c2e3-43a9-ace4-1e988b2c1908""

 [[NonlinearSolve]]

 deps = [""ArrayInterface"", ""FiniteDiff"", ""ForwardDiff"", ""IterativeSolvers"", ""LinearAlgebra"", ""RecursiveArrayTools"", ""RecursiveFactorization"", ""Reexport"", ""SciMLBase"", ""Setfield"", ""StaticArrays"", ""UnPack""]

 git-tree-sha1 = ""f2530482ef6447c8ae24c660914436f1ae3917e0""

 uuid = ""8913a72c-1f9b-4ce2-8d82-65094dcecaec""

 version = ""0.3.9""
"
21179,"            System.out.println(sum + "" × "" + (a / sum) + "" = "" + a);

         }

         

         else {

             System.out.println(a + "" is not a Harshad Number"");
"
33272,"# Create data handle and booster

 handle.data <- lgbm.data.create(x)

 lgbm.data.setField(handle.data, ""label"", y)

 handle.booster <- lgbm.booster.create(handle.data, lapply(config, as.character))

 # Train for num_iterations iterations and eval every 5 steps
"
63225,"    return null;

   } else {

     distance = 0;
"
68877,"    float tmp;

     int k = 1, l, j;

     for (j = i; j < n - 1; j++)

     {

         tmp = -((m[i + k][i]) / (m[i][i]));
"
52226,"    ///     </para>

     ///     <para>

     ///         OEIS: https://oeis.org/A000040.

     ///     </para>

     /// </summary>

     public class PrimesSequence : ISequence
"
26599,"`

 describe('Check Problem 18 - Maximum path sum I', () => {

   it('Check example', () => {

     expect(maxPathSum(example)).toBe(23)

   })

   it('Check solution', () => {
"
10740,"   * @param coins The list of coins

    * @param amount The amount for which we need to find the minimum number of coins. Finds the the

    *     minimum number of coins that make a given value.
"
60118,"    // Move to next even number and update sum

     ef1 = ef2;

     ef2 = ef3;

     sum += ef2;

   }
"
17523,"#endif

     double tol_condition = 1;

     unsigned long iter = 0;

     clock_t end_time, start_time = clock();

     while (!check_termination(tol_condition) && iter < INT_MAX)

     {
"
25783,"        case .minus: return b - a

         }

     }

 }

 private extension Scanner {
"
32026,"  }

 }
"
33647,"            Right.Left = node;

             node.Right = Right;

             node.Left = this;
"
24863,"            {

                 flag = 0;

                 break;

             }

         }

     }
"
23627,"    >>> binary_or(21, 30)

     '0b11111'

     >>> binary_or(58, 73)
"
12189,"   * Checks if a number is prime or not

    * @param n the number

    * @return {@code true} if {@code n} is prime

    */

   public static boolean isPrime(int n) {
"
90739,"    >>> weight_conversion(""carrat"",""short-ton"",4)

     8.818497600000002e-07

     >>> weight_conversion(""carrat"",""pound"",1)

     0.00044092488404000004

     >>> weight_conversion(""carrat"",""ounce"",2)
"
31823,"        [Test]

         public static void CountTest()

         {

             var stack = new ArrayBasedStack<int>(new[] { 0, 1, 2, 3, 4 });

             stack.Top.Should().Be(4);

         }
"
51270,"  get isEmpty () {

     return this.top === 0

   }
"
15952,"    /*Right Left */

     if ((balance < -1) && (heightDiff(node->right) < 0))

     {

         node = RightLeftRotate(node);

     }
"
19115,"// > decimalToBinary(2)

 // '10'

 // > decimalToBinary(7)
"
94169,"    printf(""Top element = %d \n"", top(head));

     pop(head);

     printf(""Popping an element.\n"");

     printf(""Top element = %d \n"", top(head));

     printf(""\n"");

     return 0;
"
17233,"            ans[i] = 'A';

             break;

         case 'A':

             ans[i] = 'U';

             break;
"
28751,"        }

         // constraints

         let constraints = [

             self.stackView.topAnchor.constraint(equalTo: self.topAnchor, constant: 10),

             self.stackView.centerXAnchor.constraint(equalTo: self.centerXAnchor),
"
26598,"    [1, 4, 2], [3, 2, 5],

     [3, 1, 1], [4, 3, -3]]

   const dist = BellmanFord(graph, V, E, 0, destination)

   expect(dist).toBe(-2)
"
11473,"}
"
49874,"      // array[i] extends largest subsequence

       else if (array[i] > tail[length - 1]) tail[length++] = array[i];

       // array[i] will become end candidate of an existing subsequence or

       // Throw away larger elements in all LIS, to make room for upcoming grater elements than

       // array[i]
"
14383,"// 		if stateExists(current, oracle) {

 // 			if debugMode == true {

 // 				fmt.Printf("" We got an occurrence!"")
"
42586,"    const temp = this.rear.prev

     temp.next = node

     node.prev = temp

     this.rear.prev = node

     node.next = this.rear

     this._positionNode(node)
"
54501,"                           546,   567,  595,  616,  644,  672,  700,  728,  756,  784,

                            820,   848,  884,  912,  948,  984, 1020, 1056, 1092, 1128,

                            1173, 1209, 1254, 1290, 1335, 1380, 1425, 1470, 1515, 1560,
"
43396,"        pp->lokid = pp->eqkid = pp->hikid = 0;

         if (*s++ == 0)

         {
"
27495,"            }

         }

     }
"
83931,"} {

 	var tests = []struct {

 		n        int64
"
21916,"    >>> actual = [1,2,3];predict = [1,4,3]

     >>> np.around(mae(predict,actual),decimals = 2)

     0.67

     >>> actual = [1,1,1];predict = [1,1,1]

     >>> mae(predict,actual)

     0.0
"
20437,"    out_quat.q2 = in_quat1->w * in_quat2->q2 - in_quat1->q1 * in_quat2->q3 +

                   in_quat1->q2 * in_quat2->w + in_quat1->q3 * in_quat2->q1;

     out_quat.q3 = in_quat1->w * in_quat2->q3 + in_quat1->q1 * in_quat2->q2 -
"
14763,"import 'dart:math';

 //this function return a list of roots of a quadratic equation

 // [x1, x2] where x1 and x2 are roots of

 // aX^2 + bX + c = 0

 List shreedharacharya(double a, double b, double c) {
"
59980,"class node:

     # BST data structure

     def __init__(self, val):

         self.val = val
"
23370,"      // Check which node is the node to remove

       while (currentNode.element !== element) {

         previousNode = currentNode

         currentNode = currentNode.next
"
95285,"}

 type Line struct {

 	P1, P2 Point

 }
"
79281,"    /* Hexadecimal to binary conversion */

     for (i = 0; hex[i] != '\0'; i++)

     {

         bin = bin * place;

         switch (hex[i])

         {
"
60852,"package Others;

 import java.io.BufferedReader;

 import java.io.InputStreamReader;

 /** @author Varun Upadhyay (https://github.com/varunu28) */

 public class RemoveDuplicateFromString {
"
29373,"version = ""1.0.1""

 [[Tables]]

 deps = [""DataAPI"", ""DataValueInterfaces"", ""IteratorInterfaceExtensions"", ""LinearAlgebra"", ""TableTraits"", ""Test""]

 git-tree-sha1 = ""d0c690d37c73aeb5ca063056283fde5585a41710""

 uuid = ""bd369af6-aec1-5ad0-b16a-f7cc5008161c""

 version = ""1.5.0""
"
33254,"  const answer = parseFloat((number + '').replace(/^[-\d]+./, '.'))

   return isNaN(answer) === true ? 0 : answer

 }
"
19133," * @param s working memory for the sequence

  * @param ret list of the valid magic sequences

  * @param depth current depth in the tree
"
23717,"            {

                 MoveCycle(array, i, comparer);

             }

         }

         private static void MoveCycle(T[] array, int startingIndex, IComparer<T> comparer)

         {
"
25954,"	}

 }

 func TestSymmetricDifference(t *testing.T) {

 	td := []struct {

 		name   string
"
29139,"      grid_hash[row[i]] += 1

       grids << grid_hash

     end

     board.each do |row|
"
25322,"        Empties the tree

         >>> t = BinarySearchTree()

         >>> assert t.root is None

         >>> t.put(8)

         >>> assert t.root is not None

         """"""
"
33006,"    private Entry<K, V> evict() {

         if (head == null) {

             throw new RuntimeException(""cache cannot be empty!"");

         }

         final Entry<K, V> evicted = this.tail;

         tail = evicted.getPreEntry();
"
71182,"package DataStructures.Graphs;

 import java.util.ArrayList;

 import java.util.Scanner;

 class Cycle {

   private int nodes, edges;

   private int[][] adjacencyMatrix;
"
13293,"    std::cout << ""Input Radius: "" << double_radius << std::endl;

     std::cout << ""Expected Output: "" << double_expected << std::endl;

     std::cout << ""Output: "" << double_volume << std::endl;

     assert(double_volume == double_expected);
"
16295,"            if (tree.LeftChild is not null)

             {

                 var (lsck, lsdk) = GetKeys(tree.LeftChild);

                 compressionKeys.AddMany(lsck.Select(kvp => (kvp.Key, ""0"" + kvp.Value)));

                 decompressionKeys.AddMany(lsdk.Select(kvp => (""0"" + kvp.Key, kvp.Value)));

             }
"
59175,"	     g3.addEdge(1,5);

 	     g3.addEdge(5,0);

 	     int expected_res3 = 0; // for the above sample data, this is the expected output

 	     int res3 = g3.hopcroftKarpAlgorithm();

 	     assert(res3 == expected_res3); // assert check to ensure that the algorithm executed correctly for test 3
"
16989,"    static singleton p;

     return &p;

 }
"
31907,"                print('  -----after pooling  ',np.shape(data_pooled1))

                """"""

                 data_bp_input = self._expand(data_pooled1)

                 bp_out1 = data_bp_input
"
18119,"        >>> len(linked_list)

         0

         """"""

         return len(tuple(iter(self)))

     def __repr__(self) -> str:
"
10092,"        ///     Finds the index of all occurrences of the pattern <c>p</c> int <c>t</c>.

         /// </summary>

         /// <returns>List of starting indices of the pattern in the text.</returns>

         public static List<int> FindAllOccurrences(string text, string pattern)

         {
"
18732,"struct Heap<Element> {

     let compare: (Element, Element) -> Bool

     private var items : [Element]
"
28332," * \returns probability of A and B

  */

 double addition_rule_independent(double A, double B) {

     return (A + B) - (A * B);
"
29393,"                } else {

                     std::shared_ptr<trie> temp(new trie());

                     root->arr[j] = temp;

                     root = temp;

                 }
"
25051,"                              sizeof(double));  // assign rows

     for (int i = 0; i < max(num_out, N); i++)  // loop till max(N, num_out)

     {

         if (i < N)  // only add new arrays if i < N

             X[i] = (double *)malloc(features * sizeof(double));
"
75481,"  public void postordercall() {

     postorder(root);

     System.out.println(""."");
"
74927,"import sys

 """"""

 Dynamic Programming

 Implementation of Matrix Chain Multiplication

 Time Complexity: O(n^3)

 Space Complexity: O(n^2)
"
17986,"    vector<int> v{13, 6, 4, 11, 29};

     cout << v << endl;

     //  从小到大排序

     sort(v.begin(), v.end());

     cout << v << endl;
"
17507,"""""""

 ceil_val(x) = x - trunc(x) <= 0 ? trunc(x) : trunc(x) + 1

 """"""

     floor_val(x)

 Finds the floor of x as an Integer

 # Example
"
14847,"        return list;

     }

     return NULL;
"
24111,"  timer.startTimer()

   // ... Initialization code ...

   // I generally use it for timing tests in Jasmine JS.

   /**

    * Gets the runtime till this point.

    * Can be subtracted from ElapsedTime to offset timing of initialization code.
"
72092,"            {

                 if (comparer.Compare(array[i], array[mi]) == 1)

                 {

                     mi = i;

                 }

             }
"
26502,"              point1 = arrayParam[i];

               point2 = arrayParam[j];

             }
"
25677,"           3);  // here we are expecting 3 subsets which sum up to 6 i.e.

                 // {(3,3),(3,3),(3,3)}

     std::cout << ""passed"" << std::endl;
"
60041,"def get_distinct_edge(edge_array):

     """"""

     Return Distinct edges from edge array of multiple graphs

     >>> sorted(get_distinct_edge(edge_array))

     ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
"
29329,"      const values = this.adjacencyMap[i]

       let vertex = ''

       for (const j of values) {

         vertex += j + ' '
"
22344,"    }

 }
"
22643,"# Algorithm: Heap-Sort

 # Time-Complexity: O(nlogn)

 def heap_sort(array)

   array_size = array.size
"
32481,"    prev = prev + 1;

     if (prev == min(step, n)) {

       return -1;

     }

   }
"
54824,"  }

   if (tree.left != null && tree.right != null) {

     return (is_full_binary_tree(tree.left) && is_full_binary_tree(tree.right));
"
12637,"            {

                 throw new InvalidOperationException(""Heap is empty"");

             }
"
25166,"        private static void ThrowIfNegativeCapacity(int capacity)

         {

             if (capacity < 0)

             {

                 throw new InvalidOperationException(""Graph capacity should always be a non-negative integer."");

             }
"
22748," */

 int16_t priority(char opr) {

 	if(opr == '+' || opr == '-') {

 		return 0;

 	}

 	else if(opr == '/' || opr == '*' || opr == '%') {
"
23862,"        result = 0

         temp = x

         for i in 1:length

             val = temp % 10

             # Finding each digit raised to the power total digit and add it to the total sum

             result = result + Int(trunc(val))^length
"
12518,"    if (

         start > end

         or node is None

         or start_num > end_num

         or node.minn > end_num

         or node.maxx < start_num
"
28851,"func LongestIncreasingSubsequence(elements []int) int {

 	n := len(elements)

 	lis := make([]int, n)
"
32977,"  }

   /**

    * This method finds the nth fibonacci number using memoization technique

    *
"
25235,"# @param {Integer[]} nums2

 # @return {Integer[]}

 def next_greater_element(nums1, nums2)

   nums1.each_with_index do |nums1_value, pointer1|
"
50943,"/**

  * Print formatted vector on stdout.

  * @param[in] a vector to print

  * @param[in] name  name of the vector

  * @returns string representation of vector
"
17313,"    }

 }

 /** Main funcion */

 int main()

 {

     // this reference don't change.
"
19921,"    .map(&:length)

     .reverse

 end

 if $0 == __FILE__
"
17021," * Displays the array, passed to this method

  * @param [in] arr array to display

  * @param [in] n number of elements in the array

  */

 void display(const int *arr, int n)

 {
"
17368,"            q = N / i;

             if (!is_in(i, D, num))  // if divisor was already stored

             {

                 D[num] = i;
"
25532,"        ///     operation is O(1).

         /// </remarks>

         /// <param name=""x"">An item to push onto the heap.</param>

         /// <returns>

         ///     A reference to the item as it is in the heap. This is used for
"
62710,"}

 function Partition (items, left, right) {

   const x = items[right]

   let pivotIndex = left - 1
"
31789,"  }

 }
"
25118,"for i in myMinHeap.heap:

     print(i)

 print(""Min Heap - After decrease key of node [B -> -17]"")

 myMinHeap.decrease_key(b, -17)

 # After

 for i in myMinHeap.heap:
"
25648,"            print(node_dequeued.data, end="","")

             if node_dequeued.left:

                 list.append(node_dequeued.left)

             if node_dequeued.right:
"
28166,"```

 julia> dp=zeros(Int,30)

 julia> complete_pack!(20,[1,2,9],[1,3,20],dp)

 43
"
33419,"    /// Unrolled linked list is a linked list of small arrays,

     /// all of the same size where each is so small that the insertion

     /// or deletion is fast and quick, but large enough to fill the cache line.

     /// </summary>
"
94595,"    {

         printf(""%d "", union_set[i]);

     }

     printf(""\n"");

     // Now 3 and 5 are groupped together, that is find(3) = find(5)

     // p = {0, 1, 2, 5, 4, 5, 6, 7, 8, 9}
"
10266,"  @Param {number} latitude1

   @Param {number} latitude2

   @Param {number} longitude1
"
21497," * @brief Self-test implementations of well-known MD5 hashes

  * @returns void

  */

 static void test() {

     // Hashes empty string and stores signature

     void* sig = hashing::md5::hash("""");
"
14714,"            base=16,

         ),

         ""generator"": 2,

     },

     # 3072-bit
"
10356,"    System.out.println(""After sorting the array: "");

     this.showArrayElements();

     System.out.println();

   }

   /** @brief A method to show the elements inside the array. */

   public void showArrayElements() {
"
11666,"        case times = ""*""

         case divide = ""/""

     }

     static func evaluate(_ string: String) -> Double {

         let scanner = Scanner(string: string)

         var numberStack: [Double] = []
"
20877,"        super().__init__(flowNetwork)

         # use this to save your result

         self.maximumFlow = -1

     def getMaximumFlow(self):

         if not self.executed:
"
44092,"                return (0, left - 1);

             }

             if (item < array[right])
"
23202,"#include <stdlib.h>

 #include <string.h>

 /** @addtogroup sudoku Sudoku solver

  * @{
"
12800,"int divide(int dividend, int divisor)

 {

     int sign = 1;
"
23652,"    ""The number #{num} is not an Armstrong number.""

   end

 rescue StandardError
"
12691,"    Graphs.  Initialize graph object indicating whether it's directed or undirected.

     Directed graph example:

     >>> d_graph = GraphAdjacencyList()

     >>> d_graph

     {}
"
27689,"    lcm += maxNum

   }

   return lcm

 }

 export { findLcm }
"
62376,"        p = &(*p)->next;

     }

     *p = tail;

     return list;
"
18080,"Example

 ```julia

 GetIndexWithKMP(""Hello I am Gervin"", ""Hello I am Gervin"", false) # returns 1

 GetIndexWithKMP(""ABABDABACDABABCABAB"", ""ABABCABAB"", false) # returns 11
"
33560,"        list, mid + 1, high, key); /* search in range[mid + 1, high] */

   } else {

     return binarySearch(

         list, low, mid - 1, key); /* search in range[low, mid - 1] */

   }
"
73625,"    [3, 6]

     >>> calculate_turnaroundtime([8,10,1], 3, [1,0,3])

     [9, 10, 4]
"
22047,"        private IEnumerable<int> CollapseLeadingDigit(IEnumerable<int> numbers, char c)

         {

             using var enumerator = numbers.GetEnumerator();

             enumerator.MoveNext();

             if (enumerator.Current == MapToNumber(c))

             {
"
14979,"    cocktail_sort(input)

   end

 end
"
13607," * implementation

  */

 namespace geometric_dist {
"
25081,"namespace Algorithms.Tests.Numeric

 {

     public static class AliquotSumCalculatorTests

     {
"
16083,"}

 }  // namespace double_hashing

 /**

  * @}

  */

 using double_hashing::Entry;
"
10466,"    destroyqueue();

     return 0;

 }
"
16987,"function vol_prism(area_of_base, height)

     if area_of_base < 0 || height < 0

         throw(DomainError(""vol_prism() only works for non negative values.""))
"
14840,"    printf(""\t%d\t"", node->data);

     preOrderTraversal(node->leftNode);

     preOrderTraversal(node->rightNode);

 }

 void postOrderTraversal(struct node *node)

 {
"
11099,"    printf(""\n"");

     // Uncomment below part to get a ready-made example

     /*struct Graph* graph2 = createGraph(4);

     addEdge(graph2, 0, 1);
"
13813,"            }

             for (var k = 0; k < vector.Length; k++)

             {
"
23927,"// | .--------------. || .--------------. || .--------------. ||

 // .--------------. | | .--------------. || .--------------. | | |  _________ |

 // || | _____  _____ | || |      __      | || | ____  _____  | | | |  ____  ____

 // | || |     ____     | | | | |  _   _  |  | || ||_   _||_   _|| || |     /  \

 // | || ||_   \|_   _| | | | | |_   ||   _| | || |   .'    `.   | | | | |_/ | |
"
15219,"        {

             var tree = new RedBlackTree<int>();

             tree.Add(5);

             tree.Count.Should().Be(1);
"
30739," * @returns void

  */

 void heapSort(int8_t *arr, const uint8_t size)

 {

     if (size <= 1)

     {
"
20089,"        std::vector<uint64_t> palindrome_max_half_length(

             stuffed_string.size(),

             0);  // this array will consist of largest possible half length of

                  // palindrome centered at index (say i with respect to the

                  // stuffed string). This value will be lower bound of half

                  // length since single character is a palindrome in itself.
"
31505,"    >>> perfect_square_binary_search(0)

     True

     >>> perfect_square_binary_search(10)

     False

     >>> perfect_square_binary_search(-1)
"
16939,"    struct TreeNode *node = malloc(sizeof(struct TreeNode));

     node->val = slow->val;

     node->left = buildBST(head, slow);

     node->right = buildBST(slow->next, tail);
"
52424,"uuid = ""d4d017d3-3776-5f7e-afef-a10c40355c18""

 version = ""1.8.4""

 [[ExprTools]]
"
31044,"    printf(""Maximum digits: %hu\t Denominator: %hu\n"", max_digits,

            max_idx_number);

     return 0;

 }
"
10946,"        t.remove(6)

         r""""""

               8

              / \
"
14329,"    struct Graph G;

     printf(""Enter number of vertices: "");

     scanf(""%d"", &V);

     printf(""Enter number of edges: "");

     scanf(""%d"", &E);

     createGraph(&G, V);
"
20338,"        public static void Cut_EmptyHeap_ThrowsCorrectExcpetion()

         {

             var heap = new TestFHeap();

             var item1 = new FHeapNode<int>(1);

             var item2 = new FHeapNode<int>(2);
"
32811,"  /**

    * Delete an element in the heap.

    *

    * @param elementIndex int containing the position in the heap of the element to be deleted.

    */

   void deleteElement(int elementIndex);
"
10357,"    0.017814279

     >>> volume_conversion(2, ""cubicyard"", ""litre"")

     1529.1

     >>> volume_conversion(4, ""cubicfoot"", ""cup"")

     473.396

     >>> volume_conversion(1, ""cup"", ""kilolitre"")
"
12976,"        /// <param name=""x"">Given point.</param>

         /// <param name=""i"">Term index from 0 to n.</param>

         /// <returns>Single term value.</returns>

         private static double CosTerm(double x, int i) =>
"
18454,"    double x = X0;

     std::valarray<double> y(Y0);

     std::ofstream fp(""exact.csv"", std::ostream::out);
"
13120,"/**

  * Modified 07/12/2017, Kyler Smith

  *

  */
"
16068,"    34020

     """"""

     if divisor % 5 == 0 or divisor % 2 == 0:

         return 0

     repunit = 1

     repunit_index = 1
"
32795,"          w.color = x.p.color;

           x.p.color = B;

           w.right.color = B;

           rotateLeft(x.p);
"
16057,"    get_min_2d(*D, &d_min, &d_min_x, &d_min_y);

     // step 3a: get the neighborhood range

     int from_x = std::max(0, d_min_x - R);

     int to_x = std::min(num_out_x, d_min_x + R + 1);

     int from_y = std::max(0, d_min_y - R);
"
31231,"        contrastsList <- vector(mode = ""list"", length = length(factorCols))

         names(contrastsList) <- factorCols

         if(length(factorCols) > 0){

             for(col in factorCols){
"
62636,"    [<TestMethod>]

     [<DataRow(""wow"", ""wow"")>]

     [<DataRow(""HellZo"", ""hellzo"")>]

     [<DataRow(""WHAT"", ""what"")>]

     [<DataRow(""wh[]32"", ""wh[]32"")>]
"
22184,"          1   4    14

                \

                 5

         """"""

         assert t.root.left.left is not None

         assert t.root.left.right.right is not None
"
81505,"    if (radix < 2 || radix > 16) {

       throw new ArithmeticException(

           String.format(""Invalid input -> number:%d,radius:%d"", number, radix));

     }

     char[] tables = {

       '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
"
22165,"    ans = []  # this list will returned

     # creates a list of prime numbers between 2 up to 'number'

     primeNumbers = getPrimeNumbers(number)
"
33383,"        }

         tail.setNextEntry(entry);

         entry.setPreEntry(tail);

         entry.setNextEntry(null);

         tail = entry;

     }
"
21272,"    d = {}

     j = 0

     k = 0
"
28130,"        {

             if (arr[i] > arr[i + 1])

             {

                 temp = arr[i];

                 arr[i] = arr[i + 1];

                 arr[i + 1] = temp;
"
32954,"struct node

 {

     int data;

     struct node *next;
"
31794,"    if (iterator.done) break

     let insertTo = Math.floor(Math.random() * output.length)

     while (filledIndexes.includes(insertTo)) {

       insertTo++

       if (insertTo === output.length) {
"
25552,"            20509, 20521, 20533, 20543, 20549, 20551, 20563, 20593, 20599, 20611, 20627, 20639, 20641, 20663, 20681,

             20693, 20707, 20717, 20719, 20731, 20743, 20747, 20749, 20753, 20759, 20771, 20773, 20789, 20807, 20809,

             20849, 20857, 20873, 20879, 20887, 20897, 20899, 20903, 20921, 20929, 20939, 20947, 20959, 20963, 20981,

             20983, 21001, 21011, 21013, 21017, 21019, 21023, 21031, 21059, 21061, 21067, 21089, 21101, 21107, 21121,

             21139, 21143, 21149, 21157, 21163, 21169, 21179, 21187, 21191, 21193, 21211, 21221, 21227, 21247, 21269,

             21277, 21283, 21313, 21317, 21319, 21323, 21341, 21347, 21377, 21379, 21383, 21391, 21397, 21401, 21407,
"
31430,"    assert(JumpSearch.jumpSearch(l, 5) == 4)

   }

   it should ""return -1 if the element is not present in the list"" in {

     val l = List.range(1, 10)

     val m = List(1, 3, 5, 7)

     assert(JumpSearch.jumpSearch(l, 12) == -1)
"
28246,"    return base * height / 2;

   }

   /**

    * Calculate the area of a parallelogram
"
32254,"/**

  * @file

  * @brief Perform paranthesis matching. \note Do not know the application of

  * this, however.

  * @note Implementation is C-type and does not utilize the C++ constructs

  * @todo implement as a C++ class
"
19846,"        $this->assertEquals($expectedResultOne, $resultOne);

         $this->assertEquals($expectedResultTwo, $resultTwo);

     }

 }
"
29616,"git-tree-sha1 = ""432428df5f360964040ed60418dd5601ecd240b6""

 uuid = ""093fc24a-ae57-5d10-9952-331d41423f4d""

 version = ""1.3.5""

 [[LineSearches]]
"
40267,"void ssort2(char **a, int n, int depth)

 {

     int d, r, partval;

     char **pa, **pb, **pc, **pd, **pl, **pm, **pn, *t;

     if (n < 10)

     {
"
28300,"        /// <summary>

         ///     Sort array of strings using MSD radix sort algorithm.

         /// </summary>
"
21723,"//

 // Created by light on 19-11-3.

 //

 #include <vector>

 using namespace std;

 // 不可以对alias template做偏特化或全特化
"
32122,"      return -1

     }

   }

   const upperBound = Math.min(step, length)

   while (arr[lowerBound] < value) {
"
31128,"    ----------

     Coulomb (1785) ""Premier mémoire sur l’électricité et le magnétisme,""

     Histoire de l’Académie Royale des Sciences, pp. 569–577.

     Parameters

     ----------
"
78105,"  * The asymptotic analysis of Jump Search is o(√n). Like the binary search, it needs to be sorted.

   * The advantage against binary search is that Jump Search traversed back only once.

  */
"
30284,"        return ""MM"";

     case '1':

         return ""M"";
"
10547,"         */

         public static CreditCard fromString(String cardNumber) {

             Objects.requireNonNull(cardNumber);

             String trimmedCardNumber = cardNumber.replaceAll("" "", """");

             if (trimmedCardNumber.length() != DIGITS_COUNT || !trimmedCardNumber.matches(""\\d+"")) {
"
57561,"		}

 		if actualError != test.expectedError {

 			t.Errorf(""test '%s' failed: input array '%v' with key '%d', expected error '%s', get error '%s'"", test.name, test.data, test.key, test.expectedError, actualError)
"
92157,"        return l1;

     if (l1 && l2)

     {

         if (l1->val < l2->val)

         {
"
39515,"// var numberList = [15, 2, 23, 11, 3, 9]

 // debugPrint(numberList.mergeSorted(by: >))

 // numberList.mergeSort(by: <)
"
32786,"    /// </summary>

     public class BucketSorter : IIntegerSorter

     {

         private const int NumOfDigitsInBase10 = 10;
"
22806,"   *

    * @param number the number contains digits

    * @return sum of digits of given {@code number}

    */

   public static int sumOfDigits(int number) {

     number = number < 0 ? -number : number; /* calculate abs value */
"
28748,"        case 3:

             viewlist();

             break;

         default:

             printf(""\ninvalid choice"");
"
27461,"  private static int knapSack(int W, int wt[], int val[], int n) throws IllegalArgumentException {

     if (wt == null || val == null) throw new IllegalArgumentException();

     int i, w;
"
95808,"            9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721,

             9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859,

             9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061,

             10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169,
"
22534,"            }

             UpdateNodeValue(currentValue, newValue, node);

             if (node == root)

             {

                 return;
"
64767," * @returns {Function} Memoized function

  */

 export const memoize = (func) => {

   // Initialization of a slot to store the function result
"
21316,"            poly1 = poly1->next;

         }

         /* If poly2 is not exhausted

        place rest of that polynomial in temp

        */

         else if (poly2)
"
55511,"	if (leftNode >= firstIndex) && (rightNode <= lastIndex) {

 		//inside the interval

 		s.LazyTree[node] = value

 		s.Propagate(node, leftNode, rightNode)
"
15365,"            if (mat[line][column + 1] == 20)

             {

                 mat[line][column] = 50;
"
31865,"import (

 	math2 ""github.com/TheAlgorithms/Go/math""

 	""math""

 	""testing""

 )
"
34265,"        if number % i == 0

             push!(divisors, i)

         end
"
32085," * | iti | k"" For example: example 2:- String : ""ababbbabbababa"" Output : 3 =>

  * ""aba | b | bbabb | ababa""

  * @author [Syed] (https://github.com/roeticvampire)

  */

 public class PalindromicPartitioning {
"
20833,"    assert ""32+"".equals(infix2PostFix(""3+2""));

     assert ""123++"".equals(infix2PostFix(""1+(2+3)""));

     assert ""34+5*6-"".equals(infix2PostFix(""(3+4)*5-6""));

   }
"
22795,"      }

       wrongOrder =

           (key < getElementKey(elementIndex * 2))
"
44933,"        head = p;

         c++;

     }

 }
"
18312,"X <- X[sample(1:5), ]

 X$var2[c(1, 3)] = NA

 X
"
17198,"            {

                 node.Right = Remove(node.Right!, key);

             }

             else

             {
"
33779,"    }

     dijkstra(q);

   }

   /** Implementation of dijkstra's algorithm using a binary heap. */

   private void dijkstra(final NavigableSet<Vertex> q) {
"
33555," * for the target value until a match is found or until all the elements

  * have been searched.

  */
"
32581,"        if (mid == nums.length - 1 || nums[mid + 1] != key) range[1] = mid;

         else alteredBinSearch(nums, key, mid + 1, right, range, goLeft);

       }
"
11856,"    """"""

     if max_rev[n] >= 0:

         return max_rev[n]

     elif n == 0:
"
89100,"            Array.Sort(correctArray, intComparer);

             // Assert

             Assert.AreEqual(testArray, correctArray);

         }

         [Test]
"
22776,"        /// <param name=""key"">Key value to search for.</param>

         /// <returns>Whether or not the node is in the tree.</returns>

         public bool Contains(TKey key)

         {

             var node = root;
"
12662,"# Created by sarathkaul on 12/11/19

 import requests

 _NEWS_API = ""https://newsapi.org/v1/articles?source=bbc-news&sortBy=top&apiKey=""

 def fetch_bbc_news(bbc_news_api_key: str) -> None:

     # fetching a list of articles in json format

     bbc_news_page = requests.get(_NEWS_API + bbc_news_api_key).json()
"
10632,"// https://en.wikipedia.org/wiki/Binary_number

 // https://en.wikipedia.org/wiki/Decimal

 // Function receives a Binary Number as string and returns the Decimal number as integer.

 // Supported Binary number range is 0 to 2^(31-1).

 // Package name.

 package conversion
"
31930,"        SortUtils.print(integerArray);

         slowSort.sort(integerArray);

         // Print integerArray sorted

         SortUtils.print(integerArray);
"
30377,"                    }

                     else

                     {

                         double sum = 0;

                         for (var j = 0; j < i; j++)
"
28593,"never produce a palindrome. A number that never forms a palindrome through the

 reverse and add process is called a Lychrel number. Due to the theoretical nature

 of these numbers, and for the purpose of this problem, we shall assume that a number

 is Lychrel until proven otherwise. In addition you are given that for every number

 below ten-thousand, it will either (i) become a palindrome in less than fifty
"
12294,"            tree.AddRange(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });

             tree.GetMax().Should().Be(10);

         }
"
18364,"# [2,3]

 require 'benchmark'

 array = [4, 3, 2, 7, 8, 2, 3, 1]

 long_array = [4, 3, 2, 7, 8, 2, 3, 1] * 100

 #

 # Approach: Hash table
"
23882,"					row2[j] = ins

 				} else if del < sub {

 					row2[j] = del

 				} else {

 					row2[j] = sub

 				}
"
90363,"                    f2 = 1;  // using static keyword will retain the values of

                              // f1 and f2 for the next function call.

     if (n <= 2)

         return f2;

     if (n >= 93) {
"
28482,"     */

     if (is_zero_matrix(_mat)) {

         return _mat;
"
21393,"    return _top_down_cut_rod_recursive(n, prices, max_rev)

 def _top_down_cut_rod_recursive(n: int, prices: list, max_rev: list):

     """"""

     Constructs a top-down dynamic programming solution for the rod-cutting problem

     via memoization.

     Runtime: O(n^2)
"
23793,"        public void Sort(T[] array, IComparer<T> comparer)

         {

             for (var i = 0; i < array.Length - 1; i++)
"
16507,"    }

     for (boolean b : marked) {

       if (!b) {

         return false;

       }
"
65346,"    Bezier curve is a weighted sum of a set of control points.

     Generate Bezier curves from a given set of control points.

     This implementation works only for 2d coordinates in the xy plane.

     """"""

     def __init__(self, list_of_points: list[tuple[float, float]]):

         """"""
"
24603,"package Others;

 import java.util.InputMismatchException;

 import java.util.Scanner;
"
19776,"#endif

 /**

  * @namespace strings
"
32720,"            path.append((current_node.pos_y, current_node.pos_x))

             current_node = current_node.parent

         path.reverse()
"
11046,"        {

             fillOrder(i, graph, stack);

         }

     }

     // Step 2: Get the transpose graph
"
33785,"        // Updating the address location of two pointer variables temp1 and

         // temp2

     }

 }

 void printlist(struct node *temp)

 {
"
29489,"    }

     if (saturation < 0 || saturation > 1) {

       throw new IllegalArgumentException(""saturation should be between 0 and 1"");
"
23505,"    level: list[int],

     parent: list[list[int]],

     max_node: int,
"
16445,"    }

 #ifdef DEBUG

     for (i = 0; i < LEN; i++) printf(""%s\t"", data[i]);

 #endif
"
63165,"        *out++ = alaw ^ 0xD5;

     }

 }

 /**

  * @brief 8bit alaw to 16bit pcm
"
17820,"    }

 }
"
23966,"            PreOrderWalk(root);

             return result;

             void PreOrderWalk(RedBlackTreeNode<TKey>? node)

             {

                 if (node is null)

                 {
"
29052," * @brief Self-test implementations

  * @returns void

  */

 static void test() {
"
90626,"  /**

    * @param array is a sorted array

    * @param key is a value what shoulb be found in the array

    * @return an index if the array contains the key unless -1

    */
"
29536,"        k = 0xCA62C1D6

       }

       // make sure f is unsigned

       f >>>= 0
"
27665,"import { setBit } from '../SetBit'

 test('Set bit number 0 in 1:', () => {

   const setBitPos = setBit(1, 0)
"
73047,"deps = [""DataAPI""]

 git-tree-sha1 = ""4ea90bd5d3985ae1f9a908bd4500ae88921c5ce7""

 uuid = ""e1d29d7a-bbdc-5cf2-9ac0-f12de2c33e28""
"
14350,"            }

         }

     }
"
21848,"version = ""0.1.13""

 [[Reexport]]

 git-tree-sha1 = ""5f6c21241f0f655da3952fd60aa18477cf96c220""
"
21975,"                double[] extracted = new double[u.GetLength(0)];

                 // extract a column of u

                 for (var j = 0; j < extracted.Length; j++)

                 {

                     extracted[j] = u[j, i];
"
29402,"/*

 Generates a UUID/GUID in Node.Js.

 The script uses `Math.random` in combination with the timestamp for better randomness.

 The function generate an RFC4122 (https://www.ietf.org/rfc/rfc4122.txt) version 4 UUID/GUID

 */

 export const Guid = () => {
"
31023," * @returns nb converted on success

  * @returns NULL on error

  */
"
27544,"package Searches;

 import static java.lang.String.format;

 import java.util.Random;

 import java.util.concurrent.ThreadLocalRandom;
"
19739,"  # kelvin -> celsius = vale of kelvin - 273.15 => °C

   def self.kelvin_to_celsius(kelvin_input)

     celsius_output = (kelvin_input - 273.15).round(2)
"
90841,"}
"
26375,"trie = Trie.new

 trie.insert_many('Dogs')

 trie.insert_many('South')

 trie.insert_many('Cape Town')

 puts trie.include?('Cape Town')
"
11249,"				""annual"":   {4},

 				""announce"": {22},

 			},

 		},

 	},
"
13604,"  end

   def test_negative_number

     assert_equal Abs.call(-9), 9
"
12855,"    else

         return stack->arr[stack->top--];

 }
"
23275,"      return (int) number - 1;

     }

   }

 }
"
33258,"            // Arrange

             var testObj1 = new BitArray(s1);

             var testObj2 = new BitArray(s2);
"
15142,"    )

     profit = [int(x) for x in input(""Input profits separated by spaces: "").split()]

     weight = [int(x) for x in input(""Input weights separated by spaces: "").split()]

     max_weight = int(input(""Max weight allowed: ""))

     # Function Call

     calc_profit(profit, weight, max_weight)
"
11435,"// Select the minimum value from nm2, nm3, and nm5 and increment the pointer related to it.

 // Store the minimum value in variable next and array.

 // Return next.

 package Maths;

 import java.util.*;
"
29863," * @param postfix[] : empty array to be given to convert()

  * @returns postfixed expresion or \0 on exit

  */

 void convert(char infix[], char postfix[])
"
73061,"{

     int x = 0, item;

     printf(""\t****stack using linked list****\n"");

     while (x != 4)
"
32411,"  print(perfect_number(6)); // true

   print(perfect_number(12)); // false

   print(perfect_number(16)); // false

   print(perfect_number(26)); // false

   print(perfect_number(27)); // false

   print(perfect_number(28)); // true
"
32253,"    const oldValue = list[position]

     list[position] = value

     value = oldValue
"
12378,"                        }

                     }

                 }

                 det = det + a[0][x] *determinant(b, n-1) * sign;

                 sign = -sign;

             }
"
58229,"    int e1;

     int k = 0;

     int doublemode_table_count=0;

     for (int i = 0; i < 3; i++)
"
14250,"			q = append(q, n.left)

 		}

 		if n.right != nil {

 			q = append(q, n.right)

 		}
"
47016,"                                            {2, 20, 200, 2000, 20000},

                                             {3, 30, 300, 3000, 30000},

                                             {4, 40, 400, 4000, 40000},

                                             {5, 50, 500, 5000, 50000}};

     std::pair<uint32_t, uint32_t> not_found = std::make_pair(0, 0);

     std::pair<uint32_t, uint32_t> test_answer;
"
29329,"                PostOrderWalk(node.Left);

                 PostOrderWalk(node.Right);

                 result.Add(node.Key);

             }

         }
"
30739,"    >>> solution(-17)

     Traceback (most recent call last):

         ...

     ValueError: Parameter n must be greater than or equal to one.

     >>> solution([])
"
21235,"   * Check if stack is empty

    *

    * @return <tt>true</tt> if stack is empty, otherwise <tt>false</tt>

    */

   public boolean isEmpty() {
"
21803,"    }

   }

   get (key) {

     // Returns the value for the input key and updates the Double Linked List. Returns null if key is not present in cache

     if (key in this.cache) {
"
32196,"            newStringList <- [ value ]

         newStringList
"
23436,"    const char separator = ' ';

     for (size_t row = 0; row < v.size(); row++) {

         out << std::left << std::setw(width) << std::setfill(separator)

             << v[row];

     }
"
19118,"      index = arr[i] - min + 1

       output[count[index]] = arr[i]

       count[index]-=1
"
21625,"// checkisnumberpoweroftwo_test.go

 // description: Test for Is the number a power of two

 // author(s) [red_byte](https://github.com/i-redbyte)

 // see checkisnumberpoweroftwo.go

 package math

 import (
"
21095,"                {

                     yield return 0;

                 }
"
28636,"    return 0;

 }
"
12483,"                printsTray(Player2, 0);

                 positionBoat(Player2, 1);

             }
"
11126,"#include <stdio.h>

 // Fibonnacci function

 int fib(int number)

 {
"
15061,"<?php

 //works perfectly if your array nearly sorted

 function insertionSort(array $array){

     for ($i=1;$i<count($array);$i++){

         $currentVal=$array[$i];

         for ($j=$i-1;$j>=0&&$array[$j]>$currentVal;$j--){
"
24284,"			Root: NewNode(90),

 		}

 		root := BSTree.Root
"
22429,"    for (size_t i = 0; i < P.size() - 2; i++)

         // for every subsequent point in the list

         for (size_t j = i + 1; j < P.size(); j++)

             // for every subsequent point in the list

             for (size_t k = j + 1; k < P.size(); k++) {

                 // here, we now have picked three points from the given set of
"
38646,"def bubble_sort(list_data: list, length: int = 0) -> list:

     """"""

     It is similar is bubble sort but recursive.

     :param list_data: mutable ordered sequence of elements
"
44512,"        message.extend(block_message)

     return """".join(message)

 def encrypt_message(

     message: str, key: tuple[int, int], blockSize: int = DEFAULT_BLOCK_SIZE
"
27558,"            if (val > arr[i]) {

                 // else we remove the bigger element and add a smaller element

                 // (which is arr[i]) and continue;

                 active.erase(get);

                 active.insert(arr[i]);

             }
"
30796,"  ""A lower bound"" should ""return the index of number larger than an element and which is smallest"" in {

     val m = List(1, 3, 5, 5, 5, 9, 9, 13, 13, 20)

     assert(BinarySearch.lowerBound(m, 4) === 2)

     assert(BinarySearch.lowerBound(m, 8) === 5)

     assert(BinarySearch.lowerBound(m, 10) === 7)
"
31516,"package Others;

 import java.util.Arrays;

 /**

  * BFPRT algorithm.

  */
"
24670,"}

 graph = [[1, 4], [2, 4], [3], [], [], [4], [2, 7], [3], []]

 visited = [0 for x in range(len(graph))]
"
27474,"                return False

     return True

 def solution(nth: int = 10001) -> int:
"
30994," * value in a given *sorted* array.

  * @authors [James McDermott](https://github.com/theycallmemac) - recursive

  * algorithm

  * @authors [Krishna Vedala](https://github.com/kvedala) - iterative algorithm
"
15598,"    prev += 1

     # If we reached next block or end of

     # array, element is not present.

     return -1 if prev == [step, n].min
"
10017,"/* Stack data-structure. It's work is based on the LIFO method (last-IN-first-OUT).

  * It means that elements added to the stack are placed on the top and only the

  * last element (from the top) can be reached. After we get access to the last

  * element, he pops from the stack.

  * This is a class-based implementation of a Stack. It provides functions
"
17773,"    std::cout << ""Test 1.... "";

     double minima = get_minima(f1, -1, 5);

     std::cout << minima << ""..."";

     assert(std::abs(minima - 2) < EPSILON);

     std::cout << ""passed\n"";
"
19034,"            Assert.AreEqual(typeof(InvalidOperationException), exception?.GetType());

         }

         [Test]

         public static void ClearWorksCorrectly()

         {

             // Arrange
"
14597,"      }

     }

   }
"
68134,"package Maths;

 /**

  * Translates numbers into the Roman Numeral System.

  *
"
72450,"}
"
30971,"            input_list = merge(input_list, low, mid, high)

         # final merge of last two parts

         if p * 2 >= len(input_list):

             mid = i
"
33051," * ""....Q."",

  * ""Q....."",

  * ""...Q..""

  * <p>

  * Arrangement: 3

  * ""...Q.."",
"
23662," * std::sort

  * @returns void

  */

 void test6() {

     std::cout << ""TEST CASE 6\n"";
"
14989,"/**

  * Kyler Smith, 2017

  * Stack data structure implementation.
"
10978,"Range int_fact(int);

 /* print_arr : prints the integer (heap) array*/

 void print_arr(Range);

 /* increase : increases the dynamic integer array */

 int *increase(int *, int);

 /* destroy: destroys the range-structure */
"
21497,"  return str === reversed ? 'Palindrome' : 'Not a Palindrome'

 }

 export { checkPalindrome }
"
60986,"                }

                 Array.Sort(rotations, StringComparer.Ordinal);

             }

             return rotations[index];

         }

         private string[] GetRotations(string s)
"
22291,"                    .Should()

                     .Be(2);

                 timeline

                     .Should()

                     .Contain(query);
"
32349,"    return hash;

 }

 /**

  * Test function for ::djb2
"
57835,"        for (int j = 0; j < num_features; j++)  // for each feature in the array

         {

             fprintf(fp, ""%.4g"", X[i][j]);  // print the feature value
"
17430,"    assert str(linked_list) == """"

     try:

         linked_list.delete_head()

         assert False  # This should not happen.
"
12096,"/** Test that creates a random set of points distributed in eight clusters in

  * 3D space and trains an SOM that finds the topological pattern. The following

  * [CSV](https://en.wikipedia.org/wiki/Comma-separated_values) files are created

  * to validate the execution:

  * * `test3.csv`: random test samples points
"
10654,"#define MAX_NODES 1000

 int visited[MAX_NODES];  // array to store visiting order

                          // indexed by vertex 0..nV-1

 bool findPathBFS(Graph g, int nV, Vertex src, Vertex dest)
"
21907,"			cout << ""\n Left Child: "" << p->left->key;

 		else

 			cout << ""\n There is no left child of the node.  "";

 		cout << endl;

 	}
"
31334,"            var tree = new AATree<int>();

             tree.AddRange(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });

             tree.GetKeysPostOrder().SequenceEqual(new[] { 1, 3, 2, 5, 7, 10, 9, 8, 6, 4 })

                 .Should().BeTrue();

         }

         [Test]
"
18671," * fact that in segment trees we take partial result from two ranges and using

  * partial results we derive the result for joint range of those two ranges

  * For Example: array(1,2,3,4,5,6) sum of range [0,2] = 6

  * and sum of range [3,5] = 15 the combined sum of two range is 6+15=21

  * @note The function is same to binary function in Discrete Mathematics
"
75619,"  public static void main(String[] args) {

     // Integer Input

     Integer[] integers = {4, 23, 6, 78, 1, 54, 231, 9, 12};

     CocktailShakerSort shakerSort = new CocktailShakerSort();
"
27506,"#

 # Time Complexity: O(1).

 # Space Complexity: O(1).
"
23682,"    expect(result).toBe('SGVsbG8sIHdvcmxkIQ==')

   })

   it('should encode binary buffer [55,23,177,234,68,26,90] as ""Nxex6kQaWg==""', () => {
"
10400," * Let the direction ratios of the second vector, Q be: x, y, z

  * Therefore the calculation for the cross product can be arranged as:

  *
"
11257,"	}{

 		{""smallest prime"", 2, true},

 		{""random prime"", 3, true},

 		{""neither prime nor composite"", 1, false},

 		{""random non-prime"", 10, false},
"
72011,"     *         is accidentally changed to 9  */

     x = 9; 

     // Programmer assumes x to be 7 in rest of the code 

     assert(x==7); 

     /* Rest of the code */

     return 0; 
"
12362,"# Space Complexity: O(1) since we are not using a table to store our values.

 # Simply using two variables will suffice for our calculations.

 #

 def rob(nums)
"
23727,"#

 # An integer n is a power of two, if there exists an integer x such that n == 2^x.

 #
"
47312,"  divisors = get_divisors(number)

   divisors.delete(number)

   divisors
"
15824,"// GetEnumerator() : IEnumerator

 // returns a enumerator for this BitArray-object.

 //

 // Operations:

 //
"
29643,"    switch (c)

     {

     case '9':
"
19226,"# Output

 Tuple of vectors (process_id, burst_time, waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time)

 # Example
"
23933,"        }

         final Entry<K, V> preEntry = entry.getPreEntry();

         final Entry<K, V> nextEntry = entry.getNextEntry();
"
15454,"package sort

 func InsertionSort(arr []int) []int {

 	for currentIndex := 1; currentIndex < len(arr); currentIndex++ {

 		temporary := arr[currentIndex]

 		iterator := currentIndex
"
33766,"        }

         // if all characters are matched then pattern exist in the string

         if (j == m) {

           System.out.println(""Pattern found at index "" + i);

         }
"
68122,"        type = 'response',

         s=cv.fit$lambda.min)
"
29026,"        {

         case 1:

             printf(""%s\n"", ""Enter a no:"");
"
13650,"    if (argc == 2)         /* if command line argument is provided */

         n = atol(argv[1]); /* use that as the upper limit */

     printf(""%ld: %llu\n"", n, sum_of_primes(n));

     return 0;
"
17596,"  int mid = (low + high) >> 1;

   if (key == list[mid]) {

     return mid; /* found */

   } else if (key > list[mid]) {
"
75284,"        constructTree(arr, 0, n - 1, 0);

     }

     
"
31250,"    if (s == null || s.length() <= 1) {

       return true;

     }

     if (s.charAt(0) != s.charAt(s.length() - 1)) {
"
17979,"    fname << std::setw(3) << ""spirograph_"" << l << ""_"" << k << ""_"" << rot

           << "".csv"";

     std::ofstream fp(fname.str());

     if (!fp.is_open()) {

         perror(fname.str().c_str());

         exit(EXIT_FAILURE);
"
87100,"      for (int i = left; i < right; i++) {

         if (SortUtils.less(array[i + 1], array[i])) {

           SortUtils.swap(array, i, i + 1);

           swappedRight = i;

         }

       }
"
21620,"                MinItem.AddRight(x);

             }

             else if (y.Degree > 1)

             {

                 x.Remove();
"
22626,"                      /// internet addresses

     /**

      * The TCP socket is created using the socket function

      *

      * AF_INET (Family) - it is an address family that is used to designate the
"
90030,"    const value = 'a'

     const countVowels = checkVowels(value)

     expect(countVowels).toBe(1)
"
24761,"   * Merge two sorted SingleLinkedList

    *

    * @param listA the first sorted list

    * @param listB the second sored list
"
31655,"  if (num < 0 || typeof num !== 'number') return false

   let newSum = 0

   const numArr = num.toString().split('')

   numArr.forEach((num) => {

     newSum += parseInt(num) ** numArr.length
"
15275,"  })

   it('Tetrahedral : should return false', () => {

     expect(isTetrahedral(3)).toEqual(false)

   })

   it('Tetrahedral : should return true', () => {

     expect(isTetrahedral(165)).toEqual(true)
"
76069,"  const m = B.length

   const n = B[0].length // Assuming non-empty matrices

   const C = Array(l).fill(null).map(() => Array(n).fill())

   for (let i = 0; i < l; i++) {

     for (let j = 0; j < n; j++) {
"
25319,"      int m = (l + r) >>> 1;

       if (ar[m] >= key) r = m;

       else l = m;
"
23892,"    cache.set(2, 2)

     expect(cache.get(1)).toBe(1)

     expect(cache.get(2)).toBe(2)

     // Additional entries triggers cache rotate

     cache.set(3, 3)
"
57473,"            {

                 return element;

             }

             if (comparer.Compare(element, data[0]) < 0)

             {
"
14231,"    hash_set_t *set = (hash_set_t *)malloc(sizeof(hash_set_t));

     set->keys = calloc(DEFAULT_HASH_SET_CAPACITY, sizeof(void **));

     set->values = calloc(DEFAULT_HASH_SET_CAPACITY, sizeof(void **));

     set->length = 0;

     set->capacity = DEFAULT_HASH_SET_CAPACITY;
"
17612,"func TestMillerRabinTest(t *testing.T) {

 	var tests = []struct {

 		name     string

 		input    int64

 		expected bool

 		rounds   int64
"
29386,"   * @see [StackOverflow](https://stackoverflow.com/questions/47334234/how-to-implement-array-prototype-sort-default-compare-function)

    * @param {*} a variable 1

    * @param {*} b variable 2

    * @returns {Number}

    * -1 if a is less than b

    *  0 if a is equal to b
"
16471,"        [Test]

         public void EliminateEquation_Case4X4()

         {

             // Arrange

             var source = new[,]

             {
"
12599,"  double a = 1000000000;

   int b = 10;

   // using binary exponentiation function, O(log(p)):
"
26884,"            result = result + Int(trunc(val))^length

             temp = temp / 10

         end

         return x == result ? true : false

     end
"
24714,"	var testCatalanNumbersData = []struct {

 		nthCatalanNumber      int

 		expectedCatalanNumber int64
"
27426,"        Counter operator++();

         Counter operator++(int);

         friend Counter operator--(Counter &c);
"
21872," * @return None

  */

 static void test1() {

     std::vector<std::vector<bool>> arr{

         std::vector<bool>({true, true, false, false}),
"
23857,"#include <stdio.h>

 #include <stdlib.h>

 #define MAXBITS 100

 int main()

 {

     // input of the user
"
47423,"        cipherText = subBytesDec(cipherText);

         // Invert main rounds

         for (int i = 9; i > 0; i--) {

             cipherText = addRoundKey(cipherText, roundKeys[i]);

             cipherText = mixColumnsDec(cipherText);

             cipherText = shiftRowsDec(cipherText);
"
10871,"    Matrix object generated from a 2D array where each element is an array representing

     a row.

     Rows can contain type int or float.
"
19346,"    assert stringTree.find(""pineapple"") : ""10 should be present in BST"";

     stringTree.remove(""date"");

     assert !stringTree.find(""date"") : ""date was just deleted from BST"";

     stringTree.remove(""boy"");

     assert !stringTree.find(""boy"") : ""Since boy was not present so deleting would do no change"";

     stringTree.add(""india"");
"
32364,"    this.AVAILABLE = Integer.MIN_VALUE;

     this.size = 0;

   }

   /**
"
24224,"    }

     SearchImpl(fromIndex, toIndex - 1)

   }

   /** @param arr

     *   - a sequence of integers

     * @param elem
"
22613,"  }

   return maxSum

   // This function returns largest sum contiguous sum in a array

 }
"
73741,"     */

     void insert(int value) {

         /// Push new value to the back of the sliding window - O(1)

         _window.push_back(value);

         insertToSorted(value);  // Insert value to the multi-value BST - O(logN)

         if (_window.size() > _windowSize) {  /// If exceeding size of window,
"
16940,"    int p1 = l, p2 = r;

     while (p2 > p1)

     {

         if (a[p1] > pivot && a[p2] < pivot)

         {

             swap(&a[p1], &a[p2]);
"
21234,"uuid = ""a3789734-cfe1-5b06-b2d0-1dd0d9d62d05""

 version = ""1.1.3+4""

 [[Xorg_libXext_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg"", ""Xorg_libX11_jll""]

 git-tree-sha1 = ""b7c0aa8c376b31e4852b360222848637f481f8c3""

 uuid = ""1082639a-0dae-5f34-9b06-72781eeb8cb3""
"
30134,"				}

 				discovered[i] = discovered[v] + 1

 				queue = append(queue, i)

 			}

 		}

 	}
"
42944,"                                                     

 #Divide data back into train and test in 70% and 30%

 ind<-sample(2,nrow(combi),replace = T,prob = c(0.7,0.3))

 train.set <- combi[ind==1,]

 test.set <- combi[ind==2,]
"
78353,"         greater<int>());

     cout << v << endl;

     cout << hex;
"
25382,"    get_min_2d(D, num_out, &d_min, &d_min_x, &d_min_y);

     // step 3a: get the neighborhood range

     int from_x = max(0, d_min_x - R);

     int to_x = min(num_out, d_min_x + R + 1);

     int from_y = max(0, d_min_y - R);

     int to_y = min(num_out, d_min_y + R + 1);
"
16053,"            {

                 *root = parent;

             }

             parent->color = 0;
"
34280,"  return x + y + x * y

 }

 // plot the results if the script is executed in a browser with a window-object

 if (typeof window !== 'undefined') {

   const points1 = eulerFull(0, 4, 0.1, 0, exampleEquation1)
"
26076,"    const Apple b(3);

     b.add(100);

     return 0;

 }
"
17951,"    }

     array[i] = NULL;

     return array;
"
13585,"    scanf(""%d"", &n);  // Taking input for the size of Array

     int *a = (int *)malloc(n * sizeof(int));

     printf(""Enter the contents for an array of size %d:\n"", n);

     for (i = 0; i < n; i++)

         scanf(""%d"", &a[i]);  // accepts the values of array elements until the
"
25502," * the algorithms goes in the manner that we start iterating over the array

  * of elements as soon as we find a unsorted element that is a misplaced

  * element we place it at a sorted position.

  *

  * Example execution steps:
"
39705,"    expect(reverseWords('The Algorithms Javascript')).toBe('Javascript Algorithms The')

   })

   it.each`

     input

     ${123456}
"
45064,"// 			return

 // 		}

 // 		pos = pos + d[t[pos+m]]

 // 	}

 // 	fmt.Printf(""\n\nWord was not found.\n%d comparisons were done."", c)

 // 	return
"
23690,"  //Print the array

   print(arr);

   //Starting index

   l = 0;

   // length of array
"
13557,"                self.left.remove(value)

             else:

                 # This node has at most one non-None child, so we don't
"
18857,"def lower(word: str) -> str:

     """"""

     Will convert the entire string to lowercase letters

     >>> lower(""wow"")
"
14442,"# Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.

 #

 # Example 1:

 #
"
11540,"    // 2nd test

     std::cout << ""2nd test "";

     std::vector<int64_t> array2 = {1, 2, 3, 3};

     assert(backtracking::subarray_sum::subarray_sum(6, array2) ==

            2);  // here we are expecting 2 subsets which sum up to 6 i.e.

                 // {(1,2,3),(3,3)}
"
26080,"  }

   return(elements.vec)

 }
"
14920,"  /**

    * Returns the counter wrongMess

    *
"
33716,"			t.Errorf(""Depth should have value = 3"")

 		}

 	})

 }

 func TestInOrder(t *testing.T) {

 	BSTree := BSTree{
"
44856,"    tail.next = allNodes[randomIndex];

     Node cycleNode = findCyclicNode(linkedList.head);

     expect(cycleNode, equals(allNodes[randomIndex]));

   });

   test(('test 5'), () {

     int randomIndex = random.nextInt(9);
"
19261,"using System;

 namespace Algorithms.Sorters.External

 {

     public interface ISequentialStorageWriter<in T> : IDisposable
"
28320,"    return 0;

 }
"
26530,"  static int max(int a, int b) {

     return (a > b) ? a : b;

   }

   // Returns the value of maximum profit

   static int knapSackRec(int W, int wt[], int val[], int n, int[][] dp) {

     // Base condition
"
26103,"        public static void GetValuesByMillisecondTest()

         {

             var timeline = new Timeline<string>

             {

                 { new DateTime(1985, 1, 1, 10, 0, 0, 250), ""TestTime1"" },
"
49997,"    skip_list.insert(""Some Key"", 10)

     skip_list.insert(""Key2"", 8)

     skip_list.insert(""V"", 13)
"
25701,"    float norm = vector_norm(a);

     if (fabsf(norm) < EPSILON)

     {  // detect possible divide by 0

         return n;
"
26261,"/* Ternary search is similar to binary search but it divide the sorted array

  * into three parts and determine which part the key lies in. The array will

  * be divided into three intervals by using two middle points, mid1 and mid2.

  * The value of the key will first compared with the two mid points, the value

  * will be returned if there is a match. Then, if the value of the key is less
"
52168,"      int j = nItems - 1; // index of last element

       while (j >= 0 && queueArray[j] > value) {

         queueArray[j + 1] = queueArray[j]; // Shifts every element up to make room for insertion

         j--;
"
33636,"    let childOneIdx = currIdx * 2 + 1

     while (childOneIdx <= endIdx) {

       const childTwoIdx = childOneIdx + 1 <= endIdx ? childOneIdx + 1 : -1

       const swapIdx = childTwoIdx !== -1 && heap[childTwoIdx] < heap[childOneIdx]
"
27635,"""""""

 Problem 119: https://projecteuler.net/problem=119

 Name: Digit power sum

 The number 512 is interesting because it is equal to the sum of its digits

 raised to some power: 5 + 1 + 2 = 8, and 8^3 = 512. Another example of a number

 with this property is 614656 = 28^4. We shall define an to be the nth term of
"
31196,"    if (this.isGreater(startDate, endDate) === null) {

       return 0

     } else if ((this.isGreater(startDate, endDate) === true)) {
"
21905,"   * @return item : the next value that would be popped off the stack.

    */

   public Item peek() {

     return (Item) NodeStack.head.getData();

   }
"
21846,"    val::Vector{T}

     cnt::Vector{Int}

     size::Vector{Int}

 end
"
29011,"				t.Errorf(""Expected %d to the power of %d to be: %d, but got: %d"", tc.base, tc.power, tc.expected, actual)

 			}

 		})
"
52789,"    ...

     ValueError: could not convert string to float: 'kelvin'

     """"""

     return round(((float(kelvin) - 273.15) * 9 / 5) + 32, ndigits)

 def kelvin_to_rankine(kelvin: float, ndigits: int = 2) -> float:
"
17854,"# [3,]   0.11111111  0.50000000   0.05084746  0.04166667

 # [4,]   0.08333333  0.45833333   0.08474576  0.04166667

 # [5,]   0.19444444  0.66666667   0.06779661  0.04166667

 # [6,]   0.30555556  0.79166667   0.11864407  0.12500000

 # [7,]   0.08333333  0.58333333   0.06779661  0.08333333
"
16602,"        std::cout << ""Element not found\n"";

         return nullptr;

     }
"
22526,"		free(ret);

 	}

 	/* bin */

 	reference = ""101010"";
"
13816,"    // #endif

     return ret;

 }
"
10520,"	for i := range edges {

 		edges[i] = make([]bool, N)

 	}

 	for _, c := range constraints {
"
25651,"    std::cout << ""Unsorted array is : "" << std::endl;

     sorting::random_pivot_quick_sort::showArray(unsorted_array);

     std::array<int64_t, inputSize> sorted_array =
"
16343,"        }

         /* initialize root approximations with random values */

         if (n < degree - 1)

         {

             s0[n] = (long double)rand() + (long double)rand() * I;
"
17651,"    {

         sprintf(out, ""%s%.4g"", out, ada->weights[i]);

         if (i < ada->num_weights - 1)

             sprintf(out, ""%s, "", out);

     }
"
20688,"    float mean, median;

     printf(""Enter no. for Random Numbers :"");

     scanf(""%d"", &n);

     for (i = 0; i < n; i++)

     {

         a[i] = rand() % 100;
"
47354,"        public void GraphAddVertexTest_ShouldThrowOverflow()

         {

             var graph = new DirectedWeightedGraph<char>(10);

             for (var i = 0; i < 10; i++)
"
18484,"type CheckAnagramsTests () =

     

     [<TestMethod>]

     [<DataRow(""Silent"", ""Listen"", true)>]
"
79953,"/**

  * Save a given n-dimensional data martix to file.

  *

  * \param[in] fname filename to save in (gets overwritten without confirmation)

  * \param[in] X matrix to save

  * \param[in] num_points rows in the matrix = number of points
"
13030,"    >>> left_shift(""0123456789"")

     '1234567890'

     """"""

     return data[1:] + data[0]

 def XOR(a, b):

     """"""
"
44758," * @brief Main function

  * @returns 0 on exit

  */
"
15742,"}

 // adler_32 hash

 long long hash(void *value)

 {

     char *str = value;

     int a = 1;
"
32711,"  /**

    * Check if a,b,c are a Pythagorean Triple

    *

    * @param a x/y component length of a right triangle

    * @param b y/x component length of a right triangle

    * @param c hypotenuse length of a right triangle
"
12642," * \f$x\f$. Since multiplication is commutative, we only need to search till a

  * maximum of \f$a=b = a^2\f$ i.e., till \f$\sqrt{x}\f$. At every integer till

  * then, there are eaxctly 2 divisors and at \f$a=b\f$, there is only one
"
18134,"		stackList.Push(2)

 		stackList.Push(3)

 		if stackList.Length() != 2 {

 			t.Errorf(""Stack Push is not work we expected %v but got %v"", 2, stackList.Length())

 		}
"
18239,"/**

  * @file

  * @author [Krishna Vedala](https://github.com/kvedala)

  * @brief Implementation of

  * [Spirograph](https://en.wikipedia.org/wiki/Spirograph)
"
32810,"        previous.add(n)

         ret = 1 + chain_length(next_number, previous)

         CHAIN_LENGTH_CACHE[n] = ret

         return ret
"
27651,"    expect(linkedList, equals([1]));

     linkedList.push(2);

     expect(linkedList, equals([2, 1]));
"
72071,"        public void Insert(T item)

         {

             var initialHash = item.GetHashCode();
"
16962,"         * @brief Search an element in the list using binarySearch.

          * @param dataArr list

          * @param first pointer to the first element in the remaining list

          * @param last pointer to the last element in the remaining list

          * @param val element that will be searched

          * @return index of element in the list if present else -1
"
29603," * @tparam T type of array

  * @param in_arr the input array

  * @param n size of the array

  * @returns the duplicate number
"
18429,"            // Values from https://oeis.org/A000008/b000008.txt

             var test = new BigInteger[]

                        {
"
19764,"  }

 }
"
22188,"queue = Queue.new

 queue << 1

 queue << 2
"
42932,"import 'package:test/test.dart';

 bool Magic_no(var x) {

   var result = x % 9;
"
57493,"    const double omega = 1.F;       // some const for the problem

     dy[0] = y[1];                   // x dot

     dy[1] = -omega * omega * y[0];  // y dot

 }

 /**
"
33097,"    /// <param name=""s""></param>

     /// <param name=""pattern""></param>

     /// <returns>List of positions</returns>

     let naivePatternSearch (s: string, pattern: string): int list =

         s.ToCharArray()
"
26947,"    /** \namespace XOR

      * \brief Functions for [XOR cipher](https://en.wikipedia.org/wiki/XOR_cipher) algorithm.

      */

     namespace XOR {   
"
18997,"      }

     }

   }

   public HashSet<Edge>[] kruskal(HashSet<Edge>[] graph) {

     int nodes = graph.length;
"
33576," *

  * @author Nicolas Renard

  */

 public class MaxHeap implements Heap {

   private final List<HeapElement> maxHeap;

   public MaxHeap(List<HeapElement> listElements) {
"
43834,"                    x = BigInteger.ModPow(x, 2, n);

                 }

                 if (x == n - 1)
"
65725,"                .Be(1);

             timeline[eventDate][0]

                 .Should()

                 .Be(eventName);

         }

         [Test]
"
16859,"}
"
14449,"    //ֻһν뺯ʱʼ

     int c=10;   // CΪֲж̬

     //ÿν뺯ʱʼ

     a=a+2; i=i+32; c=c+5;

     cout<<""---OTHER---\n"";

     cout<<"" i: ""<<i<<"" a: ""<<a<<"" b: ""<<b<<"" c: ""<<c<<endl;
"
19316,"    }

 }

 // The main function that finds the shortest path from given source

 // to all other vertices using Dijkstra's Algorithm.It doesn't work on negative

 // weights
"
59004,"    return 3;

 }

 struct As

 {
"
62603,"        revertedNumber = revertedNumber * 10 + x % 10;

         x /= 10;

     }
"
25552,"	}

 	return h

 }

 func (h maxHeap) MaxHeapify(i int) {

 	l, r := 2*i+1, 2*i+2
"
26571,"void propagate(CantorSet *head)

 {

     // if input is NULL, ignore the process

     if (head == NULL)

         return;
"
23381," * \returns 0 if all ok

  * \returns -1 if file creation failed

  */
"
71386,"        System.out.println(""List is empty"");

       }

     }

     private void delete(Node n, int key) {
"
16677,"        {

             for (var step = array.Length / 2; step > 0; step /= 2)

             {

                 for (var i = 0; i < step; i++)
"
18070,"#endif

                 for (j = 0; j < features; j++) {

                     // preallocate with random initial weights
"
88606,"        {

             return false;

         }
"
23957,"            21419, 21433, 21467, 21481, 21487, 21491, 21493, 21499, 21503, 21517, 21521, 21523, 21529, 21557, 21559,

             21563, 21569, 21577, 21587, 21589, 21599, 21601, 21611, 21613, 21617, 21647, 21649, 21661, 21673, 21683,

             21701, 21713, 21727, 21737, 21739, 21751, 21757, 21767, 21773, 21787, 21799, 21803, 21817, 21821, 21839,

             21841, 21851, 21859, 21863, 21871, 21881, 21893, 21911, 21929, 21937, 21943, 21961, 21977, 21991, 21997,

             22003, 22013, 22027, 22031, 22037, 22039, 22051, 22063, 22067, 22073, 22079, 22091, 22093, 22109, 22111,

             22123, 22129, 22133, 22147, 22153, 22157, 22159, 22171, 22189, 22193, 22229, 22247, 22259, 22271, 22273,
"
47396,"/**

  * @file

  * \brief Compute factorial of arbitrarily large numbers by

  * storing individual digits in a byte.

  * \author [Krishna Vedala](https://github.com/kvedala)
"
15093," * 

  * Output : YES

  */

 public class BipartiteGrapfDFS {

     private static boolean bipartite(int V, ArrayList<ArrayList<Integer>>adj, int[] color, int node){
"
23145,"export { KMPSearch }
"
12636," * divisor.

  */

 long count_divisors(long long n)
"
32420,"                    for(int j = 0; j < n;j++)

                     {

                         if(j != x)

                         {
"
56471,"        product.z = (x * b.y) - (y * b.x);

         return product;

     }

     /**

      * Display the Vector
"
10734,"using System;

 namespace DataStructures.SegmentTrees

 {

     /// <summary>
"
17439,"}
"
23650,"int main() {

     double n{};

     std::cin >> n;

     assert(n >= 0);
"
17409,"        public static void GetValuesByTimeTest()

         {

             var timeline = new Timeline<string>

             {
"
63830,"    Line L1(1,2,3);

     system(""pause"");

 }
"
17008,"    }

     return res;

   }

 }
"
93475,"        }

     }

     return $noOfVowels;

 }
"
29725,"	list[1].VertexColors = map[int]coloring.Color{}

 	for v := range list[2].VertexColors {

 		in := len(list[2].VertexColors) - v - 1

 		list[2].VertexColors[v] = list[2].VertexColors[in]

 	}
"
21584,"   * @param <T> the class of array.

    * @return sorted array.

    */

   @Override
"
12307," * factor of a given number N? e.g. for 10, largest prime factor = 5. For 17,

  * largest prime factor = 17.

  */

 #include <math.h>
"
31415,"func TemplateTestExtendedGCD(t *testing.T, f testExtendedFunction) {

 	var testCasesExtended = []struct {

 		name string
"
13780,"   */

   add (vector) {

     const x = this.x + vector.x

     const y = this.y + vector.y

     return new Vector2(x, y)
"
26957,"    expect(isLeapYear(2004)).toBe(true)

   })

   it('Should return false on the year 1900', () => {

     expect(isLeapYear(1900)).toBe(false)

   })
"
33543,"void main() {

   var n = 5;

   var fac = factorial(n);

   print(""$n! = $fac""); /* output: 5! = 120 */

 }
"
38145,"        883,

         887,

         907,

         911,

         919,

         929,
"
32403,"    /// and the bigger ones to the right.

     mutating private func partition(from left: Int, to right: Int) -> Int {

         /// Chooses the pivot, which in this case is always the first element, which is not very efficient.

         let pivotIndex = left

         swapAt(pivotIndex, right)
"
84877,"     * 0 (Protocol) - Specifies a particular protocol to be used with the

      * socket. Specifying a protocol of 0 causes socket() to use an unspecified

      * default protocol appropriate for the requested socket type.
"
21339,"        @test surfarea_sphere(5) == 314.1592653589793

         @test surfarea_sphere(1) == 12.566370614359172

         @test_throws DomainError surfarea_sphere(-1)

         @test area_rectangle(10, 20) == 200

         @test_throws DomainError area_rectangle(-1, -2)
"
16630,"    assert(isStrong(145));  /* 145 = 1! + 4! + 5! */

     assert(!isStrong(543)); /* 543 != 5!+ 4! + 3! */

 }

 /**

  * Driver Code
"
38524,"}

 main()
"
11793," * We need to consider window sizes from 1 to length of array in each iteration.

  * So in the iteration 1 the windows would be [10], [20], [30], [50], [10], [70], [30].

  * Now we need to check the minimum value in each window. Since the window size is 1 here the minimum element would be the number itself.
"
33858,"    j = 1;

   }

   if (is_negative) {

     return ""-"" + octal_val;

   }

   return octal_val;
"
16063,"		if numbers.IsEmpty() != false {

 			t.Errorf(""Expected be false but got %v"", numbers.IsEmpty())

 		}
"
12462,"    front = rear = new Node();

   }

   /**

    * Check if queue is empty

    *

    * @return true if queue is empty, otherwise false
"
19884,"        private RedBlackTreeNode<TKey>? RemoveRecolor(RedBlackTreeNode<TKey> node)

         {

             var removeCase = GetRemoveCase(node);

             var dir = comparer.Compare(node.Key, node.Parent!.Key);

             // Determine current node's sibling and nephews
"
37629,"        /// <param name=""lhs"">The LHS matrix.</param>

         /// <param name=""rhs"">The RHS matrix.</param>

         /// <returns>The difference of the two matrices.</returns>

         /// <exception cref=""ArgumentException"">Dimensions of matrices do not match.</exception>

         public static double[,] Subtract(this double[,] lhs, double[,] rhs)

         {
"
26644,"        return 0;

     }

     degree = argc - 1; /* detected polynomial degree */
"
69045,"void main() {

   String series = ""73167176531330624919225119674426574742355349194934""

       ""96983520312774506326239578318016984801869478851843""
"
28881,"  }

   return matches

 }

 // stringSearch('Hello search the position of me', 'pos')
"
31978,"            {

                 yield return 0;

                 yield return 1;

                 BigInteger previous = 0;

                 BigInteger current = 1;

                 while (true)
"
20847,"    return s;

 }
"
15100,"package DataStructures.Graphs;

 import java.util.ArrayList;

 import java.util.HashSet;

 import java.util.Set;

 /**

  * A class that counts the number of different connected components in a graph
"
46718,"            // as there is no native random function for BigInteger we suppose a random int number is sufficient

             int nMaxValue = (n > int.MaxValue) ? int.MaxValue : (int)n;

             BigInteger a = rand.Next(2, nMaxValue - 2); // ; pick a random integer a in the range[2, n − 2]

             while (rounds > 0)

             {

                 rounds--;
"
18104,"                    continue;

                 }

                 BigInteger tempr = r - 1;

                 while (tempr > 0 && (x != n - 1))
"
14458,"	if keyLength <= 0 {

 		return """", &KeyMissingError{}

 	}
"
27788,"    rank = vector<int>(n + 1, 1);

     for (int i = 1; i <= n; ++i) {

         root[i] = i;

     }
"
12279,"    //Base *b = new Base(); error!

     Base *bp = new Derived(); // 抽象类的指针和引用 -> 由抽象类派生出来的类的对象

     bp->show();

     return 0; 
"
16835,"# frozen_string_literal: true

 require 'minitest/autorun'

 require_relative './ceil'

 class CeilTest < Minitest::Test

   def test_integer

     assert_equal Ceil.call(4), 4
"
10929,"      second_number == first_number_proper_divisors.reduce((a, b) => a + b);

 }

 void main() {
"
42739,"  true

 end

 def check_grid(board, start_point)

   row = start_point[0]

   col = start_point[1]
"
28505,"    return joiner.toString();

   }

   /** Driver Code */

   public static void main(String[] arg) {

     SinglyLinkedList list = new SinglyLinkedList();

     assert list.isEmpty();
"
28852,"                    output.Write(r);

                     rightIndex++;

                     if (rightIndex == rightLength)
"
15725,"    this->Hour=NewH;

     this->Minute=NewM;

     this->Second=NewS;

 }

 Clock::Clock(Clock &c)
"
29312,"70 11 33 28 77 73 17 78 39 68 17 57

 91 71 52 38 17 14 91 43 58 50 27 29 48

 63 66 04 68 89 53 67 30 73 16 69 87 40 31

 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
"
69209,"        return list

       default:

         list.push(list[list.length - 1] + list[list.length - 2])

         return FibonacciRecursive(number)

     }
"
36843,"      sum = sum + power;

       number /= 10;

     }
"
32895,"    }

     return 0;

 }
"
18201," * \see brent_method_extrema.cpp

  * \author [Krishna Vedala](https://github.com/kvedala)

  */

 #define _USE_MATH_DEFINES  //< required for MS Visual C++

 #include <cassert>

 #include <cmath>
"
19807,"    }

     for (int i = 0; i < num_points; i++)  // for each point in the array

     {
"
17101,"  });

   test('test 6', () {

     array = [];

     sequence = [0];
"
89280,"        if (is_abundant(N - i))

         {

 #ifdef DEBUG

             printf(""\t%4lu + %4lu = %4lu\n"", i, N - i, N);
"
55297,"    int reverse;

     for (int i = 0; i < N; i++) {

       reverse = reverseBits(i, log2N);
"
17922,"  end

 end

 def lcm(first, second)

   (first * second) / gcd(first, second)

 end
"
23867,"void placey(int e1)

 {

     int n1 = 0;

     if (e1 >= 1 && e1 <= 9)

     {

         if (game_table[e1 - 1] != 'x' && game_table[e1 - 1] != 'o')
"
89472,"uuid = ""2ee39098-c373-598a-b85f-a56591580800""

 version = ""1.6.3""

 [[Latexify]]

 deps = [""Formatting"", ""InteractiveUtils"", ""LaTeXStrings"", ""MacroTools"", ""Markdown"", ""Printf"", ""Requires""]

 git-tree-sha1 = ""a4b12a1bd2ebade87891ab7e36fdbce582301a92""
"
20454,"                    n++;

                     factorial *= n;

                 }
"
13826,"        j
"
93995,"    expect(maze.path).toBe('RDDR')

   })

   it('should work for a simple 2x2 that can not be solved', () => {
"
26498,"      }

     }

     return max;

   }
"
27050,"            if (node.BalanceFactor > 1)

             {

                 if (node.Right!.BalanceFactor == -1)

                 {

                     node.Right = RotateRight(node.Right);

                 }
"
86073,"{

     y[0] = cos(x[0]);

     y[1] = -sin(x[0]);
"
39624,"        """"""

         node, _ = self._locate_node(key)

         if node is not None:

             return node.value
"
52793,"                      /// internet addresses

     /**

      * The TCP socket is created using the socket function.

      *
"
53925,"        14,

         20,

         5,
"
53871,"    while (k > list.size()) {

       System.out.println(""Retype a number, your number is too large"");

       input = new Scanner(System.in);

       k = input.nextInt();
"
19062,"# Problem from https://exercism.io/my/tracks/julia#exercise-binary-search

 # Based on my published solution https://exercism.io/tracks/julia/exercises/binary-search/solutions/5dcd7f36433245a28484889c42a957c0

 # Problem Instructions:

 """"""

     binary_search(list, query; rev=false, lt=<, by=identity)

 Implement a binary search algorithm.
"
31277,"}

 // Allocates memory for graph data structure, in adjacency list format

 struct Graph *createGraph(int vertices)

 {

     struct Graph *graph = malloc(sizeof(struct Graph));

     graph->numVertices = vertices;
"
21484,"        free(coeffs);

         free(s0);

         return EXIT_FAILURE;
"
12195," */
"
29933,"    print(arr)

 if __name__ == ""__main__"":

     main()
"
21175,"T Min(T a,T b) {

 	return (a<b)?a:b;

 }

 /*

 Ϊģе͹ؼclass׼C++?typenameΪģ͹ؼ֣ͬʱҲ֧ʹclass
"
65330,"	t.Run(""Stack Pop"", func(t *testing.T) {

 		if pop != 1 {

 			t.Error(""Stack Pop should return 1 but is returned"", pop)

 		}

 	})

 	newStack.push(52)
"
20301,"        max_sum = max(max_sum, current_sum)

     return max_sum

 if __name__ == ""__main__"":

     from doctest import testmod

     from random import randint

     testmod()
"
19345,"    }

 }
"
22186,"        public ShannonFanoCompressor(

             IHeuristicKnapsackSolver<(char symbol, double frequency)> splitter,

             Translator translator)
"
72352,"            if (rightIndex < rightLength)

             {

                 output.Write(r);

                 Copy(right, output, rightLength - rightIndex - 1);

             }
"
23467,"  }

 }
"
12029,"#

 # Input: nums = [1,2,3,1]

 # Output: 4

 # Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).

 # Total amount you can rob = 1 + 3 = 4.
"
15173,"/*

  * function isolates the decimal part of a number.

  * Take the number and subtract it from the floored number.

  * Return the result.

  */

 export const decimalIsolate = (number) => {
"
19828,"}

 /**

  * @brief Self-implementations, 2nd test
"
23226,"    15.56

     >>> fahrenheit_to_celsius(80)

     26.67

     >>> fahrenheit_to_celsius(""100"")

     37.78
"
14126,"            if node.right:

                 node.right.parent = lowest_node

             self._reassign_nodes(node, lowest_node)

         elif not node.right and node.left:
"
31094," * @param   pos     a position into the list for value Deletion

  * @returns list    the input list with deleted values or the same list

  */

 List *delete(List *list, int pos);
"
74065,"* Farey Approximation algorithm is an algorithm to

 * approximate a reduced fraction value for a certain

 * decimal number x where 0 < x < 1.

 *
"
84086,"    from doctest import testmod

     testmod(verbose=True)

     print(f""{ugly_numbers(200) = }"")
"
17753,"    printf(""BINARY THREADED TREE: \n"");

     node *root = NULL;

     int choice, n;
"
10586,"    std::cout << ""Hashing empty string"" << std::endl;

     // Prints signature hex representation

     std::cout << hashing::sha1::sig2hex(sig) << std::endl << std::endl;

     // Test with cassert wether sig is correct from expected value
"
24946,"  std::condition_variable not_empty_;

 };

 BoundedBuffer bb(10);

 std::mutex g_mtx;
"
21721," * Steps:

  * 1. Find the middle element of array. This will act as root

  * 2. Use the left half recursively to create left subtree

  * 3. Use the right half recursively to create right subtree

  */
"
18593," */

 void Queue_Array::enqueue(const int16_t& ele) {

     if (rear == arr.size() - 1) {

         std::cout << ""\nStack is full"";

     } else if (front == -1 && rear == -1) {

         front = 0;
"
28229,"        /// </summary>

         /// <param name=""startVertex"">Vertex, edge starts at.</param>

         /// <param name=""endVertex"">Vertex, edge ends at.</param>
"
15340,"            var secondLargestComponent = chroma * (1 - Math.Abs(hueSection % 2 - 1));

             var matchValue = value - chroma;

             return GetRgbBySection(hueSection, chroma, matchValue, secondLargestComponent);
"
24328,"    # Formula for finding sum of n terms of a GeometricProgression

     return (first_term / (1 - common_ratio)) * (1 - common_ratio ** num_of_terms)
"
40596,"		}

 	})

 	t.Run(""Stack Pop"", func(t *testing.T) {

 		pop, _ := stackList.Pop()
"
13411,"    [false, 2]

   ]

   test.each(errorCases)('throws an error if parameters are (%p, %p)', (dividend, divisor) => {
"
29396,"            }

         }

         return list;

     }

 }
"
91683,"  private int wrongMessNotCaught;

   private int messSize;

   private double ber;

   private boolean messageChanged;

   private ArrayList<Integer> message;
"
13349,"            outputCells[i * 4 + 3] = MULT3[row[0]] ^ row[1] ^ row[2] ^ MULT2[row[3]];

         }

         return mergeCellsIntoBlock(outputCells);

     }

     /**

      * Applies the inverse Rijndael MixColumns for decryption to the input and returns the result.
"
16565,"    } else if (tree._comp(root._val, val) > 0) {

       root._left = insert(root._left, val, tree)

     } else {

       return root

     }
"
98536,"	void display(){      								

 		for(int i=0;i<n;i++)

 			cout<<employ[i].name<<""   ""<<employ[i].salary<<endl;
"
23068,"  }

   // Removes and returns the value at the end of the stack

   Stack.prototype.pop = function () {

     if (this.top === 0) {

       return 'Stack is Empty'

     }
"
10875,"  */

 object CoinChange {

   /** @param coins
"
26764,"    with open(f""new_{screen_name}_tweets.csv"", ""w"") as f:

         writer = csv.writer(f)

         writer.writerow([""id"", ""created_at"", ""text""])

         writer.writerows(outtweets)

 if __name__ == ""__main__"":
"
24286,"    if result_hash[jewel]

       result += result_hash[jewel]

     else

       result
"
61482,"    sorting::insertionSort(arr1, 10);

     assert(std::is_sorted(arr1, arr1 + 10));

     std::cout << ""passed"" << std::endl;

     int arr2[5] = {5, -3, 7, -2, 1};

     std::cout << ""Test 2... "";

     sorting::insertionSort(arr2, 5);
"
13059,"    /// <param name=""input"">String to change to uppercase.</param>

     /// <returns>Uppercased string</returns>

     let upper (input: string) =

         input.Split()

         |> Array.map
"
24245,"        /* If x is greater than the value at index fibMm2,

            cut the subarray after i+1  */

         else if (arr[i] > x)
"
12834,"import { PrimeFactors } from '../PrimeFactors'

 describe('EulersTotient', () => {

   it('should return the prime factors for 100', () => {
"
28263,"        /// <returns>true if the element exists in the tree, false otherwise.</returns>

         private bool Contains(TKey key, AATreeNode<TKey>? node) =>

             node is { }

             && comparer.Compare(key, node.Key) is { } v

             && v switch
"
17017,"    answer = 1

     for number in range(1, n + 1):

         if (answer / phi[answer]) < (number / phi[number]):

             answer = number

     return answer
"
17639,"             *    \     / \     /

              *     4   1   4   6

              *      \ /     \ /
"
26552,"      i++;

     }

   }
"
75363,"                (""SCH"", ""SSS""),

             };

             var replacement = checks.FirstOrDefault(t => start.StartsWith(t!.Value.from));

             if (replacement is { })
"
32088,"  public void insertNth(int data, int position) {

     checkBounds(position, 0, size);

     Node newNode = new Node(data);

     if (head == null) {

       /* the list is empty */
"
10075,"    }

   }

 }

 /**

  * Utility-function to implement the depth-first loop.
"
15155,"      } else if (shiftedCharCode > 90) {

         let diff = Math.abs(shiftedCharCode - 1 - 90) % 26

         while ((diff % 26) >= 26) {
"
13085,"version = ""0.1.17""

 [[StructArrays]]

 deps = [""Adapt"", ""DataAPI"", ""StaticArrays"", ""Tables""]

 git-tree-sha1 = ""000e168f5cc9aded17b6999a560b7c11dda69095""
"
32134,"    }

     else if (data < root->data)

     {

         // If the input key is lower than the root's, search in the left subtree

         return find(root->left, data);
"
16909,"        if len(possibles) == 1:

             break

     decoded_text = possibles[0]
"
26292,"	}

 }

 func TestMinOfThree(t *testing.T) {

 	testCases := []struct {
"
12190,"package Maths;

 import java.util.Random;

 public class AbsoluteValue {

   public static void main(String[] args) {

     Random random = new Random();

     /* test 1000 random numbers */
"
30744,"    LUPDecomposition decomposition = this.decompose();

     Matrix output = Matrix.from(decomposition.lu);

     int matrixSize = decomposition.lu.nRows;

     for (int i = 0; i < matrixSize; i++) {

       for (int j = 0; j < matrixSize; j++) {

         output[j][i] = decomposition.pivot[j] == i ? 1 : 0;
"
16405,"  const n = dist.length

   for (let k = 0; k < n; k++) {

     for (let i = 0; i < n; i++) {
"
29965,"                    .Be(2);

                 timeline

                     .Should()

                     .Contain(query);
"
29758,"        showLine: true,

         fill: false,

         tension: 0,

         borderColor: 'black'

       }]

     },
"
75794," */

 segment_tree *segment_tree_init(void *arr, size_t elem_size, size_t len,

                                 void *identity, combine_function func)
"
15432,"    d.unionSet(5, 7);

     d.unionSet(9, 10);

     d.unionSet(2, 10);

     /// keeping track of the changes using parent pointers

     vector<uint64_t> ans = {2, 1, 10};
"
18942,"{

     int some_local_state=0;

     func my_func(some_local_state);

     std::thread t(my_func);
"
31921,"        // matching characters

         let matching1 = getMatchedCharacters (str1, str2)

         let matching2 = getMatchedCharacters (str2, str1)

         let matchCount = matching1.Length

         let mutable jaro = 0.0
"
89771,"  });

 }
"
87732,"  // check the both data are valid or not.

   if (firstDateDay < 0 || firstDateDay > 31 ||

         firstDateMonth > 12 || firstDateMonth < 0 ||

         secondDateDay < 0 || secondDateDay > 31 ||
"
15367,"# @return {Boolean}

 #

 # Approach 1: Hash & Brute Force

 #

 def is_valid_sudoku(board)

   rows = []
"
35824,"        /// Removes all elements from <see cref=""SortedList{T}"" />.

         /// </summary>

         public void Clear()

             => memory.Clear();

         /// <summary>

         /// Indicates whether a <see cref=""SortedList{T}"" /> contains a certain element.
"
16022,"    }

 }
"
60863,"# [1] 1 2 3 4 5
"
11615," * 

  * */

 //this function returns true if number is perfect and false otherwise

 bool perfect_number(int number) {

   if (number <= 1) return false;

   List<int> divisors = [];
"
61923,"                Shuffle(array);

             }

         }

         private bool IsSorted(T[] array, IComparer<T> comparer)

         {

             for (var i = 0; i < array.Length - 1; i++)
"
52585,"            };

             timeline.ValuesCount

                 .Should()

                 .Be(timeline.GetAllValues().Length);
"
14428,"        Scanner sc = new Scanner(System.in);

         int n = sc.nextInt();

         int[] a = new int[n];

         for(int i = 0; i < n; i++)
"
25072,"        double x2 = (static_cast<double>(std::rand() % range) - range2) / 100.f;

         X[i] = std::vector<double>({x0, x1, x2, x0 * x0, x1 * x1, x2 * x2});

         Y[i] = ((x0 * x0) + (x1 * x1) + (x2 * x2)) <= 1.f ? 1 : -1;
"
10567,"        self.prev: Node[T] | None = None  # Initialize prev as null

 class Stack(Generic[T]):

     """"""
"
26589,"            // Sibling is black, distant nephew is black

             if (closeNephew is not null && closeNephew.Color == NodeColor.Red)

             {

                 RemoveCase5(node, sibling!, childDir);

                 return;

             }
"
12266,"    final E oldElement = getElement(index);

     fastRemove(this.elements, index);

     if (this.capacity > DEFAULT_CAPACITY && size * 4 <= this.capacity)

       this.elements = Arrays.copyOf(this.elements, newCapacity(this.capacity / 2));

     return oldElement;

   }
"
29261," * Worst-case space complexity O(1)

  *

  * @author Gabriele La Greca : https://github.com/thegabriele97

  * @author Podshivalov Nikita (https://github.com/nikitap492)

  * @see SearchAlgorithm

  * @see BinarySearch
"
25353," * of the list, and then solves recursively for the remaining unsorted list.

  * @author [Tushar Khanduri](https://github.com/Tushar-K24)

  */

 #include <algorithm>  /// for std::is_sorted
"
32013,"/** Creates a random set of points distributed in four clusters in

  * 3D space with centroids at the points

  * * \f$(0,5, 0.5, 0.5)\f$
"
18984,"func cleanString(text string) string {

 	clean_text := strings.ToLower(text)

 	clean_text = strings.Join(strings.Fields(clean_text), """") // Remove spaces

 	regex, _ := regexp.Compile(`[^\p{L}\p{N} ]+`)             // Regular expression for alphanumeric only characters
"
17029,"            self.parents[dst_parent] = src_parent

             joined_set_size = self.set_counts[src_parent]

         self.max_set = max(self.max_set, joined_set_size)

         return True

     def get_parent(self, disj_set: int) -> int:
"
29358,"			t.Errorf(""got: %v, want: %v"", got, tCase.wantToReturn)

 		}

 	}

 }
"
13942,"// author(s) [Taj](https://github.com/tjgurwara99)

 // see millerrabinprimalitytest_test.go

 package prime

 import (

 	""math/rand""
"
18930,"import { absVal } from '../Abs'

 describe('absVal', () => {

   it('should return an absolute value of a negative number', () => {

     const absOfNegativeNumber = absVal(-34)

     expect(absOfNegativeNumber).toBe(34)
"
66310,"// Creates a stack

 struct Stack *createStack()

 {

     struct Stack *stack = malloc(sizeof(struct Stack));

     stack->top = -1;
"
30581,"    [<DataRow(""I love F#"", ""F# love I"")>]

     [<DataRow(""I Love F#"", ""F# Love I"")>]

     member this.reverseWords (input:string, expected:string) =
"
87798,"  }

   /**

    * Stream Counting Sort The same as method {@link CountingSort#sort(List)} } but this method uses

    * stream API
"
11668,"  }

   ""abs min spec 2"" should ""output the correct Integer as a result from the list of elements"" in {

     assert(AbsMin.absMin(List(121, 221, 3, 4112)) === 3)

   }

 }
"
75223,"package DataStructures.Stacks;

 import java.util.Stack;

 /**

  * The nested brackets problem is a problem that determines if a sequence of brackets are properly

  * nested. A sequence of brackets s is considered properly nested if any of the following conditions

  * are true: - s is empty - s has the form (U) or [U] or {U} where U is a properly nested string - s
"
20891,"/** Computes sum of prime numbers less than N */

 unsigned long long sum_of_primes(unsigned long N)

 {
"
27718,"                    return false;

                 }

             }

             return true;
"
70852,"            var vertexB = new Vertex<char>('B', 1);

             Action removeEdge = () => graph.RemoveEdge(vertexA, vertexB);

             removeEdge.Should().Throw<InvalidOperationException>()
"
16189,"            Math.Pow(-1, i) / Factorial.Calculate(2 * i + 1) * Math.Pow(x, 2 * i + 1);

         /// <summary>

         ///     Single term for cos(x) function approximation: (-1)^i * x^(2*i) / (2*i)!.
"
10964,"      return 'Stack is Empty'

     }

     this.top--

     const result = this.stack[this.top]
"
55090,"            //Assert

             Assert.AreEqual(countOfVisitedVertices, graph.Count);

         }

         [Test]

         public void VisitAll_ShouldCountNumberOfVisitedVerices_TwoSeparatedGraphInOne()
"
29989,"    throw new TypeError('Argument is not a string.')

   }

   const pat = /^[a-z][A-Za-z]*$/

   return pat.test(varName)
"
59830,"                { new DateTime(2010, 1, 1), ""TestTime4"" },

                 { new DateTime(2015, 1, 1), ""TestTime5"" },

             };
"
67746,"    return response;

   }

   /**
"
24629,"        ///     </para>

         ///     <para>

         ///         The prime sequence is examined until its value squared is
"
31292,"            break;

         case 2:

             doublemode();

             break;

         default:
"
81835,"}
"
22459,"     * @param vector The vector to be subtracted.

      * @return The difference-vector.

      */

     public Vector2 subtract(Vector2 vector) {

       double x = this.x - vector.x;
"
21661,"        }

         return decoded.toString();

     }

     /**

      * @return true if character is capital Latin letter or false for others
"
12283," * or 5,

  * we get 3,5,6 and 9. The sum of these multiples is 23.

  * Find the sum of all the multiples of 3 or 5 below N.

  */

 int sol(int t) {

   int sum = 0;
"
10386,"	        }

 		 return ans;

 	        
"
26359,"    [<DataRow(5, 3, 125)>]

     [<DataRow(10, 4, 10000)>]

     [<DataRow(1, 2, 1)>]

     [<DataRow(1, 50, 1)>]
"
10221,"    max_y: float = math.inf,

     min_y: float = -math.inf,

     visualization: bool = False,

     max_iter: int = 10000,

 ) -> SearchProblem:

     """"""
"
13366,"            Assert.IsTrue(proposers.All(x => x.EngagedTo is not null));

             Assert.IsTrue(AreMatchesStable(proposers, accepters));

         }

         private static bool AreMatchesStable(Proposer[] proposers, Accepter[] accepters) =>
"
20786,"    void* sig3 =

         hashing::sha1::hash(""The quick brown fox jumps over the lazy dog."");

     std::cout << ""Hashing ""
"
25167,"#ifdef _OPENMP

 #pragma omp for

 #endif

                 for (j = 0; j < features; j++)
"
24183,"class Node<T> extends Rectangle<num> {

   final int maxDepth;

   final int maxItems;

   final int _depth;
"
13561,"    int num_bits = 0;

     char bit_string[50];

     do {

         bool bit = number & 0x01;  // get last bit

         if (bit)
"
90031,"        ///     internal, in-place, unstable,

         ///     time complexity: O(n^2),

         ///     space complexity: O(1),
"
12044,"      if (node.left != nil) {

         return findNode(findNode, node.left);

       }

     } else if (findNode.key > node.key) {

       if (node.right != nil) {
"
30839,"    system(""pause"");

     return 0;

 }
"
18258,"                node = successor;

             }

             // At this point node should have at most one child
"
27747,"  uf.union(2, 3)

   expect(uf.count()).toBe(1)

   expect(uf.find(0)).toBe(3)

   expect(uf.find(1)).toBe(3)

   expect(uf.find(2)).toBe(3)

   expect(uf.find(3)).toBe(3)
"
13312,"  return intToHex(num) + hexOut.join('')

 }

 export { decimalToHex }
"
19206,"    test3();

     end_clk = std::clock();

     std::cout << ""Test 3 completed in "" << get_clock_diff(start_clk, end_clk)

               << "" sec\n"";
"
30376,"    return (infix_2_postfix("""".join(Infix)))[

         ::-1

     ]  # call infix_2_postfix on Infix, return reverse of Postfix

 if __name__ == ""__main__"":

     Infix = input(""\nEnter an Infix Equation = "")  # Input an Infix equation
"
19421,"        int error=1;

 #endif

         if(error)
"
31404,"/*

   Modified from:

     https://github.com/TheAlgorithms/Python/blob/master/maths/prime_factors.py
"
16512,"    number is greater than or equal to n, we use fibK for this */

   while (fibK < n) {

     fib2 = fib1
"
12217,"            # check if se have reached the starting point

             if len(stack) == 0:

                 return visited

     # c is the count of nodes you want and if you leave it or pass -1 to the function
"
23963,"    log_number = math.log(2, 10) * number

     difference = round((log_number - int(log_number)), 15)

     return difference
"
37823,"        private static string UnFillGaps(string text) => text.TrimEnd();

         /// <summary>

         ///     Finds the inverse of the given matrix using a linear equation solver.
"
20641,"	// output:

 	// 3

 	// 3

 	// 4
"
28312,"            return root;

         }

         else

         {  // Case 3: the root has 2 leaves, find the greatest key in the left

             // subtree and switch with the root's
"
11157,"	{""random negative vector"", Vector{2, -1, 7}, Vector{1, -3, 5}, 3.0},

 	{""random wide vectors"", Vector{4, 10, 9}, Vector{4, 3, 5}, 8.06},

 	{""random wide vectors"", Vector{8, 5, 5}, Vector{1, 1, 12}, 10.67},
"
21007,"nums = [2, 5, 1, 3, 4, 7]

 n = 3

 print(shuffle(nums, n))

 # Output: [2,3,5,4,1,7]
"
12710,"    if (v == dest)

     {

         return (d == 0);

     }

     else
"
34004,"    CircularBuffer cb = new CircularBuffer(buffer_size);

     // create threads that read and write the buffer.

     Thread write_thread = new Thread(new TestWriteWorker(cb));
"
31976," * @brief Main function

  * @returns 0 on exit

  */

 int main() {
"
16012,"    // While the quotient is NOT zero:

     while (decimalValue != 0) {

       // If the remainder is a digit < 10, simply add it to
"
25265,"        >>> body_2.update_position(1.)

         >>> body_2.position

         (10.0, 6.0)

         """"""
"
25076,"///  bottom up approach where we calculate the number of coins used for each

 ///  amount from 1 to n for each coin.

 ///  time complexity O(targetAmount * coinDenoms)

 ///  space complexity O(targetAmount)
"
29318,"{

     if (ada == NULL)

         return;

     free(ada->weights);

 };
"
27278,"        {

             Value = value;

         }

         public T Value { get; set; }

         public PairingHeapNode<T> ChildrenHead { get; set; } = null!;

         public bool IsHeadChild => Previous != null && Previous.ChildrenHead == this;
"
17858,"}

 // AddEdge will add a new edge between the provided vertices in the graph

 func (g *Graph) AddEdge(one, two int) {

 	// Add vertices: one and two to the graph if they are not present

 	g.AddVertex(one)
"
88075,"        {

             // Arrange

             var encoder = new HillEncoder();

             var random = new Randomizer();

             var message = random.GetString();

             var key = new double[,] { { 0, 4, 5 }, { 9, 2, -1 }, { 3, 17, 7 } };
"
49676,"                            60,   30,  36,  32,  48,  20,  66,  32,  44,  24,  70,  24,  72,  36,  40,  36,  60,  24,  78,  32,

                             54,   40,  82,  24,  64,  42,  56,  40,  88,  24,  72,  44,  60,  46,  72,  32,  96,  42,  60,  40,

                             100,  32, 102,  48,  48,  52, 106,  36, 108,  40,  72,  48, 112,  36,  88,  56,  72,  58,  96,  32,

                             110,  60,  80,  60, 100,  36, 126,  64,  84,  48, 130,  40, 108,  66,  72,  64, 136,  44, 138,  48,

                             92,   70, 120,  48, 112,  72,  84,  72, 148,  40, 150,  72,  96,  60, 120,  48, 156,  78, 104,  64,
"
32585," * \param l left index of search range

  * \param r right index of search range

  * \param x target value to search for
"
59681,"    :return 1/3 pi * height ^ 2 * (3 * radius - height)

     >>> vol_spherical_cap(1, 2)

     5.235987755982988

     """"""
"
21303,"        {

             var sum = 0;

             var temp = number;

             var numberOfDigits = 0;

             while (temp != 0)

             {
"
43712,"    node._left = temp._right

     temp._right = node

     updateH(node)

     updateH(temp)

     return temp
"
30019," * Function for finding greatest common divisor of two numbers.

  * @params two integers x and y whose gcd we want to find.

  * @return greatest common divisor of x and y.
"
28233,"     */

     void addEdge(E from, E to){

         try{

              adj.get(from).add(to);

         }
"
39372,"  // search tree for a element

   const search = function (root, val, tree) {

     if (root == null) {

       return null

     } else if (tree._comp(root._val, val) === 0) {
"
27558,"    # Load image

     with Image.open(""image_data/lena.jpg"") as img:

         # Change contrast to 170

         cont_img = change_contrast(img, 170)

         cont_img.save(""image_data/lena_high_contrast.png"", format=""png"")
"
15034,"  } else if(n == 0){

     return(1)

   } else {
"
21873,"  List<int> factors = [1];

   for (int i = 2; i <= num; i++) {

     if (num % i == 0) factors.add(i);

   }
"
22458,"                BalanceFactor = 0;

             }

             else if(Left is null)

             {

                 Height = Right!.Height + 1;
"
16418,"      int[][] arr = new int[n][n];

       for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) arr[i][j] = sc.nextInt();

       Rotate g = new Rotate();

       g.rotate(arr);

       printMatrix(arr);

     }
"
21051,"    /**

      * @brief Insert item to the proper position of the node and return the

      * position index.

      *

      * This is a helper function we use during insertion. Please mind that when

      * insert a item, we aslo need to take care of two child pointers. One is
"
63437,"#include <iostream>

 class Node {

  public:

     int val;

     Node *next;

     Node(int v, Node *n) : val(v), next(n) {}  // Default constructor for Node
"
27734,"#

 # The problem is a variant of finding Combinations.

 # Mathematically, the problem can be described as,

 # given 5 vowels (let k = 5), we want to find the
"
17222," *      array, and places all smaller (smaller than pivot)

  *      to left of pivot and all greater elements to right

  *      of pivot

  *

  */
"
25921,"        printf(""\t3: Search a node into AVL tree\n"");

         printf(""\t4: printPreOrder (Ro L R) Tree\n"");

         printf(""\t5: printInOrder (L Ro R) Tree\n"");

         printf(""\t6: printPostOrder (L R Ro) Tree\n"");

         printf(""\t7: printAVL Tree\n"");
"
33192,"// 'SVOOL DLIOW'
"
15088,"    pf _f;

 }A;

 /**

  * @brief child class

  */
"
21256,"    for (int i = 0; i < ada->num_weights - 1; i++) y += x[i] * ada->weights[i];

     if (out)  // if out variable is not NULL

         *out = y;
"
23267,"    for (List<Integer> bucket : buckets) {

       Collections.sort(bucket);

     }

     /* concatenate buckets to origin array */

     int index = 0;
"
13493,"                {

                     return;

                 }

                 PostOrderWalk(node.Left);

                 PostOrderWalk(node.Right);
"
12720,"        x = -23     # Not an armstrong number

         @test is_armstrong(x) == false

         x = 153     # an armstrong number
"
13343,"namespace fibonacci_sum {

 using matrix = std::vector<std::vector<uint64_t> >;

 /**

  * Function to multiply two matrices

  * @param T matrix 1
"
23209,"            if (nm == 1)

             {

                 printMessage(msg7);
"
21831,"        public BinarySearchTree()

         {

             root = null;

             Count = 0;
"
23187,"/**

  * \file

  * \brief [Problem 4](https://projecteuler.net/problem=4) solution

  */

 #include <stdio.h>

 /** Check if number is palindromic
"
18600,"            if (number < 0)

             {

                 throw new ArgumentException($""{nameof(number)} cannot be negative"");

             }

             var sum = 0;

             for (int i = 1, limit = number / 2; i <= limit; ++i)
"
38753,"		})

 	}

 }

 func TestXorCipherDecrypt(t *testing.T) {
"
22707,"package Sorts;

 import static Sorts.SortUtils.*;

 /**

  * The idea of Swap-Sort is to count the number m of smaller values (that are in

  * A) from each element of an array A(1...n) and then swap the element with the
"
33874,"            graph.AddEdge(vertexB, vertexA, 5);

             graph.AddEdge(vertexC, vertexA, 5);

             var neighborsB = graph.GetNeighbors(vertexB).ToList();

             var neighborsC = graph.GetNeighbors(vertexC).ToList();

             graph.RemoveVertex(vertexA);

             neighborsB.Should().HaveCount(1);
"
14169,"package Maths;

 import java.util.Arrays;

 /**

  * description:

  *
"
10454,"  // main variables

   let H0 = 0x67452301

   let H1 = 0xEFCDAB89

   let H2 = 0x98BADCFE

   let H3 = 0x10325476
"
21136," * vector which determine the magnitude (value) of the vector.

  * The method of finding a cross product is the same as finding the determinant of an order 3 matrix consisting

  * of the first row with unit vectors of magnitude 1, the second row with the direction ratios of the

  * first vector and the third row with the direction ratios of the second vector.

  * The magnitude of a vector is it's value expressed as a number.
"
29830,"            Count--;

         }

         /// <summary>

         ///     Removes a node that contains the data from the parameter.
"
30466,"  })

   it('should return a title case string when input is a title case string of with spaces', () => {

     expect(titleCaseConversion('ALL UPPERCASE')).toEqual('All Uppercase')

   })

   it('should return a title case string when input is a title case string of with no spaces', () => {

     expect(titleCaseConversion('ALLUPPERCASE')).toEqual('Alluppercase')
"
33781,"    .map(character => character.join(''))

     .filter((item, index, self) => (self.indexOf(item) === index))

     .sort()
"
29455,"                        var next = current.Next;

                         var nextNext = next.Next;

                         passOneResult.Add(RebuildHeap(current, next));

                         current = nextNext;
"
32736," * @return {string} - string representation of bits after rotation

  *

  * @example

  *      rotateLeft(""1011"", 3); // ""1101""

  */

 function rotateRight (bits, turns) {
"
66915,"def get_row(row_index)

   (0..row_index).map { |num| combination(row_index, num) }

 end
"
12709,"      return true

     }

   }

   checkSingleelement () {

     if (this.front === this.rear && this.rear !== 0) {
"
84054,"        {

             Assert.Throws<ArgumentOutOfRangeException>(() => Mandelbrot.GetBitmap(maxStep: -1));

         }

         [Test]

         public static void TestBlackAndWhite()

         {
"
15901,"   *

    * @return returns the amount of unconnected graphs

    */

   public int countGraphs() {

     int count = 0;

     Set<Node> markedNodes = new HashSet<Node>();
"
16045,"        free(buffer); /* free allocated memory */

         return -1;

     }

     /* loop through all digits in the file */

     do
"
16971,"				copy[currentIndex] = self[leftStartIndex]

 				leftStartIndex += 1

 			} else {

 				copy[currentIndex] = self[rightStartIndex]

 				rightStartIndex += 1
"
17545,"            // Act

             var encoded = encoder.Encode(message, key);

             var decoded = encoder.Decode(encoded, key);

             // Assert

             Assert.AreEqual(message, decoded);

         }
"
27583,"Output: 23

 Explanation:

 Subset1 = {7, 46} ;  sum of Subset1 = 53

 Subset2 = {36, 40} ; sum of Subset2  = 76

  */
"
33232,"*/

 /*

  Given solution is O(n*sum) Time complexity and O(sum) Space complexity

 */
"
21737,"  public void initialize() {

     move_button.setIcon(new ImageIcon(""../Resources/rsz_move.png""));

     move_button.setBounds(130, 0, 50, 50);

     auto_button.setIcon(new ImageIcon(""../Resources/rsz_loop.png""));

     auto_button.setBounds(260, 0, 50, 50);

     replay_button.setIcon(new ImageIcon(""../Resources/rsz_replay.jpg""));
"
10296,"    /// </summary>

     /// <typeparam name=""T"">TODO. 2.</typeparam>

     public class ShellSorter<T> : IComparisonSorter<T>

     {

         /// <summary>
"
72921,"    (1.0, 2.0)

     >>> Point(""1"", ""2"")

     (1.0, 2.0)

     >>> Point(1, 2) > Point(0, 1)

     True
"
21360,"    assert(CoinChange.coinChange(List(1, 2), 4) === 3)

   }

   ""Coin Change 2"" should ""return the number of combinations for the amount2"" in {

     assert(CoinChange.coinChange(List(5, 10, 20, 50, 100, 200, 500), 300) === 1022)
"
19201,"        ///     Adds an item at the last position in the queue.

         /// </summary>

         public void Enqueue(T item) => input.Push(item);

     }

 }
"
25833,"MUTATION_PROBABILITY = 0.4

 # just a seed to improve randomness required by the algorithm

 random.seed(random.randint(0, 1000))
"
15143,"  return stringCompareHelper(string, subString, pattern);

 }

 bool stringCompareHelper(String string, String subString, List<int> pattern) {
"
20891,"    private func foundWinInSlants(_ playerSymbol: PlayerSymbol) -> Bool {

         var theSameSymbolsInSlantCount = 0

         for i in 0 ..< self.size {

             for j in -(self.size - 1) ... 0 {
"
94256,"    int i;

     const int num_classes = 4;

     const double centres[][2] = {

         // centres of each class cluster

         {.5, .5},   // centre of class 1

         {.5, -.5},  // centre of class 2
"
13148,"// https://projecteuler.net/problem=3

 export const largestPrime = (num = 600851475143) => {

   let newnumm = num

   let largestFact = 0
"
15149,"			for (int si = 0; si <= n - slide - 1; si++) {

 				int ei = si + slide;

 				int year = (n - (ei - si + 1)) + 1;

 				if (si == ei) {
"
33522,"func getKey(keyWord string) []int {

 	keyWord = strings.ToLower(keyWord)

 	word := []rune(keyWord)

 	var sortedWord = make([]rune, len(word))

 	copy(sortedWord, word)

 	sort.Slice(sortedWord, func(i, j int) bool { return sortedWord[i] < sortedWord[j] })
"
26490,"    // Key to be searched in the array

     key = 5;

     // Search the key using ternarySearch
"
17769,"        public static void TestCompare()

         {

             // Arrange

             var testObj1 = new BitArray(""110"");

             var testObj2 = new BitArray(""110"");
"
18569,"    20849603980134001723930671666823555245252804609722

     53503534226472524250874054075591789781264330331690

  */

 void main() {

   List<BigInt> numbers =

       ""37107287533902102798797998220837590246510135740250 46376937677490009712648124896970078050417018260538 74324986199524741059474233309513058123726617309629 91942213363574161572522430563301811072406154908250 23067588207539346171171980310421047513778063246676 89261670696623633820136378418383684178734361726757 28112879812849979408065481931592621691275889832738 44274228917432520321923589422876796487670272189318 47451445736001306439091167216856844588711603153276 70386486105843025439939619828917593665686757934951 62176457141856560629502157223196586755079324193331 64906352462741904929101432445813822663347944758178 92575867718337217661963751590579239728245598838407 58203565325359399008402633568948830189458628227828 80181199384826282014278194139940567587151170094390 35398664372827112653829987240784473053190104293586 86515506006295864861532075273371959191420517255829 71693888707715466499115593487603532921714970056938 54370070576826684624621495650076471787294438377604 53282654108756828443191190634694037855217779295145 36123272525000296071075082563815656710885258350721 45876576172410976447339110607218265236877223636045 17423706905851860660448207621209813287860733969412 81142660418086830619328460811191061556940512689692 51934325451728388641918047049293215058642563049483 62467221648435076201727918039944693004732956340691 15732444386908125794514089057706229429197107928209 55037687525678773091862540744969844508330393682126 18336384825330154686196124348767681297534375946515 80386287592878490201521685554828717201219257766954 78182833757993103614740356856449095527097864797581 16726320100436897842553539920931837441497806860984 48403098129077791799088218795327364475675590848030 87086987551392711854517078544161852424320693150332 59959406895756536782107074926966537676326235447210 69793950679652694742597709739166693763042633987085 41052684708299085211399427365734116182760315001271 65378607361501080857009149939512557028198746004375 35829035317434717326932123578154982629742552737307 94953759765105305946966067683156574377167401875275 88902802571733229619176668713819931811048770190271 25267680276078003013678680992525463401061632866526 36270218540497705585629946580636237993140746255962 24074486908231174977792365466257246923322810917141 91430288197103288597806669760892938638285025333403 34413065578016127815921815005561868836468420090470 23053081172816430487623791969842487255036638784583 11487696932154902810424020138335124462181441773470 63783299490636259666498587618221225225512486764533 67720186971698544312419572409913959008952310058822 95548255300263520781532296796249481641953868218774 76085327132285723110424803456124867697064507995236 37774242535411291684276865538926205024910326572967 23701913275725675285653248258265463092207058596522 29798860272258331913126375147341994889534765745501 18495701454879288984856827726077713721403798879715 38298203783031473527721580348144513491373226651381 34829543829199918180278916522431027392251122869539 40957953066405232632538044100059654939159879593635 29746152185502371307642255121183693803580388584903 41698116222072977186158236678424689157993532961922 62467957194401269043877107275048102390895523597457 23189706772547915061505504953922979530901129967519 86188088225875314529584099251203829009407770775672 11306739708304724483816533873502340845647058077308 82959174767140363198008187129011875491310547126581 97623331044818386269515456334926366572897563400500 42846280183517070527831839425882145521227251250327 55121603546981200581762165212827652751691296897789 32238195734329339946437501907836945765883352399886 75506164965184775180738168837861091527357929701337 62177842752192623401942399639168044983993173312731 32924185707147349566916674687634660915035914677504 99518671430235219628894890102423325116913619626622 73267460800591547471830798392868535206946944540724 76841822524674417161514036427982273348055556214818 97142617910342598647204516893989422179826088076852 87783646182799346313767754307809363333018982642090 10848802521674670883215120185883543223812876952786 71329612474782464538636993009049310363619763878039 62184073572399794223406235393808339651327408011116 66627891981488087797941876876144230030984490851411 60661826293682836764744779239180335110989069790714 85786944089552990653640447425576083659976645795096 66024396409905389607120198219976047599490197230297 64913982680032973156037120041377903785566085089252 16730939319872750275468906903707539413042652315011 94809377245048795150954100921645863754710598436791 78639167021187492431995700641917969777599028300699 15368713711936614952811305876380278410754449733078 40789923115535562561142322423255033685442488917353 44889911501440648020369068063960672322193204149535 41503128880339536053299340368006977710650566631954 81234880673210146739058568557934581403627822703280 82616570773948327592232845941706525094512325230608 22918802058777319719839450180888072429661980811197 77158542502016545090413245809786882778948721859617 72107838435069186155435662884062257473692284509516 20849603980134001723930671666823555245252804609722 53503534226472524250874054075591789781264330331690""
"
16093,"    while (parent[val] != val) {

         parent[val] = parent[parent[val]];

         val = parent[val];

     }
"
90730,"            }

             Assert.AreEqual(comparer, mmh.Comparer);

             Assert.AreEqual(""c"", mmh.GetMin());

             Assert.AreEqual(""aaaa"", mmh.GetMax());

         }

         [Test]
"
17872,"    # Make a tree to test on

     tree = RedBlackTree(0)

     tree.left = RedBlackTree(-10, parent=tree)

     tree.right = RedBlackTree(10, parent=tree)

     tree.left.left = RedBlackTree(-20, parent=tree.left)
"
75897,"                        ""Should be found: %d. Found %d at index %d. An array length %d"",

                         shouldBeFound, integers[atIndex], atIndex, size));

         int toCheck = Arrays.binarySearch(integers, shouldBeFound);

         System.out.println(
"
19677,"            3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407,

             3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547,

             3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691,

             3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847,

             3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001,
"
28589,"}
"
28351,"    @Override

     public boolean equals(Object object) {

       if (this == object) return true;

       if (object == null || getClass() != object.getClass()) return false;
"
26693,"#include <arpa/inet.h>

 #include <netdb.h>

 #include <netinet/in.h>

 #include <sys/socket.h>

 #include <sys/types.h>
"
24730,"const exponent = (x, n) => {

   let answer = 1

   while (n > 0) {

     if (n % 2 !== 0) answer *= x

     n = Math.floor(n / 2)
"
21080,"uuid = ""bd369af6-aec1-5ad0-b16a-f7cc5008161c""

 version = ""1.4.4""

 [[Tar]]

 deps = [""ArgTools"", ""SHA""]

 uuid = ""a4e569a6-e804-4fa4-b0f3-eef7a1d5b13e""

 [[Test]]
"
70967,"  nums.delete_if { |num| num == val }

   nums.length

 end

 puts remove_elements([3, 2, 2, 3], 3)

 # => 2
"
32584,"	}

 	return dp[n][m]

 }
"
10505,"#

 def shuffle(nums, n)

   result = []
"
21716,"    }

 }

 function fibonacciRecursive(int $num)

 {
"
75493,"            if (ptr_)

                 rhs.ptr_ = nullptr;

         }
"
30914,"                    beta = min(beta, eval.rawValue)

                     if beta <= alpha { break }

                 }

             }

         }

         return minEval
"
13026,"                    result[i, j] = lhs[i, j] - rhs[i, j];

                 }

             }

             return result;

         }

         /// <summary>
"
28950,"      this.sinkDown(largest)

     }

   }
"
30182,"	//  0---3   5

 	// Min number of colors required = 2

 	g3 := &testGraph{

 		Graph:      &coloring.Graph{},

 		ColorsUsed: 2,
"
12166,"  })

   it('should return a title case string when input is an all-lowercase string with punctuation', () => {

     expect(titleCaseConversion('lower, case, input.')).toEqual('Lower, Case, Input.')
"
25846,"#endif

     }

 end:

     end_time = clock();

 #if defined(DEBUG) || !defined(NDEBUG)
"
24792,"    return 0;

 }
"
55585,"    q3 = a[(3 * n) / 4];

     printf(""\nThird Quartile : %f"", q3);

     iqr = q3 - q1;

     printf(""\nInterQuartile Range is : %f"", iqr);

     return 0;

 }"
76194,"  11: 9,

   12: 10

 }

 // show the week day in a number : Sunday - Saturday => 0 - 6

 const daysNameList = { // weeks-day
"
85870,"    // If it is a black node or its parent is a black node

     if (node->color == 0 || (node->par)->color == 0)

     {

         // Dont Do Anything

         return;
"
55546,"            numberToCharMap[numbers[numIndex]][i].toString());

     stringList.addAll(printWords(numbers, len,

                                  numIndex + 1,

                                  sCopy));

   }
"
10316,"{

     if (stack->top == -1)

         return INT_MIN;

     else

         return stack->arr[stack->top--];

 }
"
30248,"}

 extension Node: CustomStringConvertible {

     public var description: String {
"
29247,"    towerOfHanoi(number_of_disks, 'A', 'C', 'B');

   }

   public static void main(String args[]) {
"
39802,"    g.add_edge(2, 0)

     g.add_edge(2, 3)

     g.add_edge(3, 3)

     g.print_graph()

     print(""DFS:"")
"
44587,"      canvas.fillRect(30 + i * 230, 670, 200, 20);

       canvas.fillRect(130 + i * 230 - 2, 670 - 170, 4, 170);

       canvas.setColor(new Color(150, 0, 0)); // Arseny
"
15692,"  print(count);

 }

 void main() {

   calculateWithRange(start: 1, end: 1000); // 21124
"
19375,"        n = int(n / 2)

     return res_matrix[0][0]

 def nth_fibonacci_bruteforce(n):

     """"""

     >>> nth_fibonacci_bruteforce(100)

     354224848179261915075
"
13785,"                self.hash_function(key + i * i)

                 if not self.balanced_factor() >= self.lim_charge

                 else None

             )

             if new_key is None:

                 break
"
17442,"  return -1

 }

 export { binarySearchIterative, binarySearchRecursive }

 /* ---------------------------------- Test ---------------------------------- */

 // const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

 // const stringArr = [
"
12718,"        [Test]

         public void UpdateTree_UpdateTreeAndRequestSum_GetSum()

         {

             int[] array = { 2, 1, 1, 3, 2, 3, 4, 5, 6, 7, 8, 9 };

             var tree = new BinaryIndexedTree(array);
"
30173,"    expect(() => checkWordOccurrence(value)).toThrow()

   })

   it('expect throw on insert wrong param for case sensitive', () => {

     const value = 'hello'
"
28128,"end

 if $0 == __FILE__

   puts 'Enter a list of numbers separated by space'

   list = gets.split.map(&:to_i)

   p quicksort(list)
"
32723,"                42, 63, 41, 18, 42, 17, 43, 16, 44, 15,

                 45, 14, 46, 79, 113, 78, 114, 77, 39, 78,

                 38, 79, 37, 80, 36, 81, 35, 82, 34, 83

             };

             var sequence = new RecamansSequence().Sequence.Take(50);

             sequence.Should().Equal(expected);
"
14477,"	for i := 0; i < len(HEX); i++ {

 		hex := HEX[i]

 		expected := RGB[i]

 		resultR, resultG, resultB := HEXToRGB(hex)
"
27070,"n = 4

 puts(fibonacci(n))

 # Output: 3
"
11365,"        /// <returns>Sum of a subarray between <c>l</c> and <c>r</c> (including <c>l</c> and <c>r</c>).</returns>

         protected override int Query(int l, int r, int a, int b, int i)

         {

             if (l <= a && b <= r)

             {

                 return Tree[i];
"
13500,"          item = replace(arr, pos, item);

         }

       }

     }

     return arr;
"
23142,"#           O(NLogN) Where N is the Number of elements in the list

 #############################

 from __future__ import annotations

 def CeilIndex(v, l, r, key):  # noqa: E741
"
38502," * elements goes down (for each iteration of outer loop) in steps of

  * a ""shrink factor"" k: [ n/k, n/k2, n/k3, ..., 1 ].

  *

  * Wikipedia: https://en.wikipedia.org/wiki/Comb_sort

  */
"
82434,"                    ""gcd="" + gcd + "", "" +

                     ""solution="" + solution + ']';

         }

     }

 }
"
13960,"                mat[line - 1][column] = 50;

                 return 4;

             }

             else

             {

                 return 0;
"
22268,"        public static void SaturationOutOfRange_ThrowsArgumentOutOfRangeException()

         {

             Action act = () => RgbHsvConversion.HsvToRgb(0, 2, 0);

             act.Should().Throw<ArgumentOutOfRangeException>();
"
13722,"""""""

 References:

     - http://neuralnetworksanddeeplearning.com/chap2.html (Backpropagation)

     - https://en.wikipedia.org/wiki/Sigmoid_function (Sigmoid activation function)
"
15624,"import { checkIfPatternExists } from '../PatternMatching'

 describe('checkIfPatternExists', () => {

   it('expects to find a pattern with correct input', () => {

     const text = 'AABAACAADAABAAAABAA'
"
10923,"			}

 		})

 	}

 }

 func BenchmarkBruteForceFactorial(b *testing.B) {
"
23990," * false if they do not. It calls the subroutines direction

  * which computes the orientation.

  */

 struct SegmentIntersection {

     inline bool intersect(Point first_point, Point second_point,
"
31371,"/*

 https://en.wikipedia.org/wiki/Pigeonhole_sort

 *Pigeonhole sorting is a sorting algorithm that is suitable

 * for sorting lists of elements where the number of elements

 * (n) and the length of the range of possible key values (N)
"
30650,"    scores = []  # list to store the current score at each iteration

     iterations = 0

     solution_found = False

     visited = set()
"
21694,"uuid = ""14a3606d-f60d-562e-9121-12d972cd8159""

 [[MuladdMacro]]

 git-tree-sha1 = ""c6190f9a7fc5d9d5915ab29f2134421b12d24a68""

 uuid = ""46d2c3a1-f734-5fdb-9937-b9b9aeba4221""

 version = ""0.2.2""

 [[MultiScaleArrays]]
"
19512,"	return d, r

 }

 // MillerTest This is the intermediate step that repeats within the

 // miller rabin primality test for better probabilitic chances of

 // receiving the correct result.
"
58678," * @author [Hashir Niazi](https://github.com/HashirGJ8842)

  */

 #include <cassert>      /// for assert
"
20739,"    -17

     """"""

     def __init__(self, array):

         self.idx_of_element = {}

         self.heap_dict = {}
"
16778,"      c = parseInt(bRot, 2) >>> 0

       b = a >>> 0

       a = t >>> 0

     }

     // add values for this chunk to main hash variables (unsigned)
"
29856,"            {

                 lastIteration = currIteration.Copy();

                 currIteration = b.MultiplyVector(lastIteration);

                 currIteration = currIteration.Scale(100);

                 mag = currIteration.Magnitude();

                 if (mag > epsilon)
"
47970,"	var tests = []struct {

 		n        int64

 		expected map[int64]int64
"
22908,"                return i;

             } 

         }

         if (fibMinus1 == 1 && array[offset + 1] == key) {

             return offset + 1;

         }
"
22540,"  });

   test(""romanToInteger CLXV returns 165"", () {

     expect(romanToInteger('CLXV'), equals(165));

   });

   test(""romanToInteger MDCI returns 1601"", () {
"
14396,"			s.Add(tc.input)

 			if s.Len() != len(tc.expElems) {

 				t.Errorf(""expecting %d elements in the set but got %d: set is %v"", len(tc.expElems), s.Len(), s.GetItems())
"
30255,"     */

     Color1 c1;

     cout<<c1.RED<<endl;

     Color1::Type c11 = Color1::BLUE;

     cout<<c11<<endl;

     
"
59260,"            {

                 root = Add(root, key);

             }

             Count++;

         }

         /// <summary>
"
17495,"    import doctest

     doctest.testmod()
"
41653,"     * @function

      * This is recursive quicksort implementation in array

      * of segment [start,last-1]

      * [QuickSort](https://en.wikipedia.org/wiki/Quicksort)
"
25114,"//    private:   //error!

         int v3;

     public:     //显示声明public

         int v2;
"
20364,"It turns out that the formula will produce 40 primes for the consecutive values

 n = 0 to 39. However, when n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is divisible

 by 41, and certainly when n = 41, 412 + 41 + 41 is clearly divisible by 41.

 The incredible formula  n2 − 79n + 1601 was discovered, which produces 80 primes

 for the consecutive values n = 0 to 79. The product of the coefficients, −79 and

 1601, is −126479.
"
14824," * \param[out] data matrix to store data in

  * \param[in] N number of points required

  */

 void test_2d_classes(double *const *data, int N)
"
83585,"        @test_throws DomainError area_rhombus(-1, -2)

         @test_throws DomainError area_rhombus(1, -2)

         @test_throws DomainError area_rhombus(-1, 2)
"
37843,"	if (nb > base - 1) {

 		return (converted_len(nb/base, base) + 1);

 	}

 	return 1;

 }
"
25842,"        except OSError:

             return False

         return True

 # Tests
"
29617,"    System.out.println(cl);

     cl.append(56);

     System.out.println(cl);
"
24157,"# Definition for a binary tree node.

 # class TreeNode

 #   attr_accessor :val, :left, :right

 #   def initialize(val)

 #     @val = val
"
18634,"int ways(int n, int *a, int k)

 {

     if (n < 0 || k < 0)

         return 0;

     if (n == 0)
"
11259,"uuid = ""d7e528f0-a631-5988-bf34-fe36492bcfd7""

 version = ""2.10.1+5""

 [[FriBidi_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]
"
24793,"    This script will find the average (mean) of an array of numbers.

     More about mean:

         https://en.wikipedia.org/wiki/Mean

 */

 const mean = (nums) => {

   // This is a function returns average/mean of array
"
12707,"/*

 The Bellman–Ford algorithm is an algorithm that computes shortest paths

 from a single source vertex to all of the other vertices in a weighted digraph.

 It also detects negative weight cycle.
"
11413,"		var q int64 = b / a

 		x, u = u, x-q*u

 		y, v = v, y-q*v

 		b, a = a, b-q*a

 	}
"
33726,"    {

         if (dist[i] != INT_MAX)

             printf(""%d\t%d\n"", i, dist[i]);

         else
"
10762,"      case 0:

         return [v, t, p]

       case 1:

         return [q, v, p]

       case 2:
"
19280,"    while (num1 % num2 != 0) {

       int remainder = num1 % num2;

       num1 = num2;

       num2 = remainder;

     }
"
29105,"/**

  * cycleSort takes an input array of numbers and returns the array sorted in increasing order.

  *

  * @param {number[]} list An array of numbers to be sorted.

  * @return {number[]} An array of numbers sorted in increasing order.

  */
"
23389,"    *first = *second;

     *second = temp;

 }

 /**

  * Bubble sort algorithm implementation
"
10067,"// starting at s

 function solve (graph, s) {

   const solutions = {}

   solutions[s] = []
"
20343,"            if s == ss:

                 stack.pop()

                 if len(stack) != 0:

                     s = stack[len(stack) - 1]

             else:
"
19223,"        free(number);

         return -1;

     }

     int count = 0;
"
10653,"      this.numKeys += 1

     } else {

       const node = this.list.remove(this.cache[key])
"
22448,"    s.close();

   }

   /**
"
15705," * @returns 0 on exit

  */

 int main()

 {

     /** Variable Declarations */
"
18275,"        >>> inorder(root)

         1,2,3,5,16,17,19,

         >>> root = interactTreap(root, ""=0"")
"
37087,"            tree.Add(3);

             Assert.AreEqual(2, tree.Count);

             tree.Add(4);
"
29342,"            };

             var array = timeline.GetValuesAfter(new DateTime(2003, 1, 1)).ToArray();

             using (new AssertionScope())

             {
"
49966,"	}

 	for i = 0; i <= n; i++ {

 		for j = 0; j <= min.Int(i, k); j++ {

 			if j == 0 || j == i {

 				B[i][j] = 1

 			} else {
"
72868,"  }

   addNode (node) {

     // Function to add a node to the graph (connection represented by set)

     this.connections[node] = new Set()
"
13918,"// 	if isTakingInputFromCommandLine { // case of command line input

 // 		args := os.Args

 // 		if len(args) <= 2 {

 // 			log.Fatal(""Not enough arguments. Two string arguments separated by spaces are required!"")
"
16466,"        return new_val;

     }

     else
"
15816,"function area_triangle(base, height)

     if base < 0 || height < 0

         throw(DomainError(""area_triangle() only accepts non-negative values""))
"
20287,"            else

                 i += 1

             end

         end
"
16306,"    modulus_power = 1

     # Calculating the hash of pattern and substring of text

     for i in range(p_len):
"
11212," * process, so as to improve the efficiency of the program.

  * We can use the last value of the array as the ""sentinel"", the data storage index i 

  * starts from 0 and ends at len-1, then the position where the index of arr is n-1 indicates 
"
25693,"    def __init__(self, data: T):

         self.data = data  # Assign data

         self.next: Node[T] | None = None  # Initialize next as null

         self.prev: Node[T] | None = None  # Initialize prev as null

 class Stack(Generic[T]):

     """"""
"
18653,"   *

    * @param v first element

    * @param w second element
"
30536," * "".....Q"",

  * ""..Q...""

  * <p>

  * Arrangement: 4
"
12228,"<?php

 /**

  * @param an array of integers

  * @return is array sorted in ascending
"
24263,"  private static void padding(ArrayList<FFT.Complex> x, int newSize) {

     if (x.size() < newSize) {

       int diff = newSize - x.size();

       for (int i = 0; i < diff; i++) x.add(new FFT.Complex());
"
51969,"/**

  * checkFlatCase method returns true if the string in flatcase, else return the false.

  * @param {string} varname the name of the variable to check.

  * @returns {boolean} return true if the string is in flatcase, else return false.
"
21116,"        x0 = np.copy(x)

         r0 = np.copy(r)

         p0 = np.copy(p)

         # Update number of iterations.

         iterations += 1
"
43332,"            low + ((key - arr[low]) * (high - low)) / (arr[high] - arr[low]);

         if (key > arr[pos])

             low = pos + 1;

         else if (key < arr[pos])
"
11355,"{

     /// <summary>

     ///     TODO.

     /// </summary>
"
31905,"    right_rot.right = RedBlackTree(0, parent=right_rot)

     right_rot.right.left = RedBlackTree(-5, parent=right_rot.right)

     right_rot.right.right = RedBlackTree(10, parent=right_rot.right)

     right_rot.right.right.left = RedBlackTree(5, parent=right_rot.right.right)
"
23122,"    # number of instances in specific class divided by number of all instances

     return instance_count / total_count

 # Calculate the variance

 def calculate_variance(items: list, means: list, total_count: int) -> float:

     """"""
"
13467,"    Returns the sum of all even fibonacci sequence elements that are lower

     or equal to n.

     >>> solution(10)

     10

     >>> solution(15)

     10
"
63382,"                System.out.print(magic_square[i][j] + "" "");

             }

             System.out.println();
"
13641,"       + | push(5+54)   | 59

         Result =  59

 """"""

 import operator as op

 def Solve(Postfix):
"
37040,"				""annual"":   {4},

 				""announce"": {22},

 			},
"
65350,"/**

  * @file classic_practice.cpp

  * @brief g++ -o classic_practice classic_practice.cpp -std=c++11
"
78878,"          key[v] = graph[u][v];

         }

     }

     // print the constructed MST

     printMST(parent, V, graph);

   }
"
12237,"	// Check if vertex is present or not

 	if _, ok := g.edges[v]; !ok {

 		g.vertices++
"
18292,"auto hasSerialize = is_valid([](auto &&x) -> decltype(x.serialize()) {});

 // Notice how I simply swapped the return type on the right?

 template<class T>

 auto serialize(T &obj)
"
13196,"            {

                 heap.Push(i);

             }

             return heap;

         }

         [Test]
"
31251,"        ///     are siblings the this child, however this structure only maintains a

         ///     reference to one of them.

         /// </summary>
"
90909,"                parent->color = parColor;

                 parent->left->color = 0;

                 parent->right->color = 0;

                 // Delete the node (present at parent->left->left)

                 if (delete)
"
13089,"    stringBuilder.append(Integer.toString(n));

     stringBuilder.append(from_rod);

     stringBuilder.append(aux_rod);

     movements.add(stringBuilder.toString());

     // System.out.println(""Move disk "" + n + "" from rod "" +  from_rod + "" to rod "" + aux_rod);
"
51856,"uuid = ""692b3bcd-3c85-4b1f-b108-f13ce0eb3210""

 version = ""1.3.0""

 [[JSON]]

 deps = [""Dates"", ""Mmap"", ""Parsers"", ""Unicode""]

 git-tree-sha1 = ""8076680b162ada2a031f707ac7b4953e30667a37""

 uuid = ""682c06a0-de6a-54ab-a142-c8b1cf79cde6""
"
43776,"            break;

           }

         case 4:

           {

             In.close();

             return;
"
70700,"stack.push(13)

 stack.push(15)

 stack.push(17)

 stack.push(19)

 stack.push(23)

 stack.push(25)
"
11216,"    return last_half_hour[""intensity""][""actual""]

 # Emissions in a specific date range

 def fetch_from_to(start, end) -> list:

     return requests.get(f""{BASE_URL}/{start}/{end}"").json()[""data""]

 if __name__ == ""__main__"":

     for entry in fetch_from_to(start=date(2020, 10, 1), end=date(2020, 10, 3)):
"
23747,"int main()

 {

     Heap *head = create_heap(head);

     push(head, 10);
"
11950,"	name             string

 	string1          string

 	string2          string
"
26562,"    System.out.println(""Input the string: "");

     String b = sc.next();

     System.out.println(""Converted: "" + convertTurkishToLatin(b));
"
30635,"            if (tree.HasData)

             {

                 compressionKeys.Add(tree.Data.ToString(), string.Empty);

                 decompressionKeys.Add(string.Empty, tree.Data.ToString());

                 return (compressionKeys, decompressionKeys);
"
11936,"{

     int i, freq[range] = {0};

     int *output = (int *)malloc(n * sizeof(int));

     // Store count of occurences in freq[]
"
55852,"    assert result.get(1).x == 1. / 3;

     assert result.get(1).y == 0;

     assert result.get(2).x == 1. / 2;

     assert result.get(2).y == Math.sin(Math.PI / 3) / 3;

     assert result.get(3).x == 2. / 3;
"
32869,"}
"
18030,"            10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303,

             10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457,

             10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607,

             10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733,
"
18218,"    1

     >>> binary_search([0, 5, 7, 10, 15], 6)

     """"""
"
27242,"        public void AddChild(FHeapNode<T> node)

         {

             Degree++;

             if (Child == null)
"
22150,"        perror(""WSA Startup error: \n"");

         return 0;

     }

     atexit(cleanup);  // register at-exit function
"
18361,"#endif

 /**

  * This is the global array to be used to store a flag to identify

  * if a particular number is abundant (1) or not (0).

  * Using a whole byte to store a binary info would be redundant.

  * We will use each byte to represent 8 numbers by relying on bits.
"
80675,"        return Math.sqrt(x*x +y*y +z*z);

     }

     /**

      * Returns the dot product of the current vector with a given vector
"
10428,"            var len = one.Length > two.Length ? one.Length : two.Length;

             var ans = new BitArray(len);

             for (var i = 0; i < one.Length; i++)
"
31524,"  prefix_products = build_prefix_products(nums)

   suffix_products = build_suffix_products(nums)

   suffix_products = suffix_products.reverse

   output(prefix_products, suffix_products, nums)
"
12156,"func TestBooyerMoore(t *testing.T) {

 	for _, tc := range testCases {

 		t.Run(tc.name, func(t *testing.T) {

 			actual := BoyerMoore(tc.input, tc.pattern)

 			if !reflect.DeepEqual(actual, tc.expected) {

 				t.Errorf(""Expected matches for pattern '%s' for string '%s' are: %v, but actual matches are: %v"", tc.pattern, tc.input, tc.expected, actual)
"
69238,"        return midpoint

     elif sorted_collection[midpoint] > item:

         return binary_search_by_recursion(sorted_collection, item, left, midpoint - 1)

     else:
"
28971,"        }

         if (head == entry) {

             head = nextEntry;

         }

         tail.setNextEntry(entry);

         entry.setPreEntry(tail);
"
44524,"	//Adjacency Matrix for connected nodes

 	edges := [][]bool{

 		{false, true, true, false, false, false},

 		{true, false, false, true, false, false},

 		{true, false, false, true, false, false},

 		{false, true, true, false, true, false},
"
11137,"    assert BinarySearch.binarySearch(array, -1) == -1;

     assert BinarySearch.binarySearch(array, 11) == -1;

   }

 }
"
18722,"                // tutuvs respectively

     root->SearchSuggestions(

         """");  // Empty search to list all the entries in the trie

 }

 /**

  * @brief Main function
"
17152,"        for (int i = 0; i < encryptedMessage.length(); i++) {

             if (Character.isAlphabetic(encryptedMessage.charAt(i)))

                 decoded += cipherMap.get(encryptedMessage.charAt(i));
"
18593,"#include<stdio.h>

 struct Base {            // public

     int v1;

 //    public:      //error

         int v2;

     //private:
"
27663,"    numbers[0] = numbers[1] = Type.NOT_PRIME;

     double cap = Math.sqrt(n);

     // Main algorithm: mark all numbers which are multiples of some other values as not prime

     for (int i = 2; i <= cap; i++) {

       if (numbers[i] == Type.PRIME) {

         for (int j = 2; i * j <= n; j++) {
"
39578,"        int connectedVertex = temp->vertex;

         if (graph->visited[connectedVertex] == 0)

         {
"
18080,"int CArrayTests()

 {

     printf(""\n"");
"
33751,"  public static void main(String[] args) {

     Random random = new Random();

     /* random size */

     int size = random.nextInt(100) + 1;

     int[] array = new int[size];
"
13795,"        /// </summary>

         public void Remove()

         {
"
33271,"   * @returns the kth ancestor of node

    */

   int kth_ancestor(int p, const int &dist) {

     lift(&p, dist);

     return p;

   }
"
26210,"julia> trapezoid_integration(x -> 4 / (1 + x^2), 0, 1, 100_000)

 3.1415926535731526

 julia> trapezoid_integration(x -> 4 / (1 + x^2), 0, 1, 100_000) ≈ pi

 true

 ```

 # References:
"
12611,"                var temp = b;

                 b = array;

                 array = temp;

             }

         }
"
24125,"﻿using System.Collections.Generic;

 using System.Numerics;

 namespace Algorithms.Sequences
"
19105,"    int cur_max = 0, max = 0;

     int counter[255];

     int end = 0;

     memset(counter, 0, sizeof(int) * 255);

     while (end < strlen(s))

     {
"
13960,"    return 0;

 }
"
15615,"        @test prime_check(112) == false

         @test prime_check(172) == false

         @test prime_check(1231) == true

         @test prime_check(2332) == false
"
28918,"}
"
20521,"        sut.makeMove(player: firstPlayer, position: Position(2, 1))

         sut.makeMove(player: secondPlayer, position: Position(2, 2))

         XCTAssertEqual(sut.check(player: firstPlayer), BoardStatus.draw)
"
19626,"// https://projecteuler.net/problem=1

 /*    Multiples of 3 and 5

     If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

 Find the sum of all the multiples of 3 or 5 below the provided parameter value number.
"
20171," * @param cent  clusters centroid's array

  * @param k  size of cent array

  */

 void printEPS(observation pts[], size_t len, cluster cent[], int k)

 {

     int W = 400, H = 400;
"
26703,"[[ArgTools]]

 uuid = ""0dad84c5-d112-42e6-8d28-ef12dabb789f""

 [[ArnoldiMethod]]
"
22394,"// Program to find the Maximum contiguous sum (Kadane's Algorithm)

 // Function to Calculate Maximum of Two Number

 int max(int a, int b) {

   if (a > b)

     return a;

   else
"
99086,"            int[][] A11 = new int[n / 2][n / 2];

             int[][] A12 = new int[n / 2][n / 2];

             int[][] A21 = new int[n / 2][n / 2];

             int[][] A22 = new int[n / 2][n / 2];

             int[][] B11 = new int[n / 2][n / 2];
"
11023,"    return 0;

 }
"
11624," second half and

  *      the number of inversions by merging the two.

  *   4. The base case of recursion is when there is only one element in the

  given half.

  *   5. Print the answer
"
25337,"    system(""pause"");

     return 0;

 }
"
11857,"    std::cout << ""Enter the vertices which have edges between them : "" << std::endl;

 	while (edges--) {

 		size_t u = 0, v = 0;

 		std::cin >> u >> v;

 		graph::depth_first_search::addEdge(&adj, u, v);
"
17825,"public class AES {

     /**

      * Precalculated values for x to the power of 2 in Rijndaels galois field. Used as 'RCON' during
"
28265,"        }

     }

     

     /**

      * @param v, A vertex in a graph

      * @return returns an ArrayList of all the adjacents of vertex v
"
79907,"    // quantizer: apply ADALINE threshold function

     return adaline_activation(y);

 }
"
21101,"    dec_val = dec_val + ((oct % 10) * pow(8, i));

     i++;

     oct = oct ~/ 10;
"
24268,"                if (node.Left is not null)

                 {

                     Add(node.Left, key);

                 }
"
33746,"# => 0

 puts(recursive_double_linear_search([], 1))

 # => -1
"
20446,"/*

   Calculate the area of a circle

 */
"
16725,"/**

  * @brief A class to model the geometric distribution

  */
"
11918,"        {

             break;

         }

         // printf(""\t0 + %d + %d "", b[i], carry);
"
40718,"  }

   // remove a value from the tree

   Tree.prototype.removeValue = function (val) {

     // remove something if root exists

     this.root = this.root && this.root.removeNode(val)

   }
"
13415," * performs postorder traversal

  * param[in] curr node pointer to the topmost node of the tree

  */

 void postorder_display(node *curr)

 {

     if (curr != NULL)
"
16906,"                }

             }

             return true;
"
98347,"﻿using System;

 using Algorithms.Sorters.Comparison;

 using Algorithms.Tests.Helpers;

 using NUnit.Framework;

 namespace Algorithms.Tests.Sorters.Comparison
"
38141,"  while (number > 0) {

     // get the last digit of the number

     const lastDigit = number % 10

     // add to the last digit to in reverseNumber

     reverseNumber = reverseNumber * 10 + lastDigit
"
31178,"bool isUnivalTree(struct TreeNode *root)

 {

     if (root == NULL)

         return 1;

     if (root->left)

     {
"
23538,"    void enqueue(const int16_t&);  ///< Add element to the first of the queue

     int dequeue();                 ///< Delete element from back of the queue

     void display() const;          ///< Show all saved data

  private:

     int8_t front{-1};                     ///< Index of head of the array
"
13039,"""""""

 abstract type AbstractBinarySearchTree_arr<:AbstractBinaryTree_arr end

 function Base.findfirst(value::T,tree::Tree,place::Int=tree.root)where {T,Tree<:AbstractBinarySearchTree_arr}

     if tree.val[place]==value
"
66010,"    41230

     >>> solution(50)

     1582700
"
18080,"/**

  * Takes the next item from the Queue.

  */

 int deque()

 {
"
15638,"    eval_function: Callable[[Any, numpy.ndarray], numpy.ndarray],

     function_params: Any,

     nb_iterations: int,

     z_0: numpy.ndarray,

     infinity: float = None,

 ) -> numpy.ndarray:
"
18795,"end

 queue.add(1)

 queue.add(2)

 queue.add(3)
"
24326,"    if (y === -1 && x === -1) return true

     for (let val = 1; val < 10; val++) {

       if (this.check([y, x], val)) {

         this.board[y][x] = val
"
61520,"    StringBuilder sb = new StringBuilder();

     int n = s.length();

     for (int i = 0; i < n; i++) {

       if (sb.toString().indexOf(s.charAt(i)) == -1) {

         sb.append(String.valueOf(s.charAt(i)));
"
93566,"        ///     and x is given point (rational number).

         /// </summary>

         /// <param name=""x"">Given point.</param>

         /// <param name=""n"">The number of terms in polynomial.</param>

         /// <returns>Approximated value of the function in the given point.</returns>
"
32285,"            game_table[6] == 'o')

         {

             return -2;

         }

     }
"
14004,"    return checkSymmetric(left->left, right->right) &&

            checkSymmetric(left->right, right->left);

 }

 bool isSymmetric(struct TreeNode *root)

 {

     return root == NULL || checkSymmetric(root->left, root->right);
"
13645,}
27752,"    while (dec != 0) {

       dn = dn + (dec % db) * m;

       m *= 10;

       dec /= db;

     }
"
24472,"                arr[i + 1] = arr[i];

                 arr[i] = temp;

                 changed = TRUE;
"
15090,}
26058,"/**

  * Implements the flood fill algorithm through a depth-first approach using recursion.

  *

  * @param rgbData The image to which the algorithm is applied.
"
20434,"        /// <summary>

         ///     Initializes a new instance of the <see cref=""ListBasedStack{T}"" /> class.

         /// </summary>

         /// <param name=""items"">Items to push onto the <see cref=""ListBasedStack{T}"" />.</param>

         public ListBasedStack(IEnumerable<T> items)
"
68084,"  //curr_no stores number n

   double curr_no = n;

   //Loop till series reaches 1

   while (curr_no != 1) {
"
32922,"    return (currentChar === 'x' ? randomChar : (randomChar & 0x7 | 0x8)).toString(16)

   })

 }

 // > Guid()

 // 'edc848db-3478-1760-8b55-7986003d895f'
"
22185,"print(get_row(row_index))

 # => [1]

 row_index = 1

 print(get_row(row_index))
"
34651,"package Mathematics

 import org.scalatest.flatspec.AnyFlatSpec

 class GreaterCommonDivisorSpec extends AnyFlatSpec {

   ""GreaterCommonDivisorSpec 1"" should ""output the correct Integer as a result Greatest Common Divisor of two numbers"" in {

     assert(GreaterCommonDivisor.gcd(80, 10) === 10)

   }
"
24265,"#include <stdio.h>

 #include <stdlib.h>

 /*Displays the array, passed to this method*/
"
96664,"    for (i = 2; i < n; i++)

     {

         if (!sieve[i])

         {

             size_t j;
"
27941,"// This file contains the graph coloring implementation using Greedy Approach.

 // Author(s): [Shivam](https://github.com/Shivam010)

 package coloring

 import ""sort""

 // ColorUsingGreedyApproach will return the Color of each vertex and the
"
32847,"          continue;

         }

         break;

       } catch (InputMismatchException e) {

         System.out.println(""Invalid input."");
"
10338,"     * @brief Creating a new node with the same values of curr node

      * @param curr node that would be copied

      * @returns the new node

      */
"
16016,"	}

 	if exponent < 0 {

 		return -1, ErrorNegativeExponent

 	}

 	_, err := Multiply64BitInt(mod-1, mod-1)

 	if err != nil {
"
43544,"        determinant = self.determinant()

         return None if not determinant else self.adjugate() * (1 / determinant)

     def __repr__(self):

         return str(self.rows)
"
47835," * @details

  * This algorithm saves the last element of the array, 

  * then replaces it with the value to be found and sets it as the sentinel. 
"
12218,"        int v3;

     //void print(){       // c中不能在结构体中嵌入函数

     //    printf(""%s\n"",""hello world"");

     //};    //error!

 };

 void Base(){
"
20953,"}

 /** Main function */

 int main(int argc, char **argv)
"
10534,"      if (!swapped) {

         break;

       }

     }
"
32192,"template <typename T, size_t N>

 static void merge(std::array<T, N> *array, size_t min, size_t max, size_t mid) {

     size_t firstIndex = min;

     size_t secondIndex = mid + 1;
"
37094,"        // If prefix is present as a word, but 

         // there is no subtree below the last 

         // matching node. 

         if (isWord && isLast) 

         { 

             System.out.println(query);
"
13521,"# Challenge name: Jewels and Stones

 #

 # You're given strings jewels representing the types of stones that are jewels,

 # and stones representing the stones you have. Each character in stones is a type
"
27473,"import * as area from '../Area'

 describe('Testing surfaceAreaCube calculations', () => {

   it('with natural number', () => {
"
24615,"        public bool IsHeadChild => Previous != null && Previous.ChildrenHead == this;

         public PairingHeapNode<T> Previous { get; set; } = null!;

         public PairingHeapNode<T> Next { get; set; } = null!;

     }

 }
"
16737,"    else

     {

         printf(""Enter the value of n(n starts from 0 ): "");

         scanf(""%lu"", &number);
"
31378,"				post[j] = pop();												// empty or priority of top operator

 				j++;															// becomes smaller than scanned operator

 			}																	// '(' has priority -1
"
24834,"/**

  * Function to get the number of days in a month.

  * \param month month identified by an integer -\n

  * > 0 = Jan and 11 = December

  * \returns number of days in given month

  * \note For February, adjust for leap year outside the function.
"
25622,"}

 def decimal_to_hexadecimal(decimal: float) -> str:

     """"""
"
28540,"template <typename T>

 void partition3(std::vector<T> *arr, int32_t low, int32_t high, int32_t *i,

                 int32_t *j) {

     // To handle 2 elements

     if (high - low <= 1) {

         if ((*arr)[high] < (*arr)[low]) {
"
24651,"    // matrix<int> ekey = {{22, 28, 25}, {5, 26, 15}, {14, 18, 9}};

     // std::cout << ""Encryption key: \n"" << ekey;

     std::string gibberish = ciphers::HillCipher::encrypt_text(text, ekey);

     std::cout << ""Encrypted text:\n\t"" << gibberish << std::endl;

     // matrix<int> dkey = ciphers::HillCipher::generate_decryption_key(ekey);
"
27246,"    score = 0

     test_num = test_tags.shape[0]

     for i in range(test_tags.shape[0]):

         if test_tags[i] == predict[i]:

             score += 1

     print(f""\nall: {test_num}\nright: {score}\nfalse: {test_num - score}"")
"
88355,"            }

             else if(i%2 == 1) {

                 integralEvaluation += (double) 4 * data.get(i);

                 System.out.println(""Multiply f(x"" + i + "") by 4"");
"
53171,"#include <inttypes.h> /// for uint32_t

 #include <stdio.h>    /// for IO operations

 /**

  * @brief The main function implements the search algorithm
"
27363,"        if character not in alpha:

             # Append without encryption if character is not in the alphabet

             result += character

         else:
"
14993,"            cout<<""Derived::f(int)""<<endl;

         }

 };

 int main()
"
33613,"            // Print updates every 200th iteration

             // if (iter % 100 == 0)

             std::cout << ""\tIter "" << iter << "": Training weights: "" << *this
"
32171,"# Non-recursive and non-iterative approach

 #

 def factorial(number)

   if number < 0
"
12175,"		},

 	}

 	// initialize

 	const (

 		size       = 5

 		characters = ""HogeF""
"
33804,"    else if (k < size)

     {

         clusters = malloc(sizeof(cluster) * k);

         memset(clusters, 0, k * sizeof(cluster));

         /* STEP 1 */

         for (size_t j = 0; j < size; j++)
"
11820,"    """"""

     >>> decrypt_message(4545, 'VL}p MM{I}p~{HL}Gp{vp pFsH}pxMpyxIx JHL O}F{~pvuOvF{FuF'

     ...                       '{xIp~{HL}Gi')
"
17908,"    for i in range(0, len_result):

         print(""%.5f"" % (theta[0, i]))

 if __name__ == ""__main__"":
"
75207,"                {

                     value = mmh.GetMax();

                     _ = mmh.ExtractMax();

                 }

                 extracted.Add(value);
"
19884,"    firstElement = null;

     size = 0;

   }
"
93832,"        perror(""Unable to allocate memory!"");

         return -1;

     }
"
47009,"                        - np.sum(pd_conv1_all[k_conv]) * self.rate_thre

                     )

                 # all connected layer

                 self.wkj = self.wkj + pd_k_all.T * bp_out2 * self.rate_weight

                 self.vji = self.vji + pd_j_all.T * bp_out1 * self.rate_weight

                 self.thre_bp3 = self.thre_bp3 - pd_k_all * self.rate_thre
"
51082,"        // Back propagation of the random play.

         while (tempNode != null) {

             tempNode.visitCount++;

             // Add wining scores to bouth player and opponent depending on the turn.
"
12047,"        public IEnumerable<BigInteger> Sequence

         {

             get

             {

                 var seed = new List<BigInteger>
"
28285,"            return POSITION_EMPTY;

     }

     return INVALID_POSITION;
"
32254,"        a = (a + str[i]) % MODADLER;

         b = (b + a) % MODADLER;

     }

     return (b << 16) | a;

 }

 unsigned retrieve_index_from_hash(const long long hash, const unsigned capacity)
"
22712,"    const SUT = calculateSumOfPrimeNumbers(14)

     expect(SUT).toBe(41)

   })
"
31767,"    System.out.println(setBitCount);

     sc.close();

   }

 }
"
11423,"          return `(${coefficient}x^${exponent})`

         }

       })

       .filter((x) =>

         x !== '0'
"
22530,"            ulong hashS = 0;

             for (var i = 0; i < pattern.Length; i++)

             {

                 hashS = (hashS + pattern[i] * pPow[i]) % m;
"
25667,"        public string Decode(string text, int key) => Cipher(text, -key);

         private static string Cipher(string text, int key)

         {

             var newText = new StringBuilder(text.Length);

             for (var i = 0; i < text.Length; i++)

             {
"
31224,"        return(elements.vec)

     }

 }

 # Example:

 # merge.sort(c(5, 2, 3, 1, 4)) 

 # [1] 1 2 3 4 5
"
90640,"        }

     }

 }
"
17653,"package DataStructures.Lists;

 public class CountSinglyLinkedListRecursion extends SinglyLinkedList {

   public static void main(String[] args) {

     CountSinglyLinkedListRecursion list = new CountSinglyLinkedListRecursion();

     for (int i = 1; i <= 5; ++i) {

       list.insert(i);
"
23428,"        std::cout << ""Enter number: "";

         std::cin >> val;

         // check for failure to read input. Happens for

         // non-numeric data
"
25157,"[[Glib_jll]]

 deps = [""Artifacts"", ""Gettext_jll"", ""JLLWrappers"", ""Libdl"", ""Libffi_jll"", ""Libiconv_jll"", ""Libmount_jll"", ""PCRE_jll"", ""Pkg"", ""Zlib_jll""]

 git-tree-sha1 = ""7bf67e9a481712b3dbe9cb3dac852dc4b1162e02""
"
19974,"git-tree-sha1 = ""3afbf5398ff3e51427ed620e5ffbe96c7fdba67c""

 uuid = ""429524aa-4258-5aef-a3af-852621145aeb""

 version = ""1.4.0""

 [[Opus_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]
"
71414,"import { Vector2, iterate } from './KochSnowflake'

 /**

  * Method to render the Koch snowflake to a canvas.

  *
"
29380,"        public static int GetItemBiggerThanAllIn(int[] arr) => arr.Max() + 1;

     }

 }
"
16623,"            var splitted = new char[chunked.Length * 3];

             for (var i = 0; i < chunked.Length; i++)

             {

                 for (var j = 0; j < 3; j++)

                 {
"
21043," * Test function

  */

 void test()

 {

     const int size = 10;
"
27330,"    >>> ite_ternary_search(['a', 'c', 'd'], 'f')

     -1

     >>> ite_ternary_search([], 1)

     -1

     >>> ite_ternary_search([.1, .4 , -.1], .1)
"
26442,"    int i;

     /* there are no such numbers till 10. Lets search from there on */

     for (i = 10; i < MAX_N; i++)

     {

         if (flags[i] != 0)
"
11205,"            22003, 22013, 22027, 22031, 22037, 22039, 22051, 22063, 22067, 22073, 22079, 22091, 22093, 22109, 22111,

             22123, 22129, 22133, 22147, 22153, 22157, 22159, 22171, 22189, 22193, 22229, 22247, 22259, 22271, 22273,

             22277, 22279, 22283, 22291, 22303, 22307, 22343, 22349, 22367, 22369, 22381, 22391, 22397, 22409, 22433,

             22441, 22447, 22453, 22469, 22481, 22483, 22501, 22511, 22531, 22541, 22543, 22549, 22567, 22571, 22573,
"
15053,"		decryptedChar, err := p.decipher(chars[i:int(math.Min(float64(i+2), float64(len(chars))))])

 		if err != nil {

 			return """", fmt.Errorf(""failed decipher: %w"", err)
"
44519,"[[PCRE_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]

 git-tree-sha1 = ""b2a7af664e098055a7529ad1a900ded962bca488""
"
52696,"  }

   /**

    * Recursive method to delete a data if present in BST.
"
24364," * radius 20.0 with center at (0,0)

  * and cluster them into 11 clusters

  *

  * <img alt=""Output for 1000000 points divided in 11 clusters"" src=

  * ""https://raw.githubusercontent.com/TheAlgorithms/C/docs/images/machine_learning/k_means_clustering/kMeansTest2.png""

  * width=""400px"" heiggt=""400px"">
"
49632,"  end

   def pop

     stack.pop

   end

   def peek
"
11424,"    printf(""------- Test 3 -------\n"");

     printf(""Model before fit: %s\n"", adaline_get_weights_str(&ada));

     adaline_fit(&ada, X, Y, N);

     printf(""Model after fit: %s\n"", adaline_get_weights_str(&ada));

     int N_test_cases = 5;
"
18959,"    size_t size = 1000000L;

     observation* observations =

         (observation*)malloc(sizeof(observation) * size);

     double maxRadius = 20.00;
"
25926,"    False

     >>> is_prime(-800)

     False

     >>> is_prime(104729)

     True

     """"""
"
39617,"            ans = ((ans % c) * (a % c)) % c;

         }

         /// b must be even now

         b = b >> 1;  /// b = b/2
"
10338,"    return maxi;

   }

   /**

    * Function to compute HEIGHT of the generic tree

    *

    * @return height
"
34024,"		}

 	})

 	base8 := 7

 	t.Run(""Testing(8bit) a = 257 and m = 256: "", func(t *testing.T) {

 		max := BitwiseMax(8, 16, base8)
"
52195,"    // Prints 2 4 3 6 8 7 5

     System.out.println(""Post order traversal:"");

     tree.printPostOrder();

     System.out.println();

     // Prints 5 3 7 2 4 6 8

     System.out.println(""Level order traversal:"");
"
25112,"        }

       }

     } else if (val < this.value) {

       this.left = this.left && this.left.removeNode(val)

     } else if (val > this.value) {
"
10668," * @param[in,out]	y		dependent variable(s)

  * @param[in,out]	dy	    first-derivative of dependent variable(s)

  */

 void problem(const double *x, double *y, double *dy)

 {
"
33926,"       printWords(numbers, numbers.length, 0, """");

   stringList.stream().forEach(System.out :: println);

 }

  
"
25690,"        for (int i = 1; i < table.length; i++) {

             for (Object item : table[i]) {

                 wordDecrypted.append(item);

             }

         }

         return wordDecrypted.toString().replaceAll(ENCRYPTION_FIELD, """");
"
26277," *

  * @author sahilb2 (https://www.github.com/sahilb2)

  */

 class QueueWithStack {

   // Stack to keep track of elements inserted into the queue

   private Stack<Object> inStack;
"
11519,"        /// <summary>

         ///     Gets or sets key value of node.

         /// </summary>

         public TKey Key { get; set; }
"
99248,"  return true;

 }

 bool openKnightTourHelper(List<List<int>> board, List<int> pos, int curr) {

   if (isComplete(board)) {
"
26733,"        [Test]

         public static void PopTest()

         {

             var stack = new ListBasedStack<int>(new[] { 0, 1, 2, 3, 4 });

             Assert.Multiple(() =>

             {
"
80777,"			newQueue.enqueue(4)

 			newQueue.dequeue()

 			if newQueue.dequeue() != 3 {

 				t.Errorf(""Test DeQueue is wrong the result must be %v but got %v"", 3, newQueue.dequeue())

 			}
"
11096,"    }

     free(X);

     free(W);

 }

 /**

  * Convert clock cycle difference to time in seconds
"
23414,"    """"""

     (x, y) = extended_euclid(n1, n2)

     m = n1 * n2

     n = r2 * x * n1 + r1 * y * n2

     return (n % m + m) % m

 # ----------SAME SOLUTION USING InvertModulo instead ExtendedEuclid----------------
"
24201,"				and its index by subtracting 1 from it's 

 				parent's index*/

 				queue.offer(queue.peek().left);

 				index.offer(index.peek()-1);

 			}
"
77197,"at which point every move by the current player can be mirrored by the

 opponent until no stones remain; so the current player loses. To illustrate:

 - current player moves to (1,2,1)

 - opponent moves to (1,0,1)

 - current player moves to (0,0,1)
"
13040,"}

 func BenchmarkQuick(b *testing.B) {

 	benchmarkFramework(b, QuickSort)
"
24397,"            6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163,

             6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311,

             6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469,

             6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653,

             6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793,
"
25034,"          rotateRight(x.p);

           x = root;

         }

       }
"
94310,"        else:

             # Since the weight encountered is greater than limit, therefore take the

             # required number of remaining kgs and calculate profit for it.

             # weight remaining / weight[index]

             gain += (max_weight - limit) / weight[index] * profit[index]
"
19538," * @namespace graph

  * @brief Graphical algorithms

  */

 namespace graph {

 /**

  * @brief function to check whether the passed graph is bipartite or not
"
18063,"    typedef decltype(vec.begin()) vectype;

     for(vectype i=vec.begin();i!=vec.end();i++)

         cout<<*i<<"" "";

     cout<<endl;

     /**
"
28287,"        elif mid ** 2 > n:

             right = mid - 1

         else:

             left = mid + 1
"
31418,"            [Random(0, 1000, 100, Distinct = true)]

             int n)

         {
"
31130,"// Wikipedia: https://en.wikipedia.org/wiki/Reverse_Polish_notation

 const calcRPN = (expression) => {

   const operators = {

     '+': (a, b) => a + b,

     '-': (a, b) => a - b,

     '*': (a, b) => a * b,
"
61396," * Narcissistic number.

  */

 public class Armstrong {

   public static void main(String[] args) {
"
13149,"            do_something(i);           // 1. 潜在访问隐患：悬空引用

         }

     }

 };

 // 特殊情况下的等待
"
33459,"	isLeaf   bool           // current node value

 }

 // NewNode creates a new Trie node with initialized

 // children map.
"
25254,"        single component""""""

         if component_size[u_node] <= component_size[v_node]:

             self.m_component[u_node] = v_node

             component_size[v_node] += component_size[u_node]

             self.set_component(u_node)
"
10402,"            {

                 if (i == start)

                 {
"
20244,"        /// <param name=""arrayIndex"">The start index.</param>

         public void CopyTo((DateTime, TValue)[] array, int arrayIndex)

             => timeline.CopyTo(array, arrayIndex);

         /// <summary>

         ///     Add an event at a given time.

         /// </summary>
"
47623,"    [<DataRow(""book"", ""book"", 0)>]

     [<DataRow(""test"", """", 4)>]

     [<DataRow("""", """", 0)>]
"
22782,"	 * 			GeeksForGeeks: Make a loop at K-th position</a>

 	 * @param	head	head node of the linked list

 	 * @param	k		position of node where loop is to be created

 	 */

     static void createLoop(Node head, int k) {
"
31408,"    {

         int pop = x % 10;

         x /= 10;

         if (rev > INT_MAX / 10 || (rev == INT_MAX / 10 && pop > 7))

             return 0;
"
26932,"    }

     System.out.println(""."");

   }
"
19890,"version = ""0.5.0""

 [[InteractiveUtils]]

 deps = [""Markdown""]

 uuid = ""b77e0a4c-d291-57a0-90e8-8db25a27a240""

 [[IntervalSets]]

 deps = [""Dates"", ""EllipsisNotation"", ""Statistics""]
"
22027,"        public void Enqueue(T x)

         {

             list.Add(x);

             var i = Count - 1; // Position of x

             while (i > 0)
"
19625,"   73167176531330624919225119674426574742355349194934

    96983520312774506326239578318016984801869478851843

    85861560789112949495459501737958331952853208805511

    12540698747158523863050715693290963295227443043557
"
28684,"  // fomula for pi = (ratio of number inside circle and total iteration) x 4

   const pi = (circleCounter / iterations) * 4

   return pi

 }

 export { piEstimation }
"
13095,"					fact=fact*i;

 				}

 				//computing the sum of the factorials

 				s=s+fact;
"
21814,"     * @param size     The power of 2 that will determine the lenght of the array.

      * @param maxScore The maximum possible score.

      * @return An array of random numbers.

      */

     public static int[] getRandomScores(int size, int maxScore) {

         int[] randomScores = new int[(int) Math.pow(2, size)];
"
31619,"  }

   T get front {

     if (_dataStore.isNotEmpty) {

       return _dataStore.first.item;

     }
"
18664,"    [0, 1, 1, 2, 2]

     >>> get_totients(10)

     [0, 1, 1, 2, 2, 4, 2, 6, 4, 6]

     """"""
"
15967,"uuid = ""19fa3120-7c27-5ec5-8db8-b0b0aa330d6f""

 version = ""0.1.2""

 [[Wayland_jll]]

 deps = [""Artifacts"", ""Expat_jll"", ""JLLWrappers"", ""Libdl"", ""Libffi_jll"", ""Pkg"", ""XML2_jll""]

 git-tree-sha1 = ""3e61f0b86f90dacb0bc0e73a0c5a83f6a8636e23""
"
29476,"        index = i;

       }

     }

     // If the biggest memory block cannot fit the process, return -255 as the result

     if (processSize > blockSizes[index]) {

       return NO_ALLOCATION;
"
29272,"    printInOrder(node->right);

 }

 void printPostOrder(avlNode *node)
"
18056,"      temp.img = this.img / n;

       return temp;

     }

   }

   /**
"
31734,"# Time Complexity: O(n)

 #

 def single_number(nums)
"
11411,"    ""E"": [""B"", ""F""],

     ""F"": [""C"", ""E""],

 }

 def breadth_first_search(graph: dict, start: str) -> set[str]:

     """"""

     >>> ''.join(sorted(breadth_first_search(G, 'A')))
"
20390,"    while (temp != NULL)

     {

         int connectedVertex = temp->vertex;
"
30106,"  for(uint16_t i = 0; i < V; ++i)

   {

     for(uint16_t j = 0; j < V; ++j)

     {
"
65049,"    }

     catch(int i) {

 	    cout<<""4--In catch block1 ... exception..errcode  is..""<<i<<endl;

     }
"
13926,"      return;

     }

     if (node.left != null) {

       inOrder(node.left);

     }
"
33426,"    public: 

         Derived2() 

         { 
"
80281,"# Implementation of Circular Queue (using Python lists)

 class CircularQueue:

     """"""Circular FIFO queue with a fixed capacity""""""

     def __init__(self, n: int):

         self.n = n

         self.array = [None] * self.n
"
29682,"                new BigInteger(""0""),

                 new BigInteger(""0""),

                 new BigInteger(""0""),

                 new BigInteger(""0""),

                 new BigInteger(""0""),
"
49764,"                char encrypted_char = char(c ^ key); // Applying encyption

                 encrypted_text += encrypted_char; // Appending encrypted character

             }

             return encrypted_text; // Returning encrypted text
"
30692,"    [<DataRow(""Jived fox nymph grabs quick waltz."", true)>]

     [<DataRow(""My name is Unknown"", false)>]

     [<DataRow(""The quick brown fox jumps over the la_y do"", false)>]

     [<DataRow("""", true)>]

     member this.CheckPangram (sentence:string, expected:bool) =
"
30491,"  int tmp = lst[i];

   lst[i] = lst[i + 1];

   lst[i + 1] = tmp;

 }

 void main() //driver function
"
33704,"        XCTAssertEqual(evaluateGameState(board: board, player: secondPlayer, opponent: firstPlayer), .min)

         board.clear()

         board.makeMove(player: secondPlayer, position: Position(0, 0))

         board.makeMove(player: secondPlayer, position: Position(0, 1))

         board.makeMove(player: secondPlayer, position: Position(0, 2))
"
14690,"        int col_num = num-1;

         magic_square[row_num][col_num] = 1;

         for (int i = 2; i <= num*num; i++) {
"
63960,"            {

                 printMessage(msg5);

             }

             else if (nm == 6)

             {
"
17220,"            var actualIndex = searcher.FindIndex(arrayToSearch, arrayToSearch[selectedIndex]);

             // Assert

             Assert.AreEqual(arrayToSearch[selectedIndex], arrayToSearch[actualIndex]);
"
29208,"    virtual void bar();

     void foobar();

 };

 class B : public A {

 public:

     void foo() override; // OK
"
17263,"/*

   Returns the sum of a geometric progression

   Article on Geometric Progression: https://en.wikipedia.org/wiki/Geometric_series

   Examples:
"
26761,"	var result strings.Builder

 	for _, ch := range s {

 		if ch != '#' {

 			result.WriteRune(ch)

 		}

 	}
"
33222,"	}{

 		{

 			n: 5,

 			graph: []Edge{

 				{
"
33669," *  	2nd DR, A: -((a * z) - (c * x))

  *  	3rd DR, N:  (a * y) - (b * x)

  *

  * Therefore, the direction ratios of the cross product are: J, A, N

  * The following C++ Program calculates the direction ratios of the cross products of two vector.

  * The program uses a function, cross() for doing so.
"
31587,"			else

 			{

 				if (s->right->color == 'b')

 				{

 					s->left->color = 'b';
"
31142,"    preorder_traversal_nodes = [i.label for i in t.preorder_traversal()]

     print(""Preorder traversal:"", preorder_traversal_nodes)

     print(""Max. label:"", t.get_max_label())

     print(""Min. label:"", t.get_min_label())
"
33557,"void test3(double eta)

 {

     struct adaline ada = new_adaline(6, eta);  // 2 features
"
29887,"        }

         std::vector<std::pair<int, std::string>> config;  // To store config

         std::vector<std::vector<std::valarray<double>>>

             kernels;  // To store pretrained kernels

         // Loading model from saved file format

         size_t total_layers = 0;
"
10347,"            var node = Find(data);

             RemoveNode(node);

         }

         /// <summary>
"
24126,"    // when using winsock2.h, startup required

     WSADATA wsData;

     if (WSAStartup(MAKEWORD(2, 2), &wsData) != 0)

     {
"
28743,"        return f2

     matrix = Matrix([[1, 1], [1, 0]])

     matrix = modular_exponentiation(matrix, n - 2)

     return f2 * matrix.t[0][0] + f1 * matrix.t[0][1]
"
19297,"    {

         lb1 = 0;

         k = 0;

         while (lb1 + size < n)

         {

             lb2 = lb1 + size;
"
31362,"        2: 6,

         3: -14,

         4: 5,

         5: 4,
"
28687,"        printf(""%s\n"",""hello world"");

     };    

 }B;
"
24120,"	c.Right.Height = height(c.Right)

 	c.Height = height(c)

 	*root = c

 }

 // balanceFactor : -ve balance factor means subtree root is heavy toward left

 // and +ve balance factor means subtree root is heavy toward right side
"
24819,"    return seive[n]

 def contains_an_even_digit(n: int) -> bool:

     """"""
"
14805,"    assert linked_list.delete_nth(9) == 10

     assert linked_list.delete_tail() == 11

     assert len(linked_list) == 9

     assert str(linked_list) == ""->"".join(str(i) for i in range(1, 10))

     assert all(linked_list[i] == i + 1 for i in range(0, 9)) is True
"
14359,"  _avl.prototype.remove = function (_val) {

     const prevSize = this.size

     this.root = del(this.root, _val, this)

     if (prevSize === this.size) {

       return false

     }
"
92172,"	}

 	arr[index+1], arr[high] = arr[high], arr[index+1]

 	return index + 1

 }

 // QuickSortRange Sorts the specified range within the array

 func QuickSortRange(arr []int, low, high int) {
"
65689,"        print(self.data[self.head : self.tail])

 class my_node:

     def __init__(self, data: Any) -> None:

         self.data = data

         self.left: my_node | None = None

         self.right: my_node | None = None
"
19598,"#
"
26670,"            for (var i = 0; i < totalLength; i++)

             {

                 dest.Write(sorted.Read());

             }
"
29123,"      count++;

     }

     return count;

   }

   /**
"
71520,"        public void GetKeysInOrder_EmptyTree_CorrectReturn()

         {

             var tree = new AvlTree<int>();
"
32184,"    // add to the last digit to in reverseNumber

     reverseNumber = reverseNumber * 10 + lastDigit

     // reduce the actual number.
"
17311,"        }

         return encoded;

     }

     /**

      * Decrypt message by replacing each element with its opposite character in cipher.
"
22313,"	// This loop will end when we will find a perfect match for our target

 	for {

 		gen++

 		generatedPop += len(pop)

 		// Random population created now it's time to evaluate

 		for i, item := range pop {
"
19402,"                return;

             }

             var (left, right) = Split(array);

             Sort(left, comparer);

             Sort(right, comparer);

             Merge(array, left, right, comparer);
"
32616,"  const E = 8

   const destination = 3

   const graph = [[0, 1, -1], [0, 2, 4],
"
31092,"        /// </summary>

         /// <param name=""array"">Input array.</param>

         /// <param name=""comparer"">Integer comparer.</param>

         public void Sort(T[] array, IComparer<T> comparer)

         {

             for (var i = 0; i < array.Length - 1; i++)
"
19770,"    import doctest

     doctest.testmod()

     main()
"
84827,"    foreach ($characters as $character) {

         $currentCharacterCount = 1;

         if (isset($characterCountTable[$character])) {

             $currentCharacterCount = $characterCountTable[$character] + 1;

         }

         $characterCountTable[$character] = $currentCharacterCount;
"
31648,"    * @return

     */

   def getPrimeNumbers(n: Int): Seq[Int] = {

     var primeNumbers                   = Seq.empty[Int]

     val lowestPrimeDivisor: Array[Int] = Array.fill(n + 1)(0)
"
81212,"            }

             if (hasChildren(curr)) {

                 return curr;
"
28325,"    }

   }

 }
"
14914,"/*In order traversal of the tree*/

 void display(var tree) {

   if (tree == null) {
"
81891,"        {

             min_x = pts[j].x;

         }

         if (max_y < pts[j].y)
"
32642,"            while (true)

             {

                 if (node.Right is null)

                 {

                     return node;

                 }
"
25711,"            55457, 55469, 55487, 55501, 55511, 55529, 55541, 55547, 55579, 55589, 55603, 55609, 55619, 55621, 55631,

             55633, 55639, 55661, 55663, 55667, 55673, 55681, 55691, 55697, 55711, 55717, 55721, 55733, 55763, 55787,

             55793, 55799, 55807, 55813, 55817, 55819, 55823, 55829, 55837, 55843, 55849, 55871, 55889, 55897, 55901,

             55903, 55921, 55927, 55931, 55933, 55949, 55967, 55987, 55997, 56003, 56009, 56039, 56041, 56053, 56081,

             56087, 56093, 56099, 56101, 56113, 56123, 56131, 56149, 56167, 56171, 56179, 56197, 56207, 56209, 56237,

             56239, 56249, 56263, 56267, 56269, 56299, 56311, 56333, 56359, 56369, 56377, 56383, 56393, 56401, 56417,
"
31342,"  Calculate the area of a trapezium

 */

 const areaTrapezium = (base1, base2, height) => {

   validateNumericParam(base1, 'Base One')
"
29753,"    :param pb: plugb -> validated and transformed

     :return: (rotpos, rotsel, pb)

     """"""
"
28272,"ols<-function(y,x){

     data<-model.matrix(y ~ ., data = x)

     decomp <- svd(data)

     return(decomp$v %*% diag(1 / decomp$d) %*% t(decomp$u) %*% y)

   }
"
15787,"    int P = scn.nextInt();

     System.out.println(squareRoot(N, P));

     scn.close();

   }
"
33051,"        public static void ExtractMaxTest<T>(IEnumerable<T> collection)

         {

             var ordered = collection.OrderByDescending(x => x);

             var mmh = new MinMaxHeap<T>(collection);
"
82978,"      max3 = max2

       max2 = arrayItems[i]

     } else if (max3 === -1 || arrayItems[i] > max3) {
"
32488,"     * @param keyword String with keyword being used

      * @return a String with the word encrypted by the Columnar Transposition Cipher Rule

      */

     public static String encrpyter(String word, String keyword) {

         ColumnarTranspositionCipher.keyword = keyword;

         abecedariumBuilder(500);
"
67375,"            if temp != src:

                 for v, w in self.adjList[temp]:

                     if v == self.par[temp]:
"
25017,"            var theClone = new BitArray(Length);

             for (var i = 0; i < Length; i++)

             {

                 theClone[i] = field[i];

             }
"
13527," */

 bool putProber(const Entry& entry, int key) {

     if (entry.key == notPresent || entry.key == tomb) {
"
84953,"}
"
25082,"package DataStructures.HashMap.Hashing;

 import java.util.Scanner;

 public class MainLinearProbing {

   public static void main(String[] args) {

     int choice, key;

     HashMapLinearProbing h = new HashMapLinearProbing(7);
"
83745,"    {

         newdigit[i] = digits[i - 1];

     }

     *returnSize = digitsSize + 1;

     return newdigit;
"
91374,"        else

             dict[i] = 1

         end
"
51032,"        if (goLeft) {

           if (mid == 0 || nums[mid - 1] != key) {

             range[0] = mid;

             return;

           } else right = mid - 1;
"
25421,"		t.Error(errEncrypt)

 	}

 	decrypt, errDecrypt := Decrypt([]rune(encrypt), key1)

 	if errDecrypt != nil {
"
37253,"      end

     end

   end

   def insert(node, new_node)

     new_node.prev = node
"
61031,"  for(i in 1:(n-1)) {

     for(j in 1:(n-i)) {

       if(elements.vec[j+1] < elements.vec[j]) { 
"
69801,"# using constant space.

 # @param {Integer[]} arr1

 # @param {Integer[]} arr2

 # @param {Integer[]} arr3

 # @return {Integer[]}
"
26864,"/**

  * @file

  * @brief Sorting of array list using [bead
"
15228,"   * @param x Element to be inserted

    */

   public void insertHead(int x) {
"
11495,"    tree.add(9);

     assert !tree.find(4) : ""4 is not yet present in BST"";

     assert tree.find(2) : ""2 should be present in BST"";

     tree.remove(2);

     assert !tree.find(2) : ""2 was just deleted from BST"";

     tree.remove(1);
"
21110,"        ...

     TypeError: sequence item 0: expected str instance, int found

     """"""

     temp_grid: list[list[str]] = [[] for _ in range(key)]

     lowest = key - 1
"
24794,"            return i;

     }

     return -1;

 }

 /* ----------------------------------------------------------------------------------------
"
30979,"    else

         printf(""Element not found.\n"");

     return 0;
"
32045,"        }

         [Test]

         public void GetKeysInOrder_CorrectReturn()

         {

             var tree = new RedBlackTree<int>();
"
12307,"# Time Complexity: O(N)

 # Space Complexity: O(1)

 # @param {Integer} n

 # @return {String[]}
"
29587,"    // |   / |

     // |  /  |

     // | /   |
"
12575,"        ""Without matrix exponentiation the average execution time is "", exec_time / 100

     )

     return exec_time

 def main():

     matrix_exponentiation_time()

     simple_fibonacci_time()
"
21685," * @returns resultant vector @f$\vec{o}=\vec{a}\times\vec{b}@f$

  */

 vec_3d vector_prod(const vec_3d *a, const vec_3d *b)

 {

     vec_3d out;  // better this way to avoid copying results to input
"
17132,"  let max = list[0]

   // find min and max

   for (let iList = 0; iList < list.length; iList++) {

     if (list[iList] < min) {

       min = list[iList]
"
24096,"                if (input >= msb)

                 {

                     output.Append(""1"");

                     input -= msb;
"
11253,"    int[] res = new int[n];

     res[0] = 0;

     res[1] = chars[1] == ')' && chars[0] == '(' ? 2 : 0;

     int max = res[1];
"
18059,"}

 /**

  * @brief Self-test implementations

  * @returns void

  */
"
85688,"    void push_back(int new_elem);

     void push_front(int new_elem);

     void erase(int old_elem);

     void display();

     std::shared_ptr<link> search(int find_elem);
"
16925,"<?php

 /**

  * This function solves the problem 7 of the Project Euler.

  *

  * Problem description:

  * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
"
12325,"}

 export { volCuboid, volCube, volCone, volPyramid, volCylinder, volTriangularPrism, volPentagonalPrism, volSphere, volHemisphere }
"
32280,"void main() {

   List numbers = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10];

   int max = find_max_recursion(numbers, 0, numbers.length - 1);

   print(""max = $max"");

 }
"
30969,"import Foundation

 public struct Stack<T> {

     private var elements = [T]()

     
"
22109,"    // Calculate shortest path distance from source to all edges

     // A path can contain maximum (|V|-1) edges

     for (int i = 0; i <= V - 1; i++)

         for (int j = 0; j < E; j++) {

             int u = graph.edges[j].src;

             int v = graph.edges[j].dst;
"
19000," * 0 2

  * 1 5

  * 5 6

  * 2 4
"
83741,"  let sum = 0

   let newPrev = 0

   for (let i = romanNumber.length - 1; i >= 0; i--) {

     const c = romanNumber.charAt(i)
"
33844," * jumbled.

  *

  * @author Hassan Elseoudy
"
39025,"""""""

 from __future__ import annotations

 from PIL import Image
"
32631,"            next = Math.min(nm2, Math.min(nm3, nm5));

             ugly[i] = next;

             if(next == nm2){

                 two = two+1;
"
14205,"    return maxsum;

   }

   /**

    * Main method

    *
"
28012,"        while (v != src)

         {

             printf(""%d - "", v);

             v = visited[v];

         }
"
29598,"  // Converting decimal to octal number.

   while (dec > 0) {

     oct_val = (dec % 8).toString() + oct_val;

     dec = dec ~/ 8;

   }
"
17403,"		}

 	}

 	

 	mutating private func _merge(

 		from left: Int,
"
31076,"    }

 }
"
53553,"//

 // Created by light on 20-2-7.

 //

 #include <iostream>
"
56276,"namespace Algorithms.Tests.Math

 open Microsoft.VisualStudio.TestTools.UnitTesting

 open Algorithms.Math
"
31751,"		node := tempTable[i]

 		if node == nil {

 			continue
"
11273," * @param curve_a_coeff Coefficient of given curve (y^2 = x^3 + ax + b) % mod

  * @param p The scalar value

  * @param mod Given field

  * @returns the resultant point

  */
"
23177,"#include <array>

 #include <iostream>

 void findMinimumEdge(int INFINITY, std::array<std::array<int, 6>, 6> graph) {
"
85817,"	}

 }

 // BinaryIterative search for target within a sorted array by repeatedly dividing the array in half and comparing the midpoint with the target.

 // Unlike Binary, this function uses iterative method and not recursive.
"
23574,"        for (int[] m : moves)

             if (grid[row + m[1]][column + m[0]] == 0)

                 num++;

         return num;
"
19083,"      case '5':

       case '6':

       case '7':

       case '8':

       case '9':
"
24485,"            Assert.AreEqual(3, tree.Search(3)!.Key);

             Assert.AreEqual(4, tree.Search(4)!.Key);

             Assert.AreEqual(5, tree.Search(5)!.Key);

             Assert.AreEqual(6, tree.Search(6)!.Key);
"
33056,"    // Loop alpha from 1 to slpha_min

     for (double alpha = 1.f; alpha > alpha_min && dmin > 1e-3;

          alpha -= 0.001, iter++)

     {

         dmin = 0.f;

         // Loop for each sample pattern in the data set
"
26339,"/** Main function */

 int main(void)

 {
"
31479,"    }

   }

   /**

    * Return the relative distance (ratio of steps taken to maxStep) after which the complex number

    * constituted by this x-y-pair diverges. Members of the Mandelbrot set do not diverge so their
"
10013,"		got := []interface{}{}

 		current := list.Head

 		got = append(got, current.Val)

 		for current.Next != nil {

 			current = current.Next

 			got = append(got, current.Val)
"
27590,"      } else {

         swap(currentPermutation, stack[i], i);

       }

       output.add(List.from(currentPermutation));

       stack[i]++;
"
30676,"         ['8', '.', '.', '.', '6', '.', '.', '.', '3'],

          ['4', '.', '.', '8', '.', '3', '.', '.', '1'],

          ['7', '.', '.', '.', '2', '.', '.', '.', '6'],

          ['.', '6', '.', '.', '.', '.', '2', '8', '.'],

          ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
"
35080,"			return nil, fmt.Errorf(""\""chars\"" contains same character: %c"", ch)

 		}

 	}

 	if len(key) != size*size {
"
65472,"namespace ciphers {

 /**

  * @namespace base64_encoding

  * @brief Functions for [Base64 Encoding and

  * Decoding](https://en.wikipedia.org/wiki/Base64) implementation.
"
98922,"  @Override

   public <T extends Comparable<T>> T[] sort(T[] array) {

     int length = array.length;

     int gap = 1;
"
76942,"    69793950679652694742597709739166693763042633987085

     41052684708299085211399427365734116182760315001271

     65378607361501080857009149939512557028198746004375
"
27859,"                ;

             if (*s <= *t)

                 break;

             swap2(pj, pj - 1);
"
62889,"}

 Heap *create_heap(Heap *heap)

 {

     heap = (Heap *)malloc(sizeof(Heap));

     heap->size = 1;
"
77605,"        assert t.root.left.right.label == 4

         assert t.root.left.right.right.label == 5

         assert t.root.left.right.left is None

         assert t.root.left.left.parent == t.root.left
"
33206,"}

 function Swap (arr, x, y) {

   [arr[x], arr[y]] = [arr[y], arr[x]]

 }
"
17621,"    [0, 0, 0, 4, 0, 0, 1]

     """"""

     z_result = [0] * len(input_str)

     # initialize interval's left pointer and right pointer
"
28428,"    printf(""Maximum product: %lld\t Location: %d^th position\n\t"", max_prod,

            position);

     fseek(fp, position,

           SEEK_SET); /* move cursor to identified position in file */

     /* loop through all digits */

     for (; num_digits > 0; num_digits--)
"
81231,"    float lastError;

     float integral;

 };

 float pid_step(struct pid *controller, float dt, float error)

 {

     // Calculate p term
"
57929,"}

 // Adds the given edge to the graph

 void addEdge(struct Graph *G, int src, int dst, int weight)

 {

     G->edges[src][dst] = weight;

 }
"
22409,"    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,

      -1.9828897227476208, 0.8696284974398878]

     """"""

     w0 = tau * frequency / samplerate
"
72139,"        }

     }

 }
"
29406,"            f""the response is:\n{response.text}""

         )

 if __name__ == ""__main__"":

     # Set the slack url to the one provided by Slack when you create the webhook at

     # https://my.slack.com/services/new/incoming-webhook/
"
71883,"   * as an argument. If the size of that ArrayList is 1 or 2, the ArrayList is returned as it is, or

    * with one less point (if the initial size is 2 and one of it's points, is dominated by the other

    * one). On the other hand, if the ArrayList's size is bigger than 2, the function is called

    * again, twice, with arguments the corresponding half of the initial ArrayList each time. Once

    * the flashback has ended, the function produceFinalSkyLine gets called, in order to produce the

    * final skyline, and return it.
"
18591,"package Sorts;

 import static Sorts.SortUtils.*;

 import java.util.ArrayList;

 import java.util.Arrays;
"
22049,"  binary.chars.map { |c| c.to_i }.reduce(:+)

 end

 begin
"
21868,"    {

         printf(""Queue is empty"");

         item = -1;

     }
"
20995,"  it('expects to return the formatted phone number', () => {

     expect(formatPhoneNumber(1234567890)).toEqual('(123) 456-7890')

   })

   it('expects to throw a type error', () => {

     expect(() => { formatPhoneNumber('1234567') }).toThrow('Invalid phone number.')
"
20452,"<?php

 use PHPUnit\Framework\TestCase;

 require_once __DIR__ . '/../../vendor/autoload.php';

 require_once __DIR__ . '/../../sorting/countSort.php';
"
31672,"        # WARNING: Use it *after* calling dijkstra

         path = []

         cost = 0

         temp = dest

         # Backtracking from dest to src
"
16561,"        /// <param name=""item"">The tuple containing the event date and value.</param>

         void ICollection<(DateTime Time, TValue Value)>.Add((DateTime Time, TValue Value) item)

             => Add(item.Time, item.Value);

         /// <summary>

         ///     Check whether or not a event exists at a specific date in the timeline.

         /// </summary>
"
24249,"}

 bool swapItemCocktail(List lst, int i, bool swap_done) {

   if (lst[i] > lst[i + 1]) {

     swap(lst, i);

     swap_done = true;
"
29472,"            if (y != null && x.Key.CompareTo(y.Key) < 0)

             {

                 Cut(x, y);
"
30657,"    return summation_value

 def get_cost_derivative(index):

     """"""

     :param index: index of the parameter vector wrt to derivative is to be calculated

     :return: derivative wrt to that index

     Note: If index is -1, this means we are calculating summation wrt to biased
"
25302,"            data.put(i, temp);

             xi += h; // Increase the xi to the next point

         }

         // Apply the formula
"
62559,"}

 /**

  * @brief The volume of a
"
19843,"// Palindrome check is case sensitive; i.e. Aba is not a palindrome

 // input is a string

 const checkPalindrome = (str) => {

   // check that input is a string
"
19267,"/* this sub-function is used to assist the keyFinder to find the key */

 function caesarCipherEncodeAndDecodeEngine (inStr, numShifted) {

   const shiftNum = numShifted

   let charCode = 0
"
27463,"    return n == 1 ? 2 : n == 2 ? 1 : lucasSeries(n - 1) + lucasSeries(n - 2);

   }

   /**

    * Calculate nth number of lucas series(2, 1, 3, 4, 7, 11, 18, 29, 47, 76, 123, ....) using

    * iteration

    *
"
41940,"        if (c != null) {

           System.out.print(c.charValue());

         } else {

           Thread.yield();
"
23695,"﻿using Algorithms.Numeric.GreatestCommonDivisor;

 using NUnit.Framework;

 namespace Algorithms.Tests.Numeric.GreatestCommonDivisor
"
65768,"            {

                 var successor = GetMin(node.Right);

                 node.Key = successor.Key;

                 node = successor;

             }

             // At this point node should have at most one child
"
20312,"{

     public:

         inline void who()  // 不写inline时隐式内联

         {

             cout << ""I am Derived\n"";

         }
"
15173,"    -1 means that the cell on the highway is empty

     0 to 5 are the speed of the cars with 0 being the lowest and 5 the highest

 highway: list[int]  Where every position and speed of every car will be stored

 probability         The probability that a driver will slow down

 initial_speed       The speed of the cars a the start

 frequency           How many cells there are between two cars at the start
"
15080,"        // Add all unvisited neighbours of current vertex to queue to be printed

         // next

         while (temp)

         {
"
19908,"            return self

         if self.label == label:

             return self

         elif self.label > label:
"
35280,"/**

  * @file

  * @brief Implementation of [Reversing

  * a single linked list](https://simple.wikipedia.org/wiki/Linked_list)
"
12384,"            91411, 91423, 91433, 91453, 91457, 91459, 91463, 91493, 91499, 91513, 91529, 91541, 91571, 91573, 91577,

             91583, 91591, 91621, 91631, 91639, 91673, 91691, 91703, 91711, 91733, 91753, 91757, 91771, 91781, 91801,

             91807, 91811, 91813, 91823, 91837, 91841, 91867, 91873, 91909, 91921, 91939, 91943, 91951, 91957, 91961,

             91967, 91969, 91997, 92003, 92009, 92033, 92041, 92051, 92077, 92083, 92107, 92111, 92119, 92143, 92153,

             92173, 92177, 92179, 92189, 92203, 92219, 92221, 92227, 92233, 92237, 92243, 92251, 92269, 92297, 92311,
"
23786,"    int from_node = max(0, d_min_idx - R);

     int to_node = min(num_out, d_min_idx + R + 1);

     // step 3b: update the weights of nodes in the

     // neighborhood

 #ifdef _OPENMP
"
18346,"  }

   const occurrences = {}

   words.forEach(word => {

     occurrences[word.toLocaleLowerCase()] = occurrences[word.toLocaleLowerCase()] + 1 || 1

   })

   const max = Object.keys(occurrences).reduce((n, word) => {
"
12487,"        }

     }

     a[j / 2] = temp;
"
31546,"    size_t N = X.size();

     for (int i = 0; i < N; i++) {  // traverse each x-index

         auto result = std::min_element(std::begin(X[i]), std::end(X[i]));
"
25863,"#include <cstdio>

 #include <cstring>

 #include <iostream>

 #include <queue>

 #include <vector>

 std::vector<int> topoSortKahn(int N, const std::vector<std::vector<int> > &adj);
"
15899," * resolution but consumes more time and memory)

  * @param num_rot the number of rotations to perform (can be fractional value)

  */

 void spirograph(double *x, double *y, double l, double k, size_t N, double rot)
"
81727,"        // (2 x 2) = 4; ((2 x 2) + 1) = 5 ...

         if (verbose) {

             System.out.println(String.format(""From %02d and %02d, %s chooses %02d"", score1, score2,
"
22795,"Given ""listen"" and a list of candidates like ""enlists"" ""google"" ""inlets"" ""banana"" the program should return a list containing ""inlets"".

 Inspired by the [Extreme Startup game](https://github.com/rchatley/extreme_startup)

 """"""

 function detect_anagrams(subject, candidates)
"
30338,"    graphChars.addEdge('c', 'd');

     graphChars.addEdge('d', 'a');

     graphChars.addEdge('x', 'y');

     graphChars.addEdge('x', 'z');

     graphChars.addEdge('w', 'w');
"
88857,"            _ = testObj.AddLast(""O"");

             // Act

             var items = testObj.GetListData();

             // Assert

             Assert.AreEqual(5, items.Count());

             Assert.AreEqual(""O"", testObj.GetElementByIndex(4));
"
54097,"        rear->next = temp;

         rear = temp;

     }
"
17737,"    return minVal(node.left)

   }

   // returns the constructor

   return Node

 }())

 // class Tree
"
55130,"      @head.prev = nil

     elsif node == @tail

       @tail = tail.prev

       @tail.next = nil

     else
"
23827,"        print(order, clothes[current_clothing])

         order += 1

 def depth_first_search(u, visited, graph):

     visited[u] = 1
"
20370,"            Assert.IsTrue(testObj1 != testObj3);

         }

         [Test]

         public static void ArraysOfDifferentLengthsAreNotEqual()

         {
"
22114," * @param root head/root node of a tree

  * @return result that is containing the postorder traversal of a tree

  */

 std::vector<int64_t> BinaryTree::postOrderIterative(Node *root) {
"
54895,"         

         for i = 1:n

             fact = fact * i
"
25921,"/** \namespace merge_insertion

  * \brief Combined Intersion-Merge sorting algorithm

  */

 namespace merge_insertion {

 /**

  * @brief Insertion merge algorithm
"
19512," * Solution :

  * Angle in Degree = ( pi / 2 ) x ( 180 / pi ) = 90

  *

  * So, pi / 2 radian is equal to 90 degree

  */

 /**
"
29245,"    0.0009765625

     >>> convert_binary_prefix(1, Binary_Unit.kilo, Binary_Unit.kilo)

     1

     >>> convert_binary_prefix(1, 'giga', 'mega')
"
81923,"            const int value = -1;

             var list = new SortedList<int>();

             foreach (var i in values)
"
26499,"				}

 	    		}

 			n--;

 		}

 		else{

 			std::vector<std::vector<uint64_t>> res1(2, std::vector<uint64_t>(2,0));
"
32324,"                cpy->next = new_node;

             }

         }

         return list;

     }
"
53037,"		name string

 		text string

 		want string

 	}{

 		{

 			name: ""correct encryption"", text: ""HogeFugaPiyoSpam"", want: ""OGGFOOHFOHFHOOHHEHOEFFGFEEEHHHGG"",
"
82604,"deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]

 git-tree-sha1 = ""c333716e46366857753e273ce6a69ee0945a6db9""

 uuid = ""7add5ba3-2f88-524e-9cd5-f83b8a55f7b8""

 version = ""1.42.0+0""
"
25537,"  }

   // this function reorders the heap after every delete function

   sink () {

     let k = 1

     while (2 * k <= this.size || 2 * k + 1 <= this.size) {

       let minIndex
"
63349,"#

 # Example 2:

 # Input: s = ""aeiou""
"
17774,"""""""

 This script demonstrates the implementation of the Sigmoid function.

 The function takes a vector of K real numbers as input and then 1 / (1 + exp(-x)).
"
14717,"  expect(res).toBe(true)

 })

 test('Check if 1025 is a power of 2 or not:', () => {

   const res = IsPowerOfTwo(1025)

   expect(res).toBe(false)

 })
"
72712,"        {

             // Arrange

             var q = new ListBasedQueue<int>();

             q.Enqueue(1);

             q.Enqueue(2);
"
27121,"    for (int i = 1; i <= n; i++) {

         eggFloor[i][1] = 1;  // n eggs..1 Floor

         eggFloor[i][0] = 0;  // n eggs..0 Floor

     }
"
17247,"    private func buttonIDtoPosition(id: String) -> Position {

         switch id {

         case ""1"":
"
10346,"    this.rank = 0

   }

 }

 class DisjointSetTree {

   // Disjoint Set DataStructure
"
14000,"        for (int i = 1; i < table.length; i++) {

             for (int j = 0; j < table[i].length; j++) {

                 if (charElement < wordInChards.length) {
"
58844,"    + ""\t\t -- Data integrity: ""

     + str(ack)

 )

 print(""\n --Force error--"")
"
45936,"    [TestFixture]

     public class SegmentTreeUpdateTests

     {

         [SetUp]
"
88798,"        }

     }

     return $absoluteMax;

 }
"
27531,"    int src = 0, dest = 5;

     if (findPathDFS(g, V, src, dest))

     {

         Vertex v = dest;

         while (v != src)
"
24195,"            this.translator = translator;

         }

         /// <summary>

         ///     Given an input string, returns a new compressed string

         ///     using Shannon-Fano encoding.
"
24053,"      nextSetIndex,

       nextSum,

       targetSum
"
23864,"   * Can be subtracted from ElapsedTime to offset timing of initialization code.

    */

   const initOffset = timer.getRunTime()

   // ... A test ...

   // The time taken to run the test.
"
31456,"    public static class Helper

     {

         public static int[] GetSortedArray(int length) =>

             Enumerable.Range(0, length)
"
50327,"  }

   return answer;

 }
"
14204,"        .map(bitstring => parseInt(bitstring, 2))

         .reduce((acc, curr) => acc ^ curr, 0) >>> 0

       const CH = ((e & f) ^ (~e & g)) >>> 0

       const temp1 = (h + S1 + CH + K[i] + parseInt(words[i], 2)) >>> 0

       const S0 = [2, 13, 22]

         .map(turns => rotateRight(pad(a.toString(2), 32), turns))
"
17647,"               ? 1

                : 0; /* optimized modulo operation */

 }

 /**
"
79627,"    // initialize the adjacent list with a

     // null array

     this.AdjList.set(v, [])
"
59195,"        /// <param name=""bitmap"">The bitmap to which the algorithm is applied.</param>

         /// <param name=""location"">The start location on the bitmap.</param>

         /// <param name=""targetColor"">The old color to be replaced.</param>
"
32363,"        /// <returns>Tuple containing char and number of times it appeared in a row.</returns>

         public static Tuple<char, int> FindLongestConsecutiveCharacters(string input)

         {

             var maxChar = input[0];

             var max = 1;

             var current = 1;
"
13193,"//

 // Created by light on 20-1-11.

 //
"
24725,"         * It can take only 3 values: ""not_visited"", ""in_stack"", and ""visited"".

          *

          * Initially, all nodes are in ""not_visited"" state.

          */

         std::vector<nodeStates> state(vertices, not_visited);

         // Start visiting each node.
"
26243,"void test3() {

     // define the function to maximize as a lambda function

     // since we are maximixing, we negated the function return value
"
29993,"# The Fibonacci numbers, commonly denoted F(n) form a sequence,

 # called the Fibonacci sequence, such that # each number is the sum

 # of the two preceding ones, starting from 0 and 1. That is,

 #

 # F(0) = 0, F(1) = 1
"
73628,"  }

   /** Prints the path from the source to every vertex (output order is not guaranteed) */

   public void printAllPaths() {

     for (Vertex v : graph.values()) {
"
30488,"[[JpegTurbo_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]

 git-tree-sha1 = ""d735490ac75c5cb9f1b00d8b5509c11984dc6943""

 uuid = ""aacddb02-875f-59d6-b918-886e6ef4fbf8""
"
25517,"/**

  * @brief Compute next step approximation using the midpoint-Euler

  * method.

  * @f[y_{n+1} = y_n + dx\, f\left(x_n+\frac{1}{2}dx,
"
12005,"    ~B() {}

 };

 int main() {

     std::cout << magic::number << std::endl;
"
10945,"    six->data = 6;

     six->next = NULL;

     // Last node of second input linked list

     seven->data = 7;

     seven->next = NULL;

     // Last node of first input linked list
"
30993,"    rectangle() { cout << ""rectangle"" << endl; }

     void print() {

         cout << ""I am rectangle"" << endl;

     }

 };
"
10469,"        raise ValueError(""math domain error"")

     value = get_initial_point(a)

     for i in range(max_iter):

         prev_value = value

         value = value - fx(value, a) / fx_derivative(value)
"
14492,"test('should convert degree to radian:', () => {

   const radianEqual = degreeToRadian(90)

   expect(radianEqual).toBe(Math.PI / 2)

 })
"
58570,"class private_foo;

 class foo {

 public:
"
15687,"int maxNumberOfBalloons(char *text)

 {

     /*
"
33371,"  res = 0

   temp = 0

   s.chars.each_with_index do |el, i|

     # subtractive case: if at least 2 symbols remaining AND value of s[i] < value of s[i + 1]

     if ROM_NUMS[s[i + 1]] && ROM_NUMS[el] < ROM_NUMS[s[i + 1]]
"
29223,"    'Python Love I'

     """"""

     return "" "".join(input_str.split()[::-1])

 if __name__ == ""__main__"":

     import doctest

     doctest.testmod()
"
32928,"deps = [""Random"", ""SHA""]

 uuid = ""cf7118a7-6976-5b1a-9a39-7adc72f591a4""

 [[UnPack]]

 git-tree-sha1 = ""387c1f73762231e86e0c9c5443ce3b4a0a9a0c2b""

 uuid = ""3a884ed6-31ef-47d7-9d2a-63182c4928ed""
"
32509,"        [Test]

         public static void NoMatchFound_PassExpected()

         {

             // Arrange
"
29590,"    else:

         return fibonacci(k - 1) + fibonacci(k - 2)

 def fibonacci_search(arr: list, val: int) -> int:

     """"""A pure Python implementation of a fibonacci search algorithm.
"
80965,"                }

             }

             var passTwoResult = passOneResult[^1];
"
18018,"      adjacencyMatrix[start][end] = 1;

     }

     in.close();
"
13085,"    }

     int sum = 0;

     while (num > 0) {
"
30262," * @f[\lVert\vec{a}\rVert = \sqrt{\vec{a}\cdot\vec{a}} @f]

  * @param[in] a input vector

  * @returns norm of the given vector

  */

 float vector_norm(const vec_3d *a)

 {
"
32929,"// 类模板

 template<class T>

 class comp {
"
28495,"    n → 3n + 1 (n is odd)

 Using the rule above and starting with 13, we generate the following sequence:

     13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1

 It can be seen that this sequence (starting at 13 and finishing at 1) contains

 10 terms. Although it has not been proved yet (Collatz Problem), it is thought
"
13925,"    // Change freq[i] so that it contains the actual position of the digit in

     // output[]

     for (i = 1; i < range; i++) freq[i] += freq[i - 1];

     // Build the output array

     for (i = n - 1; i >= 0; i--)
"
19166,"# => 17
"
28910,"func TestTopological(t *testing.T) {

 	for _, tc := range testCases {

 		t.Run(tc.name, func(t *testing.T) {

 			actual := Topological(tc.N, tc.constraints)
"
10568,"  if (up) return up

   // up didn't work: attempt to move left

   const left = getPathPart(grid, x - 1, y, solution, path + 'L')
"
12005,"    """"""

     # Base Case

     if counter == 0 or capacity == 0:

         return 0

     # If weight of the nth item is more than Knapsack of capacity,
"
10084,"""""""Topological Sort.""""""

 #     a

 #    / \
"
17125," * @brief Function to test a simple search before and after deleting

  * an entry. And to test out the multiple variants of search.

  */

 static void test() {

     auto root = new operations_on_datastructures::trie_operations::Tnode();

     std::vector<std::string> inputs = {
"
39505,"    struct Graph *graph = createGraph(V, E);

     // add edge 0-1

     graph->edge[0].src = 0;
"
25544,"        std::cout << ""Usage ./binomial_calculate {n} {k}"" << std::endl;

         return 0;

     }

     int32_t n = atoi(argv[1]);

     int32_t k = atoi(argv[2]);
"
14967,"    public Node(int d) {

       this.data = d;

       next = null;

     }
"
19114,"after raining.

 VIEW ELEVATION MAP ON LEETCODE

 Example:

 Input:            [0,1,0,2,1,0,1,3,2,1,2,1]
"
32065,"    }

     /**

      * Server Address Information

      *
"
68070," *

  */

 std::vector<size_t> dfs(const std::vector<std::vector<size_t> > &graph, size_t start) {

     /// checked[i] stores the status of each node

     std::vector<size_t> checked(graph.size(), WHITE), traversed_path;
"
98104,"class StringTest extends TestCase

 {

     public function testIsPalindrome()

     {
"
75771,"    public: virtual ~B(){}

 };

 //D为多态类型

 class D: public A{

 };

 //E为非多态类型
"
10386,"// ]

 // matrixMult(firstMatrix, secondMatrix) // [ [ 19, 22 ], [ 43, 50 ] ]

 // const thirdMatrix = [

 //   [-1, 4, 1],

 //   [7, -6, 2]
"
23525,"        /// <summary>

         ///     Reduces the number of right-horizontal links.

         ///     Accomplishes this by performing a left rotation, and incrementing level.

         /// </summary>

         /// <param name=""node"">The node to rebalance from.</param>
"
17121," * Check if given number is strong number or not

  * @param number

  * @return `true` if given number is strong number, otherwise `false`

  */
"
20659,"            # Modify final values

             self.hashes = [

                 ((element + mutated_hash_values[index]) % 0x100000000)

                 for index, element in enumerate(self.hashes)

             ]

         self.hash = """".join([hex(value)[2:].zfill(8) for value in self.hashes])
"
17220,"#ifdef USE_GLUT

 #ifdef __APPLE__

 #include <GLUT/glut.h>  // include path on Macs is different

 #else

 #include <GL/glut.h>

 #endif  // __APPLE__
"
12520,"            {

                 if (node.Left is null)

                 {

                     var newNode = new AvlTreeNode<TKey>(key);

                     node.Left = newNode;

                 }
"
21489,"	fmt.Printf(""Encrypt=> key: %d, seed: %s, encryptedText: %v\n"", key, seed, encrypted)

 	decrypted := Decrypt(byte(key), encrypted)

 	fmt.Printf(""Decrypt=> key: %d, encryptedText: %v, DecryptedText: %s\n"", key, encrypted, string(decrypted))

 	// Output:

 	// Encrypt=> key: 97, seed: Hello World, encryptedText: [41 4 13 13 14 65 54 14 19 13 5]

 	// Decrypt=> key: 97, encryptedText: [41 4 13 13 14 65 54 14 19 13 5], DecryptedText: Hello World
"
25992,"   * Inserts an element at the rear of the queue

    *

    * @param x element to be added

    */
"
17204,"        {

             if (node.IsHeadChild)

             {

                 var parent = node.Previous;

                 if (node.Next != null)
"
54820,"        }

         return next;

     }
"
16373,"  int i = 1;

   int j = 0;

   while (i < subString.length) {
"
15452,"} 

 // comparator class helps to compare the node 

 // on the basis of one of its attribute. 
"
11038,"    5603

     >>> solution(10)

     41

     >>> solution(5)
"
23428,"}

 export { getMonthDays }
"
17853,"            {

                 var wasChanged = false;

                 for (var j = 0; j < array.Length - i - 1; j++)
"
10996,"    int[] wt = {1, 3, 4, 5};

     int[] value = {1, 4, 5, 7};

     int W = 10;
"
31239,"  public static void main(String[] args) {

     TreeSort treeSort = new TreeSort();

     // ==== Integer Array =======

     System.out.println(""Testing for Integer Array...."");
"
28541,"            cout << ""\nInsert : "";

             cin >> x;

             Enque(x);

         } else if (ch == 2) {

             Deque();
"
14425,"///////////////////////////////////////////////////////////

 struct node *createnode()  // function to create node

 {

     struct node *t;
"
10366,"import 'dart:math' show Random;

 void main() {

   final seed = 100, rnd = Random(), length = 100;
"
75758,"function testDepthFirst (fillLocation, targetColor, replacementColor, testLocation) {// eslint-disable-line

   const rgbData = generateTestRgbData()

   depthFirstSearch(rgbData, fillLocation, targetColor, replacementColor)

   return rgbData[testLocation[0]][testLocation[1]]

 }

 /**
"
31745,"        // already present at correct pos

         if (vis[i] || arrPos[i].second == i)

             continue;

         // find out the number of node in

         // this cycle and add in ans
"
21998,"/**

  * \file

  * \brief [Gaussian elimination

  * method](https://en.wikipedia.org/wiki/Gaussian_elimination)

  */
"
21490,"    for (i = 0; i < vertices; i++)

     {

         graph->adjLists[i] = NULL;

         graph->visited[i] = 0;

     }
"
31006,"}
"
15488,"        }

         /// <summary>

         ///     Calculates the next y-value based on the current value of x, y and the stepSize.

         /// </summary>

         /// <param name=""xCurrent"">Current x-value.</param>

         /// <param name=""stepSize"">Step-size on the x-axis.</param>
"
18376,"                             {

                                  1,  2, 2, 3,  2,  4,  2,  4,  3, 4, 2,  6, 2,

                                  4,  4, 5, 2,  6,  2,  6,  4,  4, 2, 8,  3, 4,

                                  4,  6, 2, 8,  2,  6,  4,  4,  4, 9, 2,  4, 4,

                                  8,  2, 8, 2,  6,  6,  4,  2, 10, 3, 6,  4, 6,
"
92302,"        res[i] = prod % 10;

         // Put rest in carry

         carry = prod / 10;

     }
"
92932,"   *

    * @param unsorted - a list should be sorted

    * @return a sorted list

    */

   @SuppressWarnings(""unchecked"")

   default <T extends Comparable<T>> List<T> sort(List<T> unsorted) {
"
24026,"package Others;

 import java.util.Scanner;

 public class ReturnSubsequence {

   public static void main(String[] args) {

     System.out.println(""Enter String: "");
"
42633,"    {

         List *cpy = list, *tmp = cpy;

         int flag = 1, index = 1, size = 0;

         while (tmp != NULL)

         {

             size++;
"
12334,"   * @param right The last index of an array

    * @return the partition index of the array

    */

   private static <T extends Comparable<T>> int randomPartition(T[] array, int left, int right) {
"
15481,"public class BipartiteGrapfDFS {

     private static boolean bipartite(int V, ArrayList<ArrayList<Integer>>adj, int[] color, int node){

         if(color[node] == -1){
"
27860,"    print(f""{solution() = }"")
"
25538,"        int[] mArr = new int[num / 5 + offset];

         for (int i = 0;i < mArr.length;i++) {

             mArr[i] = getMedian(arr, begin + i * 5, Math.min(end, begin + i * 5 + 4));

         }

         return bfprt(mArr, 0, mArr.length - 1, mArr.length / 2);
"
18300,"package math

 import (

 	""math""

 	""testing""
"
32424,"                //           /    |      |    \

                 //          /     |      |     \

                 //         /      |      |      \

                 //        /       |      |       \
"
21421,"            /**

              * This function returns the geometric orientation for the three points

              * in a space, ie, whether they are linear ir clockwise or

              * anti-clockwise

              * @param p first point selected
"
22678,"package Maths;

 import java.util.Arrays;

 import java.util.Random;

 public class FindMin {
"
60240,"""""""

     pearson_correlation(x, y)

 Find the pearson correlation between two variables.

 # Example:
"
30610,"    int mid = start + (end - start) / 2;

     // middle element will be the root

     Node root = new Node(array[mid]);
"
16847,"        if sources is int:

             sources = [sources]

         if sinks is int:

             sinks = [sinks]
"
20747,"		}

 		if !reflect.DeepEqual(got, wantNext) {

 			t.Errorf(""got: %v, want: %v"", got, wantNext)

 		}

 		// check from Prev address
"
86378," * The ODE being solved is:

  * \f{eqnarray*}{

  * \dot{u} &=& v\\

  * \dot{v} &=& -\omega^2 u\\

  * \omega &=& 1\\
"
28980,"    /// length as the pattern

     /// calculating the hash of the text within the window compare it with the hash

     /// of the pattern. Only testing equality if the hashes match

     /// </remarks>

     /// <param name=""pattern""></param>

     /// <param name=""text""></param>
"
48438,"/**

  * Definition for singly-linked list.

  * struct ListNode {

  *     int val;

  *     struct ListNode *next;
"
31079,"            if grid[pos_y][pos_x] != 0:

                 continue

             successors.append(

                 Node(

                     pos_x,

                     pos_y,
"
28700," * @returns void

  */

 static void test() {

     // the complete string
"
20028,"   */

   getRunTime () {

     return this.timer

   }

 }
"
78674,"            pc--;

         }

         if (pb > pc)

             break;
"
12821,"namespace Algorithms.Tests.Knapsack

 {

     public static class DynamicProgrammingKnapsackSolverTests

     {
"
18742," * number or not.

  *

  * @param Integer $number An integer input

  * @return boolean whether the number is prime or not
"
35901,"                HeapifyDown(right);

             }

         }
"
16384,"        self.bias = self.bias - self.learn_rate * self.gradient_bias.T

         # updates the weights and bias according to learning rate (0.3 if undefined)

         return self.gradient

 class BPNN:

     """"""
"
16733,"/**

  * @brief Function runs the dijkstra algorithm for some source vertex and

  * target vertex in the graph and returns the shortest distance of target

  * from the source.

  *

  * @param adj input graph
"
31040,"  public static void main(String[] args) {

     // Just generate data

     Random r = ThreadLocalRandom.current();
"
18198,"  }

   // find minimum value in the tree

   const minVal = function (node) {

     if (!node.left) {
"
10219,"     * htonl - The htonl() function translates a long integer from host byte

      * order to network byte order

      *

      * These functions are necessary so that the binding of address and port
"
11094,"      this.coordinates = coordinates;

       this.height = height;

     }

   }

   public class Building {
"
25748,"   * @brief A constructor which takes in the array specified by the user.

    * @param array : Array given by the user.

    */

   public TimSort(int[] array) {

     this.array = array;
"
19272,"    int b=-10;  // b, cΪֲж̬ڡ

     int c=0;

     void other(void);

     cout<<""---MAIN---\n"";

     cout<<"" i: ""<<i<<"" a: ""<<a<<"" b: ""<<b<<"" c: ""<<c<<endl;//1 0 -10 0

     c=c+8;  other();// 33 4 0 15
"
23045,}
27543,"            var keys = tree.GetKeysInOrder();

             var expected = new List<int> { 2, 3, 4, 5, 6, 7, 8 };

             Assert.IsTrue(keys.SequenceEqual(expected));

         }

         [Test]
"
26831,"  if (is_negative) {

     return ""-"" + hex_val;

   }

   return hex_val;

 }

 // driver function
"
27792,"    }

     CocktailSelectionSort(vec, low + 1, high - 1);

 }

 // main function, select any one of iterative or recursive version

 int main() {

     int n;
"
15919,"          return remove(iter) if cnt == index

           iter = iter.next

           cnt += 1

         end

       else

         iter = @tail
"
28643,"import { checkVowels } from '../CheckVowels'

 describe('Test the checkVowels function', () => {

   it('expect throws on use wrong param', () => {

     expect(() => checkVowels(0)).toThrow()
"
54725,"                case 1: return Color.FromArgb(255, q, v, p);

                 case 2: return Color.FromArgb(255, p, v, t);

                 case 3: return Color.FromArgb(255, p, q, v);
"
10935,"                child->left = grandParent;

                 grandParent->par = child;

                 // Attach to the existing tree

                 child->par = greatGrandParent;

                 if (greatGrandParent != NULL)
"
18128,"                if (current.Data is null && data is null || current.Data is not null && current.Data.Equals(data))

                 {

                     return current;

                 }

                 current = current.Next;
"
28821,"  const PIVOT = items[0]

   const GREATER = []

   const LESSER = []

   for (let i = 1; i < length; i++) {
"
35380,"    // 因为Base有虚析构函数（virtual ~Base() {}），所以 delete 时，会先调用派生类（Derived）析构函数，再调用基类（Base）析构函数，防止内存泄漏。

     delete ptr;

     return 0;
"
26682,"    n, e = key

     for block in get_blocks_from_text(message, blockSize):

         encrypted_blocks.append(pow(block, e, n))

     return encrypted_blocks

 def decrypt_message(

     encrypted_blocks: list[int],
"
50451,"    ValueError: solution() only accepts values from 0 to 100

     """"""

     if not 0 < percent < 100:

         raise ValueError(""solution() only accepts values from 0 to 100"")

     bouncy_num = 0
"
57863,"        }

         return mergeCellsIntoBlock(outputCells);

     }

     /**

      * Encrypts the plaintext with the key and returns the result
"
19226,"		}

 	}

 	else
"
62077,"    int Player1[10][10];

     int Player2[10][10];

     int plays = 1;
"
21118,"namespace Algorithms.Tests.Encoders

 {

     public static class CaesarEncoderTests
"
25650,"# Space complexity: O(1).

 #

 def is_anagram(s, t)
"
24078,"            temp = array(i)

             array(i) = array(j)

             array(j) = temp

           }
"
31265,"                    // if element is head just take the next one as head

                     if (currentElement.Equals(Head))

                     {

                         Head = Head.Next;
"
33951,"    while (true) {

         /// direct search

         // If pq[0].size() is equal to zero then the node/ vertex is not

         // reachable from s
"
33667,"                        queue.Enqueue(i);

                         yield return i;

                     }

                 }
"
25768,"}

 // export SHA1 function

 export { SHA1 }
"
20075,"#           backtrack called with ()()( 3 2 [""((()))"", ""(()())"", ""(())()"", ""()(())""]

 #             backtrack called with ()()() 3 3 [""((()))"", ""(()())"", ""(())()"", ""()(())""]

 #           backtrack return with ()()( 3 2 [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""]

 #         backtrack return with ()() 2 2 [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""]

 #       backtrack return with ()( 2 1 [""((()))"", ""(()())"", ""(())()"", ""()(())"", ""()()()""]
"
11900,"    A: ['B', 'D'],

     B: ['E'],

     C: ['D'],
"
16380,"      if (dp[n][i]) {

         index[p++] = i;

       }

     }

     return getMin(index, sum);

   }
"
14075,"    std::cout << ""Students the highest GPA are: "" << std::endl;

     while (!stk.isEmptyStack()) {

         std::cout << stk.top() << std::endl;

         stk.pop();
"
32697,"        }

         /// <summary>

         ///     Clears the Queue.

         /// </summary>
"
17744,"bool is_happy(T n) {

     T s = 0;              // stores sum of digits

     while (n > 9) {       // while number is > 9, there are more than 1 digit

         while (n != 0) {  // get digit

             T d = n % 10;

             s += d;
"
28501,"import { Polynomial } from '../Polynomial'

 describe('Polynomial', () => {

   it('should not return a expression for zero', () => {

     const polynomial = new Polynomial([0])

     expect(polynomial.display()).toBe('')

   })
"
12264,"			nonNegatives = append(nonNegatives, item)

 		}

 	}

 	negatives = unsignedRadixSort(negatives)

 	// Reverse the negative array and restore signs

 	for i, j := 0, len(negatives)-1; i <= j; i, j = i+1, j-1 {
"
95609,"        free(p);

     }

 }

 ///////////////////////////////////////////////////////

 void viewlist()  // function to display values

 {
"
61036,"    F: ['G'],

     G: []

   }

   /*

         A <-> B
"
11842,"    for (int i = 0; i < node.child.size(); i++) preorder(node.child.get(i));

   }

   /** Function to print generic tree in post-order */

   public void postordercall() {

     postorder(root);

     System.out.println(""."");
"
27161,"     * the purpose of compression is achieved. And the decoded PCM is almost the

      * same as the original input PCM, which verifies the correctness of the

      * decoding. The reason why it is not exactly the same is that there is

      * precision loss during encode / decode.  */

     return 0;
"
15638," * Example - Here is graph with 3 connected components

  *

  *      1   4           5               8

  *     / \ /           / \             / \

  *    2---3           6   7           9   10
"
12107,"void morrisInorder(Btree *root) {

     Btree *curr = root;

     Btree *temp;

     while (curr) {

         if (curr->left == NULL) {
"
11035,"        if (n->left != NULL)

             queue.push_back(n->left);

         if (n->right != NULL)

             queue.push_back(n->right);

     }

 }
"
20041,"    this.connections[node1].add(node2)

     this.connections[node2].add(node1)

   }
"
10104,"#include <stdio.h>

 #include <stdlib.h>

 // A vertex of the graph

 struct node

 {

     int vertex;
"
69248,"void printPathsRecur(TrieNode *node, char prefix[], int filledLen)

 {

     if (node == NULL)
"
18404,"  def get(index)

     return -1 if @head.nil?

     return -1 if index > @size - 1

     if index < @size - index
"
64536," * The exact solution for the above problem is:

  * \f{eqnarray*}{

  * u(x) &=& \cos(x)\\

  * v(x) &=& -\sin(x)\\

  * \f}

  * The computation results are stored to a text file `semi_implicit_euler.csv`
"
23937,"  /**

    * @brief A method to change the size of the run.

    * @param run : Value specified by the user to change the run.
"
15209,"        self.data = data

         self.next = None

 class LinkedList:
"
40127,"package math

 import (

 	""testing""

 )

 func getTestsForPhi() []struct {

 	n        int64
"
14304,"              point1 = firstWindow[i];

               point2 = firstWindow[j];

             }

           }

         } else {

           break;
"
32277,"            {

                 throw new InvalidOperationException(""Heap is empty!"");

             }
"
37565,"    }

 }
"
31082,"    Returns the model if the formula is satisfiable, else None

     This has the following steps:

     1. If every clause in clauses is True, return True.

     2. If some clause in clauses is False, return False.

     3. Find pure symbols.

     4. Find unit symbols.
"
27406,"  test(('preOrder traversal'), () {

     result = List();

     root = null;

     expect(preOrder(root, result), equals([]));

   });

 }
"
30029,"#include <iostream>

 using namespace std;

 class Time{

 private:

     int hh,mm,ss;
"
30920,"//Eg10-12.cpp

 #include<iostream>

 using namespace std;

 class BasicException{
"
16993,"    System.out.println(

         format(

             ""Should be found: %d. Found %d at index %d. An array length %d"",

             shouldBeFound, integers[atIndex], atIndex, size));
"
24615,"""""""

 Get CO2 emission data from the UK CarbonIntensity API

 """"""
"
23060,"  })

   it('should work for a more complex maze that can not be solved', () => {

     const maze = new RatInAMaze([

       [1, 1, 1, 1, 1, 0, 1],

       [0, 0, 0, 0, 1, 0, 1],

       [1, 1, 1, 0, 1, 0, 1],
"
35220,"           [ 0.-1.j,  0.+0.j,  0.+1.j],

            [ 1.-1.j,  1.+0.j,  1.+1.j]])

     """"""
"
28980,"}
"
17585,"      return value;

     }

     return null;

   }

   void push(T item) {

     this._head = new Node.before(this._head, item);
"
17836," * @brief Dynamic Programming algorithms

  */

 namespace dynamic_programming {

 /**
"
20742,"    oct_string = remainder.toString() + oct_string;

   }

   return negative ? ""-"" + oct_string : oct_string;
"
16130,"		for i := 1; i < N-l+1; i++ {

 			j := i + l - 1

 			dp[i][j] = 1 << 31
"
31646,"			res = res * n

 		}

 		power = power >> 1

 		n *= n

 	}

 	return res
"
26758,"      System.out.println(""String 1: "" + str1);

       System.out.println(""String 2: "" + str2);

       System.out.println(""LCS: "" + lcs);
"
26196,"  Tree.prototype.traverse = function () {

     if (!this.root) {

       // No nodes are there in the tree till now

       return

     }
"
69529,"}
"
17691,"// Kmp Function kmp performing the Knuth-Morris-Pratt algorithm.

 // Prints whether the word/pattern was found and on what position in the text or not.

 // m - current match in text, i - current character in w, c - amount of comparisons.

 func Kmp(text string, word string) Result {
"
32545,"    Returns a triplet in the array with sum equal to target,

     else (0, 0, 0).

     >>> triplet_sum1([13, 29, 7, 23, 5], 35)

     (5, 7, 23)

     >>> triplet_sum1([37, 9, 19, 50, 44], 65)

     (9, 19, 37)
"
26526,"{

     if (size == 1)

     {

         return;

     }
"
97662," */

 int maxval(int a, int b)

 {
"
18717,"typedef struct max_heap

 {

     int *p;
"
67093,"    145 => 1! + 4! + 5! = 1  + 24 + 120 = 145

 */

 // factorial utility method.
"
91702," * in half. Begin with an interval covering the whole array. If the value of the

  * search key is less than the item in the middle of the interval, narrow the interval

  * to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the
"
33729," * \author [Benjamin Walton](https://github.com/bwalton24)

  * \author [Shiqi Sheng](https://github.com/shiqisheng00)

  */
"
12312,"[<TestClass>]

 type SwapCaseTests () =

     [<TestMethod>]
"
72123," * @author [Harsh Karande](https://github.com/harshcut)

  */

 // include header files

 #include <stdio.h>  /// for printf() and scanf()

 /**

  * @brief a globally declared structure with an array and an variable that
"
10022,"      sb.append(""Vertex: "");

       sb.append(v.data);

       sb.append(""\n"");

       sb.append(""Adjacent verticies: "");

       for (Vertex v2 : v.adjacentVerticies) {
"
12431,"    minheap.insert(-100);

     expect(minheap.peek(), equals(-100));

     minheap.insert(-100);

     expect(minheap.remove(), equals(-100));
"
22823,"        CSort.sort(arr);

         for (int i = 0; i < arr.length - 1; ++i) {

         assert arr[i] <= arr[i + 1];

         }

         String[] stringArray = {""c"", ""a"", ""e"", ""b"", ""d""};
"
19721,"		})

 		stackPush(2)

 		stackPush(83)

 		t.Run(""Stack Peak"", func(t *testing.T) {
"
56550,"      case '0':

       case '1':

       case '2':
"
21612,"			}

 		})

 	}
"
18885,"    end = clock();

     time_spent = (double)(end - start) / CLOCKS_PER_SEC;

     printf(""Data Sorted\n"");

     show_data(array, size);

     printf(""%s\n"", notation);

     printf(""Time spent sorting: %.4g ms\n"", time_spent * 1e3);
"
29936,"      canvas.drawRect(590 - Stack3.get(i - 1) * 10, 670 - i * 12, Stack3.get(i - 1) * 20, 10);

       canvas.setColor(new Color(64, 26, 0)); // Brown Wolfers

       canvas.fillRect(590 - Stack3.get(i - 1) * 10, 670 - i * 12, Stack3.get(i - 1) * 20, 10);

     }
"
24005,"	 	final = final + jump

 		if( final > n -1)

 		   final = n

 		end
"
22764,"		}

 	}

 	return true
"
28351,"        print(f""The total weight of the minimal spanning tree is: {mst_weight}"")

 def test_vector() -> None:

     """"""

     >>> g = Graph(8)

     >>> for u_v_w in ((0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4),
"
18850,"        return minEval

     }

 }

 public func evaluateGameState(board: Board, player: Player, opponent: Player) -> GameStateValue? {

     if board.check(player: player) == BoardStatus.win {
"
27201,"The four adjacent digits in the 1000-digit number that have the greatest

 product are 9 × 9 × 8 × 9 = 5832.

     73167176531330624919225119674426574742355349194934
"
22041,"#endif

     return ret;

 }

 /**

  * Is the given number an abundant number (1) or not (0)

  */
"
31356,"      return ternarySearchRecursive(arr, key, low, mid1 - 1)

     } else if (key > arr[mid2]) {

       // the key lies in between mid2 and high
"
16692,"using namespace std;

 void run(int count) {

     while (count-- > 0) {

         cout << count << endl;

     }

     std::this_thread::sleep_for(chrono::seconds(3));
"
26092,"/* The selection sort algorithm sorts an array by repeatedly finding the minimum element

  *(considering ascending order) from unsorted part and putting it at the beginning. The

  *algorithm maintains two subarrays in a given array.

  *1) The subarray which is already sorted.
"
18279,"        public DateTime[] GetTimesBefore(DateTime time)

             => GetAllTimes()

                 .Where(t => t < time)

                 .OrderBy(t => t)

                 .ToArray();

         /// <summary>
"
12877,"  // Output: phi(n): count of numbers b/w 1 and n that are coprime to n

   int res = n;

   for (int i = 2; i * i <= n; i++) {

     if (n % i == 0) {
"
28195,"deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]

 git-tree-sha1 = ""7f3efec06033682db852f8b3bc3c1d2b0a0ab066""

 uuid = ""38a345b3-de98-5d2b-a5d3-14cd9215e700""

 version = ""2.36.0+0""
"
15291,"export function shellSort (items) {

   let interval = 1

   while (interval < items.length / 3) {

     interval = interval * 3 + 1

   }
"
26645,"    FILE *fp = fopen(fname, ""wt"");

     if (!fp)

     {

         perror(fname);

         exit(EXIT_FAILURE);
"
28375," * These implementations support multiple return types.

  *

  * @author [Focusucof](https://github.com/Focusucof)

  */

 #include <cassert>   /// for assert

 #include <cmath>     /// for std::pow
"
13793,"    tail.next = allNodes[randomIndex];

     Node cycleNode = findCyclicNode(linkedList.head);

     expect(cycleNode, equals(allNodes[randomIndex]));

   });

   test(('test 4'), () {
"
17521,"            {

                 if (node.Left is null)

                 {

                     return node;
"
11691,"    Traceback (most recent call last):

         ...

     ValueError: principal must be > 0

     >>> simple_interest(5500.0, 0.01, -5)

     Traceback (most recent call last):
"
13951,"			t.Errorf(""Expected be 100 but got %v"", getOne)

 		}

 	})
"
28238,"		if (strg[si][ei] != 0) {

 			return strg[si][ei];

 		}

 		int start = WPTD(arr, si + 1, ei, strg) + arr[si] * year;
"
98078,"        printf(""Memory overflow. Unable to insert.\n"");

         exit(1);

     }
"
30516,"{

     int i;

     int min = array->array[0];
"
12254,"    for(int i = 2; i <= n;i ++){

                 for(int j = 1; j <= x; j++){

                     for(int k = 1; k < j && k <= m; k++)

                         table[i][j] += table[i-1][j-k];
"
89327,"            {

                 node = node.Left;

             }

             return node;
"
14137,"                new BigInteger(""0""),

                 new BigInteger(""0""),

                 new BigInteger(""0""),

                 new BigInteger(""0""),

                 new BigInteger(""0""),
"
27235,"{

     return put(set, hash(value), value);

 }

 unsigned put(hash_set_t *set, long long hash, void *value)

 {
"
14319,"}
"
84101,"      }

     }

     return node;

   }
"
14983,"		friend	Sales &operator>>(istream &is,Sales &s);	//

 };

 Sales::Sales(char *Name,char *ID,int Age) {

 		strcpy(name,Name);

 		strcpy(id,ID);

 		age=Age;
"
53019," * @brief Main function

  * @return 0 on exit

  */

 int main() {
"
17840,"            34157, 34159, 34171, 34183, 34211, 34213, 34217, 34231, 34253, 34259, 34261, 34267, 34273, 34283, 34297,

             34301, 34303, 34313, 34319, 34327, 34337, 34351, 34361, 34367, 34369, 34381, 34403, 34421, 34429, 34439,

             34457, 34469, 34471, 34483, 34487, 34499, 34501, 34511, 34513, 34519, 34537, 34543, 34549, 34583, 34589,
"
10888,"            return nums[i];

     }

     return nums[i];

 }
"
16758,"                mmh.Add(item);

             }

             var minValue = mmh.GetMin();

             var maxValue = mmh.GetMax();
"
22105,"            var (correctArray, testArray) = RandomHelper.GetArrays(n);

             // Act

             sorter.Sort(testArray, intComparer);

             Array.Sort(correctArray, intComparer);

             // Assert
"
33091,"#

 def find_jewels(jewels, stones)

   jewels_array = jewels.split('')

   stones_array = stones.split('')
"
34433,"    // Number of rows in A

     size_t N = A.size();

     std::vector<T> result(N);
"
19542,"	for _, tv := range tests {

 		t.Run(tv.name, func(t *testing.T) {

 			result := ReverseBits(tv.number)
"
22275," * @return GCD of `a` and `b`

  */

 unsigned long gcd(unsigned long a, unsigned long b)

 {

     unsigned long r;

     if (a > b)
"
32609,"}  // namespace graph

 /**

  * Unit tests
"
11458,"    std::cout << ""Test 1... "";

     assert(search::cycle_detection::duplicateNumber(array1, array1.size()) ==

            4);  // here the duplicate number is 4

     std::cout << ""passed"" << std::endl;

     // 2nd test
"
10028,"  if (character === character.toLowerCase()) {

     return false

   }

 }

 /**
"
13364,"            return true;

         }

         /// <summary>

         ///     Convert the timeline to an array.

         /// </summary>
"
16438,"            ((double)result[2].Y).Should().BeApproximately(Math.Sin(Math.PI / 3) / 3, 0.0001);

             result[3].Should().Be(new Vector2((float)2 / 3, 0));

             result[4].Should().Be(new Vector2(1, 0));

         }

         [Test]
"
31738,"		min := i

 		for j := i + 1; j < len(arr); j++ {

 			if arr[j] < arr[min] {
"
35021,"        q.poll();

         for (int there = 0; there < V; ++there)

           if (capacity[here][there] - flow[here][there] > 0 && parent.get(there) == -1) {

             q.add(there);

             parent.set(there, here);

           }
"
18173,"    int state = 0;

     for (int i = 0; i < n; i++) {

       state = FA[state][text.charAt(i)];

       if (state == m) {
"
32612,"        int64_t randomNum = from + rand() % (to - from + 1);

         if (randomNum) {

             unsortedArray[i] = randomNum;

             i++;

         }
"
21755,"  constructor () {

     this.connections = {}

     this.nodes = 0

   }

   addNode (node) {

     // Function to add a node to the graph (connection represented by set)
"
25925,"            for (size_t j = 0; j < key_len; j++) {

                 coded_text[i + j] =

                     STRKEY[batch_int[j]];  // get character at key

             }

         }

         return coded_text;
"
32444,"    ///         </item>

     ///         <item>

     ///             <term>All null nodes are considered black.</term>
"
21251," * A utility function to check if x and y are from same set or not

  * @param x element of some set

  * @param y element of some set

  *

  */
"
33892,"    }

   }

 }
"
29432,"    std::cout << ""Set Pascal's Triangle Height"" << std::endl;

     std::cin >> n;

     // memory allocation (Assign two-dimensional array to store Pascal triangle)

     int **arr = new int *[n];

     for (int i = 0; i < n; ++i) {

         arr[i] = new int[2 * n - 1];
"
14103,"    return 0;

 }
"
10736,"        return l2;

     }

 }
"
78793,"		visited[i] = struct{}{}

 		queue := list.New()

 		queue.PushBack(i)

 		for queue.Len() != 0 {

 			// front vertex in the queue

 			frontNode := queue.Front()
"
20996,"        'Win'

         >>> player = PokerHand(""2S AH 4H 5S 6C"")  # High card

         >>> opponent = PokerHand(""AD 4C 5H 6H 2C"")  # High card

         >>> player.compare_with(opponent)
"
31885,"				if !s.In(n) {

 					t.Errorf(""expecting %d to be present in the set but was not; set is %v"", n, s.GetItems())

 				}

 			}

 		})
"
28039," * @f[

  * \vec{a}\cdot\vec{b}=a_xb_x + a_yb_y + a_zb_z

  * @f]

  * @param[in] a first vector

  * @param[in] b second vector

  * @returns resulting dot product
"
12258,"        /// </remarks>

         /// <param name=""element"">The element to add to the heap.</param>

         /// <exception cref=""ArgumentException"">Thrown if element is already in heap.</exception>

         public void Push(T element)

         {

             data.Add(element);
"
24039,"            result.ifPresent(value -> assertThat(value, new BigDecimal(""280571172992510140037611932413038677189525"")));

         }

     }
"
25752,"/**

  * @brief In-order traverse the tree, print items

  * @param tree tree to traverse

  */

 void Tree234::Traverse() {

     Traverse(root_);
"
72869,"  constructor (noOfVertices) {

     this.noOfVertices = noOfVertices

     this.AdjList = new Map()

   }
"
15370,"        return result

     @classmethod

     def dot_product(cls, row, column):
"
30662,"        return a, 0

     elif abs(b) == 1:

         return 0, b

     old_remainder, remainder = a, b

     old_coeff_a, coeff_a = 1, 0

     old_coeff_b, coeff_b = 0, 1
"
30849,"  addNode (node) {

     // Function to add a node to the graph (connection represented by set)

     this.connections[node] = {}

   }

   addEdge (node1, node2, weight) {

     // Function to add an edge (adds the node too if they are not present in the graph)
"
32527,"    int len = sizeof(a) / sizeof(a[0]);

     beadSort(a, len);

     for (int i = 0; i < len; i++) printf(""%d "", a[i]);

     return 0;

 }
"
10808,"    return a

 if __name__ == ""__main__"":

     from doctest import testmod

     testmod()

     n = int(input(""Enter the number of terms in lucas series:\n"").strip())
"
29815,"            [v]; // Distance array for holding the finalized shortest path distance between source

     // and all vertices

     int p[] = new int[v]; // Parent array for holding the paths
"
11528,"﻿namespace Algorithms.Sort

 module BubbleSort =

     let rec Sort list: 'T [] =

         let mutable updated = false

         let mutable list = list |> Array.copy

         for index in 0 .. list.Length - 1 do
"
28867,"""""""

 import string

 import numpy

 def greatest_common_divisor(a: int, b: int) -> int:
"
29234,"?>
"
19722,"# Exports: data_structures

 export AbstractBinarySearchTree_arr

 export AbstractBinaryTree

 export AbstractBinaryTree_arr

 export BinaryTree
"
11143,"            if (buffRoot->right != NULL)

             {

                 buffRoot = buffRoot->right;

             }

             else
"
94679,"/* Minimum Priority Queue

 * It is a part of heap data structure

 * A heap is a specific tree based data structure

 * in which all the nodes of tree are in a specific order.
"
89534,"        [Test]

         public static void TestKochSnowflakeExample()

         {

             var bitmapWidth = 600;

             var offsetX = bitmapWidth / 10f;

             var offsetY = bitmapWidth / 3.7f;
"
29837,"  @Override

   public <T extends Comparable<T>> int find(T[] array, T key) {

     return search(array, key, 0, array.length - 1);

   }

   /**

    * This method implements the Generic Binary Search
"
17080,"        // First layer should not have activation

         if (config.begin()->second != ""none"") {

             std::cerr << ""ERROR ("" << __func__ << "") : "";

             std::cerr
"
14713,"  }

   const pat = /(.*?)_([a-zA-Z])*/

   return pat.test(varName)
"
26760,"    }

   }

   // remove a node
"
30146,"﻿using System;

 using Algorithms.Sorters.Comparison;

 using Algorithms.Tests.Helpers;
"
18282,"#include <stdio.h>

 #include <stdlib.h>

 #include ""hash_set.h""

 extern hash_set_t *init_hash_set()
"
29894,"                foreach (var (time, _) in timeline)

                 {

                     times[i++]

                         .Should()

                         .Be(time);
"
13018,"      if (arr[i] > arr[i + 1]) {

         [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]]

         swapped = true

       }

     }
"
16260,"            var i = Count - 1; // Position of x

             while (i > 0)

             {
"
25569,"        ///     the original two vectors. The vector in the middle is constructed through a

         ///     60 degree rotation so it is bent outwards.

         /// </summary>

         /// <param name=""vectors"">

         ///     The vectors composing the shape to which

         ///     the algorithm is applied.
"
24590,"        mid = (l + r) // 2

         self.update_recursive(self.left(idx), l, mid, a, b, val)

         self.update_recursive(self.right(idx), mid + 1, r, a, b, val)

         self.st[idx] = max(self.st[self.left(idx)], self.st[self.right(idx)])

         return True
"
49835,"            var yCurrent = yStart;

             var xCurrent = xStart;

             while (xCurrent < xEnd)

             {

                 yCurrent = EulerStep(xCurrent, stepSize, yCurrent, yDerivative);
"
35306,"    while True:

         if fibonacci(i) >= len_list:

             fibb_k = i

             break

         i += 1

     offset = 0
"
36767,"        for w in range(1, W + 1):

             if wt[i - 1] <= w:

                 dp[i][w] = max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w])

             else:

                 dp[i][w] = dp[i - 1][w]

     return dp[n][W], dp
"
32946,"#endif

             abundant_flags[index] |= ret << byte_offset;

         }

         // if (i % 100 == 0)

         //     printf(""... %5lu: %8lu\r"", i, sum);

     }
"
17281," * dynamically large number

  */

 typedef struct _large_num
"
22028,"        while (temp != NULL)

         {

             if (temp->data == ele)

             {

                 break;

             }
"
12023,"        """"""

         Create and initialize Node class instance.

         >>> Node(20)
"
88932,"                                                          end);

         log(""Algorithm finished!"");

         log(""Checking assert expression..."");
"
22792,"#!/usr/bin/python

 """"""

 The Fisher–Yates shuffle is an algorithm for generating a random permutation of a

 finite sequence.

 For more details visit
"
30262,"        S[i] = i + 1 if len(st) <= 0 else (i - st[0])

         # Push this element to stack

         st.append(i)

 # A utility function to print elements of array

 def printArray(arr, n):

     for i in range(0, n):
"
27343,"    }

     return true;

 }
"
22234,"}
"
22677,"        sprintf(msg, ""File error (%s): "", fname);

         perror(msg);

         return -1;
"
43870,"using System;

 namespace Algorithms.Strings

 {

     /// <summary>

     ///     The idea:   You compare the pattern with the text from right to left.
"
20537,"    {

         if (month & 0x01)

             return 30;

         else

             return 31;

     }
"
28351,"            actual_value = ALPHABET_VALUES[str(mod)]

             mod = actual_value

         new_value += str(mod)

         div = num // base

         num = div

         if div == 0:
"
61895,"    arr = new int[rows][col];

     for (i = 0; i < rows; i++) {

       for (j = 0; j < col; j++) {

         arr[i][j] = sc.nextInt();

       }
"
32220,"        completely (all characters in uppercase) uppercase string. The

         logic we have used in the following program is: All the lowercase

         characters (a-z) has [ASCII](https://en.wikipedia.org/wiki/ASCII) value ranging from 97 to 122 and their
"
15460,"        /// <summary>

         ///     To check for odd parity.

         /// </summary>

         /// <returns>Returns True if parity is odd; False otherwise.</returns>

         public bool OddParity() => NumberOfOneBits() % 2 != 0;
"
18431,"}

 func TestGeneratePrimes(t *testing.T) {

 	firstTenPrimes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29}
"
21157,"}

 func BenchmarkDecimalToBinary(b *testing.B) {

 	b.ReportAllocs()

 	for i := 0; i < b.N; i++ {

 		_, _ = DecimalToBinary(100)

 	}
"
30369,"    ArrayList<FFT.Complex> convolved = new ArrayList<>();

     for (int i = 0; i < a.size(); i++) convolved.add(a.get(i).multiply(b.get(i))); // FFT(a)*FFT(b)

     FFTBluestein.fftBluestein(convolved, true); // IFFT
"
29083,"/**

  * @addtogroup machine_learning Machine learning algorithms

  * @{
"
10638,"            for (var i = 0; i < n; i++)

             {

                 writer.Write(correctArray[i]);

             }

             writer.Dispose();

             // Act
"
31521,"*/

 // March is taken as the first month of the year.

 const calcMonthList = {

   1: 11,

   2: 12,

   3: 1,
"
16266,"# Constraints: The given dates are valid dates between the years 1971 and 2100.

 #

 # Approach 1: Using Ruby built-in feature Date.parse

 # Time complexity: O(1)
"
27127,"        std::vector<uint64_t> sublistData(

             20);  ///< Data to make linked list which will be the sublist

         std::vector<uint64_t> mainlistData(

             100);  ///< Main list in which sublist is to be searched

         for (int i = 0; i < 100; i++) {

             /// Inserts 100 elements in main list
"
14242,"		t.Errorf(""expecting %v to be a subset of %v"", s1, s2)

 	}

 	if s2.IsSubsetOf(s1) {

 		t.Errorf(""expecting %v not to be a subset of %v"", s2, s1)

 	}

 	if s3 := New(1, 2, 5, 6); s1.IsSubsetOf(s3) {
"
23652,"  });

 }
"
99466,"    /// </summary>

     public class RadixSorter : IIntegerSorter

     {
"
23229,"/**

  * Most recently used (MRU)

  * <p>
"
98666,"    $lo = 0;

     while($lo < $hi){

         $mid = $lo + floor(($hi - $lo)/2);

         if($arr[$mid] <= $elem){

             $lo = $mid + 1;

         }else{
"
16994,"        }

     }

     else
"
22767," * @param {number[]} array The array to flip

  * @param {number} startIndex The start of the subarray

  * @param {number} endIndex The end of the subarray

  * @returns The flipped array

  */
"
23737,"    if (position > high || position < low) {

       throw new IndexOutOfBoundsException(position + """");

     }
"
78670,"    if tree.left and tree.right:

         return is_full_binary_tree(tree.left) and is_full_binary_tree(tree.right)

     else:
"
20726,"    // search the right part of the array

   } else {

     return binarySearch(arr, value, mid + 1, ceiling)

   }

 }

 function exponentialSearch (arr, length, value) {
"
27378,"  it('Sum of all positive integers <= n which cannot be written as the sum of two abundant numbers', () => {

     expect(sumOfNonAbundantNumbers(20000)).toBe(4159710)

   })
"
25357,"                                          const matrix<int> &encrypt_key) {

         return codec(text, encrypt_key);

     }

     /**

      * @brief Decrypt a given text using a given key

      *
"
44420,"})
"
72122,"""""""

 A non-recursive Segment Tree implementation with range query and single element update,

 works virtually with any list of the same type of elements with a ""commutative""
"
11893,"{

     struct Graph *graph = malloc(sizeof(struct Graph));

     graph->numVertices = vertices;
"
38662,"                a[j] = temp;

             }

         }
"
15447,"#

 # Given an integer array nums representing the amount of money of each house,

 # return the maximum amount of money you can rob tonight without alerting the police.

 #

 # Example 1:
"
75728,"  })

   it('should initialize a heap from an input array', () => {

     expect(heap).toEqual({ 'heap': [1, 4, 2, 7, 16, 10, 39, 23, 9, 43, 85, 42, 51] })   // eslint-disable-line

   })

   it('should show the top value in the heap', () => {

     const minValue = heap.peek()
"
10056,"            if (newLevel >= node.Level)

             {

                 return node;
"
57095,"        double xi = a; // Initialize the variable xi = x0 + 0*h

         // Create the table of xi and yi points

         for(int i=0; i<=N; i++){

             temp = f(xi); // Get the value of the function at that point
"
23007,"    if (subsets[i].parent != i)

         subsets[i].parent = find(subsets, subsets[i].parent);

     return subsets[i].parent;
"
26478,"                    break;

                 }

             }
"
10163,"            return (left_h + 1);

         }

     }
"
87773,"        ...

         Exception: invalid operand!

         """"""
"
18640,"    >>> cache = LFUCache(2)

     >>> cache.set(1, 1)

     >>> cache.set(2, 2)

     >>> cache.get(1)

     1
"
13238,"package Conversions;

 import java.util.Scanner;

 /**

  * Converts turkish character to latin character
"
13952,"    Examples

     --------

     >>> count_inversions_recursive([1, 4, 2, 4, 1])

     ([1, 1, 2, 4, 4], 4)
"
22139,"        }

         /// <summary>

         ///     Given an input string, returns a new compressed string

         ///     using huffman encoding.

         /// </summary>
"
14410,"/* The following class implements a vertical order traversal

 in a tree from top to bottom and left to right, so for a tree :

            1

           / \

          2   3

         / \   \
"
25648,"void up_heapify(Heap *heap, int index)

 {

     int parent = (index - 1) / 2;

     if (parent < 0)
"
27857,"}
"
94974,"        return x

     estimated_value = area_under_curve_estimator(

         iterations, identity_function, min_value, max_value

     )

     expected_value = (max_value * max_value - min_value * min_value) / 2

     print(""******************"")
"
92185,"        char tmp = octal[i];

         octal[i] = octal[len - i - 1];

         octal[len - i - 1] = tmp;

     }

     return octal;
"
17418,"void show()

 {

     struct node *p;

     if (empty())

         printf(""Queue empty. No data to display \n"");
"
10738,"            for (int i = each.length-1; i >=0; i--){

                 System.out.print(each[i] + "" "");

                 if (i != 0) {

                     System.out.print(""+ "");

                 }

             }
"
22945,"    public class UnrolledLinkedListNodeTests

     {

         [Test]

         public void GetAndSet_SetItemNodeAndGetIt_ReturnExpectedItem()

         {

             var node = new UnrolledLinkedListNode(6);
"
11205," * * r^2)

  * @param radius is the radius of the circle

  * @returns area of the circle

  */

 template <typename T>
"
17803," *

  * @param string $string

  * @return int   $noOfVowels

  */

 function countVowelsSimple(string $string)
"
99235,"    return lps

 end

 # this function will be used to obtain the index which the substring was found

 function get_index_with_kmp(string::String, sub_string::String, ignore_case::Bool)::Int

     string = ignore_case ? lowercase(string) : string

     sub_string = ignore_case ? lowercase(sub_string) : sub_string
"
17312,"		if left < right {

 			let mid = left + (right - left) / 2

 			_mergeSort(from: 0, to: mid, by: comparison)

 			_mergeSort(from: mid + 1, to: right, by: comparison)

 			_merge(from: left, mid: mid, to: right, by: comparison)
"
19699,"using System;

 namespace DataStructures.Queue

 {

     /// <summary>

     ///     Implementation of an array based queue. FIFO style.
"
30330,"            {

                 /* solution found */

                 return true;

             }

             printf(""%sBacktrack (%d,%d) <- %"" SCNu8 "" (counter=%"" SCNu32 "")\n"",
"
23728,"      number = number * 10 + s.charAt(i) - '0';

     }

     return isNegative ? -number : number;

   }

 }
"
18723,"    Stack.push(4);

     Stack.push(5);

     System.out.println(""Testing :"");

     Stack.print(); // prints : 5 4 3

     Integer x = Stack.pop(); // x = 5
"
30730,"    try{

 //         .....  //

          throw FileSysException();
"
15603,"    if(first==NULL)

 	 first=last=pnode ;

     else

     {

 	  last->next=pnode ;
"
30954,"        self.data = data

         self.previous = None

         self.next = None

     def __str__(self):

         return f""{self.data}""
"
50999,"uuid = ""c1c5ebd0-6772-5130-a774-d5fcae4a789d""

 version = ""3.100.1+0""

 [[LZO_jll]]
"
24722,"static void test() {

     // Hashes empty string and stores signature

     void* sig = hashing::md5::hash("""");
"
11177,"    when @size then insert_tail(val)

     when 1...@size

       if index < @size - index
"
44190,"            denominator = 1.0;

             for (int i = 0; i < roots->size(); i++)

                 if (i != n)

                     denominator *= (*roots)[n] - (*roots)[i];

             std::complex<long double> delta = numerator / denominator;
"
27912,"      for (int z : dividedMessage) {

         message.add(z);

       }

     } else {
"
31065,"    printf(""%d\n"", sum);

 }"
18723," */

 function ReverseStringIterativeInplace (string) {

   if (typeof string !== 'string') {

     throw new TypeError('The given value is not a string')

   }
"
24981,"package Maths;

 public class ParseInteger {

   public static void main(String[] args) {

     assert parseInt(""123"") == Integer.parseInt(""123"");

     assert parseInt(""-123"") == Integer.parseInt(""-123"");
"
23093,"        Edge(from: E, to: F, weight: 8),

         Edge(from: E, to: G, weight: 9),

         Edge(from: F, to: G, weight: 11),

     ]
"
11119,"				}

 			}

 			return true;
"
11944,"    A* a=new B(10);

     delete a;

     system(""pause"");
"
33978,"  //         / \   \

   //        3   6   9

   it('Binary tree - Level order traversal', () => {

     expect(binaryTree.traversal).toStrictEqual([])

     const traversal = binaryTree.breadthFirst()
"
27528,"//

 // Created by light on 19-11-3.

 //

 #include <iostream>

 #include <list>
"
10410," *

  * @details

  * The algorithm is based on the simple TCP client and server model. However,

  * instead of the server only sending and the client only receiving data,

  * The server and client can both send data but only one at a time. This is

  * implemented by using a particular ordering of the `send()` and `recv()`
"
27935,"    std::cout << ""Element was found\n"";

     return t->succ();

 }
"
16488,"    print(""\nSupport\n"")

     print(support)

     print(""\n Cluster \n"")
"
31606,"            // of first linked list

             holder2 = temp2->next;

             temp2->next = holder1;
"
27239,"        https://www.indexdatabase.de/db/i-single.php?id=188

         :return: index

         """"""
"
12830,"[[ColorTypes]]

 deps = [""FixedPointNumbers"", ""Random""]

 git-tree-sha1 = ""32a2b8af383f11cbb65803883837a149d10dfe8a""

 uuid = ""3da002f7-5984-5a60-b8a6-cbb66c0b333f""

 version = ""0.10.12""

 [[Colors]]
"
10539,"        /// </summary>

         /// <param name=""item"">The item being inserted into the Bloom Filter.</param>

         public void Insert(T item)

         {

             foreach (var slot in GetSlots(item))
"
92504,"        /// </summary>

         /// <param name=""hour"">Value to look for.</param>

         /// <returns>Array of values.</returns>

         public Timeline<TValue> GetValuesByHour(int hour)

             => new(timeline.Where(pair => pair.Time.Hour == hour).ToArray());

         /// <summary>
"
24101,"    return true

   }

   return false

 }
"
14924,"        self.create_linked_list(initial_capacity)

     def create_linked_list(self, initial_capacity: int) -> None:

         current_node = Node()

         self.front = current_node

         self.rear = current_node

         previous_node = current_node
"
61490,"        bzero(buff, MAX);

         // read the message from client and copy it in buffer

         read(sockfd, buff, sizeof(buff));

         // print buffer which contains the client contents

         printf(""From client: %s\t To client : "", buff);

         bzero(buff, MAX);
"
67751,"      } else if (temp.data < data) {

         parent = temp;

         temp = parent.right;

         rightOrLeft = 1;

       } else {
"
66860,"    switch (list.length) {

       case 0:

         list.push(1)

         return FibonacciRecursive(number)

       case 1:

         list.push(1)
"
20227," * @param size size of array

  */

 void selectionSort(int *arr, int size)

 {

     for (int i = 0; i < size - 1; i++)

     {
"
95693,"    }

     public int[] getScores() {

         return scores;
"
73364,"    /** Constructor which precomputes the values of n! % mod from n=0 to size

      *  and stores them in vector 'fac'

      *  @params[in] the numbers 'size', 'mod'

      */
"
17091,"    String str = ""0123456789ABCDEF"";

     s = s.toUpperCase();

     int val = 0;

     for (int i = 0; i < s.length(); i++) {

       char a = s.charAt(i);
"
85532,"// 		}

 // 		fmt.Printf(""%d"", occurrences[currentOcc-1])

 // 		fmt.Printf("".\n"")

 // 	}
"
13496,"    test();

     return 0;

 }
"
31718,"            tail[0] = v[i]

         elif v[i] > tail[length - 1]:

             tail[length] = v[i]

             length += 1

         else:
"
63230,"green   = np.ones((1000,1000, 1),dtype=""float64"") * 23487

 blue    = np.ones((1000,1000, 1),dtype=""float64"") * 14578

 redEdge = np.ones((1000,1000, 1),dtype=""float64"") * 51045

 nir     = np.ones((1000,1000, 1),dtype=""float64"") * 52200
"
23695,"# Approach 1: Hash

 #

 # Time Complexitiy: O(n)
"
24497,"def find_pure_symbols(

     clauses: list[Clause], symbols: list[str], model: dict[str, bool]

 ) -> (list[str], dict[str, bool]):

     """"""
"
66444,"What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5,

 6, 7, 8 and 9?

 """"""

 from itertools import permutations

 def solution():

     """"""Returns the millionth lexicographic permutation of the digits 0, 1, 2,
"
92885,"    [<DataRow(""The quick brown fox jumps over the la_y do"", false)>]

     [<DataRow("""", false)>]

     member this.CheckPangramFaster (sentence:string, expected:bool) =

         let actual = CheckPangram.checkPangramFaster sentence

         Assert.AreEqual(expected, actual)
"
37805,"#include <string.h>

 // Structure for storing a graph

 struct Graph
"
32916,"const values = {

   M: 1000,

   CM: 900,

   D: 500,

   CD: 400,
"
11069,"    2.6785713457296

     >>> weight_conversion(""short-ton"",""short-ton"",3)

     2.9999999725344

     >>> weight_conversion(""short-ton"",""pound"",2)

     4000.0000000294335
"
25285,"         */

         uint64_t search(const uint64_t &val) {

             uint64_t pos; // pos variable to store index value of element.

             // if list is sorted, binary search works efficiently else linear search is the only option

             if (isSorted) {
"
31838,"            // Assert

             Assert.AreEqual(-1, actualIndex);

         }

         [Test]

         public static void FindIndex_ArrayEmpty_MinusOneReturned([Random(100)] int itemToSearch)

         {
"
22089,"        cache.put(""Key4"", 4);

         System.out.println(""getValue(Key1): "" + cache.get(""Key1""));

         System.out.println(""getValue(Key2): "" + cache.get(""Key2""));

         System.out.println(""getValue(Key3): "" + cache.get(""Key3""));

         System.out.println(""getValue(Key4): "" + cache.get(""Key4""));
"
16014,"            {

                 min = minHeap.Extract();

                 Assert.AreEqual(min, i - 1);

             }
"
87408,"Trie.prototype.findPrefix = function (word) {

   if (typeof word !== 'string') return null

   let node = this.root

   const len = word.length

   let i

   // After end of this loop node will be at desired prefix
"
11587,"      high = pos - 1;

     else /* Found */

       return pos;

   }
"
34013,"// ***

 int main() {

     int64_t r, mr = 0, x, q, i, z;

     std::cout << ""Enter Number of array you want to Store :"";
"
40498," * @details  Naval battle is a game, to be played by two people. It consists of

  * knocking down the enemy ship, through shots , when hit the ship is

  * revealed with the respective number of its size. Example: size 3 = 3 3 3 on

  * the board.

  * To play - boats over size 1, need direction; V -> vertical and H ->

  * horizontal. Example Input 1 A H -> line 1, column A, direction H
"
22653,"    

     // Fucntion  to print suggestions for

     // given query prefix.
"
14008,"        /// </summary>

         /// <param name=""initialVectors"">

         ///     The vectors composing the shape to which
"
31809," * \f]

  * For the next iteration, the interval is selected

  * as: \f$[a,x]\f$ if \f$x>0\f$ or \f$[x,b]\f$ if \f$x<0\f$. The Process is

  * continued till a close enough approximation is achieved.
"
55059,"        /// </summary>

         /// <param name=""index"">Node index.</param>

         private void PushDown(int index)

         {

             if (IsMinLevelIndex(index))

             {
"
15346,"n = 3

 # Output: false

 puts is_power_of_two(n)

 n = 4

 # Output: true

 puts is_power_of_two(n)
"
13748,"      // return index of key if found

       return mid2

     }

     // since the key is not found at mid,

     // check in which region it is present
"
22415,"    ...

     TypeError: 'str' object cannot be interpreted as an integer

     >>> # a base less than 2 will error

     >>> decimal_to_any(7, 0) # doctest: +ELLIPSIS
"
54433,"        if isinstance(i2, np.ndarray):

             return self.Kernel(self.samples[i1], i2)

         # for train samples,Kernel values have been saved in matrix

         else:

             return self._K_matrix[i1, i2]

     # Get sample's error
"
64443,"	// Both prime numbers

 	p := int64(61)

 	q := int64(53)

 	n := p * q
"
31652,"""""""

 Project Euler Problem 36

 https://projecteuler.net/problem=36

 Problem Statement:

 Double-base palindromes
"
25549," * if x = 5, The answer should be 2 which is the floor value of √5.

  * <p>

  * The approach that will be used for solving the above problem is not going to be a straight forward Math.sqrt().

  * Instead we will be using Binary Search to find the square root of a number in the most optimised way.

  *

  * @author sahil
"
17859,"	})

 }

 // TestStackArray for testing Stack with Array

 func TestStackArray(t *testing.T) {

 	t.Run(""Stack With Array"", func(t *testing.T) {
"
22409,"  test(""findPeak returns 2 for [1, 3, 20, 6, 1, 2]"", () {

     List<int> lst = [1, 3, 20, 6, 1, 2];

     expect(findPeak(lst, lst.length), equals(2));

   });
"
14996,"    node->par = grandParent;

     parent->par = node;

     node->right = parent;

     if (grandParent != NULL)

     {
"
25882,"    } else if (c == '+') {

         return 62;

     } else if (c == '/') {

         return 63;

     }
"
33735,"			} else {

 				lcs[i][j] = Max(lcs[i-1][j], lcs[i][j-1])

 			}

 		}

 	}
"
12300,"int main()

 {

     Base b;
"
23630,"    """"""

     return sum(int(x) for x in str(factorial(num)))

 if __name__ == ""__main__"":

     print(solution(int(input(""Enter the Number: "").strip())))
"
75406,"		//Krishnamurthy numbers are positive

 		if(n<=0)

 		{
"
10909,"	}

 	// Add a new element in the mem_info list

 	memoryInformation = addMemInfo(memoryInformation, ptrToReturn, elementCount * elementSize, line, filename, functionName);

 	if (!memoryInformation)
"
26861,"                { new DateTime(1900, 1, 1), ""TestTime7"" },

                 { new DateTime(1905, 1, 1), ""TestTime8"" },

                 { new DateTime(1910, 1, 1), ""TestTime9"" },
"
98104," * @f[\begin{align*}

  * \vec{a}\times\vec{b} &= \begin{vmatrix}

  *  \hat{i} & \hat{j} & \hat{k}\\

  *  a_x & a_y & a_z\\

  *  b_x & b_y & b_z

  *  \end{vmatrix}\\
"
19325,"    expect(linkedList, equals([]));

   });

   test("".pop is returning null when list is empty"", () {
"
12863,"            }

         }

         /// <summary>

         ///     Search for the node to be deleted.
"
18095,"}

 /**

  * main function

  */

 int main() {
"
17376,"  }

   // Now check if second string has same characters?

   for (let i = 0; i < str2.length; i++) {

     let previousCount = 0

     // if str1CharCount has no key for str2[i] then not anagram.
"
34602,"        return {};  ///< We got an invalid shift, return empty array

     }

     std::vector<int32_t> res(array.size());  ///< Result array
"
19996,"package Sorts;

 import java.util.Arrays;

 import java.util.ArrayList;

 import java.util.List;

 public class MergeSortRecursive {
"
77744,"  end

   result

 end
"
13920,"# frozen_string_literal: true

 # A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

 # Find the largest palindrome made from the product of two 3-digit numbers.
"
80292,"            )

             + self._b

         )

         return predicted_value
"
27701,"        case 7:

         {

             printf(""\nPrinting AVL Tree\n"");

             printAVL(root, 1);

             break;
"
31385,"            //removes the last digit  

             temp = temp/10;  

             //increments the number of digits (n) by 1  

             n++;  
"
10757," * algorithm that operates according to the principles: 

  *

  * * \f$A {\oplus} 0 = A\f$

  * * \f$A {\oplus} A = 0\f$

  * * \f$ (A {\oplus} B) {\oplus} C = A {\oplus} (B {\oplus} C)\f$

  * * \f$ (B {\oplus} A) {\oplus} B = B {\oplus} 0 = B \f$
"
26223,"class StackOverflowError < StandardError; end

 class Stack

   def initialize(limit, stack = [])

     @stack = stack

     @limit = limit
"
58653,"      print(""No data in the stack!\n"");

     }

     T pop_data = stack[count - 1];

     stack[count - 1] = null;

     count--;

     return pop_data;
"
11693,"git-tree-sha1 = ""c3598e525718abcc440f69cc6d5f60dda0a1b61e""

 uuid = ""6e34b625-4abd-537c-b88f-471c36dfa7a0""

 version = ""1.0.6+5""
"
18512,"      int j,

       char[][] board,

       TrieNode trieNode,
"
26761,"                        while (n % factor == 0)

                         {

                             n /= factor;
"
59796,"  expect(rodCut([1, 5, 4, 2, 1, 11, 19, 12], 8)).toBe(20)

 })

 test('Test Case 3', () => {

   expect(rodCut([1, 2, 1], 3)).toBe(3)

 })
"
90446,"    this.right = null

   }

   // Search the tree for a value

   Node.prototype.search = function (val) {

     if (this.value === val) {
"
36894,"    public class DynamicProgrammingKnapsackSolver<T>

     {

         /// <summary>

         ///     Returns the knapsack containing the items that

         ///     maximize value while not exceeding weight capacity.
"
85910,"# Approach 1: Brute Force

 #

 # Complexity Analysis

 #

 # Time complexity: O(k^2).
"
80259,"  print(list);

   print('--------------------------------------');

   print('After sorting:');

   selectSort(list);
"
12633,"PROJECT_EULER_ANSWERS_PATH = pathlib.Path.cwd().joinpath(

     ""scripts"", ""project_euler_answers.json""

 )

 with open(PROJECT_EULER_ANSWERS_PATH) as file_handle:

     PROBLEM_ANSWERS: dict[str, str] = json.load(file_handle)

 def convert_path_to_module(file_path: pathlib.Path) -> ModuleType:
"
22235,"        newEntry.setValue(value);

         addNewEntry(newEntry);

         data.put(key, newEntry);

     }
"
13470,"            t.join();      // 2

         }

     }

     thread_guard(thread_guard const &) = delete;   // 3
"
33988,"    int randomIndex = random.nextInt(9);

     tail.next = allNodes[randomIndex];

     Node cycleNode = findCyclicNode(linkedList.head);

     expect(cycleNode, equals(allNodes[randomIndex]));

   });

 }
"
10084,"            fputc('\n', fp);  // start a new line

     }

     fclose(fp);

     return 0;
"
16765,"    {

         printf(""%d "", arr[i]);

     }
"
43725,"    ['16/64', '19/95', '26/65', '49/98']

     >>> fraction_list(4)

     ['16/64', '19/95', '26/65', '49/98']
"
28476,"		cout << ""\n 5. Exit "";

 		cout << ""\nEnter Your Choice: "";

 		cin >> ch;

 		switch (ch)
"
14947,"*/
"
91140,"            // counting zero-bits

             return field.Count(bit => !bit);

         }
"
26742,"                throw new InvalidOperationException(""Heap malformed"");

             }

             if (y.Degree == 1)
"
29369,"            foreach (var d in data)

             {

                 Add(d);

             }

         }
"
26719,"}

 // DecimalToBinary() function that will take Decimal number as int,

 // and return it's Binary equivalent as string.

 func DecimalToBinary(num int) (string, error) {

 	if num < 0 {

 		return """", errors.New(""integer must have +ve value"")
"
16669,"        /// </summary>

         /// <param name=""data""> Value for the new Head of the list.</param>

         /// <returns>The new Head node.</returns>
"
10008,"    """"""

     formatted_query = ""+"".join(query.split())

     url = f""http://api.giphy.com/v1/gifs/search?q={formatted_query}&api_key={api_key}""
"
29601,"    @Override

     public String toString() {

       return ""("" + name + "", "" + dist + "")"";

     }

   }
"
19567,"                BigInteger previous = 0;

                 BigInteger currentIndex = 2; // 1-based index

                 while (true)

                 {

                     BigInteger element = 0;

                     if (dictionary.TryGetValue(previous, out var previousIndex))
"
59929,"    tests();  // running predefined tests

     uint64_t vertices = uint64_t();

     uint64_t edges = uint64_t();
"
29283,"				/*Adding the right Node if it is not null

 				and its index by adding 1 from it's 

 				parent's index*/
"
29973,"        ///     where n - array length.

         /// </summary>

         /// <param name=""array"">Array to sort.</param>
"
94791," *

  *  Given an ordered set W of non-negative integers and a value K,

  *  determine all possible subsets from the given set W whose sum
"
17765,"  /**

    * Builds the bad symbol table required to run the algorithm. The method starts from the second to

    * last character of the pattern and moves to the left. When it meets a new character, it is by

    * definition its rightmost occurrence and therefore puts the distance from the current index to

    * the index of the last character into the table. If the character is already in the table, then

    * it is not a rightmost occurrence, so it continues.
"
21563,"        if (!digit)

         {

             perror(""Unable to allocate memory!"");

             return NULL;
"
21172,"				}

 			}

 			// Assign color to the vertex
"
63795,"            std::cout << ""Enter data  "";

             std::cin >> data;

             ob.enqueue(data);

         } else if (op == 2) {
"
47889,"    int to_x = std::min(num_out_x, d_min_x + R + 1);

     int from_y = std::max(0, d_min_y - R);

     int to_y = std::min(num_out_y, d_min_y + R + 1);
"
10288,"version = ""6.18.0""

 [[DimensionalPlotRecipes]]

 deps = [""LinearAlgebra"", ""RecipesBase""]

 git-tree-sha1 = ""af883a26bbe6e3f5f778cb4e1b81578b534c32a6""
"
14685,"			}

 			else

 			{

 				return false;

 			}
"
38653,"int main(int argc, const char *argv[])

 {

     /* Intializes random number generator */

     srand(time(NULL));
"
26252,"        }

         // If arrival times are same, then compare Process IDs

         else if (get<1>(t2) == get<1>(t1)) {

             return get<0>(t2) < get<0>(t1);

         }

         return false;
"
19646,"      // catching errors

       throw new IndexOutOfBoundsException(""position cannot be greater than size or negative"");

     }

     // we need to keep track of the element before the element we want to remove we can see why
"
21572,"        # max_weight = 15

         self.assertRaisesRegex(ValueError, ""Weight can not be negative."")

     def test_negative_weight_value(self):
"
23135,"        System.out.println(calculatePower(2, 30));

     }

     // Function to calculate x^y
"
18401,"    std::cout << ""Test 3... "";

     assert(ans);

     std::cout << ""passed\n"";

 }
"
27900,"    a2 = pmc - aa2

     filt = IIRFilter(2)

     filt.set_coefficients([a0, a1, a2], [b0, b1, b2])
"
50479,"        [Test]

         public void Add_Case24_FormsCorrectTree()

         {

             var tree = new RedBlackTree<int>();

             tree.AddRange(new[] { 5, 4, 6, 3 });
"
14266,"        self.pos_y = pos_y

         self.pos = (pos_y, pos_x)

         self.goal_x = goal_x

         self.goal_y = goal_y

         self.parent = parent

 class BreadthFirstSearch:
"
20353,"    let parentPos = getParentPosition(currPos)

     let currPriority = this._heap[currPos][1]

     let parentPriority = Infinity

     if (parentPos >= 0) {

       parentPriority = this._heap[parentPos][1]
"
60915,"    return root;

 }

 /** Deletion procedure, which searches for the input key in the tree and removes
"
53500,"    private var resetButton: UIButton!

     private var indicator: UIActivityIndicatorView!

     private func startGame() {

         self.gameModel = GameModel.init(boardSize: 3, playersList: self.players, difficultLevel: .hard)

         DispatchQueue.global(qos: .userInteractive).async {
"
11931,"//   12: [],

 //   13: ['14'],

 //   14: [],

 //   15: []
"
53413,"        number = atoi(argv[1]);

     else

     {

         printf(""Enter the value of n(n starts from 0 ): "");
"
20638,"    }

     return bestMoves[Int.random(in: 0 ..< bestMoves.count)]

 }

 public func minMax(board: Board, player: Player, opponent: Player, depth: Int, alpha: Int, beta: Int, maximizingPlayer: Bool) -> GameStateValue {

     var alpha = alpha
"
63525,"  // loop over the array {num} times and save their total amount in {maxSum}

   for (let i = 0; i < num; i++) {

     maxSum += arr[i]
"
17979,"   */

   public T get(int position) {

     if (position >= 0 && position < count) {
"
20432,"        return(matFolds[x,][1:(length(y)-every_n*(k-1))])

       }else{

         return(matFolds[x,])

       }

     })
"
10468,"#

 # cost(1, n) = sum{i = 1 to n}((depth(node_i) + 1) * node_i_freq)

 #

 # where n is number of nodes in the BST. The characteristic of low-cost
"
27851,"if __name__ == ""__main__"":

     import doctest

     doctest.testmod()
"
31365," *

  * \see Slowest: problem_5/sol1.c

  * \see Slower: problem_5/sol2.c

  */
"
19696,"    double_arr.push_back(62.7);

     double_arr.push_back(12.2);

     double_arr.push_back(43.6);

     double_arr.push_back(74.1);
"
61031,"            void Act() => testObj.Compile(sequence);

             // Assert

             Assert.Throws<ArgumentException>(Act);
"
23585,"        {

             var sketch = new CountMinSketch<int>(.01, .05);

             var random = new Random();

             var insertedItems = new Dictionary<int,int>();

             for (var i = 0; i < 10000; i++)

             {
"
49598,"        if (numbered[insert] == true) {

             int prov_size = 0, next_target_lib = !target_lib;

             // update library and clear gaps

             for (int i = 0; i <= n; i++) {

                 if (numbered[i] == true) {

                     library[next_target_lib][prov_size] = gaps[i];
"
26873,"      }

       if (q == n) {

         System.out.println(""Pattern starts: "" + (i + 1 - n));
"
29695,"  def insert_head(value)

     newNode = Node.new(value)

     if @head.nil?

       @head = newNode

     else
"
39644,"    a85encoded = base64.a85encode(encoded)  # a85encoded the encoded string

     print(a85encoded)

     print(base64.a85decode(a85encoded).decode(""utf-8""))  # decoded it

 if __name__ == ""__main__"":
"
20346,"const EPS = 1e-6

 func equal(a, b float64) bool {

 	return math.Abs(a-b) <= EPS

 }

 func TestTernaryMax(t *testing.T) {
"
23457,")

 //Query interval

 type query struct {
"
12293,"    return arr;

 }
"
90840,"  let H3 = 0x10325476

   let H4 = 0xC3D2E1F0

   // pre-process message and split into 512 bit chunks

   const bits = preProcess(message)
"
22143,"  } else {

     let newElement

     if (num % 2 === 0) {
"
15482,"    /// </summary>

     /// <typeparam name=""T"">Generic Type.</typeparam>

     public class Vertex<T>

     {
"
95777,"            p[i] = i;

         }

     }

  

     public int find(int i) {

         int parent = p[i];
"
27133,"  List<String> openingBrackets = ['(', '{', '['];

   final Map<String, String> matchingBracket = {'}': '{', ')': '(', ']': '['};

   for (int i = 0; i < string.length; i++) {

     var currentChar = string[i];
"
30581,"        public static void Contains_NonEmptyHeap_ReturnsCorrectAnswer()

         {

             var heap = BuildTestHeap();

             Assert.IsTrue(heap.Contains(1));

             Assert.IsTrue(heap.Contains(5));

             Assert.IsTrue(heap.Contains(10));
"
60411,"                {

                     mst[i, j] = float.PositiveInfinity;

                     mst[j, i] = float.PositiveInfinity;

                 }

             }
"
84009,"        input: index (0-indexed)

         output: the i-th component of the vector.

         """"""
"
41010,"            inputString[pos++] = tolower(inputChar);

             continue;

         }

         // checks if character is ' or - and if it is preceded by a letter eg

         // yours-not, persons' (valid)

         if ((inputChar == '\'' || inputChar == '-') && isPrevCharAlpha)
"
24820,"                    }

                     if (n > 1)

                     {

                         result -= result / n;

                     }
"
28454,"            minVal = mdist[i];

             minInd = i;

         }

     return minInd;
"
32378," * the logarithmic time because the number of nodes copied after any update is

  * logarithmic.

  *

  * @author [Magdy Sedra](https://github.com/MSedra)
"
13844,"            var sorter = new BubbleSorter<HuffmanCompressor.ListNode>();

             var translator = new Translator();

             var huffman = new HuffmanCompressor(sorter, translator);
"
86811,"        return -1;

     if (arg1 > arg2)

         return 1;

     return 0;
"
82234,"     */

     int top() { return main_q.front(); }

     /**
"
24584,"        return ""CM"";

     case '8':

         return ""DCCC"";

     case '7':

         return ""DCC"";

     case '6':
"
31504,"    case '8':

         return ""LXXX"";

     case '7':

         return ""LXX"";
"
84853,"    graph_copy = {node: graph[node][:] for node in graph}

     while len(graph_copy) > 2:

         # Choose a random edge.

         u = random.choice(list(graph_copy.keys()))

         v = random.choice(graph_copy[u])

         # Contract edge (u, v) to new node uv
"
50581,"[[Sundials]]

 deps = [""CEnum"", ""DataStructures"", ""DiffEqBase"", ""Libdl"", ""LinearAlgebra"", ""Logging"", ""Reexport"", ""SparseArrays"", ""Sundials_jll""]

 git-tree-sha1 = ""75412a0ce4cd7995d7445ba958dd11de03fd2ce5""

 uuid = ""c3572dad-4567-51f8-b174-8c6c989267f4""

 version = ""4.5.3""

 [[Sundials_jll]]
"
28110,"		else

 			y = successor(p);

 		if (y->left != NULL)

 			q = y->left;

 		else

 		{
"
13143," *

  * <h1>Find the Transpose of Matrix!</h1>

  *

  * Simply take input from the user and print the matrix before the transpose and after the
"
88849,"                if (pat[j] == str[i])

                 {

                     j++;
"
63545,"            button.isUserInteractionEnabled = false

         }

     }

 }
"
85093,"        public int Top => top;

         /// <summary>

         ///     Gets or sets the Capacity of the <see cref=""ArrayBasedStack{T}"" />.

         /// </summary>
"
42337,"        k++;

     }

     // copy remaining elements of left, if any

     while (i < len1) {

         arr[k] = left[i];

         k++;
"
77692," * Test function

  * @return void

  */

 void test()

 {

     assert(isStrong(145));  /* 145 = 1! + 4! + 5! */
"
31858,"/**

  * @file

  * @author [Krishna Vedala](https://github.com/kvedala)
"
25453,"        for (int level = 0; level < length; level++) 

         { 

             int index = (key.charAt(level) - 'a');

             
"
46986,"        final Entry<K, V> entry = data.get(key);

         moveEntryToLast(entry);

         return entry.getValue();

     }
"
20713,"        this.order = order;

         coeffsA = new double[order+1];

         coeffsB = new double[order+1];

         // Sane defaults
"
33526," */

 class Queue {

   /** Default initial capacity. */

   private static final int DEFAULT_CAPACITY = 10;

   /** Max size of the queue */

   private int maxSize;
"
11055,"    /// function call with @param n

     math::power_of_two(n);

     return 0;

 }
"
29223,"        }

         [Test]

         public static void PeekWorksCorrectly()

         {

             // Arrange
"
98572,"      return;

     }

     graph.get(endName).printPath();

     System.out.println();

   }

   /** Prints the path from the source to every vertex (output order is not guaranteed) */
"
32583,"# Output: 9999

 # Explanation: Changing the last digit 6 to 9 results in the maximum number.

 #
"
23331,"﻿using System.Collections.Generic;

 namespace Algorithms.Sorters.Comparison

 {

     /// <summary>

     ///     Sorts arrays using quicksort (selecting median of three as a pivot).
"
75627,"  /** @brief A method to show the elements inside the array. */

   public void showArrayElements() {

     for (int i = 0; i < this.array.length; i++) {

       System.out.print(this.array[i] + "" "");
"
28348,"void main() {

   print(hexadecimal_to_decimal(""1abc"")); // 6844

   print(hexadecimal_to_decimal("" -123 "")); // -291

   try {
"
31332,"					Start:  0,

 					End:    2,

 					Weight: 13,

 				},

 				{
"
12681," * * \f${0.5, 0.5, -0.5}\f$

  * * \f${0.5, -0.5, 0.5}\f$

  * * \f${0.5, -0.5, -0.5}\f$

  * * \f${-0.5, 0.5, 0.5}\f$
"
14603,"puts abs_min(-10, -1)

 # The Abs Min of -10 and -1 is -10.

 puts abs_min(9, -121)

 # The Abs Min of 9 and -121 is -121.
"
14721,"            {

                 return item == array[0] ? 0 : throw new ItemNotFoundException();

             }

             var (left, right) = ComputeIndices(array, item);

             var (from, to) = SelectSegment(array, left, right, item);

             return from + FindIndex(array.Slice(from, to - from + 1), item);
"
24268,"        {

             return -1;

         }
"
22792,"using Algorithms.Encoders;

 using NUnit.Framework;

 using NUnit.Framework.Internal;
"
30254,"{

     printf(""Enter octal value: "");

     int octal_value;

     scanf(""%d"", &octal_value);
"
19409," */

 struct Stack {

 	char stack[10];		///< array stack

 	int top;		///< stores index of the top element
"
30936,"    >>> set_bit(0b1111, 1) # 0b1111

     15

     """"""

     return number | (1 << position)

 def clear_bit(number: int, position: int) -> int:

     """"""
"
33606,"            stack.Push(0);

             stack.Push(1);

             stack.Push(2);

             stack.Push(3);

             stack.Push(4);

             stack.Capacity.Should().BeGreaterThan(initialCapacity);
"
18024,"    printf(""4:Exit \n"") ;

     printf(""\nEnter your choice: "") ;

     scanf(""%d"",&ch) ;
"
18386," * happens. And then we move the prev and current pointers one step forward.

  * Then the head node is made to point to the last node (prev pointer) after

  * completion of an iteration.

  * [A graphic explanation and view of what's happening behind the

  *scenes](https://drive.google.com/file/d/1pM5COF0wx-wermnNy_svtyZquaCUP2xS/view?usp=sharing)
"
18429,"//Author:Shawn

 //Email:stepfencurryxiao@gmail.com

 import ""dart:math"" show pow;
"
78322,"    digit_histogram = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

     digit_total = 0

     sum = 0

     temp = n

     while temp > 0:
"
24667,"// function to update the element of stack

 void update()

 {
"
31726,"    int l, r, p, key;

     // Get the array

     // Sort the array if not sorted

     int ar[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

     // Starting index

     l = 0;
"
79356,"             // being visible to end-users

 /** This function partitions `arr[]` in three parts

  * 1. \f$arr[l\ldots i]\f$ contains all elements smaller than pivot

  * 2. \f$arr[(i+1)\ldots (j-1)]\f$ contains all occurrences of pivot
"
89645,"  /* Let's ensure our sequence has only Positive Integers */

   if (sequence.some((integer) => integer < 0)) {

     throw RangeError('Sequence must be a list of Positive integers Only!')

   }
"
91969,"    result_array.push(letter) if letter != 'a' && letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u'

   end

   result_array.join('')
"
19058," * @see https://en.wikipedia.org/wiki/Vector_(mathematics_and_physics).

  */

 class Vector2 {

   constructor (x, y) {
"
30185,"        let mutable result = false

         let patLen = pattern.Length

         let textLen = text.Length

         match patLen with
"
24270,"    # Validates string and returns dict

     pbdict = _plugboard(pb)

     return rotpos, rotsel, pbdict
"
14939,"// The code below can be used for testing

 // let numberList : Array<Int> = [15, 2, 23, 11, 3, 9]

 // let results: Array<Int> = numberList.selectionSort()

 // print(results)
"
19955,"    printf(""vptr_addr:%p\n"",vptr_addr);

     /**

      * @brief 通过vptr指针访问virtual table，因为虚表中每个元素(虚函数指针)在64位编译器下是8个字节，因此通过*(unsigned long *)vptr_addr取出前8字节，

      * 后面加上偏移量就是每个函数的地址！

      */

     void* func_addr = (void *)*((unsigned long *)vptr_addr+offset);
"
19332,"        self.data = data

         return

     def set_left(self, node: my_node | None) -> None:

         self.left = node

         return

     def set_right(self, node: my_node | None) -> None:
"
20112,"/** Main function */

 int main()

 {
"
26724,"	

 }

 // The code below can be used for testing

 // var numberList = [15, 2, 23, 11, 3, 9]

 // debugPrint(numberList.mergeSorted(by: >))
"
16337,"        /// <param name=""buckets"">Array of buckets.</param>

         private static void CollectElements(IList<int> data, int[,] buckets)

         {

             var subscript = 0; // initialize location in data

             // loop over buckets
"
23424,"      return path;

     }

     public int getEstimated() {

       return estimated;
"
24791,"          [0, 0],

           [3, 3],

           [3, 1]
"
16122,"    int people[100];

 public:

     Apple(int i);
"
29637,"      }

     }

     root.color = B;

   }

   void rotateLeft(Node node) {
"
75041,"        }

         [TestCase(17, 7, -3)]

         [TestCase(11, 3, -5)]

         [TestCase(14, 3, 0)]

         public void ModularExponentiationNegativeMod(int b, int e, int m)

         {
"
13032,"using namespace std;

 // 对于修饰Object来说:

 // const并未区分出编译期常量和运行期常量

 // constexpr限定在了编译期常量

 // constexpr作用：优化!效率!
"
25424,"## 4    2   NA   15

 ## 5    1   10   11

 # Add row and column
"
29207,"                x[[eval(col)]] <- factor(x[[eval(col)]])

             }

         }
"
87433,"		remainders[i] = 2

 	}

 	digitsHeld := 0

 	for i := 0; i < n; i++ {

 		carriedOver := 0
"
60933,"package DivideAndConquer;

 import java.util.ArrayList;

 import java.util.Comparator;

 /**

  * @author dimgrichr
"
18283,"    }

 }
"
25180,"    std::pair<matrix<int>, matrix<int>> p =

         ciphers::HillCipher::generate_keys(8, 0, 3);

     matrix<int> ekey = p.first;

     matrix<int> dkey = p.second;
"
27485,"            {

                 printPositioning(i, 3, j);

                 printsTray(Player1, 0);

                 positionBoat(Player1, 3);

             }

             else if (i == 2)
"
20092,"                // if it's not already at  the end

                 if (mi != currSize - 1)

                 {

                     // To move to the end, first move maximum

                     // number to beginning
"
24626,"  count = 0

   nums.each_with_index do |num, i|

     target = num

     nums.each_with_index do |num, j|

       next if i >= j

       count += 1 if num == target
"
74116,"    HashMap h = new HashMap(7);

     Scanner In = new Scanner(System.in);

     while (true) {

       System.out.println(""Enter your Choice :"");

       System.out.println(""1. Add Key"");
"
20305,"class Animal {

 public:

     Animal(int age) {

         std::cout << ""Animal(int age) is called"" << std::endl;
"
12823,"    output =

         (remainder < 10 ? remainder.toString() : ALPHABET_VALUES[remainder]) +

             output;

   }

   return negative ? '-' + output : output;
"
30003," * @return Integer Factorial of the input

  */

 function factorial(int $number)

 {
"
90665,"    }

     return false;

 }

 }  // namespace string_search

 using string_search::kmp;
"
27425,"    int u, v;

     int w;

     /**

      * @param u Source Vertex

      * @param v End vertex

      * @param c Weight
"
38688,"        [Test]

         public static void GetMin_EmptyTree_ReturnsDefaultValue()

         {
"
13540,"        {

             var output = new List<BigInteger>();

             for (BigInteger n = 2; output.Count < count; n++)

             {

                 if (output.All(x => n % x != 0))

                 {
"
63297,"using System.Linq;

 using System.Numerics;

 using Algorithms.Sequences;
"
25858,"        }

         else

         {
"
16153,"     * until it is sorted */

     while (!is_sorted)

     {

 		is_sorted = true;

         /* iterate over all elements */

         for (int i = 0; i < MAX - 1; i++)
"
20457,"﻿namespace Algorithms.Sort

 module InsertionSort =

     let Sort list: 'T [] =

         let mutable list = list |> Array.copy

         for index in 1 .. list.Length - 1 do
"
14347,"    printf(""1:Create Linked List \n"") ;

     printf(""2:Delete Node \n"") ;

     printf(""3:Traverse \n"") ;

     printf(""4:Exit \n"") ;

     printf(""\nEnter your choice: "") ;
"
27799,"    const std::vector<int64_t> o2 = {2, 1, 4, 3, 8, 7};

     assert(arr2 == o2);

     std::cout << ""passed"" << std::endl;

     // [3, 3, 3, 3] return [3, 3, 3, 3]

     std::vector<int64_t> array3 = {3, 3, 3, 3};
"
29026,"    /// <summary>

     ///     Greedy lossless compression algorithm.

     /// </summary>

     public class ShannonFanoCompressor

     {

         private readonly IHeuristicKnapsackSolver<(char symbol, double frequency)> splitter;
"
32772,"        /// </summary>

         /// <param name=""number"">Number to check.</param>

         /// <returns>True if it is a Keith number; False otherwise.</returns>

         public static bool IsKeithNumber(int number)
"
14415,"	}

 	checkWords := map[string]bool{

 		""thomas"": false,
"
33227,"    True

     """"""

     def __init__(self, literals: list[int]) -> None:
"
43757,")

 func TestMaxSubarraySum(t *testing.T) {

 	testCases := []struct {
"
16336,"  }

   remove (node) {

     // Removes and returns the given node from the list
"
79871,"    int ExternalNodeNumber;

     int InternalNodeNumber;

     int k = 1; // For Traversing
"
19577,"    Node parent = n.right;

     while (current != null) {

       parent = current;

       current = current.left;
"
21289,"             */        

             inline char get_char(const int x) {

                 // By adding 65 we are scaling 0-25 to 65-90. 
"
27007,"    // Add remaining elements from the larger subarray to the end of temp

     while (i <= mid) {

         temp[k++] = arr[i++];

     }

     while (j <= right) {

         temp[k++] = arr[j++];
"
18336,"                {

                     if (mat[a][b] != boat)

                     {

                         mat[a][b] = -1;
"
26766,"                    if layer == 0:

                         output += ""\n*************************************""

                         return output
"
18898,"		a    int64

 		b    int64

 		gcd  int64
"
22517,"        sut.makeMove(player: player, position: position)

         XCTAssertEqual(allFieldsAreEmpty(), false)

         sut.clear()

         XCTAssertEqual(allFieldsAreEmpty(), true)

     }

     func testHasEmptyField() {
"
49560,"  isEmpty () {

     return this.size === 0

   }
"
50686,"                if (s[i] > epsilon)

                 {

                     // if the singular value is non-zero, then the basis vector in u should be a unit vector

                     extracted.Magnitude().Should().BeApproximately(1, epsilon);

                 }

                 else
"
27471," */

 function countVowelsRegex(string $string)

 {

     if (empty($string)) {

         throw new \Exception('Please pass a non-empty string value');
"
22769,"#include <iostream>  

 using namespace std;

 class Base

 {
"
24457,"            //Arrange

             var val = new[] { 135, 139, 149, 150, 156, 163, 173, 184, 192, 201, 210, 214, 221, 229, 240 };

             var wt = new[] { 7.0, 7.3, 7.7, 8.0, 8.2, 8.7, 9.0, 9.4, 9.8, 10.6, 11.0, 11.3, 11.5, 11.8, 12.0 };
"
26295,"#

 # Time complexity: O(m*n). The complete nums1 array (of size n) needs to be scanned for all the m elements of nums2 in the worst case.

 # Space complexity: O(1). No additional space since we're swapping elements in nums1 and returning the input array.

 # @param {Integer[]} nums1

 # @param {Integer[]} nums2

 # @return {Integer[]}
"
14897,"        [TestCase(""021053120"")] // Social Security Code

         [TestCase(""449145545588969"")] // IMEI

         [TestCase(""4437113456749113"")] // Bank card

         public void ValidateFalse(string number)

         {

             // Arrange
"
15028,"             *   | 5   6

              *   |/     \

              *  (2)     (3)

              */

             var matrix = new[,]

             {
"
30532,"          max = array[j];

           index = j;

         }

       }
"
22454,"	if da.Capacity == 0 {

 		da.Capacity = defaultCapacity

 	} else {

 		da.Capacity = da.Capacity << 1
"
17309," * @param string $str2

  * @return int the minimum number of changes to transform one string into another

  */

 function editDistance($str1, $str2)

 {

     $lenStr1 = strlen($str1);
"
27122,"    this.next = next

   }

 }
"
25583,"   * @return true if the queue is full

    */

   public boolean isFull() {

     return nItems == maxSize;
"
47966," * assumed as a high quality code.

  *

  * @author Rajat-Jain29
"
13908,"require 'minitest/autorun'

 require_relative './sort_tests'

 require_relative './pancake_sort'

 class TestInsertionSort < Minitest::Test
"
66590,"    }

     private void checkCapacity(int capacity) {

         if (capacity <= 0) {

             throw new RuntimeException(""capacity must greater than 0!"");

         }

     }
"
27597,"                10

         """"""

         assert t.root.right is not None

         assert t.root.right.parent == t.root
"
20349,"#include <string>

 #include ""structData.h""

 using namespace std;

 namespace hana = boost::hana;

 // 检查类型是否有一个serialize方法
"
20579,"library(rpart)

 x <- cbind(x_train,y_train)

 # grow tree 

 fit <- rpart(y_train ~ ., data = x,method=""class"")
"
24766,"                bitmap.SetPixel(location.x, location.y, replacementColor);

                 for (int i = 0; i < neighbors.Count; i++)

                 {

                     int x = location.x + neighbors[i].xOffset;

                     int y = location.y + neighbors[i].yOffset;
"
10699,"    }

     return NULL;

 }
"
19900," * Bubble sort algorithm implements using recursion

  * @param arr array to be sorted

  * @param size size of array

  */
"
33489,"    ///     (Wiki: https://en.wikipedia.org/wiki/Modular_exponentiation).

     /// </summary>

     public class ModularExponentiation

     {

         /// <summary>

         ///     Performs Modular Exponentiation on b, e, m.
"
25690,"            while (swapped)

             {

                 for (var i = startIndex; i < endIndex; i++)

                 {
"
15233,"			gcd, x, y := Extended(tc.a, tc.b)

 			if gcd != tc.gcd && x != tc.x && y != tc.y {

 				t.Fatalf(""Expected values:\n\tGCD: Expected %v Returned %v,\n\tx: Expected %v Returned %v\n\ty: Expected %v Returned %v"", tc.gcd, gcd, tc.x, x, tc.y, y)

 			}
"
16339,"            q.Enqueue('C');

             var result = new StringBuilder();

             // Act
"
24397,"    Examples

     -------

     >>> top_down_cut_rod(4, [1, 5, 8, 9])

     10

     >>> top_down_cut_rod(10, [1, 5, 8, 9, 10, 17, 17, 20, 24, 30])
"
84114,"        graph::bidirectional_dijkstra::addEdge(&adj1, &adj2, u, v, w);

         if (edges != 0) {

             std::cout << ""Enter the next edge"" << std::endl;
"
31258,"        for (n = 0; n < roots->size(); n++) {

             if (break_loop)

                 continue;
"
31696,"        )

         graph[i] = {""src"": src, ""dst"": dest, ""weight"": weight}

     source = int(input(""\nEnter shortest path source:"").strip())

     shortest_distance = bellman_ford(graph, V, E, source)

     print_distance(shortest_distance, 0)
"
32984,"					break

 				}

 			}

 		}
"
25385,"            jaro <- 0.0

         else

             jaro <-

                 1.0 / 3.0
"
87924,"<?php

 use function PHPUnit\Framework\assertEquals;

 use PHPUnit\Framework\TestCase;

 require_once __DIR__ . '/../vendor/autoload.php';
"
83614,"uuid = ""d6f4376e-aef5-505a-96c1-9c027394607a""

 [[MbedTLS]]

 deps = [""Dates"", ""MbedTLS_jll"", ""Random"", ""Sockets""]

 git-tree-sha1 = ""1c38e51c3d08ef2278062ebceade0e46cefc96fe""

 uuid = ""739be429-bea8-5141-9913-cc70e7f3736d""

 version = ""1.0.3""
"
29747,"namespace Algorithms.Strings

 open Microsoft.FSharp.Collections

 module JaroWinkler =

     /// <summary>

     /// Jaro–Winkler distance is a string metric measuring an edit distance between two
"
32121,"    >>> weight_conversion(""carrat"",""carrat"",4)

     4.0

     >>> weight_conversion(""carrat"",""atomic-mass-unit"",4)
"
21998,"            var current = Tail;

             while (current is not null)

             {

                 yield return current.Data;

                 current = current.Previous;
"
13392,"/** global vector variables used in the ::ans function.

  * @todo @stepfencurryxiao add documetnation

  */

 vector<ll> fib_b, fib_c;

 /** To multiply 2 matrices
"
24810," * From [Wikipedia](https://en.wikipedia.org/wiki/Memoization),

  * memoization is an optimization technique

  * used primarily to speed up computer programs,
"
95464,"     */

     void InsertPreSplit(int64_t item);

     /**

      * @brief A insert implementation of post-merge
"
24604,"    if (WSAStartup(MAKEWORD(2, 2), &wsData) != 0)

     {

         perror(""WSA Startup error: \n"");

         return 0;

     }
"
74821,"    for (i = 100; i <= 999; i++)

     {

         for (j = 100; j <= 999; j++)
"
10489,"	""io""

 	""math/big""

 )

 // Generate returns a newly generated password
"
13269,"            // A priority queue that will sort our nodes based on the total cost estimate

             var open = new PriorityQueue<Node>();

             foreach (var node in from.ConnectedNodes)

             {

                 // Add connecting nodes if traversable

                 if (node.Traversable)
"
18426,"    import argparse

     parser = argparse.ArgumentParser()

     parser.add_argument(

         ""num"",

         type=int,
"
10572,"            var sum = 0;

             var k = digitsInNumber;

             while (sum < number)
"
25916,"bool isPowerOfTwo(int n)

 {

     if (!n)

         return false;

     while (n % 2 == 0) n /= 2;
"
12637,"      }

     }

     return true; // True if prime

   }

   public static int reverse(int n) { //  Returns  the reverse of the number

     int reverse = 0;
"
14732,"	}

 	_, err = IntToRoman(0)

 	if err == nil {

 		t.Errorf(""IntToRoman(%d) expected an error"", 0)
"
11523,"        {

             // initialize result in variable res

             int res = 1;
"
17525," * Other examples of Perfect Numbers: 28, 486, ...

  *

  * More on Perfect Number:

  *      https://en.wikipedia.org/wiki/Perfect_number
"
75876,"                    col = j;

  

                     // We still have some remaining
"
13922,"# A ruby program to find factorial of a given integer

 # Factorial of a given integer is defined as the product of all the positive integers less than or equal to the given integer

 # Mathematical representation: n! = n * (n - 1) * (n - 2) * ... * 1

 #

 # Non-recursive and non-iterative approach
"
25415,"        self.height = height

         return

 def get_height(node: my_node | None) -> int:

     if node is None:

         return 0

     return node.get_height()
"
55369,"  }

   private static int upperBound(int[] ar, int l, int r, int key) {

     while (l < r - 1) {
"
79756," * A iterative version of a ternary search algorithm This is better way to implement the ternary

  * search, because a recursive version adds some overhead to a stack. But in java the compile can

  * transform the recursive version to iterative implicitly, so there are no much differences between

  * these two algorithms

  *

  * <p>Worst-case performance Θ(log3(N)) Best-case performance O(1) Average performance Θ(log3(N))
"
18009,"  })

 })
"
14171,"                   else

                      (2..Math.sqrt(number)).any? { |i| number % i == 0 }

                    end

   if !non_prime_flag

     puts ""The given number #{number} is a Prime.""

   else
"
25983,"    +--+--+--+--+--+--+--+--+--+--+

     |  |  |  | 3|  |  |  |  |  |  |

     +--+--+--+--+--+--+--+--+--+--+

     |  |  |  |  | 1|  |  |  |  |  |

     +--+--+--+--+--+--+--+--+--+--+

     |  |  |  |  |  | 2|  |  |  |  |
"
15996,"void test()

 {

     const int sets[][2] = {

         {0, 0}, {1, 1}, {2, 10}, {3, 11}, {4, 100}, {6, 110}, {7, 111},

         /* add more data sets to test */
"
27737,"    myQueue.remove();

     System.out.println(myQueue.peekFront()); // Will print 4

     // instack: [(top) 5]

     // outStack: [(top) 4]
"
77819,"        Object[][] sortedTable = sortTable(table);

         StringBuilder wordEncrypted = new StringBuilder();

         for (int i = 0; i < sortedTable[0].length; i++) {

             for (int j = 1; j < sortedTable.length; j++) {

                 wordEncrypted.append(sortedTable[j][i]);
"
25239,"    return n == sum

 def pluperfect_number(n: int) -> bool:

     """"""Return True if n is a pluperfect number or False if it is not

     >>> all(armstrong_number(n) for n in PASSING)

     True
"
32716,"  for (int div = 2; div <= root; div++) {

     if (number % div == 0) return false;

   }

   return true;

 }
"
17226,"        if (arrangements.isEmpty()) {

             System.out.println(""There is no way to place "" + queens + "" queens on board of size "" + queens + ""x"" + queens);

         } else {

             System.out.println(""Arrangement for placing "" + queens + "" queens"");

         }

         arrangements.forEach(arrangement -> {
"
14258,"			}

 			EnQueue(3)

 			EnQueue(4)

 			DeQueue()

 			EnQueue(22)
"
16320,"# Output: [1,2,1,2]
"
67234," * @author Lukas Keul, Florian Mercks

  */

 class Graph<E extends Comparable<E>> {

   class Node {
"
22331,"                for (int i = 0; i < neighbors.Count; i++)

                 {

                     int x = currentLocation.x + neighbors[i].xOffset;
"
28396,"package Others;

 import java.util.Arrays;

 import java.util.Objects;

 /**

  * The Luhn algorithm or Luhn formula, also known as the ""modulus 10"" or ""mod 10"" algorithm,

  * named after its creator, IBM scientist Hans Peter Luhn, is a simple checksum formula
"
15658,"                }

                 plainMatrix[i][0] = plainMatrix[i][0] % 26;

             }
"
52994,"      System.out.println(parent[i] + "" - "" + i + ""    "" + graph[i][parent[i]]);

   }

   // Function to construct and print MST for a graph represented

   //  using adjacency matrix representation

   void primMST(int graph[][]) {

     // Array to store constructed MST
"
27437,"                    return rowToSwap;

                 }

             }

             return col + 1;
"
62987,"        t = t->next;

     }

 }

 void double_linked_list::reverseShow() {

     node *t = start;

     while (t != NULL && t->next != NULL) {
"
40837,"begin

   queue.pop

 rescue StandardError => e

   puts e.message
"
21762,"    and minimum distance of three.

     * the implemented code consists of:

         * a function responsible for encoding the message (emitterConverter)
"
50773," * @return if number is a factorial, returns true, else false.

  */

 bool is_factorial(uint64_t n) {

     if (n <= 0) {

         return false;

     }
"
23075,"    {

         count++;

         if (get_number(fp, txt_buffer, number) != 0)

         {

             break;

         }
"
14196,"    print(""optimal_value = "", optimal_solution)

     print(""An optimal subset corresponding to the optimal value"", optimal_subset)
"
27209,"prime_factors(2560)        # returns [2, 2, 2, 2, 2, 2, 2, 2, 2, 5]

 ```

 Contributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee)

 """"""
"
13745,"		{""[3, 0, 1]/2"", []int{3, 0, 1}, 2},

 		{""[0, 1, 3, 4, 5, 6, 7]/2"", []int{0, 1, 3, 4, 5, 6, 7}, 2},

 		{""[0, 2, 3, 4, 5, 6, 7, 8, 9]/1"", []int{0, 2, 3, 4, 5, 6, 7, 8, 9}, 1},

 		{""[0, 10, 9, 7, 2, 1,  4, 3, 5, 6]/8"", []int{0, 10, 9, 7, 2, 1, 4, 3, 5, 6}, 8},
"
12867,"    printf(""Passed\n"");

 }

 /** 
"
25990,"            int n)

         {

             // Arrange

             var sorter = new RadixSorter();
"
14697,"end

 if $0 == __FILE__

   puts 'Enter a list of numbers separated by space'

   list = gets.split.map(&:to_i)

   p merge_sort(list)
"
17143,"    // lps(""bbbab"") return ""bbbb""

     assert(lps(""bbbab"") == ""bbbb"");

 }
"
20297,"        g->edges[e.w][e.v] = 0;

         g->nE--;

     }

 }
"
21465,"    if (

         input(""Do you want to enter your denominations ? (yY/n): "").strip().lower()

         == ""y""

     ):

         n = int(input(""Enter the number of denominations you want to add: "").strip())
"
26833,"			if s.Len() != tc.expSet.Len() {

 				t.Errorf(""expecting %d elements in the set but got %d: set is %v"", tc.expSet.Len(), s.Len(), s.GetItems())

 			}
"
28036,"        :return: index

         """"""

         return (self.nir - self.green) / (self.nir + self.green + Y)

     def GSAVI(self, L=0.5):
"
10816,"import java.util.Set;

 /**

  * A class that counts the number of different connected components in a graph
"
56345,"    return true;

   }

 }
"
18335,"    print(""No of Inputs       Time Taken"")

     for i in range(len(inputs)):

         print(inputs[i], ""\t\t"", tim[i])

     plt.plot(inputs, tim)

     plt.xlabel(""Number of Inputs"")
"
11623,"            {

                 currentStep = step;

                 var aNew = a * a - b * b + figureX;

                 b = 2 * a * b + figureY;

                 a = aNew;
"
31541,"}
"
26033,"version = ""2.10.1+5""

 [[FriBidi_jll]]

 deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""Pkg""]

 git-tree-sha1 = ""aa31987c2ba8704e23c6c8ba8a4f769d5d7e4f91""

 uuid = ""559328eb-81f9-559d-9380-de523a88c83c""
"
32877,"		expectedLen int

 	}{

 		{[]int{1, 2, 3, 4, 5, 10}, 6},
"
28122,"				{0, 1, 0, 0, 0, 0},

 			},

 			true,

 			2,

 		},

 		{
"
44441,"    if (isprime(n) == 1)

         printf(""%d"", n);

     else

     {

         while (n % 2 == 0)
"
85437,"        ///     Gets all values that happened at specified day of the year.

         /// </summary>

         /// <param name=""dayOfYear"">Value to look for.</param>

         /// <returns>Array of values.</returns>

         public Timeline<TValue> GetValuesByDayOfYear(int dayOfYear)

             => new(timeline.Where(pair => pair.Time.DayOfYear == dayOfYear).ToArray());
"
96589,"package DataStructures.Stacks;

 import java.util.Scanner;

 import java.util.Stack;

 /**

  * Reversal of a stack using recursion. 
"
11961,"const gridGetX = (columns, index) => {

   while (index + 1 > columns) {

     index = index - columns

   }

   return index + 1
"
17251,"package Sort

 object MergeSort {

   /** @param array

     *   - a sequence of unsorted integers

     * @return

     *   - sequence of sorted integers @array
"
23476,"-> https://en.wikipedia.org/wiki/Standard_atmosphere_(unit)

 -> https://msestudent.com/what-are-the-units-of-pressure/

 -> https://www.unitconverters.net/pressure-converter.html

 """"""
"
17980,"})
"
14557,"            }

             node = DecreaseLevel(node);

             node = Skew(node);
"
56487,"                positionBoat(Player2, 3);

             }

         }
"
15818,"    >>> tree_node5 = TreeNode(5)

     >>> tree_node6 = TreeNode(6)

     >>> tree_node7 = TreeNode(7)
"
95725,"    // Untill array is not sorted

     while (!std::is_sorted(arr.begin(), arr.end())) {

         std::random_shuffle(arr.begin(), arr.end());// Shuffle the array
"
27543,"    True

     >>> maze = [[0, 1, 0],

     ...         [0, 1, 0],

     ...         [1, 0, 0]]

     >>> solve_maze(maze)
"
75677,"    expect(romanToInteger('MDCI'), equals(1601));

   });

   test(""romanToInteger LVII returns 57"", () {

     expect(romanToInteger('LVII'), equals(57));

   });
"
16450,"  let n

   let m

   let d

   let limit

   let number = 0

   for (i = 1; i < digits; i++) {
"
22211,"    let index = 0

     while (index <= permutation.length) {

       const tmp = [...permutation]
"
32539,"/*

  * function to check if number is odd

  * return true if number is odd

  * else false

  */

 export const isOdd = (value) => {
"
23901,"      if (a >= len) {

         return -1

       }

     }

     while (arr(a) < elem) {

       a = a + 1
"
24692,"}
"
24180,"  print(decimal_to_any(243, 17)); //Expected 'E5'

   print(decimal_to_any(34923, 36)); //Expected 'QY3'

   print(decimal_to_any(10, 11)); //Expected 'A'

   print(decimal_to_any(-16, 16)); //Expected '-10'
"
22071,"        }

         [Test]

         public static void GetValuesBeforeTest()

         {

             var timeline = new Timeline<string>
"
29263,"def reverse_words(input_str: str) -> str:

     """"""

     Reverses words in a given string

     >>> reverse_words(""I love Python"")

     'Python love I'
"
30013,"package Conversions;

 import java.util.*;

 /**

  * Converts any Binary Number to a Hexadecimal Number

  *
"
21717,"#include<assert.h>

 int main(){

     int x=7;
"
10234,"area_trapezium(-1, 2, 3)    # returns DomainError

 area_trapezium(1, -2, 3)    # returns DomainError

 area_trapezium(1, 2, -3)    # returns DomainError

 area_trapezium(-1, -2, 3)   # returns DomainError

 area_trapezium(1, -2, -3)   # returns DomainError

 area_trapezium(-1, 2, -3)   # returns DomainError
"
21843,"    }

     count--;

   }
"
23486,"      output.add(List.from(currentPermutation));

       stack[i]++;

       i = 0;
"
25289,"    }

   }

   /** Front of Queue */
"
22437," * \param [in] a matrix to read from

  * \param [in] r number of rows

  * \param [in] c number of columns

  */
"
80285,"    }

     return true;

 }

 }  // namespace graph

 /**
"
25986,"    const saturation = 1

     const val = 255

     const hi = (Math.floor(hue / 60)) % 6

     const f = hue / 60 - Math.floor(hue / 60)

     const v = val

     const p = 0
"
33131,"  const del = function (root, _val, tree) {

     if (root == null) {

       return root
"
26574,"git-tree-sha1 = ""84918055d15b3114ede17ac6a7182f68870c16f7""

 uuid = ""79e6a3ab-5dfb-504d-930d-738a2a938a0e""

 version = ""3.3.1""

 [[ArgTools]]
"
15780,"     * @return root of heap

      */

     private T getRoot(int size) {

       swap(heap, 0, size);

       heapSubtree(0, size - 1);

       return heap[size]; // return old root
"
73749,"    return y;

 }

 avlNode *LeftRightRotate(avlNode *z)

 {

     z->left = leftRotate(z->left);
"
68262,"    const r = num % 8

     oct = oct + (r * Math.pow(10, c++))

     num = Math.floor(num / 8) // basically /= 8 without remainder if any

   }
"
20467,"   * @param array contains elements

    * @param low the index of the first element

    * @param high the index of the last element

    * @return min of {@code array}

    */

   public static int min(int[] array, int low, int high) {
"
16829,"  }

 }

 /**

  * This class is the example for the Queue class

  *

  * @author Unknown
"
11798,"    Input : N = 8

     Output:

         0  59  38  33  30  17   8  63

         37  34  31  60   9  62  29  16
"
23218,"    root.preOrder(root.getRoot());

     System.out.println(""\nInorder Traversal: "");

     root.inOrder(root.getRoot());
"
84959,"   * @param figureX The x-coordinate within the figure.

    * @param figureX The y-coordinate within the figure.

    * @param maxStep Maximum number of steps to check for divergent behavior.

    * @return The relative distance as the ratio of steps taken to maxStep.
"
25871,"	""testing""

 )

 func TestSubsetSum(t *testing.T) {
"
38463,"package prime

 // A primality test is an algorithm for determining whether an input number is prime.Among other fields of mathematics, it is used for cryptography.

 //Unlike integer factorization, primality tests do not generally give prime factors, only stating whether the input number is prime or not.
"
29909," * \psi & = &

  * \tan^{-1}\left[\frac{2\left(q_0q_3+q_1q_2\right)}{1-2\left(q_2^2+q_3^2\right)}\right]\\

  * \f}

  *

  * @param [in] in_quat input quaternion instance
"
27435,"//Driver code

 void main() {

   var l, r, p, key;

   //Get the array

   var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
"
17241,"    Problem & Source of Explanation => https://www.cs.auckland.ac.nz/software/AlgAnim/qsort1a.html

 */

 /**

  * Partition in place QuickSort.

  * @param {number[]} inputList list of values.

  * @param {number} low lower index for partition.
"
26722,"[[NLsolve]]

 deps = [""Distances"", ""LineSearches"", ""LinearAlgebra"", ""NLSolversBase"", ""Printf"", ""Reexport""]

 git-tree-sha1 = ""019f12e9a1a7880459d0173c182e6a99365d7ac1""

 uuid = ""2774e3e8-f4cf-5e23-947b-6d7e65073b56""

 version = ""4.5.1""
"
16157,"#include <iostream>  /// for IO operations

 #include <vector>    /// for std::vector

 /**

  * @brief   Constructs the initial segment tree

  *
"
28726,"            for (int x = 0; x < layout.GetLength(0); x++)

             {

                 for (int y = 0; y < layout.GetLength(1); y++)

                 {

                     bitmap.SetPixel(x, y, layout[y, x]);

                 }
"
28221,"   * xPartition function: arrange x-axis.

    *

    * @param a (IN Parameter) array of points <br>

    * @param first (IN Parameter) first point <br>

    * @param last (IN Parameter) last point <br>

    * @return pivot index
"
75657,"// Returns the sorted vector after performing SlowSort

 // It is a sorting algorithm that is of humorous nature and not useful.

 // It's based on the principle of multiply and surrender, a tongue-in-cheek joke
"
94213,"        {

             var index = IndexFor(item, out var found);

             if (found)

             {

                 memory.RemoveAt(index);

             }
"
33373,"        }

         enqueue(i);

     }

     while (queue_has_something())

     {

         int u = dequeue();
"
21055,"For testing run:

 python avl_tree.py

 """"""

 from __future__ import annotations
"
31687,"puts '0! = ' + factorial(0).to_s

 # 0! = 1

 puts '10! = ' + factorial(10).to_s
"
94243,"  it('expects to return 2 as longest valid parentheses substring', () => {

     expect(longestValidParentheses('(()')).toBe(2)

   })

   it('expects to return 2 as longest valid parentheses substring', () => {

     expect(longestValidParentheses(')()())')).toBe(4)
"
34826,"    curr_no = n;          // curr_no stores input number n

     while (curr_no != 1)  // loop till series reaches 1

     {
"
69970,"        printf(""value %d\n"", *(int *)get(da, i));

     }

     int value_for_invalid_index = 10000;

     put(da, &value_for_invalid_index, 150);
"
10015,"}

 /**

  * @brief Test function 1

  *
"
93130,"        while (curr.next.next != null) {

           if (curr.next.data == data) {

             curr.next = curr.next.next;

             return;

           }
"
11797,"    }

     else

     {
"
21005,"      }

       if (node.left) {

         stack.push(tree[node.left])

       }

     }
"
55565,"  def getPrimeNumbers(n: Int): Seq[Int] = allPrimes.take(n)

 }
"
13349,"        {

             // Arrange

             var encoder = new CaesarEncoder();
"
16187,"                remove(root_, root_, successor_node_value);

                 node->value = successor_node_value;

                 return true;

             } else if (node->left || node->right) {

                 std::unique_ptr<bst_node>& non_null =
"
31609,"     [306. 378. 450. 472.]

      [414. 513. 612. 640.]]

     """"""
"
29846,"    48403098129077791799088218795327364475675590848030

     87086987551392711854517078544161852424320693150332

     59959406895756536782107074926966537676326235447210

     69793950679652694742597709739166693763042633987085
"
18372,"package MinimizingLateness;

 import java.io.BufferedReader;

 import java.io.FileReader;
"
14860,"	}

 	return dp[m][n]

 }
"
51929,"/**

  * @brief Function to check priority of operators

  * @param opr operator whose priority is to be checked

  * @returns 0 if operator is '+' or '-'
"
53794,"    """"""

     if num <= 1:

         raise ValueError(""Parameter num must be greater than or equal to two."")

     if num == 2:

         return True
"
23535,"void test_3d_classes1(std::vector<std::valarray<double>> *data) {

     const size_t N = data->size();

     const double R = 0.3;  // radius of cluster

     int i = 0;

     const int num_classes = 4;
"
63144,"using System;

 using System.Collections.Generic;

 using System.Drawing;
"
23108,"    })

     it('should correctly sort an input list of an odd length', () => {

       expect(bucketSort([101, -10, 321])).toEqual([-10, 101, 321])

     })

     it('should correctly sort an input list of an even length', () => {

       expect(bucketSort([40, 42, 56, 45, 12, 3])).toEqual([3, 12, 40, 42, 45, 56])
"
17314,"        """"""

         # getting the edges in ascending order of weights

         edges = []
"
26585,"        // displaying the main menu

         printf(""***************************************\n"");

         printf(""*************TIC TAC TOE***************\n"");
"
29336,"import { factorialDigitSum } from '../Problem020'

 describe('Check Problem 20 - Factorial digit sum', () => {

   it('Factorial digit sum of 10!', () => {

     expect(factorialDigitSum(10)).toBe(27)

   })
"
66144,"        {

             var minHeap = new PairingHeap<int>();

             minHeap.Insert(1);

             var items = minHeap.ToList();

             items.Should().HaveCount(1);

         }
"
21215,"	if (ret != NULL) {

 		free(ret);

 	}

 	
"
31378,"                pointer = pointer.Next;

             }

             return result;

         }

     }
"
27355,"    pair_v = std::vector<int>(n + 1,NIL); 

     dist = std::vector<int>(m + 1);  // dist[u] stores distance of left side vertices

     int result = 0;  // Initialize result

     // Keep updating the result while there is an augmenting path possible.
"
20757,"        to_polar(x, y, &r, &theta);

         assert(fabs(r - hypot(x, y)) < 0.01);

         assert(fabs(theta - atan2(y, x)) < 0.01);

         printf(""passed\n"");

     }
"
20554,"    public static long calculatePower(long x, long y) {

         if (y == 0) return 1;

         long val = calculatePower(x, y / 2);

         val *= val;
"
22058,"     * \param[in] x new data sample

      */

     void new_val(T x) {
"
23660,"        ///     time complexity: O(n^2), where n - array size.

         ///     Guarantees:

         ///     - Everyone is matched

         ///     - Matches are stable (there is no better accepter, for any given proposer, which would accept a new match).

         ///     Presented and proven by David Gale and Lloyd Shapley in 1962.
"
23091,"    const cache = []

     for (let i = 0; i <= currlen; i++) {

       const temp = []

       for (let j = 0; j <= cap; j++) {

         temp.push(-1)
"
26816,"}
"
21352,"const Node = (function Node () {

   // Node in the tree

   function Node (val) {
"
33225,"	startIndex := lowIndex

 	endIndex := highIndex

 	var mid int

 	for startIndex <= endIndex {

 		mid = int(startIndex + (endIndex-startIndex)/2)

 		if array[mid] > target {
"
30042,"{

     if ((ch >= 65 && ch <= 90) ||

         (ch >= 97 && ch <= 122) ||  // check if ch is an operator or

         (ch >= 48 && ch <= 57))     // operand using ASCII values

     {
"
60362,"#include <stdio.h>

 #include <stdlib.h>

 void sort(int *numbers, int size)

 {
"
29148,"{

     // Controller gains

     float kP;

     float kI;

     float kD;
"
27057,"            else:  # We have reached the end an no value matches

                 return ""No data matching given value""

         if current == self.head:

             self.delete_head()

         elif current == self.tail:

             self.delete_tail()
"
32464,"    """"""

     >>> test_list = [0, 1, 2, 8, 13, 17, 19, 32, 42]

     >>> print(binary_search(test_list, 3))

     False
"
24342,"# => false
"
10793,"    Next apply absolute value to assure the results are positive,

     last choose the maximum value of the set, or 6.

     +--+--+--+--+--+--+--+--+--+--+

     |  |  |  | 3|  |  |  |  |  |  |

     +--+--+--+--+--+--+--+--+--+--+
"
14715,"            Assert.AreEqual(y_2, 1.051890625);

         }

         [Test]

         public static void StepsizeIsZeroOrNegative_ThrowsArgumentOutOfRangeException()

         {
"
30568,"""""""

     detect_anagrams(subject, candidates)

 A function that checks if a list of words
"
33597,"  })

   it('should remove and return the top value in the heap', () => {

     const minValue = heap.extractMin()
"
15903,"    if (prime_bits[i]) primes.add(2 * i + 1);

   return primes;

 }

 int prime_factorisation_number_of_divisors(int n, List<int> primes) {

   int nod = 1;

   int remain = n;
"
42536,"        prev_value = value

         value = value - fx(value, a) / fx_derivative(value)

         if abs(prev_value - value) < tolerance:
"
25850,"#include<string>

 using namespace std;

 class Employee{

     public:
"
29888,"}

 /**

  * @brief Implementation of win conditon checker for 'X' or 'O' whenever the table is updated

  *

  * @returns -1: if 'X' won 
"
17793,"          if (noiseValue <= value) {

             System.out.print(c);

             break;

           }

           value += step;
"
72280,"#include <stdbool.h>

 #include <stdio.h>

 #include <stdlib.h>

 bool check_sorted(int *a, int n)

 {
"
88190,"            var max = 0;

             for (var i = nodeCount; i >= 0; i--)

             {

                 max = maxHeap.Extract();

                 Assert.AreEqual(max, i + 1);
"
81097,"    do

     {

         int ret = fscanf(fp, ""\""%[^\"",]\"","", names[COUNT++]);
"
32685,"    List<int> lst = [121, 54, 2100, 36, 155, 90];

     expect(findPeak(lst, lst.length), equals(2));

   });

   test(""findPeak returns 2 for [5, 10, 20, 15]"", () {

     List<int> lst = [5, 10, 20, 15];

     expect(findPeak(lst, lst.length), equals(2));
"
17576,"    if (comp == 0) {

       return median;

     } else if (comp < 0) {

       return search(array, key, left, median - 1);

     } else {

       return search(array, key, median + 1, right);
"
28121,"        clock_t end_time = clock();

         printf(""\nShell sort: %.4g millisecond\n"",

                1e3 * (end_time - start_time) / CLOCKS_PER_SEC);

     }

     else if (method == 1)

     {
"
12727,"    func search(_ value: T) -> TreeNode? {

         if value == self.value {

             return self

         }

         for child in children {

             if let found = child.search(value) {
"
17909,"    do

     {

         /* get product of 'num_digits' from current position in file */
"
50629,"    return """".join(cipher_map.get(ch, ch) for ch in message.upper())

 def decipher(message: str, cipher_map: dict[str, str]) -> str:

     """"""

     Deciphers a message given a cipher map
"
17285,"    }

     free(R);

     free(Q);

     return dtime;

 }
"
27714,"    }

 }
"
95918,"require_once __DIR__ . '/../vendor/autoload.php';

 require_once __DIR__ . '/../ciphers/caesarCipher.php';

 class CiphersTest extends TestCase
"
26371,"    """"""

     total_value = 0

     index = 0
"
12780,"*

 * @details The idea is to split the interval in an EVEN number N of intervals and use as interpolation points the xi

 * for which it applies that xi = x0 + i*h, where h is a step defined as h = (b-a)/N where a and b are the

 * first and last points of the interval of the integration [a, b].

 *

 * We create a table of the xi and their corresponding f(xi) values and we evaluate the integral by the formula:
"
28371,"include(""data_structures/binary_tree/splay.jl"")

 include(""data_structures/disjoint_set/disjoint_set.jl"")

 # Includes: knapsack

 include(""knapsack/dynamic_programming.jl"")

 include(""knapsack/greedy_algorithm.jl"")

 # Includes: math
"
21858,"    return p2;

 }

 int rselect(int a[], int l, int r, int n, int o)

 {

     int pivot, pindex, pactual;
"
33688,"        and (number1 >= 0)

         and (number2 >= 0)

     ), ""'number1' and 'number2' must been positive integer.""

     rest = 0
"
23673,"        swap(array, i, array->size - i - 1);

     }

     return SUCCESS;
"
11651,"        /// </summary>

         /// <param name=""text"">Text to be decoded.</param>

         /// <param name=""key"">Key that was used to encode the text.</param>

         /// <exception cref=""ArgumentException"">Error: key should be more than 0x00001111 for better encoding, key=0 will throw DivideByZero exception.</exception>

         /// <exception cref=""ArgumentException"">Error: The length of text should be divisible by 16 as it the block lenght is 16 bytes.</exception>
"
14210,"    const text = 'abc'

     const SUT = createPermutations(text)

     expect(SUT).toStrictEqual(['abc', 'acb', 'bac', 'bca', 'cab', 'cba'])
"
78193,"    ///

     /// naive_pattern_search(""ABC"", ""ABAAABCDBBABCDDEBCABC"")

     /// []

     ///

     /// naive_pattern_search("""", ""ABC"")
"
31221,"	Head *Node

 }

 // NewSingly returns a new instance of a linked list

 func NewSingly() *Singly {
"
81993,"            return;

         }

     }

     print(dist, V);

     return;
"
29628,"    ///     This is an extension of a segment tree, which allows the update of a single element.

     /// </summary>

     public class SegmentTreeUpdate : SegmentTree
"
76638,"/**

  * @file

  * @brief Implementation of [the inverse square root

  * Root](https://medium.com/hard-mode/the-legendary-fast-inverse-square-root-e51fee3b49d9).

  * @details

  * Two implementation to calculate inverse inverse root,
"
28996,"  return 0;

 }
"
17121,"            testObj1.Equals(testObj2).Should().BeFalse();

             testObj1.Equals(testObj3).Should().BeFalse();

         }

         [Test]

         public static void TestHasCode()
"
56825,"	return arr

 }
"
28116,"target = 9

 print(two_sum(nums, target))

 # => [1,2]

 nums = [2, 3, 4]

 target = 6

 print(two_sum(nums, target))
"
47723,"    }
"
50534," * This implementation supports arbitrary pdfs.

  * These pdfs are sampled using the [Metropolis-Hastings

  * algorithm](https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm). This

  * can be swapped out by every other sampling techniques for example the inverse

  * method. Metropolis-Hastings was chosen because it is the most general and can
"
31579,"        public T Data { get; set; }

         public Node(T data)

         {

             Data = data;
"
17171,"    delete b; 

     return 0; 

 } 
"
14023,"         * to maintain the balance of BST.

          * And then delete that node

          */

         if (temp.right.left == null) {
"
12428,"    const firstArr = [1, 2, 3, 4, 5]

     const secondArr = [1, 3, 5, 6, 7]

     expect(meanSquaredError(firstArr, secondArr)).toBe(2.6)
"
12202,"    std::srand(std::time(nullptr));

     std::clock_t start_clk = std::clock();

     test1();

     auto end_clk = std::clock();
"
96716,"                                                          {0, 0},

                                                           {3, 0},

                                                           {3, 3}};

     for (int i = 0; i < expectedPoint.size(); i++) {

         assert(actualPoint[i].x == expectedPoint[i].x);
"
99846,"    node->left = node->right = NULL;

     return node;

 }

 struct TreeNode *mergeTrees(struct TreeNode *t1, struct TreeNode *t2)
"
22033,"    ${{ test: 'test' }}

     ${null}

   `(

     'expects to throw a type error given a value that is $input',

     ({ input }) => {
"
17438,"    free(X);

     free(W.data);

 }

 /** Creates a random set of points distributed in four clusters in

  * 3D space with centroids at the points
"
24829,"// Program to calculate length of longest increasing subsequence in an array

 // in O(n log n)

 // tested on : https://cses.fi/problemset/task/1145/

 #include <iostream>
"
17116,"#include <string.h>      /// for string comparison

 #include <assert.h>     /// for assert()

 #include <inttypes.h>  /// for uint16_t

 #define MAX 20

 #define INF 999

 /**
"
20939,"/**

  * @file Provides solution for Project Euler Problem 18 - Maximum path sum I

  * @author Eric Lavault {@link https://github.com/lvlte}
"
27508,"    cout << ""pass by value: "" << endl;

     AcceptVal(ReturnRvalue()); // 应该调用两次拷贝构造函数

     cout << ""pass by reference: "" << endl;

     AcceptRef(ReturnRvalue()); //应该只调用一次拷贝构造函数

 }
"
19188,"    }

     return k;

 }
"
18875,"        [Test]

         public void GetKeysPostOrder_EmptyTree_ReturnsCorrectAnswer()

         {

             var tree = new AATree<int>();

             tree.GetKeysPostOrder().ToList().Count.Should().Be(0);
"
11115,"            {

                 for (int b = aux - 1; b < (aux + boat + 1); b++)

                 {

                     if (a >= 0 && a <= 9 && b >= 0 && b <= 9)

                     {
"
41552," * \param[in] debug_print 1 to print intermediate Q & R matrices, 0 for not to

  * \returns time for computation in seconds

  */

 double eigen_values(double **A, double *eigen_vals, int mat_size,

                     char debug_print)
"
11822,"X[(X$var1 <= 3 | X$var3 > 15), ]

 ##   var1 var2 var3

 ## 1    2   NA   15

 ## 4    1   10   11

 ## 2    3   NA   12

 ## Dealing with missing values
"
12743,"        @test prime_check(17) == true

         @test prime_check(19) == true

         @test prime_check(23) == true
"
30146,"            // Assert

             actualMatrix.Should().BeEquivalentTo(result);

         }
"
15793,"    */

   def mergeSort(array: Array[Int]): Array[Int] = {

     def sort(array: Array[Int]): Array[Int] = {

       MS(array, 0, array.length - 1)

     }

     def MS(array: Array[Int], low: Int, high: Int): Array[Int] = {
"
30865,"    firstElement.content = element;

     firstElement.nextElement = oldfirst;

     size++;

   }

   /**

    * Checks if the bag contains a specific element
"
26369,"# ╟─00000000-0000-0000-0000-000000000001

 # ╟─00000000-0000-0000-0000-000000000002
"
27821,"/**

  * @addtogroup hash Hash algorithms

  * @{

  * @file hash_crc32.c

  * @author [Christian Bender](https://github.com/christianbender)
"
20534,"            return self.h.pop(-1)

         else:

             raise Exception(""Empty heap"")

     def insert(self, value: float) -> None:
"
12881,"package power

 import ""testing""

 var testCases = []struct {

 	name     string

 	base     uint
"
10233,"    public class HyperLogLog<T> where T : notnull

     {

         private const int P = 16;

         private const double Alpha = .673;

         private readonly int[] registers;
"
24428,"{

     /// <summary>

     ///     Factors number using trial division algorithm.
"
32852,"			[]int{-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, ""Reversed Signed #2""},

 		//Random order with repetitions

 		{[]int{-5, 7, 4, -2, 6, 5, 8, 3, 2, -7, -1, 0, -3, 9, -6, -4, 10, 9, 1, -8, -9, -10},
"
56456,"        knapSackProblem(capacity, values, weights, numberOfItems - 1));

   } else {

     return knapSackProblem(capacity, values, weights, numberOfItems - 1);

   }

 }

 void main() {
"
11477,"#include <vector>

 #ifdef _OPENMP  // check if OpenMP based parallellization is available

 #include <omp.h>
"
24952,"                                len_stack_minus_one -= 1

                     if visited.count(node[1]) < 1:

                         stack.append(node[1])
"
48752,"  /**

    * @param key : a number of object type 'Integer'

    * @param info : any kind of IMMUTABLE object. May be null, since the purpose is only to carry

    *     additional information of use for the user

    */
"
15713," * Application of Depth First Search are

  *

  * 1. Finding connected components
"
16844,"            return nullptr;

         }

         return children[item_index];

     }

     /**

      * @brief Get right child of item at item_index
"
15621,"[[SteadyStateDiffEq]]

 deps = [""DiffEqBase"", ""DiffEqCallbacks"", ""LinearAlgebra"", ""NLsolve"", ""Reexport"", ""SciMLBase""]

 git-tree-sha1 = ""3df66a4a9ba477bea5cb10a3ec732bb48a2fc27d""

 uuid = ""9672c7b4-1e72-59bd-8a11-6ac3964bc41f""

 version = ""1.6.4""

 [[StochasticDiffEq]]
"
10650,"    for (int processSize : sizeOfProcesses) {

       int chosenBlockIdx =

           findWorstFit(

               sizeOfBlocks, processSize); // Find the index of the memory block going to be used

       memAlloc.add(chosenBlockIdx); // Store the chosen block index in the memAlloc array list

       if (chosenBlockIdx
"
26371,"  }

 }
"
16034,"2            12

 3            19

 4            21

 5            11

 6            9
"
32443,"package Mathematics

 import org.scalatest.flatspec.AnyFlatSpec

 class BinaryExponentiationSpec extends AnyFlatSpec {

   it should ""output the correct Integer as a result for base raised to the power "" in {

     assert(BinaryExponentiation.binaryExponentiation(2, 3) === 8)

   }
"
28340,"func main() {

 	length := 10

 	price := []int{0, 1, 5, 8, 9, 17, 17, 17, 20, 24, 30}
"
33612,"        if self.activation is None:

             self.activation = sigmoid

     def cal_gradient(self):
"
33918,"    printf(""\n"");

     return 0;

 }

 Heap *create_heap(Heap *heap)
"
29544,"        /// <param name=""element"">The element to check/insert.</param>

         /// <returns>element if element compares larger than top/root of heap, top/root of heap otherwise.</returns>

         public T PushPop(T element)
"
85309,"#!/usr/bin/env python3

 def climb_stairs(n: int) -> int:

     """"""

     LeetCdoe No.70: Climbing Stairs
"
22729,"    // and all elemets must be integers

     array_check($arr);

     $hi = count($arr);

     $lo = 0;

     while($lo < $hi){
"
12805,"   *

    * @param initialVectors The vectors composing the shape to which the algorithm is applied.

    * @param steps The number of iterations.

    * @return The transformed vectors after the iteration-steps.

    */
"
35303,"    """"""

     uses bottom-up dynamic programming solution for matching the input

     string with a given pattern.
"
19986,"        Assert.AreEqual(expected, actual)
"
33502,"    perm_list = [int("""".join(i)) for i in permutations(pandigital_str, n)]

     pandigitals = [num for num in perm_list if is_prime(num)]

     return max(pandigitals) if pandigitals else 0

 if __name__ == ""__main__"":
"
57986,"				return true

 			}

 			delete(color, v)

 		}

 	}

 	return false
"
18589,"    print('Imaginary roots');

   } else if (d == 0) {

     A.add(-b / (2 * a));

   } else {

     A.add((-b + sqrt(d)) / (2 * a));
"
26422,"             *    \       \     /

              *     5       7   5

              *      \       \ /

              *      (3)     (4)

              *        \       \
"
16076,"        heapSubtree(root, heap.length - 1);

       }

     }
"
34739,"    // Create window.  Set the size for creating a window

     // and creating a new array for the coordinates in the window

     for (int i = 0; i < indexNum; i++) {

       double xGap = Math.abs(divideArray[divideX].x - divideArray[i].x);

       if (xGap < minValue) {
"
33949,"            new object[]

             {

                 4.235889,

                 new[] { 0.91287093, 0.40824829 },

                 new[,] { { 2.0, 5.0 }, { 1.0, 2.0 } },
"
33158,"#endif

             return 1;

         }

     }
"
24377,"        // calloc so that all valeus are '0' by default

         A[i] = (double *)calloc(mat_size, sizeof(double));

         L[i] = (double *)calloc(mat_size, sizeof(double));
"
16913,"	b.ReportAllocs()

 	for i := 0; i < b.N; i++ {

 		_, _ = BinaryToDecimal(""1100100"")

 	}
"
20220,"        ///     </item>

         /// </list>

         /// <param name=""source"">Source square-shaped matrix.</param>

         /// <param name=""startVector"">Start vector.</param>

         /// <param name=""error"">Accuracy of the result.</param>
"
22923,"} 
"
29380,"        if (pos == 'l') {

             curr->left = t;

         } else if (pos == 'r') {
"
28447,"    public void setCoeffs(double[] aCoeffs, double[] bCoeffs) throws IllegalArgumentException {

         if (aCoeffs.length != order) {

             throw new IllegalArgumentException(""aCoeffs must be of size "" + order + "", got "" + aCoeffs.length);

         }

         if (aCoeffs[0] == 0.0) {

             throw new IllegalArgumentException(""aCoeffs.get(0) must not be zero"");
"
13116,"   * @return true if add successfully

    */

   public boolean enqueue(int data) {

     Node newNode = new Node(data);

     rear.next = newNode;
"
30524,"    } // namespace caesar

 } // namespace ciphers

 /**

  * Function to test above algorithm

  */
"
26198,"   *

    * Be careful collection must be ascending sorted, otherwise result will be unpredictable

    *

    * @param Array $list a sorted array list of integers to search

    * @param integer $target an integer number to search for in the list
"
31037,"        }

         private void PushDownMin(int index)

         {

             if (!HasChild(index))

             {

                 return;
"
15193,"            nums[i - count] = nums[i];

     }

     return numsSize - count;
"
26216,"    return false;

   }

   if (sequence.isEmpty) {
"
20431,"  public Link next;

   /** This points to the link behind the new link */

   public Link previous;
"
71569,"        private static Color ColorCodedColorMap(double distance)

         {

             if (distance >= 1)

             {
"
13718,"  }

 }
"
57962,"        i++;

         j++;

     }

 }

 void ssort1(char *x[], int n, int depth)
"
70225,"        }

     }

 }
"
19225,"fit <- train(y ~ ., data = x, method = ""gbm"", trControl = fitControl,verbose = FALSE)

 predicted= predict(fit,x_test,type= ""prob"")[,2] 

 # XGBoost

 require(caret)

 x <- cbind(x_train,y_train)
"
28269,"	if (!atexitCalled)

 	{

 		atexit(printLeaks); // Used to call printLeaks when the program exit

 		atexitCalled = 1;

 	}
"
88676,"	}

 	return

 }
"
20376," */

 class BinarySearch implements SearchAlgorithm {

   /**

    * @param array is an array where the element should be found

    * @param key is an element which should be found
"
15290," * we get 3, 5, 6 and 9. The sum of these multiples is 23.

  *

  * Find the sum of all the multiples of 3 or 5 below 1000.

  *

  *
"
67492,"        [Test]

         public static void FindIndex_ItemMissing_MinusOneReturned([Random(0, 1_000_000, 100)] int n)

         {

             // Arrange

             var searcher = new LinearSearcher<int>();
"
26850,"            #""EVI""              --  red, blue, nir

             #""GEMI""             --  red, nir

             #""GOSAVI""           --  green, nir

             #""GSAVI""            --  green, nir

             #""Hue""              --  red, green, blue

             #""IVI""              --  red, nir
"
17252,"    return failure;

 }

 /**

  * KMP algorithm to find a pattern in a text

  * \param[in] pattern string pattern to search

  * \param[in] text text in which to search
"
17746,"    numerals += num * ""I""

     return numerals

 def solution(roman_numerals_filename: str = ""/p089_roman.txt"") -> int:
"
13962,"        {

             b[c++] = a[p1];

             p1++;

         }
"
75172,"    }

     else

     {

         scanf(""%d %c %c"", &line, &column, &guide);
"
33154,"    >>> intersection(math.sin, -math.pi, math.pi)

     0.0

     >>> intersection(math.cos, -math.pi, math.pi)

     Traceback (most recent call last):

     ...
"
50928,"        public int hashCode() {

             return Objects.hash(gcd, solution);

         }

         @Override
"
13811,"}
"
89122,"            A[index] = temp

     temp = A[newPivotIndex + 1]

     A[newPivotIndex + 1] = A[end]

     A[end] = temp

     return newPivotIndex + 1, count
"
13700,"    vals = {""I"": 1, ""V"": 5, ""X"": 10, ""L"": 50, ""C"": 100, ""D"": 500, ""M"": 1000}

     total = 0

     place = 0

     while place < len(roman):

         if (place + 1 < len(roman)) and (vals[roman[place]] < vals[roman[place + 1]]):

             total += vals[roman[place + 1]] - vals[roman[place]]
"
25902,"   *

    * @param Array $list a sorted array list of integers to search

    * @param integer $target an integer number to search for in the list

    * @return integer the index where the target is found (or null if not found)
"
24540,"    )

     # turn image in gray scale value

     gray_img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

     # get image shape

     img_rows, img_cols = gray_img.shape
"
97326,"            addZeroEdge.Should().Throw<InvalidOperationException>()

                 .WithMessage(""Edge weight cannot be zero."");

         }

         [Test]

         public void GraphAddEdgeTest_ShouldThrowVertexNotInGraph()

         {
"
25127,"     * containing '\0') to that area

      *

      * We bind the server_addr to the internet address and port number thus

      * giving our socket an identity with an address and port where it can

      * listen for connections

      *
"
12415,"{

     if (list != NULL)

     {

         printf(""%f\t"", list->value);

         print(list->next);

     }
"
14355,"void func() 

 {

     cout<<""::func""<<endl;

 }

 namespace ns1 {
"
10471,"		{

 			input:    []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1},

 			expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},

 			name:     ""Reversed Unsigned"",
"
32819,"                array[targetInsertLocation] = target;

             }

         }

         /// <summary>Implementation of Binary Search using an iterative approach.</summary>

         /// <param name=""array"">
"
53025,"        matrix: list[list[float]] = []

         # put the x and x to the power values in a matrix

         while count_of_line < x:

             count_in_line = 0
"
17701,"                    node.Parent.Right = node;

                 }

             }

             node.Left = temp1;

             node.Left.Parent = node;
"
38918,"    private func foundWinInColumns(_ playerSymbol: PlayerSymbol) -> Bool {

         for j in 0 ..< self.size {

             var theSameSymbolsInColumnCount = 0
"
22483,"class LinkedList:

     def __init__(self):

         self.head = None  # First node in list
"
12029,"    # Mapping the quantum measurement to the classical bits

     circuit.measure(list(range(qubits)), list(range(classical_bits)))

     # Now measuring any one qubit would affect other qubits to collapse

     # their super position and have same state as the measured one.

     # Executing the circuit on the qasm simulator

     job = qiskit.execute(circuit, simulator, shots=1000)
"
66155,"            var binString = Convert.ToString(x, 2); // converts hash to binary

             var j = Convert.ToInt32(binString.Substring(0, Math.Min(P, binString.Length)), 2); // convert first b bits to register index

             var w = (int)Math.Log2(x ^ (x & (x - 1))); // find position of the right most 1.
"
29307,"            tree.AddRange(new[] { 5, 2, 8, 1 });

             tree.Remove(1);

             tree.Remove(2);

             tree.Contains(2).Should().BeFalse();
"
13717,"   *

    * @param a (IN Parameter) array of points <br>

    * @param first (IN Parameter) first point <br>
"
33945,"            var vertexCount = distances.GetLength(0);

             for (var k = 0; k < vertexCount; k++)

             {

                 for (var i = 0; i < vertexCount; i++)
"
38268," * @param height The height of the base triangles

  * @param depth The depth of the triangular prism (the height of the whole

  * prism)

  * @returns The volume of the triangular prism

  */

 template <typename T>
"
16026,"      Node temp = findEnd(first);

       temp.setNext(new Node(key));

     }
"
29965,"   * @return sum of given array

    */

   public static int getSum(int[] arr) {

     int sum = 0;

     for (int temp : arr) {
"
25830,"    /**

      * @brief Executes test cases

      * @returns void
"
28714,"        case 4:

           return new Color(t, p, v);

         default:

           return new Color(v, p, q);

       }

     }
"
33329,"        {

             /* Graph

              *  (0)--3--(2)     (4)--2--(5)
"
29976,"    /// </summary>

     public static class FermatPrimeChecker

     {
"
12156,"        if (i + 1 < input.size()) {

             char second_byte = input[i + 1];  /// Second byte of the iteration

             // Take remaining two bits of first character, and four first bits

             // from second character Combine two numbers as 6-bit digits and

             // encode by array chars (first two bits of first byte and next four
"
59266,"  }

   solve () {

     const [y, x] = this.findEmptyCell()

     // checking if the board is complete

     if (y === -1 && x === -1) return true

     for (let val = 1; val < 10; val++) {
"
14710,"static double k_ratio = 0.1;       /**< the k-ratio defined in docs */

 static const double num_rot = 20.; /**< number of rotations to simulate */

 /** A wrapper that is not available in all GLUT implementations.

  */

 static inline void glutBitmapString(void *font, char *string)
"
30812,"/**

  * Function to add arbitrary length decimal integers stored in an array.

  * a + b = c = new b

  */
"
40384,"void *countgold() {

     int i; //local to each thread

     for (i = 0; i < 10000000; i++) {

         m.lock();
"
17773,"            guard let a = numberStack.popLast(), let b = numberStack.popLast() else {

                 return

             }

             numberStack.append(op.apply(a, b))
"
16055,"		},

 	}

 	for _, tc := range testCases {
"
13249,"    test();  // run self-test implementations

     return 0;

 }
"
27727,"            }

             if theSameSymbolsInRowCount == self.size - 1 {

                 return true

             }

         }
"
10094,"    }

     public Element next() {

       if (!hasNext()) throw new NoSuchElementException();

       Element element = currentElement.content;

       currentElement = currentElement.nextElement;

       return element;
"
21503,"            }

         }

     }

 }
"
60796,"            {

                 throw new InvalidOperationException(""The column vector should have only 1 element in width."");

             }

             var rowVector = new double[source.Length];

             for (var i = 0; i < rowVector.Length; i++)

             {
"
27172,"      stack.push(i)

     }

   }

   // summing all adjacent valid

   for (let i = 1; i < n; i++) {
"
51145,"# Input: n = 2

 # Output: 15

 # Explanation: The 15 sorted strings that consist of vowels only are

 # [""aa"",""ae"",""ai"",""ao"",""au"",""ee"",""ei"",""eo"",""eu"",""ii"",""io"",""iu"",""oo"",""ou"",""uu""].
"
22600,"        while (temp > 0)

         {

             // Extracting Last digit of the number

             int rem = temp % 10;
"
51297,"    169: 3,

     36301: 3,

     1454: 3,

     871: 2,
"
17935,"            return False

     def _is_support(self, index):

         if self.alphas[index] > 0:

             return True
"
27940,"# Sort method will sort the elements in ascending order. Last method will return the end element out of the array

 def predefined_sort_last_max(*array)

   ""The Max of the following elements #{array} is #{array.max}.""

 rescue StandardError
"
23765,"		}

 		if (src.length() == svidx && pat.length() != pvidx) {

 			for (int i = pvidx; i < pat.length(); i++) {

 				if (pat.charAt(i) != '*') {

 					return false;
"
15524,"Fact <- function(n){

   if(n < 0){

     stop(""Error: your input is wrong!"")

   } else if(n == 0){

     return(1)

   } else {
"
13806,"    [1, 1, 1, 1, 1]

     True

     >>> maze = [[0, 0, 0],
"
22559,"    end

     @testset ""Math: Area"" begin

         @test surfarea_cube(1) == 6

         @test surfarea_cube(3) == 54

         @test_throws DomainError surfarea_cube(-1)
"
14536,"// returned if the integer is not between 1 and 3999.

 func IntToRoman(n int) (string, error) {

 	if n < 1 || n > 3999 {

 		return """", errors.New(""integer must be between 1 and 3999"")
"
75712,"}

 /**

  *

  * @param {*} number
"
19556,"        {

             range = increase(range, len);

             len += STEP;

             range[i] = n;

             i++;

         }
"
12345,"				if itemKey[x] == targetRune[x] {

 					pop[i].Value++

 				}

 			}

 			pop[i].Value = pop[i].Value / float64(len(targetRune))

 		}
"
14412,"  public <T extends Comparable<T>> T[] sort(T[] unsorted) {

     doSort(unsorted, 0, unsorted.length - 1);

     return unsorted;
"
14639,"    }

     node._height = Math.max(getH(node._left), getH(node._right)) + 1

   }

   // rotations of AVL Tree

   const leftRotate = function (node) {
"
32048,"            double[,] source,

             double[,] operand,

             double[,] result) =>

             source.Multiply(operand).Should().BeEquivalentTo(result);

         [Test]

         public void Copy_ShouldReturnImmutableCopyOfMatrix()
"
22378,"    }

 }

 /** Test Cases to test algorithm */

 void tests() {

     int arr1[10] = {78, 34, 35, 6, 34, 56, 3, 56, 2, 4};
"
22393,"/* Another solution: Using bsearch() */

 int cmpint(const void *a, const void *b) { return *(int *)a - *(int *)b; }

 int search(int *nums, int numsSize, int target)

 {
"
44248,"   @testset ""Math: Verlet scheme"" begin

         @test verlet_integration(x->-x,[0.0,0.1],(1,10))[end][end] == 9.999

    end

 end
"
17087,"        ///     Removing a node from the BST can be split into three cases:

         ///     <br></br>

         ///     0. The node to be removed has no children. In this case, the node can just be removed from the tree.

         ///     <br></br>

         ///     1. The node to be removed has one child. In this case, the node's child is moved to the node's parent,

         ///     then the node is removed from the tree.
"
25806,"        perror(msg);

         return -1;

     }

     int R = max(W->dim1 >> 3, 2); /* neighborhood range */

     for (int i = 0; i < W->dim1; i++)  // for each x
"
24057,"struct ListNode *deleteDuplicates(struct ListNode *head)

 {

     struct ListNode *cur = head;

     while (cur && cur->next)

     {
"
26451,"    }

 }

 int check_placex(){

 	char input[50];

 	int n1;

 	while (1){
"
25322,"    // 1st Test

     std::string str =

         ""To err is human, but to really foul things up you need a computer."";

     std::string base64_str = ciphers::base64_encoding::base64_encode(str);

     std::string verify =
"
22165,"               validatePosition(mat, boat, (line - 1), (column - 65), guide) ==

                    0)

         {

             printf(""Position unavailable!\n"");

             scanf(""%d %c %c"", &line, &column, &guide);
"
32011,"    close(sockfd);

     return 0;

 }
"
30022,"        raise ValueError(""Empty string was passed to the function"")

     is_negative = hex_string[0] == ""-""

     if is_negative:

         hex_string = hex_string[1:]

     if not all(char in hex_table for char in hex_string):

         raise ValueError(""Non-hexadecimal value was passed to the function"")
"
82002,"            # number has a zero at bit bit_position

             zeros.append(number)

     # recursively split both lists further

     zeros = _msd_radix_sort(zeros, bit_position - 1)

     ones = _msd_radix_sort(ones, bit_position - 1)

     # recombine lists
"
25490,"    default:

         return NULL;

     }
"
12242,"})
"
21883,"   */

   public static int binPow(int a, int p) {

     int res = 1;
"
32293,"    int atIndex = search.find(integers, val);

     System.out.println(

         format(

             ""Val: %d. Upper Bound Found %d at index %d. An array length %d"",

             val, integers[atIndex], atIndex, size));

     boolean toCheck = integers[atIndex] > val || integers[size - 1] < val;
"
19084,"    return number == reverseNumber;

   }

 }
"
13889,"        }

         return counter;

     }

     public static void main(String[] args) {

         // ==== Int =======

         Integer[] a = { 3, 7, 45, 1, 33, 5, 2, 9 };
"
89963,"    }

     filledIndexes = [...filledIndexes, insertTo]

     if (filledIndexes.length === sampleSize) {

       break

     }

   }
"
26664,"            if(n%2 == 0){

                 return matrixExpResult;

             }
"
64433,"        }

         // if root value is greater than key then ceil can be in left subtree or if

         // it is not in left subtree then current node will be ceil

         Node result = getCeil(root.left, key);

         // if result is null it means that there is no ceil in children subtrees
"
14795,"#

 # Approach: Using Recursion + Memoization, Top Down Dynamic Programming

 #

 #

 # Algorithm: Dynamic Programming state transition.
"
45369,"        }

         /// <summary>

         ///     Initializes a new instance of the <see cref=""PriorityQueue{T}"" /> class.

         /// </summary>
"
28476," * inner circle and \f$0\le l\le1\f$

  * @param k the ratio of radius of inner circle to outer circle and

  * \f$0<k<1\f$

  * @param N number of sample points along the trajectory (higher = better
"
13061,"    double **X = (double **)malloc(N * sizeof(double *));

     int *Y = (int *)malloc(N * sizeof(int));  // corresponding y-values

     for (int i = 0; i < N; i++) X[i] = (double *)malloc(6 * sizeof(double));

     // generate sample points in the interval
"
14335,"            var vertex2 = graph.AddVertex(20);

             var vertex3 = graph.AddVertex(40);

             var vertex4 = graph.AddVertex(40);

             var vertex5 = graph.AddVertex(40);

             graph.AddEdge(vertex1, vertex2, 1);

             graph.AddEdge(vertex2, vertex3, 1);
"
23205," * @return a raised to power b modulo c

  */

 uint64_t power(uint64_t a, uint64_t b, uint64_t c) {

     uint64_t ans = 1;  /// Initialize the answer to be returned
"
11201,"#       print(""decrypt unsuccessful"")
"
26973,"        int tmp = start;

         start = destination;

         destination = tmp;

     }

     for (auto i = 0; i < distanceSize; ++i)

     {
"
53965,"	public static void main(String[] args) {

 		int[] arr = { 2, 3, 5, 1, 4 };

 		System.out.println(""Method 1: "" + WPRecursion(arr, 0, arr.length - 1));
"
26858,"}
"
23310,"    18336384825330154686196124348767681297534375946515

     80386287592878490201521685554828717201219257766954

     78182833757993103614740356856449095527097864797581

     16726320100436897842553539920931837441497806860984
"
27874,"        std::cout << ""[TESTS] : ---> "" << msg << std::endl;

     }

  public:

     /**

      * @brief Executes test cases
"
26770,"    

     /* Driver code*/

     public static void main(String[] args) {

         CircleSort CSort = new CircleSort();

         Integer[] arr = {4, 23, 6, 78, 1, 54, 231, 9, 12};
"
27901,"    end

   end

 end

 print(two_sum([2, 7, 11, 15], 9))

 # => [0,1]
"
21366," * @param[in,out]	y		dependent variable(s)

  * @param[in,out]	dy	    first-derivative of dependent variable(s)

  */

 void problem(const double &x, std::valarray<double> *y,

              std::valarray<double> *dy) {
"
24990,"    } 

     else

     { 
"
10401,"            }

             // Update the accumulators

             F += A + K[i] + toLittleEndian32(blocks[g]);

             A = D;

             D = C;
"
97789,"   * @return String

    */

   public static String convertTurkishToLatin(String param) {

     char[] turkishChars =

         new char[] {0x131, 0x130, 0xFC, 0xDC, 0xF6, 0xD6, 0x15F, 0x15E, 0xE7, 0xC7, 0x11F, 0x11E};

     char[] latinChars = new char[] {'i', 'I', 'u', 'U', 'o', 'O', 's', 'S', 'c', 'C', 'g', 'G'};
"
23624,"from cv2 import COLOR_BGR2GRAY, cvtColor, imread, imshow, waitKey

 from numpy import divide, int8, multiply, ravel, sort, zeros_like

 def median_filter(gray_img, mask=3):
"
18614,"    	return false;

     }

     public static void main(String[] args) {

         SinglyLinkedList singlyLinkedList = new SinglyLinkedList();

         Scanner sc = new Scanner(System.in);
"
22089,"#include <stdio.h>

 #include <stdlib.h>

 #include <time.h>

 void swap(int *a, int *b)
"
29627,"assert(binarySearchByRecursion([0, 5, 7, 10, 15], 15, 0, 4) == 4);

 assert(binarySearchByRecursion([0, 5, 7, 10, 15], 7, 0, 4) == 2);

 assert(binarySearchByRecursion([0, 5, 7, 10, 15], 6, 0, 4) == null);
"
26711,"<?php

 /**

  * This function solves the problem 9 of the Project Euler.

  *

  * Problem description:
"
14260,"    struct sockaddr_in servaddr;

     // Creating socket file descriptor

     if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
"
30086,"{

     // V-> Number of vertices, E-> Number of edges

     int V, E;

     // graph is represented as an array of edges.

     // Since the graph is undirected, the edge

     // from src to dest is also edge from dest
"
13707,"            print(board, N);

         }

         else {

             System.out.println(""No solution"");

         }
"
85446,"# Contributors

 - [AugustoCL](https://github.com/AugustoCL)

 - [Ved Mahajan](https://github.com/Ved-Mahajan)

 """"""
"
14298,"    /**

      * representation of the input 128-bit block as an array of 8-bit integers.

      *

      * @param block of 128-bit integers

      * @return array of 8-bit integers
"
14639," * @brief heapifyUp Adjusts arr[i] to the correct position in the heap

  * This heapify procedure can be thought of as building a heap from

  * the bottom up by successively shifting upward to establish the
"
16929,"# Sepal.Length Sepal.Width Petal.Length Petal.Width Species

 # 1          5.1         3.5          1.4         0.2  setosa

 # 2          4.9         3.0          1.4         0.2  setosa

 # 3          4.7         3.2          1.3         0.2  setosa

 # 4          4.6         3.1          1.5         0.2  setosa
"
20844,"/**

  * @file

  * @author [tGautot](https://github.com/tGautot)

  * @brief Simple C++ implementation of the [MD5 Hashing

  * Algorithm](https://en.wikipedia.org/wiki/MD5)

  * @details
"
67005,"})
"
30771,"    }

 }
"
49098,"  *  on the Android platform, in GNU Octave, on V8, Swift and Rust.

   *  1) It sorts small partitions using Insertion Sort.

   *  2) Merges the partition using Merge Sort.

   *  @see [Timsort](https://en.wikipedia.org/wiki/Timsort)

   *  @param {Array} array
"
29486,"        private void Transplant(RedBlackTreeNode<TKey>? node, RedBlackTreeNode<TKey>? child, int dir)

         {

             if (node is null)

             {

                 root = child;

             }
"
16571,"      } else {

         /* If both left and right child are present

          * we replace this nodes data with
"
10577,"using System;

 namespace Algorithms.Search

 {

     /// <summary>

     ///     Jump Search checks fewer elements by jumping ahead by fixed steps.
"
32111,"    reverse(values, n, values.length - 1);

     reverse(values, 0, values.length - 1);

   }

   /**

    * Reverse character array

    *
"
29635,"			}

 		}

 	}

 	return dp[1][N-1]

 }

 /*
"
30127,"                default:

                     throw new InvalidOperationException(""It should not be possible to get here!"");

             }

             return null;

         }

         /// <summary>
"
32836,"        }

         /// <summary>

         ///     Checks whether or not two <see cref=""Timeline{TValue}""/> are not equals.
"
29311,"    // cout<<sizeof(a)<<endl;

     //2.봮<size봮<arraylengthѴȫ룬油\0

     // char b[10];

 	// cin.get(b,20);

 	// cout<<b<<endl;//12345ʱΪ12345'\0
"
27395,"library(RLightGBM)

 data(example.binary)

 #Parameters

 num_iterations <- 100

 config <- list(objective = ""binary"",  metric=""binary_logloss,auc"", learning_rate = 0.1, num_leaves = 63, tree_learner = ""serial"", feature_fraction = 0.8, bagging_freq = 5, bagging_fraction = 0.8, min_data_in_leaf = 50, min_sum_hessian_in_leaf = 5.0)

 #Create data handle and booster
"
14381,"        } else {

             return x2;

         }
"
60751,"    destroy = null; // clear to let GC do it's work

     size--;

     return retValue;
"
15587,"    # keep track of explored nodes

     explored = set()

     # keep track of all the paths to be checked

     queue = [[start]]

     # return path if start is goal

     if start == goal:
"
14348,"    public class AATreeNode<TKey>

     {

         /// <summary>

         ///     Initializes a new instance of the <see cref=""AATreeNode{TKey}"" /> class.

         /// </summary>

         /// <param name=""key"">The initial key of this node.</param>
"
53567,"            timeline.Add((time, value));

         }

         /// <summary>

         ///     Add a set of <see cref=""DateTime"" /> and <see cref=""TValue"" /> to the timeline.

         /// </summary>

         public void Add(params (DateTime, TValue)[] timeline)
"
27178,"    private static final int [][] baseFibNumbers = {{1}, {0}};

     /**

      * Performs multiplication of 2 matrices

      * @param matrix1
"
33435,"Map<String, String> hex_table = {

   ""10"": ""A"",

   ""11"": ""B"",

   ""12"": ""C"",
"
15668,"    const mockFn = jest.fn()

     graph.printGraph(mockFn)

     // Expect one call per vertex

     expect(mockFn.mock.calls.length).toBe(vertices.length)
"
26135,"            }

             else if (x < 0 && y > 0)

             {  // Q2
"
17332,"﻿namespace Algorithms.Tests.Strings

 open Microsoft.VisualStudio.TestTools.UnitTesting

 open Algorithms.Strings

 [<TestClass>]

 type MinCostStringConversionTests () =

     [<TestMethod>]
"
14142,"    int x = 0; 

     if (x==0) 

     { 
"
16624,"  /** @author Alon Firestein (https://github.com/alonfirestein) */

   // A function for finding the length of the LIS algorithm in O(nlogn) complexity.

   public static int findLISLen(int a[]) {

     int size = a.length;

     int arr[] = new int[size];
"
75549,"# https://en.wikipedia.org/wiki/B%C3%A9zier_curve

 # https://www.tutorialspoint.com/computer_graphics/computer_graphics_curves.htm

 from __future__ import annotations

 from scipy.special import comb  # type: ignore

 class BezierCurve:
"
19077,"	for _, ch := range plaintext {

 		cipherText = append(cipherText, key^ch)

 	}

 	return cipherText

 }

 // Decrypt decrypts with Xor encryption
"
29463,"                cpy->prev->next = new_node;

                 new_node->next = cpy;

                 new_node->prev = cpy->prev;

                 cpy->prev = new_node;

             }
"
10812,"        }

         [Test]

         public void Remove_MultipleKeys_TreeStillValid()

         {

             var tree = new AvlTree<int>();

             tree.AddRange(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });
"
19618,"#endif

     // step 1: for each output point

     for (j = 0; j < num_out; j++)

     {
"
32037,"    /* return data variance computed till last sample */

     if (variance != NULL)

         *variance = M / n;

     /* return sample standard deviation computed till last sample */
"
28636,"    uint8_t *a; /**< matrix as a flattened 1D row-major array */

     uint8_t N;  /**< number of elements */

     uint8_t N2; /**< block of elements */

 };
"
17170,"package Others;

 import java.util.ArrayList;

 /** @author Dekas Dimitrios */

 public class BestFit {
"
21381,"deps = [""DiffEqBase"", ""FiniteDiff"", ""ForwardDiff"", ""LinearAlgebra"", ""OrdinaryDiffEq"", ""Random"", ""RecursiveArrayTools"", ""SparseDiffTools"", ""Statistics"", ""StochasticDiffEq"", ""TreeViews""]

 git-tree-sha1 = ""258f3be6770fe77be8870727ba9803e236c685b8""

 uuid = ""f9640e96-87f6-5992-9c3b-0743c6a49ffa""

 version = ""1.8.1""

 [[MultivariatePolynomials]]

 deps = [""DataStructures"", ""LinearAlgebra"", ""MutableArithmetics""]
"
16436,"            for (var col = 0; col + 1 < RowCount; col++)

             {

                 if (matrix[col, col] == 0)

                 {

                     // To find a non-zero coefficient

                     var rowToSwap = FindNonZeroCoefficient(ref matrix, col);
"
24351,"      if(numbers[i] == Type.PRIME) {

         primes[primeIndex++] = i;

       }

     }

     return primes;

   }
"
24919,"		args := RGB[i]

 		expected := HEX[i]

 		result := RGBToHEX(args[0], args[1], args[2])

 		if result != expected {

 			t.Errorf(""RGBToHEX(%d,%d,%d) = %d; want %d"",

 				args[0], args[1], args[2], result, expected)
"
23845,"      i = i - 1

     }

     elements.vec[(i + 1)] = key

   }
"
21341,"        if(index != -1){

             real_value = arr[index];

             passed = passed && (real_value == rand_value);

         } else {

             passed = passed && (std::find(arr.begin(), arr.end(), rand_value) == arr.end());
"
15260,"        @test collatz_sequence(42) == [42,21,64,32,16,8,4,2,1]

         @test collatz_sequence(5) == [5,16,8,4,2,1]

     end
"
18933,"	{

 		""String comparison on multiple pattern match"",

 		""AABA"",

 		""AABAACAADAABAABA"",

 		Result{

 			0,
"
30341,"        {

             max_x = pts[j].x;

         }

         if (min_x > pts[j].x)
"
13668,"                    .Should()

                     .Be(3);

                 times[0]

                     .Should()

                     .Be(new DateTime(2005, 1, 1));

                 times[1]
"
30641,"            Assert.AreEqual(expectedString, encoded);

             Assert.AreEqual(expectedIndex, index);

         }

         [Test]
"
47750,"        }

         /// <summary>

         ///     Gets the number of elements on the <see cref=""ListBasedStack{T}"" />.

         /// </summary>

         public int Count => stack.Count;
"
25145,"}

 int main(void)

 {

     Edge e;
"
29512,"      preOrder(localRoot.left);

       preOrder(localRoot.right);

     }
"
14116,"      stringBuilder.setLength(0);

       stringBuilder.append(Integer.toString(n));

       stringBuilder.append(aux_rod);

       stringBuilder.append(to_rod);

       movements.add(stringBuilder.toString());
"
23104,"  //Comparing the last element with x

   if (arr[offset + 1] == x) {

     return offset + 1;

   }
"
22745,"    """"""

     This function calculates the average of the waiting & turnaround times

     Prints: Average Waiting time & Average Turn Around Time

     >>> calculate_average_times([0,3,5,0],[3,6,10,1],4)

     Average waiting time = 2.00000

     Average turn around time = 5.0
"
79839,"        }

         else if (boat == 2)

         {

             if (nm == 1)

             {

                 printMessage(msg7);
"
15673,"                    18,

                     float.PositiveInfinity,

                     float.PositiveInfinity,

                     float.PositiveInfinity,

                     float.PositiveInfinity

                 }
"
18662,"    else

       iter = @tail

       cnt = @size - 1

       until iter.nil?

         return iter.val if cnt == index
"
31065,"                                           to find its correct position*/

 void push(Heap *heap, int x);           /*Inserts an element in the heap*/

 void pop(Heap *heap); /*Removes the top element from the heap*/

 int top(Heap *heap); /*Returns the top element of the heap or returns INT_MIN if

                         heap is empty*/

 int empty(Heap *heap); /*Checks if heap is empty*/
"
29916,"    }

     public static void main(String[] args) {

         try (Scanner input = new Scanner(System.in)) {

             System.out.println(""Enter (e) letter for encrpyt or (d) letter for decrypt :"");

             char choice = input.nextLine().charAt(0);

             String in;
"
51738,"package DataStructures.Trees;

 import java.util.ArrayList;

 import java.util.HashMap;

 import java.util.LinkedList;

 import java.util.Map;

 import java.util.Queue;
"
19362,"    for (i = 0; i < n; ++i) printf(""%d "", array[i]);

     printf(""\n"");

 }

 int main()
"
49347,"      graph.addEdges(start, end);

     }

     int startNode = 0;

     List<int> answer =
"
48541,"}

 /**

  * @brief convert function

  * @param infix[] : infix array provided by user

  * @param postfix[] : empty array to be given to convert()

  * @returns postfixed expresion or \0 on exit
"
84205,"""""""

 def optimal_merge_pattern(files: list) -> float:

     """"""Function to merge all the files with optimum cost
"
19284,"  });

   test(""ocatal_to_hex -62"", () {

     expect(ocatal_to_hex(""-62""), equals(""-32""));

   });

   test(""ocatal_to_hex rasies error when number is invalid"", () {

     expect(() => ocatal_to_hex(""84""), throwsFormatException);
"
29448,"// A node class

 class Node {

   public int data;

   public Node next;
"
23865,"  public int size2call() {

     return size2(root);

   }

   public int size2(Node roott) {

     int sz = 0;

     for (int i = 0; i < roott.child.size(); i++) {
"
32921,"        ///     where n - collection size.

         /// </summary>

         /// <param name=""collection"">Sorted collection to search in.</param>

         /// <param name=""item"">Item to search for.</param>

         /// <exception cref=""ArgumentNullException"">Thrown if input collection is null.</exception>

         /// <returns>Index of item that equals to item searched for or -1 if none found.</returns>
"
22959,"package DataStructures.Heaps;

 /**

  * Minimum Priority Queue It is a part of heap data structure A heap is a specific tree based data

  * structure in which all the nodes of tree are in a specific order. that is the children are

  * arranged in some respect of their parents, can either be greater or less than the parent. This
"
95957," * @example

  *      pad(""10011"", 8); // ""00010011""

  */

 function pad (str, bits) {

   let res = str
"
62349,"        int n = A.length;

         int[][] C = new int[n][n];

         for (int i = 0; i < n; i++)

             for (int j = 0; j < n; j++)

                 C[i][j] = A[i][j] + B[i][j];

         return C;
"
34309,"      choice = In.nextInt();

       switch (choice) {

         case 1:

           {
"
25201,"    >>> collatz_sequence(2.1)

     Traceback (most recent call last):

         ...
"
26539,"void insertEdge(Graph g, Edge e)

 {

     assert(g != NULL && validV(g, e.v) && validV(g, e.w));

     if (!g->edges[e.v][e.w])
"
18837,"                    min_f_score = f_score;

                     it_low_f_score = iter;

                 }

             }
"
57392,"                       double delta = .0001) {

     double result = 0;

     uint64_t numDeltas = static_cast<uint64_t>((ub - lb) / delta);
"
20850,"/* 

  * From: https://www.britannica.com/science/perfect-number

  *

  * A positive integer that is equal to the sum of its proper divisors. 
"
14716,"            var m = 1 << P;

             registers = new int[m];

             setRegisters = new HashSet<int>();
"
29120,"  }

 }
"
36603,"            78623, 78643, 78649, 78653, 78691, 78697, 78707, 78713, 78721, 78737, 78779, 78781, 78787, 78791, 78797,

             78803, 78809, 78823, 78839, 78853, 78857, 78877, 78887, 78889, 78893, 78901, 78919, 78929, 78941, 78977,

             78979, 78989, 79031, 79039, 79043, 79063, 79087, 79103, 79111, 79133, 79139, 79147, 79151, 79153, 79159,

             79181, 79187, 79193, 79201, 79229, 79231, 79241, 79259, 79273, 79279, 79283, 79301, 79309, 79319, 79333,

             79337, 79349, 79357, 79367, 79379, 79393, 79397, 79399, 79411, 79423, 79427, 79433, 79451, 79481, 79493,

             79531, 79537, 79549, 79559, 79561, 79579, 79589, 79601, 79609, 79613, 79621, 79627, 79631, 79633, 79657,
"
15361,"}

     
"
61567,"    if (!sumOfAbundantNumbers[i]) { // if the number is not found in the list of sums, then it is added

       sum += i

     }

   }

   return sum
"
75831,"        node* n;

         n = front;

         if (n) {

             front = front->next;

             delete n;
"
81964,"    return false

   }

   /**

    *

    * @param {any} _val

    * It is possible that element doesn't exists in tree
"
13609,"pol_reg.fit(X_poly, y)

 # Visualizing the Polymonial Regression results

 def viz_polymonial():
"
12503,"import { UnionFind } from '../UnionFind'

 const uf = new UnionFind(5)

 test('should expose .size():', () => {

   const size = uf.size()

   expect(size).toBe(5)
"
21961,"// \_|  | || |  | |    | |  | || |    / /\ \    | || |  |   \ | |   | | | |   |

 // |__| |   | || |  /  .--.  \  | | | |     | |      | || |  | '    ' |  | || |

 // / ____ \   | || |  | |\ \| |   | | | |   |  __  |   | || |  | |    | |  | |

 // | |    _| |_     | || |   \ `--' /   | || | _/ /    \ \_ | || | _| |_\   |_

 // | | | |  _| |  | |_  | || |  \  `--'  /  | | | |   |_____|    | || | `.__.'

 // | || ||____|  |____|| || ||_____|\____| | | | | |____||____| | || | `.____.'
"
33576,"namespace Algorithms.Tests.Sequences

 {

     public class FibonacciSequenceTests

     {

         [Test]
"
10372,"        adjacencyMatrix[j][i] = 0;

       }

     }

   }

   private void dfs(Integer start, Integer curr, ArrayList<Integer> temp) {
"
19933,"    return;

   }

   if (tree.left != null) {
"
31876,"// see bitwiseMax_test.go

 package max

 func BitwiseMax(a int, b int, base int) int {

 	z := a - b

 	i := (z >> base) & 1
"
34748,"    for (int i = 0; i < size; i++) {

       List<double> row = List.generate(size, (x) => 0);

       row[i] = 0;

       this._values.add(row);
"
25594,"version = ""0.8.2""

 [[CommonSolve]]

 git-tree-sha1 = ""68a0743f578349ada8bc911a5cbd5a2ef6ed6d1f""

 uuid = ""38540f10-b2f7-11e9-35d8-d573e4eb0ff2""

 version = ""0.2.0""

 [[CommonSubexpressions]]
"
60067,"    assert not stack.is_empty()

     assert stack.size() == 10

     assert 5 in stack

     assert 55 not in stack

 if __name__ == ""__main__"":
"
23429,"			for i := 0; i < places; i++ {

 				cl.Head = cl.Head.Prev

 			}
"
16240,"    Function to validate the given credit card number.

     >>> validate_credit_card_number('4111111111111111')

     4111111111111111 is a valid credit card number.

     True
"
27743,"    // length of array

     r = 9;

     // Checking for 5

     // Key to be searched in the array

     key = 5;

     // Search the key using ternarySearch
"
32790,"            }

             else if((*visited)[v] == (*visited)[u])   /// if both the current node and its neighbour

                                                       /// has the same state then it is not a bipartite graph

             {

                 return false;
"
29018,"              int col) {

     /// check in the row

     for (int i = 0; i <= col; i++) {
"
20653,"    }

     getchar();

 }
"
84015,"    l ends at r) and it is the furthest ending till now, and it has ending after a6

 ii) a2 and a4 are equally distant from a3 so char(a2) == char(a4)

 iii) a0 and a6 are equally distant from a3 so char(a0) == char(a6)

 iv) a1 is corresponding equal character of a5 in palindrome with center a3 (remember

     that in below derivation of a4==a6)
"
25555,"        return rangeSumBST(root->left, L, R) + rangeSumBST(root->right, L, R);

     }

 }
"
75438,"                return true;

         }

     return false;

 }

 bool findPathDFS(Graph g, int nV, Vertex src, Vertex dest)

 {
"
18255,"   * binarySearchIterative([0, 5, 7, 10, 15], 0);

    * 0

    * binarySearchIterative([0, 5, 7, 10, 15], 15);

    * 4

    * binarySearchIterative([0, 5, 7, 10, 15], 5);

    * 1
"
32373,"// rgbhex.go

 // description: convert hex input to red, green and blue and vice versa

 // author(s) [darmiel](https://github.com/darmiel)

 // see rgbhex_test.go

 package conversion

 // HEXToRGB splits an RGB input (e.g. a color in hex format; 0x<color-code>)
"
19644,"// | | | |  _| |  | |_  | || |  \  `--'  /  | | | |   |_____|    | || | `.__.'

 // | || ||____|  |____|| || ||_____|\____| | | | | |____||____| | || | `.____.'

 // | | | |              | || |              | || |              | || | | | | |

 // | || |              | | | '--------------' || '--------------' ||

 // '--------------' || '--------------' | | '--------------' || '--------------'

 // |
"
29882,"            {

                 double c0 = Math.abs(a[i][j]);

                 if (c0 > c1) c1 = c0;

             }
"
24989,"    {

         printf(""\n%d"", a[i]);

     }

     printf(""\n"");

     printf(""\nSorted Data:"");

     for (i = 0; i < n; i++)
"
21962,"        System.out.println(""Bucket "" + i + "": "" + buckets[i].toString());

       }

     }

   }
"
79661,"	res := 0

 	for _, value := range lis {

 		res = max.Int(res, value)

 	}
"
32356,"    int b = getBalance(root);

     if (b > 1) {

         if (getBalance(root->left) < 0)
"
23166,"            getNeighbors.Should().Throw<InvalidOperationException>()

                 .WithMessage($""Vertex does not belong to graph: {vertexA}."");

         }

     }

 }
"
15089,"		return hm.putValue(hash, key, value)

 	}

 	hm.size++

 	return value

 }
"
15305,"            _ = Assert.Throws<ItemNotFoundException>(() => searcher.FindIndex(arr, missing));

         }

         [Test]
"
70585,"    {  // Make the sibling red and recur for its parent

         // Recolor the sibling

         sibling->color = 1;

         // Delete if necessary
"
16822,"    glutMainLoop();

 #endif

     return 0;
"
70291,"                 and list of nodes that refer (if key is present) of should refer to

                  given node.

         """"""

         # Nodes with refer or should refer to output node

         update_vector = []
"
31565,"    }

     int aux = column - 'A';

     line -= 1;

     if (boat == 1)

     {

         for (j = aux; j < (aux + boat); j++)
"
16583,"			if(strcmp(p->name,Name)==0) 

 				return p->salary;

 		//

 		p=employ + n++; 

 		p->name=new char[strlen(Name)+1];

 		strcpy(p->name,Name);
"
19761,"    return 0;

 }
"
93357,"		for i := 0; i < numVertices; i++ {

 			for j := 0; j < numVertices; j++ {

 				// If there is a less costly path from i to j node, remembering it

 				if result[i][j] > result[i][k]+result[k][j] {

 					result[i][j] = result[i][k] + result[k][j]
"
32922,"	10: ""1010"", 11: ""1011"", 12: ""1100"", 13: ""1101"", 14: ""1110"",

 	15: ""1111"", 16: ""10000"", 17: ""10001"", 18: ""10010"", 19: ""10011"",

 	20: ""10100"", 21: ""10101"", 22: ""10110"", 23: ""10111"", 24: ""11000"",

 	25: ""11001"", 26: ""11010"", 27: ""11011"", 28: ""11100"", 29: ""11101"",

 	30: ""11110"", 31: ""11111"", 32: ""100000"", 33: ""100001"", 34: ""100010"",
"
20327,"        count_all++;

         for (i = 0; i <= index_list; i++)

         {

             if (strcmp(word_list[i], words->text) == 0)
"
11899,"            print("" "", end="""")

         for k in range(0, i + 1):  # printing stars

             print(""* "", end="""")

         print()
"
31710,"    * @param board matrix where numbers are saved

     * @param col current index in columns

     */

     template <size_t n>
"
33218,"﻿namespace Algorithms.Strings

 module Upper =

     /// <summary>

     /// Will convert the entire string to uppercase letters

     /// </summary>

     /// <param name=""input"">String to change to uppercase.</param>
"
77920,"                    var t = v;

                     v = u;

                     u = t;

                 }

                 // Here v >= u and v - u is even

                 v -= u;
"
23488,"    test(new Integer[] { 3, 9, 20, 15, 7 }, new Integer[] { 9, 3, 15, 20, 7 }); // normal tree

   }

   private static void test(final Integer[] preorder, final Integer[] inorder) {
"
33639,"  }

   private boolean find(Node node, int info) {

     if (node.data == info) return true;

     for (int i = 0; i < node.child.size(); i++) {
"
14955,"    /* test2(); */

     return 0;

 }
"
30552,"    end

     @testset ""Searches: Linear"" begin

         array = [1, 3, 4, 7, 8, 11]

         linear_search(array, 3)
"
14934,"	var tests = []struct {

 		result string

 		n      int

 	}{

 		{""314159"", 6},
"
31601,"    * For example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”, .. etc are subsequences of “abcdefg”

 */

 function longestCommonSubsequence (x, y, str1, str2, dp) {
"
93390,"  }

   // extract the date

   const [day, month, year] = date.split('/').map((x) => Number(x))

   // check the data are valid or not.

   if (day < 0 || day > 31 || month > 12 || month < 0) {
"
32971,"package Misc;

 import java.util.*;

 public class RangeInSortedArray {

   public static void main(String[] args) {

     // Testcases

     assert Arrays.equals(sortedRange(new int[] {1, 2, 3, 3, 3, 4, 5}, 3), new int[] {2, 4});
"
32097,"                break;

             case 3: {

                 std::cout << ""Enter key to search = "";

                 std::cin >> key;
"
28388,"int main()

 {

     Stack_T stk;

     stk = Stack_init();
"
29765,"        printf(""\n********************* Possible Words ********************\n"");

         // Find the word through the Trie

         traverse(str, root);

         printf(

             ""\n==========================================================\n"");
"
22819,"export depth

 export DisjointSet

 export find

 export height

 export insert!

 export isleaf
"
10733,"    assert(index == 10);

     printf(""passed\nTest 2.... "");

     x = 56;

     index = jump_search(arr, x, n);
"
35269,"    //here i is the natural number which will be raised by X and added in sum.

     public void Sum(int N, int X,int i) {

     	//if sum is equal to N that is one of our answer and count is increased.

         if(sum == N) {
"
52240,"        }

     }

     /**

      * @brief Recursive function to traverse the tree in in-order order.
"
26706,"                var dict = new Dictionary<string, string>

                 {

                     { ""1"", uncompressedText[0].ToString() },

                 };

                 return (new string('1', uncompressedText.Length), dict);
"
21170,"    newNode->next = NULL;

     return newNode;

 }
"
17811,"      } else if (to.compareTo(v.data) == 0) { // see if to vertex already exists

         toV = v;

       }

       if (fromV != null && toV != null) break; // both nodes exist so stop searching
"
66653,"    ]

     for bin_group in bin_string_in_3_list:

         oct_val = 0
"
12860,"      [i + 1, j - 2],

       [i + 1, j + 2],

       [i - 1, j - 2],

       [i - 1, j + 2]

     ]

     return moves.filter(([y, x]) => y >= 0 && y < this.size && x >= 0 && x < this.size)
"
26871,"		for j := 0; j <= n; j++ {

 			if i == 0 {

 				dp[i][j] = j

 				continue

 			}
"
33826,"    display_polynomial(poly1);

     printf(""\nSecond Polynomial:\n"");  // Defining the 2nd polynomial

     create_polynomial(&poly2, 7, 3);

     create_polynomial(&poly2, 9, 1);
"
20839,"m = (arr[hi] - arr[lo] )/ (hi - lo)

 subtracting eqxn (2) from (3)

 - x - arr[lo] = m * (pos - lo)

 - lo + (x - arr[lo])/m = pos

 - pos = lo + (x - arr[lo]) *(hi - lo)/(arr[hi] - arr[lo])

 ## Algorithm:
"
37170,"    return false

   }

   isGreater (startDate, endDate) {

     if (startDate.year > endDate.year) {
"
23753,"  if (index < 0) throw new TypeError('Index cannot be Negative')

   // index can't be a decimal

   if (Math.floor(index) !== index) throw new TypeError('Index cannot be a Decimal')

   let a = 2
"
12082,"            continue;

         }

         numberBuffer[counter] = str[i];
"
14125,"  }

   let rightMax = 0

   for (let i = heights.length - 1; i >= 0; i -= 1) {
"
17212,"                            ""The number must be in the range [%d, %d]"",

                             MIN_VALUE,

                             MAX_VALUE
"
67818,"        private static Color violet = Color.FromArgb(255, 255, 0, 255);

         private static Color white = Color.FromArgb(255, 255, 255, 255);

         private static Color orange = Color.FromArgb(255, 255, 128, 0);
"
14162,"    initial_speed: int,

     random_frequency: bool = False,

     random_speed: bool = False,

     max_speed: int = 5,

 ) -> list:
"
14552,"              int bprior = b.priority;

               return (alpha * aRem + beta * aprior) - (alpha * bRem + beta * bprior);

             }

           });

       int k = timeElapsed(timer);

       ageing(k);
"
29976," * and the second parameter is also a integer

  * 

  * @param array of integers
"
79328,"List<String> integer_to_roman(int num) {

   if (num < 0) {

     return null;

   }
"
29445,"    }

 }
"
40584,"    import doctest

     doctest.testmod()
"
13367,"      }

       var j = 0

       while (j < primeNumbers.length && primeNumbers(j) <= lowestPrimeDivisor(i) && i * primeNumbers(j) <= n) {
"
26415,"{

     /// <summary>

     ///     Class that implements bogo sort algorithm.
"
20297,"const extendedEuclideanGCD = (arg1, arg2) => {

   if (typeof arg1 !== 'number' || typeof arg2 !== 'number') throw new TypeError('Not a Number')

   if (arg1 < 1 || arg2 < 1) throw new TypeError('Must be positive numbers')

   // Make the order of coefficients correct, as the algorithm assumes r0 > r1
"
27558,"    

     dist[NIL] = INF; // Initialize distance to NIL as infinite

     // q is going to contain vertices of left side only.

     while (!q.empty())

     {

         int u = q.front();  // dequeue a vertex
"
22053,"        for (int j = 0; j < E; j++)

         {

             int u = graph->edges[j].src;

             int v = graph->edges[j].dst;

             int w = graph->edges[j].weight;
"
94168,"namespace math {

 /**

  * @brief Computes integral approximation

  * @param lb lower bound

  * @param ub upper bound
"
13336,"    cout << ""After insert 5 at front: "" << endl;

     list1.display();

     cout << ""After insert 10 3 7 at front: "" << endl;

     list1.insert_front(10);

     list1.insert_front(3);

     list1.insert_front(7);
"
31129,"/**

  * @brief Function shoot

  * Responsible for saying if he hit a boat

  * @param mat board

  * @param line matrix row

  * @param column matrix column
"
16126,"        showList = []

         for i in range(1, N + 1):

             showList += [self.query(i, i)]

         print(showList)

 if __name__ == ""__main__"":

     A = [1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8]
"
89891,"        while index < n:

             is_prime[index] = False

             index = index + i
"
24971,"void non_recursive_merge_sort(const Iterator first, const Iterator last) {

     non_recursive_merge_sort(first, last, last - first);

 }
"
14893,"                array[mainIndex++] = compResult <= 0 ? left[leftIndex++] : right[rightIndex++];

             }

             while (leftIndex < left.Length)
"
33708,"  end

   # 123.reverse == 321

   # 100.reverse == 1

   def reverse

     result = 0

     n = self
"
26221,"uuid = ""d1185830-fcd6-423d-90d6-eec64667417b""

 version = ""0.13.3""

 [[Symbolics]]
"
25358,"            binary_search(arr, l, mid - 1, x)

         else

             binary_search(arr, mid + 1, r, x)

         end
"
16535,"    while (current != null && x > current.value) // Find the position to insert

     current = current.next;

     if (current == head) insertHead(x);

     else if (current == null) insertTail(x);
"
89317,"        int expected_val = (x0 * x0 + x1 * x1 + x2 * x2) <= 1 ? 1 : -1;

         assert(pred == expected_val);

         printf("" ...passed\n"");

     }

     for (int i = 0; i < N; i++) free(X[i]);
"
12042,"        n = Math.floor(n / i)

       }

       // i is a prime diving n, multiply res by 1 - 1/i

       // res = res * (1 - 1/i) = res - (res / i)

       res = res - Math.floor(res / i)

     }
"
35334,"{

     int n;

     printf(""Enter size of array:\n"");

     scanf(""%d"", &n);  // E.g. 8

     printf(""Enter the elements of the array\n"");

     int i;
"
29507,"  // Stack to keep track of elements to be removed next in queue

   private Stack<Object> outStack;

   /** Constructor */

   public QueueWithStack() {

     this.inStack = new Stack<>();

     this.outStack = new Stack<>();
"
25270,"    // Then we should have a cache miss for the first entry added

     expect(cache.get(1)).toBe(null)

     expect(cache.get(2)).toBe(2)

     expect(cache.get(3)).toBe(3)

     cache.set(4, 4)
"
55172,"      timer++;

     }

     System.out.println(""Total time required: "" + (timer - 1));

   }

   void removeFinishedProcess() {

     ArrayList<Integer> completed = new ArrayList<Integer>();
"
12666,"        {

             if (sortedArray is null)

             {

                 throw new ArgumentNullException(""sortedArray"");

             }
"
75663,"    e.v = 0;

     e.w = 1;

     insertEdge(g, e);
"
32473,"    sock.return_value.bind.assert_called_once()

     sock.return_value.listen.assert_called_once()

     sock.return_value.accept.assert_called_once()

     conn.recv.assert_called_once()

     file.return_value.__enter__.assert_called_once()
"
89044,"  var list =

       List<int>.generate(length, (i) => rnd.nextInt(seed), growable: false);

   print('before sorting:');

   print(list);
"
12634,"    private static int[][] matrixMultiplication(int[][] matrix1, int[][] matrix2){

         //Check if matrices passed can be multiplied

         int rowsInMatrix1 = matrix1.length;
"
16561,"        // Append leading 0 for full ""128-bit"" string

         while (blockBits.length() < 128) {

             blockBits.insert(0, '0');

         }

         // split 128 to 8 bit cells
"
17910,"    Distance_TV = []  # Heap of Distance of vertices from their neighboring vertex

     Positions = []

     for x in range(len(l)):

         p = sys.maxsize

         Distance_TV.append(p)
"
23453,"        hex2decimal(

             hexadecnum); // Pass the string to the hex2decimal function and get the decimal form in

     // variable decnum
"
20579,"    expect(postOrder(root, result), equals([4, 6, 5, 2, 9, 8, 7, 3, 1]));

   });

   test(('postOrder traversal'), () {
"
10603,"                            // To make the swap with the element above.

                             tmp[i] = matrix[rowToSwap, i];

                             matrix[rowToSwap, i] = matrix[col, i];

                             matrix[col, i] = tmp[i];

                         }

                     }
"
19956,"  const combinations = new Array(amount + 1).fill(0)

   combinations[0] = 1

   // Determine the direction of smallest sub-problem

   for (let i = 0; i < coins.length; i++) {

     // Travel and fill the combinations array

     for (let j = coins[i]; j < combinations.length; j++) {
"
31755,"      return this.instance

     }

   }

   /**

    * @description Starts the timer.

    */
"
15248,"    return arr;

 }
"
25779,"""""""

 Verlet integration is an integration method used to integrate newtons - law of motion. It is frequently used to find trajectories in molecular dynamics simulation.

 The function takes `four` inputs viz,

 - `f` : the differential equation
"
34451,"    while left <= right:

         mid = (left + right) // 2

         if mid ** 2 == n:

             return True

         elif mid ** 2 > n:
"
10414,"    /* cleanup dynamic memory */

     for (int i = 0; i < mat_size; i++)

     {

         free(R[i]);
"
40903,"            // Assert

             Assert.IsFalse(testObj.EvenParity());

             Assert.IsTrue(testObj.OddParity());

         }

         [Test]
"
21918,}
27803,"        elif self.values[key] == data:

             pass

         else:

             collision_resolution = self._collision_resolution(key, data)
"
30929,"        /// <summary>

         ///     To distribute elements into buckets based on specified digit.

         /// </summary>

         /// <param name=""data"">Input array.</param>

         /// <param name=""buckets"">Array of buckets.</param>

         /// <param name=""digit"">Digit.</param>
"
24022,"    Examples

     ---------

     >>> convex_hull_recursive([[0, 0], [1, 0], [10, 1]])

     [(0.0, 0.0), (1.0, 0.0), (10.0, 1.0)]
"
20090,"package DynamicProgramming;

 // Java program to find length of the shortest supersequence

 class ShortestSuperSequence {

  

     // Function to find length of the
"
92039,"# @param {Integer[]} nums

 # @return {Integer}

 #

 #

 # Approach 1: Brute Force

 #
"
12633,"    return os;

 }

 /**

  * \brief Function to get random numbers to generate our complex numbers for

  * test

  */
"
27997,"uuid = ""42e2da0e-8278-4e71-bc24-59509adca0fe""

 version = ""1.0.2""

 [[HTTP]]
"
21434,"            31543, 31547, 31567, 31573, 31583, 31601, 31607, 31627, 31643, 31649, 31657, 31663, 31667, 31687, 31699,

             31721, 31723, 31727, 31729, 31741, 31751, 31769, 31771, 31793, 31799, 31817, 31847, 31849, 31859, 31873,

             31883, 31891, 31907, 31957, 31963, 31973, 31981, 31991, 32003, 32009, 32027, 32029, 32051, 32057, 32059,
"
28750,"}

 /**

  * deletion of a node from the tree

  * if the node isn't present in the tree, it takes no action.

  * param[in,out] root pointer to node pointer to the topmost node of the tree

  * param[in] ele value to be deleted from the tree
"
28664,"		})

 	}

 }

 func TestIsPowerOfTwoLeftShift(t *testing.T) {

 	tests := getTestsForPowerOfTwo()

 	for _, tv := range tests {
"
22765,"[[Requires]]

 deps = [""UUIDs""]

 git-tree-sha1 = ""4036a3bd08ac7e968e27c203d45f5fff15020621""

 uuid = ""ae029012-a4dd-5104-9daa-d747884805df""

 version = ""1.1.3""
"
69167,"  for (let i = left + 1; i <= right; i++) {

     const key = array[i]

     let j = i - 1

     while (j >= left && array[j] > key) {

       array[j + 1] = array[j]
"
26700,"        @test weight_conversion(""long-ton"", ""carrat"", 4) == 20320921.599999998

         @test weight_conversion(""long-ton"", ""atomic-mass-unit"", 4) == 2.4475073353955697e+30

         @test weight_conversion(""short-ton"", ""kilogram"", 3) == 2721.5519999999997
"
35806,"    bool isEndOfWord;

 } TrieNode;

 /*--Create new node--*/

 TrieNode *createTrieNode()
"
17838,"import { RatInAMaze } from '../RatInAMaze'

 describe('RatInAMaze', () => {

   it('should fail for non-arrays', () => {

     const values = [undefined, null, {}, 42, 'hello, world']
"
28102,"                { new DateTime(2005, 1, 1), ""TestTime3"" },

                 { new DateTime(2010, 1, 1), ""TestTime4"" },

                 { new DateTime(2015, 1, 1), ""TestTime5"" },

             };

             var list = timeline.ToList();
"
16610,"    ///     array in two halves, calls itself for the two

     ///     halves and then merges the two sorted halves.

     /// </summary>

     /// <typeparam name=""T"">Type of array elements.</typeparam>

     public class MergeSorter<T> : IComparisonSorter<T>

     {
"
22077,"      expect(tree.toString(), equals(""[0]([]:[])""));

     });

     test('maxItems is honored until maxDepth is hit', () {

       final tree = Node<String>(0, 0, 100, 100, maxItems: 2, maxDepth: 2);

       expect(tree.insert(""a"", Point(0, 0)), isTrue);
"
26569,"﻿using System.Linq;

 using Algorithms.Knapsack;

 using NUnit.Framework;
"
19831,"        printf(""%d "", pcm[i]);

     }

     printf(""\n"");

     /* print encoded alaw */

     printf(""encode: "");

     for (size_t i = 0; i < LEN; i++)
"
10562," * @param first the input string 1

  * @param second the input string 2

  * @returns the concatenated string

  */

 std::string addStrings(std::string first, std::string second) {
"
15620,"    41230

     >>> solution(50)

     1582700

     """"""

     sum_of_squares = n * (n + 1) * (2 * n + 1) / 6

     square_of_sum = (n * (n + 1) / 2) ** 2
"
27205,"    double scale = 0, cx = 0, cy = 0;

     double* colors = (double*)malloc(sizeof(double) * (k * 3));

     int i;
"
28634,"package DataStructures.Trees;

 public class LevelOrderTraversal {

   class Node {
"
12440,"     * @param u Source Vertex

      * @param v End vertex

      * @param c Weight
"
65526,"            return -1;

         }

     }

     if (debug_print)

     {

         print_matrix(A, mat_size, mat_size);
"
31859,"        {

             if (Count == 0)

             {

                 throw new InvalidOperationException(""Heap is empty"");
"
26038,"function intToHex (num) {

   switch (num) {

     case 10: return 'A'
"
30558,"                    updated <- true

         if updated then list <- Sort list

         list
"
32845," * @param {Number} index The position of the number you want to get from the Lucas Series

  */

 function lucas (index) {
"
19580,"  // mark the current coordinates on the solution matrix

   solution[y][x] = 1

   // attempt to move right
"
26500,"            }

             if (Count == 1)

             {
"
14726,"1

 julia> vol_cube(3)

 27

 julia> vol_cube(-1)

 DomainError

 ```
"
95373,"using namespace std; 

 class base { 

     public: 
"
33675,"            empty.Reverse();

             var emptyArr = empty.GetData().ToArray();

             Assert.AreEqual(arr, new[] { 4, 3, 2, 1, 0 });

             Assert.AreEqual(emptyArr, new int[] { });

         }

         [Test]
"
19444,"            return times.Any(value => storedTimes.Contains(value));

         }

         /// <summary>

         ///     Check if timeline contains any of the event of the provided <paramref name=""values""/>.
"
10845,"            {

                 mat[line][column] = 50;

                 mat[line][column - 1] = 50;
"
17220,"    saisie(chaine);

     printf(""miroir est %s"", miroir(chaine));

 }

 // this function is used to put a string

 void saisie(char *cpointeur)

 {
"
96646,"            var isValueContainedInTheTimeline = values.Any(v => GetAllValues().Contains(v));

             if (!isValueContainedInTheTimeline)

             {

                 return false;

             }

             var eventsToRemove = values.SelectMany(value =>
"
98271,"    int ch;

     node *root = new node;

     cout << ""\nEnter the value of root node :"";

     cin >> value;

     root->val = value;

     root->left = NULL;
"
29745,"}

 export { encrypt, decrypt }

 // encrypt('keyword', 'Hello world!') // Prints 'Aoggj ujngw!'

 // decrypt('keyword', 'Aoggj ujngw!') // Prints 'Hello world!
"
16320,"  }

   /**

    * Returns true if the outStack is empty.

    * 

    * @return true if the outStack is empty.

    */
"
32468,"        public Entry<I, J> getNextEntry() {

             return nextEntry;

         }

         public void setNextEntry(Entry<I, J> nextEntry) {

             this.nextEntry = nextEntry;

         }
"
29170,"    >>> construct_highway(10, 10, 2)

     [[2, -1, -1, -1, -1, -1, -1, -1, -1, -1]]

     """"""
"
12462,"	root := BSTree.Root

 	Insert(root, 80)

 	Insert(root, 100)

 	Insert(root, 70)
"
18794,"package nested

 import (

 	""testing""
"
28927,"        }

         /// <summary>

         ///     Recursive method to find a node with a matching key.

         /// </summary>

         /// <param name=""node"">Node to search from.</param>
"
31214," * \returns random number in the range \f$[a,b)\f$

  */

 double _random(double a, double b)

 {
"
16064,"	if g.edges == nil {

 		g.edges = make(map[int]map[int]struct{})

 	}

 	// Check if vertex is present or not

 	if _, ok := g.edges[v]; !ok {

 		g.vertices++
"
80431,"    int i;

     for (i = 0; i < n; i++)

     {

         printf(""%d "", arr[i]);

     }

     printf(""\n"");
"
15071,"   * @param vector The vector to be subtracted.

    * @returns The difference-vector.

    */
"
11338,"        if (SortUtils.less(array[j], array[j - 1])) {

           SortUtils.swap(array, j - 1, j);

           swappedLeft = j;

         }

       }
"
55323," * @param [out] y pointer to column index of next unknown

  * @returns `true` if an empty location was found

  * @returns `false` if no more empty locations found

  */
"
23028,"        result = shiftedCharCode

       }

     } else if ((charCode >= 97 && charCode <= 122)) {

       if (shiftedCharCode <= 96) {

         let diff = Math.abs(97 - 1 - shiftedCharCode) % 26

         while ((diff % 26) >= 26) {
"
32643,"            Assert.AreEqual(testArray, correctArray);

         }

     }

 }
"
15647,"        {

             Action act = () => Algorithms.Other.FloodFill.BreadthFirstSearch(GenerateTestBitmap(), (10, 10), black, white);

             act.Should().Throw<ArgumentOutOfRangeException>();

         }

         [Test]
"
33886,"    BubbleSort bubbleSort = new BubbleSort();

     bubbleSort.sort(integers);

     for (int i = 0; i < integers.length - 1; ++i) {

       assert integers[i] <= integers[i + 1];

     }

     print(integers); /* output: [1, 4, 6, 9, 12, 23, 54, 78, 231] */
"
91612,"    # im2col, turn the k_size*k_size pixels into a row and np.vstack all rows

     image_array = zeros((dst_height * dst_width, k_size * k_size))

     row = 0

     for i, j in product(range(dst_height), range(dst_width)):

         window = ravel(image[i : i + k_size, j : j + k_size])

         image_array[row, :] = window
"
15875,"        for (int i = 0; i < arr_size; i++)

             System.out.print(arr[i] + "" "");

         System.out.println("""");

     }

     /*Driver function to check for above functions*/
"
11593,"    >>> convex_hull_melkman([[-1, 1],[-1, -1], [0, 0], [0.5, 0.5], [1, -1], [1, 1],

     ...                 [-0.75, 1]])

     [(-1.0, -1.0), (-1.0, 1.0), (1.0, -1.0), (1.0, 1.0)]

     >>> convex_hull_melkman([(0, 3), (2, 2), (1, 1), (2, 1), (3, 0), (0, 0), (3, 3),
"
27381,"            var vertexA = graph.AddVertex('A');

             var vertexB = graph.AddVertex('B');

             const int currentEdgeWeight = 5;
"
11937,"        }

     }

 }
"
49541,"	""github.com/TheAlgorithms/Go/math/gcd""

 	""github.com/TheAlgorithms/Go/math/lcm""

 	""github.com/TheAlgorithms/Go/math/modular""
"
63387,"  })

   it('should return an array of arrays', () => {

     const pascalsTriangle = generate(3)

     expect(pascalsTriangle).toEqual(

       expect.arrayContaining([[1], [1, 1], [1, 2, 1]])

     )
"
92545,"      if (height(n.left.left) >= height(n.left.right)) n = rotateRight(n);

       else n = rotateLeftThenRight(n);

     } else if (n.balance == 2) {

       if (height(n.right.right) >= height(n.right.left)) n = rotateLeft(n);
"
28798,"        }

       }

       return true;

     }

     /**

     * Solve n queens problem
"
18633,"[[ConstructionBase]]

 deps = [""LinearAlgebra""]

 git-tree-sha1 = ""f74e9d5388b8620b4cee35d4c5a618dd4dc547f4""
"
10210,"    Input Format -> 07:05:45PM

     Output Format -> 19:05:45

     Problem & Explanation Source : https://www.mathsisfun.com/time.html

 */

 /**
"
17019,"class derived: public base { 

     public: 

         derived()      
"
16680,"        /// <summary>

         /// Determines the approximate cardinality of the HyperLogLog.

         /// </summary>

         /// <returns>the approximate cardinality.</returns>

         public int Cardinality()

         {
"
23190," * This is a class-based implementation of a Stack. It provides functions

  * 'push' - to add an element, 'pop' - to remove an element from the top.

  * Also it implements 'length', 'last' and 'isEmpty' properties and

  * static isStack method to check is an object the instance of Stack class.
"
19027,"	if (root == NULL)

 	{

 		cout << ""\nEmpty Tree."";
"
23594,"                {

                     return 56;

                 }

                 return 2;

             }

         }
"
65531,"sum = 0

 (1...1000).each do |i|

   sum += i if divisible_by_three_or_five?(i)

 end

 p sum
"
68095,"using System.Collections;

 using System.Collections.Generic;

 namespace DataStructures
"
12914,"	n := len(pattern)

 	// using booyer moore horspool modification

 	// O(n) space instead of O(n**2)
"
23893,"         int x,y;

 };

 int main()

 {   double d(9.5);
"
69100,"}
"
19499,"                on_stack[w] = False

                 component.append(w)

             components.append(component)

         return index

     components = []
"
27050," */

 class IntervalTimer {

   /**

    * @description Constructor for Timer.

    * @param interval Sets the interval for running the timer.

    * @param callBack The callback function to be executed.
"
17860,"        /// </summary>

         /// <param name=""node"">Node to search from.</param>

         /// <param name=""key"">Key to add.</param>

         /// <exception cref=""ArgumentException"">
"
28836,"// | || |     ____     | | | | |  _   _  |  | || ||_   _||_   _|| || |     /  \

 // | || ||_   \|_   _| | | | | |_   ||   _| | || |   .'    `.   | | | | |_/ | |

 // \_|  | || |  | |    | |  | || |    / /\ \    | || |  |   \ | |   | | | |   |
"
27821,"extern int add(int x,int y);

 int main() {

     add(2,3);

     return 0;
"
24125,"#include <stdio.h>

 int main()

 {
"
25032,"class Graph {

     /**

      *  adjacency_list maps every vertex to the list of its neighbours in the
"
22796,"          findFirstFit(

               sizeOfBlocks, processSize); // Find the index of the memory block going to be used

       memAlloc.add(chosenBlockIdx); // Store the chosen block index in the memAlloc array list

       if (chosenBlockIdx
"
19937,"        let mutable newStringList: string list = []

         let separator = defaultArg separator0 ' '

         let mutable value = """"

         if str.Contains separator then

             for c in str do

                 match (string) c with
"
25352,"        while(depth[v1]!=depth[v2]){

             v1 = parent[v1];

         }

         if(v1==v2) return v1;

         while(v1!=v2){
"
28107,"    b.right = a;

     a.parent = b;

     if (b.parent != null) {

       if (b.parent.right == a) {

         b.parent.right = b;
"
26279,"        /// <returns>distance between the two.</returns>

         public double AdjacentDistance(Vertex<T> startVertex, Vertex<T> endVertex)

         {

             if (AreAdjacent(startVertex, endVertex))
"
19394,"        }

     }

     if (toDelete == *root)

     {

         *root = NULL;

         return;
"
14581,"    static long findNthCatalan(int n){

         // Array to store the results of subproblems i.e Catalan numbers from [1...n-1]

         long catalanArray[] = new long[n + 1];
"
14915,"        double a[][]= new double[n][n];

         System.out.println(""Enter the elements of matrix: "");

         for(int i=0; i<n; i++)

             for(int j=0; j<n; j++)
"
94971,"# ╔═╡ b676eebe-f036-11eb-3362-c768806de296

 begin

 	using Plots

 	using Statistics
"
17048,"  if (typeof word !== 'string') return

   if (word === '') {

     this.root.count += 1

     return

   }

   let node = this.root
"
12318,"        return ""->"".join(str(item) for item in iter(self))

     def insert_tail(self, data: Any) -> None:

         self.insert_nth(len(self), data)
"
22894,"// [introducer](optional)mutable throwSpec->retType {}

 // mutable决定[]能够被改写  mutable throwSpec retType都是选择的,只要有一个存在就得写()

 // retType 返回类型

 // ()放参数

 // []放外面变量 passed by value or reference
"
92763,"            51487, 51503, 51511, 51517, 51521, 51539, 51551, 51563, 51577, 51581, 51593, 51599, 51607, 51613, 51631,

             51637, 51647, 51659, 51673, 51679, 51683, 51691, 51713, 51719, 51721, 51749, 51767, 51769, 51787, 51797,

             51803, 51817, 51827, 51829, 51839, 51853, 51859, 51869, 51871, 51893, 51899, 51907, 51913, 51929, 51941,
"
28012,"    if (child2Pos < this._heap.length) {

       child2Priority = this._heap[child2Pos][1]

     }

     let currPriority

     try {

       currPriority = this._heap[currPos][1]
"
66735,"*  In bubble sort, we keep iterating while something was swapped in

 *  the previous inner-loop iteration. By swapped I mean, in the

 *  inner loop iteration, we check each number if the number proceeding

 *  it is greater than itself, if so we swap them.

 *
"
32392,"# 10
"
36386,"	}

 	return s

 }
"
73154,"  /**

    * Vector subtraction

    *

    * @param vector The vector to be subtracted.

    * @returns The difference-vector.

    */
"
24314,"    }

 }
"
31483,"   * @param A Roman number string

    * @return integer

    */

   public static int romanToInt(String A) {

     A = A.toUpperCase();

     char prev = ' ';
"
11928," * original two vectors. The vector in the middle is constructed through a 60 degree rotation so it is bent outwards.

  *

  * @param vectors The vectors composing the shape to which the algorithm is applied.

  * @returns The transformed vectors after the iteration-step.
"
32922," * Created on 19/03/2018

  *

  * Modified by: Leonardo Vencovsky

  * Last modified: 19/03/2018
"
26500,"		""a"",

 	},

 	{
"
19163,"  Reference: https://www.cuemath.com/measurement/volume-of-cuboid/

   return width * length * height

 */

 const volCuboid = (width, length, height) => {

   isNumber(width, 'Width')

   isNumber(length, 'Length')
"
19698,"#

 # Time Complexity: O(n)

 def num_identical_pairs(nums)

   hash = Hash.new(0)

   nums.each do |num|
"
13376,"const list = []

 const FibonacciIterative = (nth) => {

   const sequence = []
"
29720,"            tree.GetKeysInOrder().SequenceEqual(new[] { 0, 1, 2, 3, 4, 5, 7 }).Should().BeTrue();

             tree.GetKeysPreOrder().SequenceEqual(new[] { 3, 1, 0, 2, 5, 4, 7 }).Should().BeTrue();

             // Move to case 4
"
58529,"// parallelize on threads

 #pragma omp parallel for reduction(+ : sum)

 #endif

     for (i = 0; i <= N; i++)

     {

         s = sigma2(i);
"
99143," * @param string $octalNumber

  * @return int

  */

 function hexToDecimal($hexNumber)

 {

     // Using ctype to check all the digits are valid hex digits or not.
"
12222,"        sut.makeMove(player: player, position: Position(1, 1))

         sut.makeMove(player: player, position: Position(1, 2))

         sut.makeMove(player: player, position: Position(2, 0))

         sut.makeMove(player: player, position: Position(2, 1))

         sut.makeMove(player: player, position: Position(2, 2))

         XCTAssertEqual(sut.hasEmptyField(), false)
"
15904,"}

 const manhattanDistance = (longitude1, latitude1, longitude2, latitude2) => {

   const width = Math.abs(longitude2 - longitude1)
"
10516,"   * ArrayList of Integers, where the index is the process ID (zero-indexed) and the value is the

    * block number (also zero-indexed).

    *

    * @param sizeOfBlocks: an int array that contains the sizes of the memory blocks available.

    * @param sizeOfProcesses: an int array that contains the sizes of the processes we need memory

    *     blocks for.
"
29942,"    expect(cache.get(2)).toBe(null) // cache miss

     expect(cache.get(3)).toBe(3)

     expect(cache.get(4)).toBe(4)
"
31210,"                            # The tree is now empty

                             return RedBlackTree(None)

                         else:
"
29397,"    for (i = 0; i < ARRAY_LENGTH; i++)

     {

         printf(""%d "", ARRAY[i]);

         MEAN = MEAN + ARRAY[i];
"
27692,"			return;

 		}

 		tmp = tmp->next;

 	}
"
12673,"}

 class Matrix {

   List<List<double>> _values;

   @override
"
92153,"    it('should multiply two vectors correctly', () => {

       expect(new Vector2(1, 0).multiply(5).equalsApproximately(new Vector2(5, 0), 0.000001))

         .toBe(true)

       expect(new Vector2(3.41, -7.12).multiply(-3.1).equalsApproximately(new Vector2(-10.571, 22.072), 0.000001))

         .toBe(true)

     })
"
21207,"                           pat.size() - 1)) {

             return i;

         }

         if (i < str.size() - pat.size()) {

             str_hash =

                 recalculate_hash(str, i, i + pat.size(), str_hash, pat.size());
"
18601,"        public static void DequeueEmptyQueueThrowsInvalidOperationException()

         {

             // Arrange

             var q = new ArrayBasedQueue<int>(1);

             Exception? exception = null;

             // Act
"
38398,"        {

             final Optional<BigDecimal> result = calculate(new BigDecimal(3));

             assertThat(result.isPresent(), true);
"
94465,"  while (fib1 < digits) { // using this to compare number of digits instead of .toString() significantly improved run time

     const tempfib = fib1

     fib1 = fib1 + fib0
"
33934,"        array[j] = temp;

       }

     }
"
26317,"            break;

         }

     } while (choice != 0);

     return 0;

 }
"
22006,"  const results = []

   let i = 0

   let j = 0

   while (i < list1.length && j < list2.length) {

     if (list1[i] < list2[j]) {

       results.push(list1[i++])
"
26282,"    int log2N = 0;

     while ((1 << log2N) < N) log2N++;

     /* Swap the values of the signal with bit-reversal method */

     int reverse;

     for (int i = 0; i < N; i++) {

       reverse = reverseBits(i, log2N);
"
20728,"    void reverseShow();

 };

 void double_linked_list::insert(int x) {
"
20487,"""""""

 Pure Python implementation of the jump search algorithm.

 This algorithm iterates through a sorted collection with a step of n^(1/2),
"
18303,"    """"""

     >>> receptorConverter(4, ""1111010010111111"")

     (['1', '0', '1', '0', '1', '0', '1', '1', '1', '1', '1', '1'], True)
"
46397,"    """"""

     Edge tracking. Usually a weak edge pixel caused from true edges will be connected

     to a strong edge pixel while noise responses are unconnected. As long as there is

     one strong edge pixel that is involved in its 8-connected neighborhood, that weak

     edge point can be identified as one that should be preserved.

     """"""
"
31209,"        }

         if (i < 80)

         {

             p_str++;
"
32557,"24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50

 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70

 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21

 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
"
96332,"    {

         ;

     }

     return i;
"
22087,"            return true;

         }

         else

         {
"
23531,"                var jmin = i;

                 for (var j = i + 1; j < array.Length; j++)

                 {

                     if (comparer.Compare(array[jmin], array[j]) > 0)

                     {
"
65978,"/*

  * Heap sort sorts an array by building a heap from the array and

  * utilizing the heap property.

  * For more information see: https://en.wikipedia.org/wiki/Heapsort

  */
"
26363," */

 int main() {

     // Creating a tree with the following structure,

     /*
"
30261,"version = ""1.0.0""

 [[StatsBase]]

 deps = [""DataAPI"", ""DataStructures"", ""LinearAlgebra"", ""Missings"", ""Printf"", ""Random"", ""SortingAlgorithms"", ""SparseArrays"", ""Statistics"", ""StatsAPI""]

 git-tree-sha1 = ""fed1ec1e65749c4d96fc20dd13bea72b55457e62""

 uuid = ""2913bbd2-ae8a-5f71-8c99-4fb6c76f3a91""

 version = ""0.33.9""
"
30002,"class BubbleSort implements SortAlgorithm {

   /**

    * Implements generic bubble sort algorithm.

    *
"
20840,"// C program for Kruskal's algorithm to find Minimum Spanning Tree

 // of a given connected, undirected and weighted graph

 #include <stdio.h>

 #include <stdlib.h>

 #include <string.h>
"
23402,"}  // namespace ciphers

 /**

  * @brief Self-test implementations
"
11718,"            q.Enqueue(2);

             // Act

             q.Clear();

             // Assert

             Assert.IsTrue(q.IsEmpty(), ""Queue is empty"");
"
12906,"        ///     Add an event at a given <paramref name=""time""/>.

         /// </summary>

         /// <param name=""time"">The date at which the event occurred.</param>

         /// <param name=""value"">The event value.</param>

         public void Add(DateTime time, TValue value)
"
13407,"        {

             startIndex = 0;

             endIndex = 0;

             isEmpty = true;
"
33136,"    while (j > (l[k] - 1)) {

       ++j

       k = ~~(c1 * (arr[j] - min))

     }

     if (k < 0) break

     flash = arr[j]
"
84588,"            var tree = new RedBlackTree<int>(Comparer<int>.Create((x, y) => y.CompareTo(x)));

             tree.AddRange(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });

             tree.GetMin().Should().Be(10);

             tree.GetMax().Should().Be(1);
"
24582,"		{999, 648},

 		{1000, 400},

 		{1000000, 400000},
"
20887,"        public void GraphAddEdgeTest_ShouldThrowZeroWeight()

         {

             var graph = new DirectedWeightedGraph<char>(10);

             var vertexA = graph.AddVertex('A');

             var vertexB = graph.AddVertex('B');

             Action addZeroEdge = () => graph.AddEdge(vertexA, vertexB, 0);
"
20055,"    return 0;

 }
"
15173,"   * @param to end index of given array

    */

   public static void reverse(char[] values, int from, int to) {

     while (from < to) {

       char temp = values[from];
"
11921,"```

 # References:

 [Methods of computing square roots](https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)

 ```

 # Contributed by:- [Anson Biggs](https://ansonbiggs.com) 
"
16851,"        char msg12[60] = ""Player 1 - Position the size boat 3 (2/2)"";

         if (boat == 1)

         {
"
31145,"    assert(divide_and_conquer::karatsuba_algorithm::karatsuba_algorithm(

                s21, s22) == 30);  // here the multiplication is 30

     std::cout << ""passed"" << std::endl;

     // 3rd test

     std::string s31 = ""110"";

     std::string s32 = ""1010"";
"
68283,"    string = 'testwafwafawfawfawfawfawfawfawfa';

     subString = 'fawfawfawfawfa';

     expect(stringCompare(string, subString), isTrue);

   });

   test(('KMP: '), () {
"
39975,"  const length = items.length

   for (let i = (length - 1); i > 0; i--) {

     // Number of passes
"
25896,"{

     for (unsigned long i = 2; i < sqrtl(n) + 1; i++)

         if (n % i == 0)

             return 0;

     return 1;

 }
"
17435,"        String[] b = { ""banana"", ""berry"", ""orange"", ""grape"", ""peach"", ""cherry"", ""apple"", ""pineapple"" };

         System.out.print(""unsorted: "");

         print(b);
"
31661,"{

     int i, n, test = 0, count = 0;

     // taking input number n

     scanf(""%d"", &n);
"
21021,"  public static int fibMemo(int n) {

     if (map.containsKey(n)) {

       return map.get(n);

     }
"
23237,"* Wikipedia link : https://en.wikipedia.org/wiki/Invertible_matrix

 *

 * Here we use gauss elimination method to find the inverse of a given matrix.

 * To understand gauss elimination method to find inverse of a matrix: https://www.sangakoo.com/en/unit/inverse-matrix-method-of-gaussian-elimination
"
26804,"uuid = ""91a5bcdd-55d7-5caf-9e0b-520d859cae80""

 version = ""1.19.4""

 [[PoissonRandom]]

 deps = [""Random"", ""Statistics"", ""Test""]

 git-tree-sha1 = ""44d018211a56626288b5d3f8c6497d28c26dc850""
"
17287,"        i >= 0;

         i--) { // length - 2 is the index of the second to last character

       char c = pattern.charAt(i);

       int finalI = i;

       table.computeIfAbsent(c, k -> pattern.length() - 1 - finalI);
"
30358,"                self.assertEqual(minors[x][y], A.minor(x, y))

     def test_cofactor(self) -> None:

         """"""

         test for Matrix method cofactor()

         """"""
"
96757," * @param height The height of the cone

  * @param PI The definition of the constant PI

  * @returns The volume of the cone

  */
"
19657,"        DistanceMatrix[source][destination] = AdjacencyMatrix[source][destination];

       }

     }

     for (int intermediate = 1; intermediate <= numberofvertices; intermediate++) {
"
73049,"            int x, i;

             for (i = 0; i < n; i++) {

                 cipherMatrix[i][0] = 0;
"
77903,"//    Fraction1 f1(3,5);

 //    Fraction1 f2 = f1+3; // 会将3转换为(3,1)   不会隐式转换    error: no match for ‘operator+’ (operand types are ‘Fraction1’ and ‘int’)

 //    f2.getNumAndDen();
"
85892,"/**

  * The Koch snowflake is a fractal curve and one of the earliest fractals to have been described.

  *

  * The Koch snowflake can be built up iteratively, in a sequence of stages. The first stage is an equilateral triangle,

  * and each successive stage is formed by adding outward bends to each side of the previous stage, making smaller

  * equilateral triangles. This can be achieved through the following steps for each line:
"
33687,"		var match bool = true

 		for j := 0; j < len(pattern); j++ {

 			if text[i+j] != pattern[j] {

 				match = false

 				break

 			}
"
30676,"	}

 	col := strings.IndexRune(p.characters, chars[1])

 	if col < 0 {

 		return """", fmt.Errorf(""%c does not exist in characters"", chars[1])

 	}

 	return string([]rune(p.key)[row*p.size+col]), nil
"
14433,"  }

   /**

    * The above method can exceed limit of long (overflow) when factorial(n) is larger than limits of long variable.

    * Thus even if nCk is within range of long variable above reason can lead to incorrect result.
"
65053,"func ArrayUnion(to, from []int) (concat []int) {

 	concat = to

 	for i := range from {
"
32170,"  });

 }
"
13135,"        }

     }

 }
"
33330,"/* the current capacity of the stack */

 int max = 10;

 /* counter variable for counting the elements of the stack. */
"
17387,"    summed = 0

     customer.each do |account|

       summed += account
"
27145,"            foreach (var item in items)

             {

                 Push(item);

             }

         }

         /// <summary>
"
20838,"    }

     return memAlloc;

   }

   /**
"
24359,"            public (char symbol, double frequency)[] Data { get; }

             public ListNode? RightChild { get; set; }

             public ListNode? LeftChild { get; set; }

         }
"
28244,"            if (i + 1 < strlen(s))

             {

                 if (s[i + 1] == 'D' || s[i + 1] == 'M')

                 {
"
80014,"    :param x_start: left end point to indicate the start of line segment

     :param x_end: right end point to indicate end of line segment

     :param steps: an accuracy gauge; more steps increases the accuracy

     :return: a float representing the length of the curve

     >>> def f(x):

     ...    return 5
"
16881,"    expect(bubbleSort([])).toEqual([])

     expect(bubbleSort([1, 2, 3])).toEqual([1, 2, 3])

     expect(bubbleSort([5, 6, 7, 8, 1, 2, 12, 14])).toEqual([1, 2, 5, 6, 7, 8, 12, 14])

   })
"
32991,"        base64_decoded;  /// Output of this function: base64 decoded string

     for (uint32_t i = 0; i < base64_str.size(); i += 4) {

         /// First 6-bit representation of Base64

         char first_byte = base64_str[i];
"
28846,"# Output: 3

 # Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
"
15941,"      count += bpRS(curr + dice, end, strg);

     }

     strg[curr] = count;

     return count;

   }
"
33002,"        printf(""\nEdge %d \nEnter source: "", i + 1);

         scanf(""%d"", &src);

         printf(""Enter destination: "");

         scanf(""%d"", &dst);

         printf(""Enter weight: "");
"
18228,"        /// <param name=""comparer"">Compares elements.</param>

         public void Sort(T[] array, IComparer<T> comparer)

         {

             for (var i = 0; i < array.Length - 1; i++)
"
17806,"        return $mid;

     } elseif ($list[$mid] > $target) {

         return binarySearchByRecursion($list, $target, $start, $mid-1);

     } elseif ($list[$mid] < $target) {

         return binarySearchByRecursion($list, $target, $mid+1, $end);
"
29215,"    {

         double r = _random(a_r, b_r);      // random radius

         double theta = _random(a_t, b_t);  // random theta

         data[i][0] = r * cos(theta);       // convert from polar to cartesian

         data[i][1] = r * sin(theta);
"
12222,"      for (int i = 0; i < size; i++) {

         this.graph.set(i, new ArrayList<>());

       }

     }

     private ArrayList<Edge> getNeighbours(int from) {

       return this.graph.get(from);
"
26734,"            // if length = 0, then there does not exist any palindrome of length

             // > 1 so we can assign any character of length 1 from string as the

             // palindromic substring

             palindromic_substring = prototype[0];

         }
"
11265,"    for i in range(3, n, 2):

         if is_prime[i]:

             primes.append(i)

     return primes
"
22340," */

 std::string toupperRoman(int n) {

     if (n < 4)
"
15033,"}

 /**

  * @brief Generate a random number in the given limits

  *

  * @param lim1 lower limit

  * @param lim2 upper limit
"
14256,"    case 0:

         return ""Sunday"";

     case 1:

         return ""Monday"";

     case 2:

         return ""Tuesday"";
"
28914,"is the standard deviation of the column or list of values.

 Choosing between Normalization & Standardization is more of an art of a science, but it

 is often recommended to run experiments with both to see which performs better.

 Additionally, a few rules of thumb are:
"
12799,"                    for (k = 0; k < W->dim3; k++)  // for each feature

                     {

                         double *w1 = kohonen_data_3d(W, i, j, k);

                         double *w2 = kohonen_data_3d(W, l, m, k);

                         d += (w1[0] - w2[0]) * (w1[0] - w2[0]);
"
12397,"# A string s is lexicographically sorted if for all valid i, s[i] is the same as

 # or comes before s[i+1] in the alphabet.

 #

 #

 # Example 1:
"
32660,"        | number ->

             let total =

                 seq { 1 .. number - 1 }

                 |> Seq.filter (fun n -> number % n = 0)

                 |> Seq.sum
"
20308,"  }

 }
"
15839,"                pixels[x, y] = (colour, colour, colour)

         # Save image

         images.append(img)

         cells = new_generation(cells)

     return images

 if __name__ == ""__main__"":
"
19448,"    b = treeSort.sort(b);

     System.out.print(String.format(""%-10s"", ""sorted: ""));

     print(b);

     System.out.println();

     // ==== String List =======
"
35755," * \brief [Kohonen self organizing

  * map](https://en.wikipedia.org/wiki/Self-organizing_map) (topological map)

  *

  * \details

  * This example implements a powerful unsupervised learning algorithm called as

  * a self organizing map. The algorithm creates a connected network of weights
"
21326," * starting number

  */

 long long collatz(long long start_num)
"
10717,"    // Look for the leftmost of right node or right most of left node

     if (toDelete->left != NULL)

     {
"
31876,"    def empty(self):

         return len(self.elements) == 0

     def put(self, item, priority):

         if item not in self.set:

             heapq.heappush(self.elements, (priority, item))

             self.set.add(item)
"
10836,"package Misc;

 import java.util.Collections;

 import java.util.PriorityQueue;

 /** @author shrutisheoran */

 public class MedianOfRunningArray {

   private PriorityQueue<Integer> p1;
"
72299,"                result[i, i] = vector[i];

             }

             return result;

         }

     }
"
57473,"#include <stdint.h>             /// For specific bit size values of variables

 #include <stdio.h>             /// Variable types, several macros, and various functions for performing input and output

 #include <stdlib.h>           /// Variable types, several macros, and various functions for performing general functions
"
15553,"      }

     }

   }

   void insert(int value) {

     this.heap.add(value);

     _siftUp(this.heap.length - 1);
"
10108,"			return mid, nil

 		}

 		// adjust our guess and continue

 		if sortedData[mid] > guess {

 			high, highVal = mid-1, sortedData[high]

 		} else {
"
30389,"  }

   arr[parent] = temp;

   return arr;

 }
"
19567,"                    int temp = array[k + i];

                     array[k + i] = array[k];

                     array[k] = temp;

                 }

             }

         }
"
31323," * Function to test neural network

  * @returns none

  */

 static void test() {

     // Creating network with 3 layers for ""iris.csv""

     machine_learning::neural_network::NeuralNetwork myNN =
"
95041,"  }

 }
"
21538,"    bst.add(1);

     pre_reversal = bst.get_level_order();

     assert(pre_reversal == pre_res);  ///< Check for equality

     std::cout << ""Before reversal: "";

     bst.print();

     std::cout << ""After reversal: "";
"
31106,"    }

     String[] notPalindromes = {""abb"", ""abc"", ""abc123""};

     for (String s : notPalindromes) {
"
32112,"        std::cout << ""x"" << i << ""= "" << x[i][i] << std::endl;

     }

     for (i = 0; i <= mat_size; i++) {

         delete[] mat[i];
"
25780,"            }

             std::cout << std::endl;

         }

         st = st + 2;
"
13149,"        ///     Check if timeline contains any of the event of the provided <paramref name=""timeline""/>.

         /// </summary>

         /// <param name=""timeline"">The events to checks.</param>
"
46524,"  }

   dp[0] = 1 // since sum equal to 0 is always possible with no element in subset

   for (let i = 0; i < array.length; i++) {

     for (let j = sum; j >= array[i]; j--) {

       if (j - array[i] >= 0) {
"
97407,"    else

         std::cout << ""Not a sparse matrix"";

     for (int i = 0; i < m; i++) delete[] a[i];

     delete[] a;

     return 0;
"
19743,"                    return;

                 }

                 InOrderWalk(node.Left);

                 result.Add(node.Key);

                 InOrderWalk(node.Right);
"
71091," * @brief Functions for [Wiggle

  * Sort](https://leetcode.com/problems/wiggle-sort-ii/) algorithm

  */

 namespace wiggle_sort {
"
32713,"            var merged = MergeArrayList(deciphered);

             var str = BuildStringFromArray(merged);

             return UnFillGaps(str);

         }

         /// <summary>

         ///     Converts elements from the array to their corresponding Unicode characters.
"
16534," * Check if `y`^th column is valid

  * @param a ::sudoku to check

  * @param x ignored row

  * @param y column to check

  * @param v value to check if it repeats

  * @returns `true` if valid
"
18772,"    end

     return total == number

 end
"
10017," * Test Case 1:

  * Input:

  * n = 1

  * Output:  1

  * Explanation: Digital root of 1 is 1

  *
"
24725,"      } catch (error) {

         parentPriority = Infinity

       }
"
17151,"     */

     quickSort(0, len, maxDepth)

     /**
"
12737,"	uint64_t base = strlen(alphabet);

 	uint64_t final_len = converted_len(nb, base);

 	converted = malloc(sizeof(char) * (final_len + 1));

 	converted[final_len] = 0;

 	convertion(nb, alphabet, base, converted + final_len - 1);
"
48796,"perfect_square(16)  # returns True

 perfect_square(1)   # returns True

 perfect_square(0)   # returns True
"
50300,"        }

     }

 }
"
20907,"# GBM

 library(caret)

 x <- cbind(x_train,y_train)
"
52661,"    expect(approximatelyEqualHsv(rgbToHsv(64, 128, 128), [180, 0.5, 0.5])).toEqual(true)

     expect(approximatelyEqualHsv(rgbToHsv(193, 196, 224), [234, 0.14, 0.88])).toEqual(true)

     expect(approximatelyEqualHsv(rgbToHsv(128, 32, 80), [330, 0.75, 0.5])).toEqual(true)

   })

 })
"
24424,"        sal=Salary;

     }

     void display(){

         cout<<number<<""\t""<<name<<""\t""<<age<<""\t""<<sal<<endl;

     }

 };
"
27843,"num_iterations <- 100

 config <- list(objective = ""binary"",  metric=""binary_logloss,auc"", learning_rate = 0.1, num_leaves = 63, tree_learner = ""serial"", feature_fraction = 0.8, bagging_freq = 5, bagging_fraction = 0.8, min_data_in_leaf = 50, min_sum_hessian_in_leaf = 5.0)

 #Create data handle and booster
"
14474,"export function isSorted (array) {

   const length = array.length

   for (let i = 0; i < length - 1; i++) {
"
27629,"            matrix1.GetLength(0).Should().Be(matrix2.GetLength(0));

             matrix1.GetLength(1).Should().Be(matrix2.GetLength(1));

             for (var i = 0; i < matrix1.GetLength(0); i++)

             {

                 for (var j = 0; j < matrix1.GetLength(1); j++)

                 {
"
19825,"      assert stack.size() == i;

     }

     assert stack.size() == 5;

     assert stack.peek() == 5 && stack.pop() == 5 && stack.peek() == 4;

     /* pop elements at the top of this stack one by one */
"
14820,"""""""

 Problem 78

 Url: https://projecteuler.net/problem=78

 Statement:
"
30907,"        {

             if (start == null)

             {

                 start = new UnrolledLinkedListNode(sizeNode);

                 start.Set(0, value);

                 end = start;
"
17950,"void test1() {

     // define the function to minimize as a lambda function

     std::function<double(double)> f1 = [](double x) {
"
49449,"            Assert.Throws<KeyNotFoundException>(() => tree.Remove(24));

         }

         [Test]
"
29803,"package DataStructures.Trees;

 import DataStructures.Trees.BinaryTree.Node;

 /**
"
23652,"}

 function binarySearchByRecursion($list, $target, $start, $end)

 {
"
18199,"	return DepthFirstSearchHelper(start, end, nodes, edges, false)

 }

 // func main() {

 // 	nodes := []int{
"
46611,"	} else {

 		minSet = st

 		maxSet = st2

 	}

 	for _, item := range minSet.GetItems() {

 		if maxSet.In(item) {
"
14972,"27 = 19 + 2 × 22

 33 = 31 + 2 × 12

 It turns out that the conjecture was false.
"
30235,"# A ruby program to check a given number is prime or not

 # Mathematical explanation: A number which has only 2 factors i.e., 1 (one) and itself

 # Prime number check function
"
23444,"  The sum of all the digits is returned (The res variable acts as a collector, taking the remainders on each iteration)

 */

 function sumOfDigitsUsingLoop (number) {
"
18757,"    {

         [Test]

         public static void SquaredMatrixInverseWorks()

         {

             // Arrange
"
14553,"    int arr[] = {10, 22, 35, 40, 45, 50, 80, 82, 85, 90, 100};

     int n = sizeof(arr) / sizeof(arr[0]);

     int x = 85;

     printf(""Found at index: %d"", fibMonaccianSearch(arr, x, n));

     return 0;

 }
"
29772,"    uint32_t reverse_int = 0;  // stored in memory as 32 bits, each bit valued 0

     uint i;

     for (i = 0; i < TotalBits; i++)
"
33203,"    {

         for (int j = 0; j < 3; j++)

         {

             printf(""%c "", game_table[k]);
"
79651," */

 export function getRGBData (

   imageWidth = 800,

   imageHeight = 600,

   figureCenterX = -0.6,

   figureCenterY = 0,
"
30178,"                    open_list.emplace(Neighbor);

                 } else if ((*iter)->depth > Neighbor->depth) {

                     (*iter)->depth = Neighbor->depth;
"
17425,"package Sort

 import org.scalatest.flatspec.AnyFlatSpec

 class BubbleSortSpec extends AnyFlatSpec {
"
31215,"  end

   dp[coins.length][amount]

 end

 coins = Array[2, 4, 5]

 amount = 12

 puts 'Number of combinations of getting change for ' + amount.to_s + ' is ' + coin_change_combinations(coins,
"
17140,"      k++;

       j++;

     }

   }
"
12540,"            0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,

             0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,

             0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,

             0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,

             0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,

             0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
"
26129,"    expect(PrimeFactors(100)).toEqual([2, 2, 5, 5])

   })

   it('should return the prime factors for 2560', () => {
"
13891,"//

 // Created by light on 20-1-31.

 //

 #include <iostream>
"
10409,"        }

         [Test]

         public void Remove_SimpleCases_TreeStillValid()

         {

             var tree = new RedBlackTree<int>();

             tree.AddRange(new[] { 13, 8, 17, 1, 11, 15, 25, 6, 22, 27 });
"
10097,"#include <assert.h>

 /**

  * Decimal to binary using recursion algorithm.

  * For example, if number = 5, the function returns the decimal integer 101.
"
24241,"// Package genetic provides functions to work with strings

 // using genetic algorithm. https://en.wikipedia.org/wiki/Genetic_algorithm

 //

 // Author: D4rkia

 package genetic
"
22091,"        }

         private void AddChild(ref PairingHeapNode<T> parent, PairingHeapNode<T> child)

         {

             if (parent.ChildrenHead == null)
"
81559,"        /// <returns>True if both timelines are similar, false otherwise.</returns>

         public static bool operator ==(Timeline<TValue> left, Timeline<TValue> right)

         {

             var leftArray = left.ToArray();

             var rightArray = right.ToArray();
"
43235,"from __future__ import annotations

 def max_sum_in_array(array: list[int], k: int) -> int:

     """"""

     Returns the maximum sum of k consecutive elements
"
14921,"    }

 }
"
55729,"        if(n==1)

         {

             det = a[0][0];

         }

         else

         {
"
29580,"     * Method to calculate Lowest Common Ancestor

      * @param v1 The first vertex

      * @param v2 The second vertex
"
35727,"def print_reverse(head_node: Node) -> None:

     """"""Prints the elements of the given Linked List in reverse order

     >>> print_reverse([])

     >>> linked_list = make_linked_list([69, 88, 73])

     >>> print_reverse(linked_list)
"
19690,"            break;

         }

     }

 }
"
77191," * Responsible for printing messages for positioning boats on the board; of

  * player 1 and 2

  * @param Player number representing the Player
"
94013,"    float steps = 0;

     printf(""Input a number, this is the bigger bound of the lerp:\n"");

     scanf(""%f"", &finish);

     printf(

         ""Input a number, this is in how many steps you want to divide the ""
"
84984,"}
"
14966,"            {

                 throw new ArgumentOutOfRangeException(

                     nameof(maxStep),
"
10393,"		if 'A' <= r && r <= 'Z' {

 			outputBuffer = append(outputBuffer, 'A'+(newByte-'A'+key8)%26)

 		} else if 'a' <= r && r <= 'z' {

 			outputBuffer = append(outputBuffer, 'a'+(newByte-'a'+key8)%26)

 		} else {

 			outputBuffer = append(outputBuffer, newByte)
"
10008,"        modulus = p.multiply(q);

         BigInteger m = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));

         publicKey = new BigInteger(""3"");
"
23061,"            currentPow = a ** b  # calculates the current power

             collectPowers.add(currentPow)  # adds the result to the set

     return len(collectPowers)
"
32760,"concrete_model<-neuralnet(strength~cement+slag+ash+water+superplastic+coarseagg+fineagg+age,data = concrete_train,hidden = 5)

 model_res<-compute(concrete_model,concrete_test[,1:8])

 x=model_res$net.result
"
14076,"# Output: [1,2,1,2]

 #

 # @param {Integer[]} nums
"
45766,"};

 singleton *singleton::instance() {

     static singleton p;
"
73199,"    push(head, 8);

     printf(""Pushing element : 8\n"");

     printf(""Top element = %d \n"", top(head));
"
82254,"    dot += a->z * b->z;

 #endif

     return dot;

 }

 /**

  * Compute the vector product of two 3d vectors.
"
26498,"            var solution = LU.Eliminate(source, coefficients);

             // Assert

             Assert.IsTrue(VectorMembersAreEqual(expectedSolution, solution));

         }

         [Test]
"
14814,"        String cipherText = encryptMessage(msg.toCharArray());

         System.out.println(""Encrypted Message is : "" + cipherText);

         // Calling Decryption function
"
28767,"            // Arrange

             var sorter = new CombSorter<int>();

             var intComparer = new IntComparer();

             var (correctArray, testArray) = RandomHelper.GetArrays(n);

             // Act
"
13896,"    oracle_qc = q.QuantumCircuit(num_qubits + 1)

     # First, let's deal with the case in which oracle is balanced

     if case == ""balanced"":

         # First generate a random number that tells us which CNOTs to
"
21022,"                thetaFinal = *theta + M_PI;

             }

             else if (x < 0 && y < 0)
"
27275,"    }

     else

     {

 		int n = check_placex();

 		placex(n);

     }
"
55215,"  try {

     binary = int.parse(bin_string);

   } catch (e) {
"
40474,"/** Main function */

 int main(void)

 {

     int N = 1000;

     for (int a = 1; a < 300; a++)

     {
"
15080,"            * sigmoid_derivative(self.layer_between_input_and_first_hidden_layer),

         )

         self.input_layer_and_first_hidden_layer_weights += (

             updated_input_layer_and_first_hidden_layer_weights

         )

         self.first_hidden_layer_and_second_hidden_layer_weights += (
"
28642,"    ///     <para>

     ///         The zero sequence.

     ///     </para>

     ///     <para>

     ///         OEIS: https://oeis.org/A000004.

     ///     </para>
"
29476,"        (heap->p) = (int *)realloc((heap->p), (heap->size) * sizeof(int));

     }

 }

 int top(Heap *heap)

 {

     if (heap->count != 0)
"
20563,"    # nc0 = 1

     C[0] = 1

     for i in range(1, n + 1):
"
85601,"    TypeError: '<=' not supported between instances of 'int' and 'str'

     >>> prime_factors([1,2,'hello'])

     Traceback (most recent call last):

         ...

     TypeError: '<=' not supported between instances of 'int' and 'list'
"
27374,"        }

         

         else 

         {

             for ( int k = i ; k<j  ;k++)

             {
"
31677,"  return nil if n < 0

   fac = 1

   while n > 0
"
26198,"    >>> cache.get(2)  # None is returned

     >>> cache.set(4, 4)

     >>> cache.get(1)  # None is returned
"
12858,"    ""centimeters"" => ""cm"",

     ""meter"" => ""m"",

     ""meters"" => ""m"",

     ""kilometer"" => ""km"",

     ""kilometers"" => ""km"",
"
21476,"﻿namespace Algorithms.Strings

 /// <summary>

 /// https://en.wikipedia.org/wiki/String-searching_algorithm#Na%C3%AFve_string_search

 ///

 /// This algorithm tries to find the pattern from every position of

 /// the mainString if pattern is found from position i it add it to
"
98412,"export length_conversion

 ## Includes

 # Please keep the folders/files sorted (by dependencies then alphabetical order)

 # Includes: basic

 include(""basic/prefix_sum.jl"")
"
25254," * @brief Main function

  * @returns 0 on exit

  */

 int main() {
"
21125,"            var q = new StackBasedQueue<char>();

             q.Enqueue('A');

             q.Enqueue('B');

             q.Enqueue('C');

             var result = new StringBuilder();

             // Act
"
10803,"        /// <summary>

         ///     Sorts array using specified comparer,

         ///     based on bubble sort,

         ///     internal, in-place, unstable,
"
29120,"    let current = head

     while (current) {

       arr.push(current.element)
"
30244,"public class PriorityQueues {

   /**

    * Main method

    *
"
21267,"""""""Conway's Game Of Life, Author Anurag Kumar(mailto:anuragkumarak95@gmail.com)

 Requirements:

   - numpy

   - random
"
22868,"// 			log.Fatal(""Pattern  is longer than text!"")

 // 		}

 // 		if debugMode == true {

 // 			fmt.Printf(""\nRunning: Backward Oracle Matching algorithm.\n\n"")

 // 			fmt.Printf(""Search word (%d chars long): %q.\n"", len(patFile), patFile)

 // 			fmt.Printf(""Text        (%d chars long): %q.\n\n"", len(textFile), textFile)
"
24056,"     * @returns non-negative integer denoting the value at ith row and jth

      * column

      * @returns -1 if invalid i or j position

      */
"
17179,"// Sorting of array list using pancake sort

 #include <stdio.h>

 #include <stdlib.h>

 /* Reverses the array */

 void flip(int arr[], int i)
"
15428,"	},

 	{

 		""palindrome string 1"",

 		""Do geese see God?"",
"
12906,"   * @param callBack The callback function to be executed.

    * @return {IntervalTimer} If exists, the existing object.

    */

   constructor (interval = 10,

     callBack = () => {}) {
"
33669,"        cipherSmall = cipherSmall.toLowerCase();

         String cipherCapital = cipherSmall.toUpperCase();

         for (int i = 0; i < cipherSmall.length(); i++) {

             cipherMap.put(cipherSmall.charAt(i), beginSmallLetter++);

             cipherMap.put(cipherCapital.charAt(i), beginCapitalLetter++);

         }
"
29968,"    printf(""contains %d ? %d\n"", v4, contains(set, &v4));

     printf(""Value %d was add ? %d\n"", v5, add(set, &v5));

     printf(""Value %d was add ? %d\n"", v5, add(set, &v5));

     printf(""contains %d ? %d\n"", v5, contains(set, &v5));

     printf(""Value %d is add ? %d\n"", v6, add(set, &v6));
"
91659,"#endif

 #define MAX_NAMES 6000  /**< Maximum number of names to store */

 #define MAX_NAME_LEN 20 /**< Maximum length of each name */

 /**
"
18363,"package Searches;

 class PerfectBinarySearch {

   static int binarySearch(int[] arr, int target) {

     int low = 0;

     int high = arr.length - 1;

     while (low <= high) {
"
30052," * * x : desired successes

  */

 #include <cmath>

 #include <iostream>

 /** finds the expected value of a binomial distribution
"
22848,"deps = [""CommonSubexpressions"", ""DiffResults"", ""DiffRules"", ""LinearAlgebra"", ""NaNMath"", ""Printf"", ""Random"", ""SpecialFunctions"", ""StaticArrays""]

 git-tree-sha1 = ""e2af66012e08966366a43251e1fd421522908be6""

 uuid = ""f6369f11-7733-5829-9624-2563aa707210""

 version = ""0.10.18""

 [[FreeType2_jll]]

 deps = [""Artifacts"", ""Bzip2_jll"", ""JLLWrappers"", ""Libdl"", ""Pkg"", ""Zlib_jll""]
"
22314,"          break;

         default: /* other character is invalid */

           return false;

       }
"
13423,"/**

  * \file

  * \brief [Problem 16](https://projecteuler.net/problem=16) solution

  * \author [Krishna Vedala](https://github.com/kvedala)

  */
"
32310,"}

 void build_maxheap(int *a, int n)

 {

     int i;

     for (i = n / 2; i >= 1; i--)

     {
"
15704,"                    continue

             _open.append(n)

     path = []

     while current.parent is not None:

         path.append(current.position)

         current = current.parent
"
30842,"    String hex = binToHex(binary);

     System.out.println(""Hexadecimal Code:"" + hex);

     sc.close();

   }
"
32361,"    {

         switch (choice)

         {

         case 1:

             printf(""\n\nPlease Enter A Value to insert - "");
"
47330,"            if (weight.Equals(0.0d))

             {

                 throw new InvalidOperationException(""Edge weight cannot be zero."");

             }

         }
"
51083,"    assert(stack);

     assert(stack->count > 0);

     t = stack->head;

     stack->head = t->next;

     stack->count--;
"
16775,"    public class HyperLogLogTest

     {

         [Test]
"
30714,"/**

  * @file

  * @author [NVombat](https://github.com/NVombat)

  * @brief Server-side implementation of [TCP Half Duplex

  * Communication](http://www.tcpipguide.com/free/t_SimplexFullDuplexandHalfDuplexOperation.htm)

  * @see tcp_half_duplex_server.c
"
10825," * @returns true if text string contains prototype string

  * @returns false if text string does not contain prototype string

  */
"
16672,"  let tail = null

   // Add new element

   this.append = function (element) {

     const node = new Node(element)
"
98551,"        z=i;

         cout << ""C-----""<<z<<endl;

     } 
"
33642,"# In this search, after each iteration it neglects 1/3 part of the array and repeats the same operations on the remaining ⅔.

 # Time Complexity: O(log3 n)

 # Space Complexity: O(1)

 def ternary_search(l, r, key, arr)

     # l is the starting index and r is the ending index of the array/sub-array.

   if r >= l
"
12053,"            )

         return successors

     def retrace_path(self, node: Node | None) -> Path:

         """"""

         Retrace the path from parents to parents until start node

         """"""
"
24943," * @param [in] arr Array to search within

  * @param x value to search for

  * @param n length of array

  * @return index where the value was found

  * @return -1 if value not found

  */
"
19919,"<?php

 use function PHPUnit\Framework\assertEquals;

 use function PHPUnit\Framework\assertFalse;
"
30108,"    System.out.println(""Input data"");

     System.out.println(""Number of points: "" + cp.array.length);

     for (int i = 0; i < cp.array.length; i++) {

       System.out.println(""x: "" + cp.array[i].x + "", y: "" + cp.array[i].y);

     }
"
13735,"    Be careful with high values (above 5) since the time to calculate increases

     exponentially.

     >>> iterate([numpy.array([0, 0]), numpy.array([1, 0])], 1)

     [array([0, 0]), array([0.33333333, 0.        ]), array([0.5       , \

 0.28867513]), array([0.66666667, 0.        ]), array([1, 0])]
"
90246,"using System;

 using System.Linq;

 using Algorithms.Numeric.Decomposition;
"
29178,"    Returns :

     (float):  distance btw closest pair of points

     >>> closest_pair_of_points_sqr([(1, 2), (3, 4)], [(5, 6), (7, 8)], 2)

     8
"
10843,"            } else if (IsSmallLatinLetter(current)) {

                 current += shift;

                 encoded.append((char) (current > 'z' ? current - 26 : current)); // 26 = number of latin letters

             } else {

                 encoded.append(current);

             }
"
23918,"    }

 #if defined(DEBUG) || !defined(NDEBUG)

     fprintf(log_file, ""avg. correction"");
"
50904,"            moveEntryToLast(exitingEntry);

             return;

         }

         Entry<K, V> newEntry;
"
30292,"from sklearn.preprocessing import StandardScaler

 CANCER_DATASET_URL = (

     ""http://archive.ics.uci.edu/ml/machine-learning-databases/""
"
69852,"    int offset = (x * arr->dim2 * arr->dim3) + (y * arr->dim3) + z;

     return arr->data + offset;

 }

 /**
"
25661,"        self.graph = [[0] * vertex for i in range(vertex)]

     def add_edge(self, u, v):

         self.graph[u - 1][v - 1] = 1
"
10142,"#include <ctime>

 #include <iostream>

 #include ""./large_number.h""

 /** Compute fibonacci numbers using the relation
"
41313,"    This script will find the absolute value of a number.

     More about absolute values:

         https://en.wikipedia.org/wiki/Absolute_value

 */

 const absVal = (num) => {
"
26011,"   */

   const toString = function (obj) {

     if (obj === null) return 'null'

     if (typeof obj === 'boolean' || typeof obj === 'number') {

       return obj.toString()

     }
"
56104,"        test for function add_item_label

         attention:

         The void* pointer must be convert into an int* pointer.

         After that you can dereference it.

     */

     printf(""My age is %d\n"", *((int *)get_element_label(testObj1, ""age"")));
"
25995,"            tree.GetKeysPostOrder().SequenceEqual(new[] { 1, 3, 2, 5, 7, 6, 10, 9, 8, 4 }).Should().BeTrue();

         }

         [Test]

         public void GetKeysPostOrder_EmptyTree_CorrectReturn()

         {
"
30839,"  ""10"": ""A"",

   ""11"": ""B"",

   ""12"": ""C"",

   ""13"": ""D"",
"
33000,"  })

 })
"
13168,"namespace Algorithms.Math

 module AbsMax =

     let absMax (x: int list) =

         let mutable j = x.[0]

         for i in x do

             if abs i > abs j then j <- i
"
24052," */

 /* eslint no-extend-native: [""off"", { ""exceptions"": [""Object""] }] */

 Array.prototype.heapify = function (index, heapSize) {

   let largest = index

   const leftIndex = 2 * index + 1

   const rightIndex = 2 * index + 2
"
25492,"            4

              \

               5
"
87083,"    

     public static void main (String[] args) {

         System.out.println(findWays(4, 2, 1)); 
"
12700,"    // Add to visited list and put in queue

     graph->visited[startVertex] = 1;

     enqueue(q, startVertex);
"
43016,"""""""

 remove the comment to take an input from the user

 print(""Enter the elements"")
"
26586,"                return matrixMultiplication(Fibonacci.fibMatrix, matrixExpResult);

             }

         }

     }
"
24816,"﻿using System;

 using System.Collections.Generic;

 namespace Algorithms.Sorters.Comparison

 {

     /// <summary>

     ///     Comb sort is a relatively simple sorting algorithm that improves on bubble sort.
"
96416,"	""testing""

 	""github.com/TheAlgorithms/Go/dynamic""

 )
"
20528,"    }

 }

 /**

  * Upper Bound of an element is maximum index that an element would be placed 
"
22810,"}
"
19029,"    double rv;

     double root = Math.pow(N, 0.5);

     // calculate precision to power of 10 and then multiply it with root value.
"
24396," * The computation results are stored to a text file `forward_euler.csv` and the

  * exact soltuion results in `exact.csv` for comparison.

  * <img

  * src=""https://raw.githubusercontent.com/TheAlgorithms/C-Plus-Plus/docs/images/numerical_methods/ode_forward_euler.svg""

  * alt=""Implementation solution""/>
"
33068,"package Ciphers;

 import java.util.Scanner;

 /**

  * A Java implementation of Caesar Cipher. /It is a type of substitution cipher in which each letter

  * in the plaintext is replaced by a letter some fixed number of positions down the alphabet. /

  *
"
14678,"        prod *= num; /* accumulate product */

     }

     /* set file position to the next starting character + 1 */

     fseek(fp, -count + 1, SEEK_CUR);

     return prod;

 }
"
15533,"    hq.heapify(h)

     while h:

         u = hq.heappop(h)
"
20798,"    }

   }

   public ArrayList<Skyline> findSkyline(int start, int end) {

     if (start == end) {
"
10728,"     * Subroutine of the Rijndael key expansion.

      */

     public static BigInteger scheduleCore(BigInteger t, int rconCounter) {

         StringBuilder rBytes = new StringBuilder(t.toString(16));

         // Add zero padding

         while (rBytes.length() < 8) {
"
79787,"            Assert.False(validate);

         }

         [Test]
"
57224,"(9^5)=59,049‬

 59049*7=4,13,343 (which is only 6 digit number )

 So, number greater than 9,99,999 are rejected

 and also 59049*3=1,77,147 (which exceeds the criteria of number being 3 digit)

 So, n>999
"
24356,"    }

     return currentNode; // returns pointer to current node

 }

 /**

  * @brief Reads words from file to tree
"
79054,"    }

   }

   public Location[] createLocation(int numberValues) {

     return new Location[numberValues];
"
29718,"    return start;

 }
"
16392,"// | | | |  _| |  | |_  | || |  \  `--'  /  | | | |   |_____|    | || | `.__.'

 // | || ||____|  |____|| || ||_____|\____| | | | | |____||____| | || | `.____.'

 // | | | |              | || |              | || |              | || | | | | |

 // | || |              | | | '--------------' || '--------------' ||

 // '--------------' || '--------------' | | '--------------' || '--------------'

 // |
"
17562,"        IEnumerable<Vertex<T>?> GetNeighbors(Vertex<T> vertex);

         void RemoveEdge(Vertex<T> startVertex, Vertex<T> endVertex);

         void RemoveVertex(Vertex<T> vertex);
"
21809,"        

         /**

          * Function implementing Shortest Common Super-Sequence algorithm using look-up table method.

          * @param str1 first string 'X'

          * @param str2 second string 'Y'

          * @returns string 'Z', superSequence of X and Y 
"
33283,"    if (this.nRows != other.nRows || this.nColumns != other.nColumns) {

       throw new MatrixDimensionError();

     }
"
16176,"    print(

         ""The maximum score for f(x, y) = x^2 + y^2 found via hill climbing: ""

         f""{local_min.score()}""

     )
"
30867,"            BranchAndBoundNode root = new(level: -1, taken: false);

             // lastNodeOfOptimalPat --> last item in the optimal item sets identified by this algorithm

             BranchAndBoundNode lastNodeOfOptimalPath = root;
"
39273,"  }

 }

 export { GraphWeightedUndirectedAdjacencyList }

 // const graph = new GraphWeightedUndirectedAdjacencyList()
"
11925,"                    .BeFalse();

             }

         }

         [Test]

         public static void RemoveTimelineTest() //bool Remove(Timeline<TValue> timeline)

         {
"
90120,"            // ""round + 2"" - to avoid a situation when pow(key,1) ^ key  = key ^ key = 0

             uint a = (uint)Math.Pow((double)key, round + 2);

             return a ^ key;

         }
"
21057,"    for (int i = 0; i < 3; i++) {

         calculated_output[i] =

             dynamic_programming::palindrome_partitioning::pal_part(

                 custom_input[i]);

     }

     // expected output vector
"
15424,"      [1, 1, 1, 1, 1, 0, 0],

       [0, 0, 0, 0, 1, 0, 0],

       [1, 1, 1, 0, 1, 0, 0],

       [1, 0, 1, 0, 1, 0, 0],

       [1, 0, 1, 1, 1, 0, 0],

       [1, 0, 0, 0, 0, 0, 0],
"
28269,"    int i;

     int[] count = new int[10];

     Arrays.fill(count, 0);

     for (i = 0; i < n; i++) count[(arr[i] / exp) % 10]++;
"
22868,"    // outStack: []

     myQueue.insert(4);

     System.out.println(myQueue.peekBack()); // Will print 4
"
24658,"   * @param s string to check

    * @return {@code true} if given string is pangram, otherwise {@code false}

    */

   public static boolean isPangram(String s) {

     boolean[] marked = new boolean[26]; /* by default all letters don't exists */
"
23511,"/** @brief 2-3-4 tree node class */

 class Node {

  public:

     /**
"
19928,"    char splitchar;

     Tptr lokid, eqkid, hikid;

 } Tnode;

 Tptr root;

 // Insert 1 -- Simple Insertion Algorithm

 Tptr insert1(Tptr p, char *s)
"
21891,"    Node *node = new Node();

     node->data = data;      ///< setting data for node

     node->left = nullptr;   ///< setting left child as null

     node->right = nullptr;  ///< setting right child as null

     return node;
"
14315,"                for (int b = aux - 1; b < (aux + boat - 1); b++)

                 {

                     if (a >= 0 && a <= 9 && b >= 0 && b <= 9)

                     {

                         if (mat[a][b] != boat)

                         {
"
26023,"          System.out.println(""the Sorted array is "");

           for (int i = 0; i < a.length; i++)

               System.out.print(+a[i] + "" ""); }
"
24679,"    public func makeMinimaxMove() {

         guard actualPlayer.type == PlayerType.computer else { return }

         guard board.hasEmptyField() == true else { return }

         sleep(1)

         let selectedPosition: Position = minimaxMove(board: board, player: playersList[0], opponent: playersList[1], depth: self.difficultLevel.rawValue)
"
18922,"# Searches through a list for a value in O(log(n)) time.

 # The list must be sorted.

 def binary_search(array, key)

   front = 0
"
28164,"function variance(a)

     avg = sum(a) / length(a)

     x = sum((a .- avg).^2)

     s_sq = x / (length(a) - 1)

     return(s_sq)
"
52724," */

 #include <stdio.h> /// For IO operations if needed.

 #include <stdlib.h> /// For the EXIT_SUCCESS macro and the ""real"" malloc, calloc and free functions.

 #include ""malloc_dbg.h"" /// For the macros malloc, calloc and free and the malloc_dbg, calloc_dbg and free_dbg functions.
"
17903,"        ///     time complexity: O(log(n)),

         ///     space complexity: O(1),

         ///     where n - array size.
"
63704,"            Assert.AreEqual(10, heap.Count);

         }

         public static void Pop_RemoveElements_HeapStillValid()

         {

             var heap = BuildTestHeap();
"
96661,"    const SUT = checkIfPatternExists(text, pattern)

     expect(SUT).toBe(undefined)

   })
"
29790,"  cur_min = 1

   cur_max = 1

   max = -11

   nums.each do |val|
"
58520,"    $maxDigitsCount=maxDigits($nums);

     for ($k=0;$k<$maxDigitsCount;$k++){

         $digitBucket=array_fill(0,10,[]);

         for ($i=0;$i<count($nums);$i++){
"
15962,"    // The top of the Stack

     this.top = 0

     // The array representation of the stack

     this.stack = []

   }

   // Adds a value onto the end of the stack
"
19506,"    {                \

         t = *(a);    \

         *(a) = *(b); \
"
74488,"      if (curr.data == data) {

         head = curr.next;

         size--;

         return;
"
28498,"    if (argc == 1)

     {

         printf(""\nEnter the step size: "");
"
15607,"    int count[256], i;

     for (int i = 0; i < 256; i++) count[i] = 0;

     for (i = 0; arr[i]; ++i) ++count[arr[i]];

     for (i = 1; i < 256; ++i) count[i] += count[i - 1];

     for (i = 0; arr[i]; ++i) {
"
32049,"                    float.PositiveInfinity,

                     float.PositiveInfinity,

                     13,

                     12,
"
18919,"﻿using System.Linq;

 using System.Numerics;

 using Algorithms.Sequences;

 using FluentAssertions;

 using NUnit.Framework;

 namespace Algorithms.Tests.Sequences
"
33012,"        counter++;

         delta = fabs(cabs(cdelta));

 #if defined(DEBUG) || !defined(NDEBUG)

         if (counter % 50 == 0)

         {
"
54129,"        /// </summary>

         /// <param name=""matrix"">Input matrix.</param>

         /// <returns>True if it has a unique solution; false otherwise.</returns>
"
15883,"    # turn image in gray scale value

     gray = cvtColor(img, COLOR_BGR2GRAY)

     # Laplace operator

     Laplace_kernel = array([[0, 1, 0], [1, -4, 1], [0, 1, 0]])

     out = img_convolve(gray, Laplace_kernel).astype(uint8)
"
28380,"        public T Pop()

         {

             FHeapNode<T>? z = null;

             if (MinItem == null)
"
30694,"  }

   // length of message in binary, padded, and extended

   // to a 64 bit representation

   let ml = (message.length * CHAR_SIZE).toString(2)
"
32952,"        // Step 2: Pick the smallest edge. And increment

         // the index for next iteration

         struct Edge next_edge = graph->edge[i++];
"
22748," * Function to compute and save exact solution for comparison

  *

  * \param [in]    X0  	    initial value of independent variable

  * \param [in] 	  X_MAX	    final value of independent variable

  * \param [in] 	  step_size	independent variable step size
"
16824,"        """"""

         <method Matrix.__getitem__>

         Return array[row][column] where loc = (row, column).

         Example:
"
14073,"    assert(c_atoi(""-123"") == atoi(""-123""));

     assert(c_atoi("""") == atoi(""""));

     assert(c_atoi(""-h23"") == atoi(""-h23""));

     assert(c_atoi(""         23"") == atoi(""         23""));
"
23069,"   * @param figureCenterY The y-coordinate of the center of the figure.

    * @param figureWidth The width of the figure.

    * @param maxStep Maximum number of steps to check for divergent behavior.
"
72475,"  int n;

   //Init the array stack

   ArrayStack(var n) {
"
15418,"{

     /// <summary>

     ///     The idea: you could combine the advantages from both binary-search and interpolation search algorithm.
"
16860,"    end

   end

   def insert_head(value)

     newNode = Node.new(value)
"
21775,"        char msg9[60] = ""Player 1 - Position the size boat 2 (3/4)"";

         char msg10[60] = ""Player 1 - Position the size boat 2 (4/4)"";

         char msg11[60] = ""Player 1 - Position the size boat 3 (1/2)"";

         char msg12[60] = ""Player 1 - Position the size boat 3 (2/2)"";

         if (boat == 1)

         {
"
22036,"  /** Clear all nodes in the list */

   public void clear() {

     Node cur = head;

     while (cur != null) {
"
11365,"    right->RemoveItemByIndex(0, false);

 }

 /**

  * @brief Merge the item at index of the parent node, and its left and right

  * child
"
95814,"}
"
49418,"import { fermatPrimeCheck, modularExponentiation } from '../FermatPrimalityTest'

 describe('modularExponentiation', () => {

   it('should give the correct output for all exponentiations', () => {
"
52548,"# sort(c(5, 2, 3, 1, 1, 4), method = ""quick"" , index.return = FALSE)

 # [1] 1 1 2 3 4 5
"
31881,"  while (dec_val > 0) {

     String hex_val = """";

     int remainder = dec_val % 16;

     dec_val = dec_val ~/ 16;

     if (hex_table.containsKey(remainder.toString())) {
"
13224,"    bzero(&server_addr, sizeof(server_addr));

     server_addr.sin_family = AF_INET;

     server_addr.sin_port = htons(PORT);

     server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

     printf(""Client is running...\n"");

     /**
"
27888,"                return $i * $j * $k;

             }

         }

     }

     return 0;

 }
"
16567," * Function to test above algorithm

  */

 void test() {
"
15698,"    }

 }"
15354,"    c1 + c2 = complex<int>(3, 4);   // ok

     complex<int>() = complex<int>(1, 2); // ok

     int x = foo();

 //    int *p=&foo(); //error!  Rvalue不可以取地址

 //    foo()=7;  // error
"
19025,"  }

   /**

    * Get head of the list.

    *

    * @return head of the list.
"
27853,"        }

     };

     static CGarbo Garbo; // 定义一个静态成员变量，程序结束时，系统会自动调用它的析构函数从而释放单例对象

 };

 singleton *singleton::p = nullptr;

 singleton::CGarbo Garbo;
"
16014,"julia> monte_carlo_integration(x -> 3*x^2, 0, 1, 100000) # integrate a polynomial

 1.0000037602209

 julia> monte_carlo_integration(x -> sin(x), 0, pi, 1000) # integrate the sin function

 2.0018927826323756

 ```
"
10615,"    return S;

 }
"
84572,"    int num_out = 30;  // image size - N x N

     // 2D space, hence size = number of rows * 2

     double **X = (double **)malloc(N * sizeof(double *));

     // cluster nodex in 'x' * cluster nodes in 'y' * 2

     struct kohonen_array_3d W;

     W.dim1 = num_out;
"
70680,"      return new Vector2(x, y);

     }

     /**

      * Vector scalar multiplication

      *

      * @param scalar The factor by which to multiply the vector.
"
22288,"			if (s->right->color == 'b'&&s->left->color == 'b')

 			{

 				s->color = 'r';
"
23923,"        dec = dec + 13 * pow(16, c);

         c--;

         break;

       case 'e':

       case 'E':

         dec = dec + 14 * pow(16, c);
"
27161,"  // Driver Program

   public static void main(String[] args) {

     // Just generate data

     Random r = ThreadLocalRandom.current();

     int size = 100;
"
23536,"    while (left <= right) {

       int mid = (left + right) / 2;

       if (nums[mid] > key) right = mid - 1;

       else if (nums[mid] < key) left = mid + 1;

       else {

         if (goLeft) {
"
47265,"    >>> root.left, root.right = tree_node2, tree_node3

     >>> tree_node2.left, tree_node2.right = tree_node4 , tree_node5

     >>> tree_node3.left, tree_node3.right = tree_node6 , tree_node7

     >>> in_order(root)

     4,2,5,1,6,3,7,

     """"""
"
32581,"                testSeries[i] = incremented;

             }

             testSeries = testSeries.OrderByDescending(x => x).ToList();

             for (var i = 0; i < nodeCount - 2; i++)
"
47444,"        /// <summary>

         ///     Recursive method to get a list with the keys sorted in pre-order order.

         /// </summary>

         /// <param name=""node"">Node to traverse from.</param>
"
29071," * @brief Main function

  * @returns 0 on exit

  */

 int main() {

     // Testing

     test();
"
13113,"        ///     The other heap will be destroyed as a result.

         /// </param>

         public void Union(FibonacciHeap<T> other)

         {

             // If there are no items in the other heap, then there is nothing to do.
"
12934,"    return list;

 }

 /* Append 2 lists together */
"
56593,"        }

         /* If none of the polynomials are exhausted

          dynamically create a node in temp
"
10821,"                return __INT_MAX__;

             }

         }
"
25342,"        ///     of the Mandelbrot set is viewed. The main area of the Mandelbrot set is

         ///     roughly between ""-1.5 &lt; x &lt; 0.5"" and ""-1 &lt; y &lt; 1"" in the figure-coordinates.

         ///     To save the bitmap the command 'GetBitmap().Save(""Mandelbrot.png"")' can be used.

         /// </summary>
"
22465,"uuid = ""bcd4f6db-9728-5f36-b5f7-82caef46ccdb""

 version = ""5.31.1""

 [[DelimitedFiles]]
"
15522,"{

     avlNode *node = (avlNode *)malloc(sizeof(avlNode));

     if (node == NULL)

         printf(""!! Out of Space !!\n"");

     else

     {
"
33889,"            using (new AssertionScope())

             {

                 var i = 0;

                 foreach (var (time, value) in timeline)

                 {
"
21529,"    return g;

 }

 // check if vertex is valid in a graph
"
13953,"    i::Int = 1 + JULIA_FIRST_INDEX

     while (i < pattern_length)

         if sub_string[i] == sub_string[index]

             lps[i] = index + 1;

             index += 1;
"
24705,"	}

 }

 func BenchmarkIsPowerOfTwoUseCycleAndLeftShift(b *testing.B) {

 	for i := 0; i < b.N; i++ {
"
19221,"    expect(sphenic_number(370), isTrue);

   });

 }
"
63092,"    :param arr: Collection containing comparable items

     :return: Collection ordered in ascending order of items

     Examples:

     >>> pancake_sort([0, 5, 3, 2, 2])

     [0, 2, 2, 3, 5]
"
25198,"    for m in getBlock(bs):

         A = a0

         B = b0

         C = c0

         D = d0

         for i in range(64):
"
73959,"        /// <summary>

         ///     Sorts array using specified comparer,

         ///     internal, in-place, stable,

         ///     time complexity: O(n^2),
"
26667,"    upper = any(char in ascii_uppercase for char in password)

     lower = any(char in ascii_lowercase for char in password)

     num = any(char in digits for char in password)

     spec_char = any(char in punctuation for char in password)

     if upper and lower and num and spec_char:

         return ""This is a strong Password""
"
77057,"                list[i] = list[p]; // Put P to position of i

                 i = p; // I = (I-1)/2

             }

             if (Count > 0)

             {
"
28123,"  }

   /**

    * bruteForce function: When the number of coordinates is less than 3.

    *

    * @param arrayParam (IN Parameter) array stored before divide <br>
"
23135,"            else if (rightLargerThanElem && !leftLargerThanRight)

             {

                 Swap(elemIdx, right);

                 HeapifyDown(right);

             }

         }
"
14639,"        divide_and_conquer::karatsuba_algorithm::addStrings(Yl, Yr));

     return product1 * (1 << (2 * sh)) +

            (product3 - product1 - product2) * (1 << sh) +
"
74531,"    { 

         int length = key.length(); 

         TrieNode pCrawl = root; 
"
16633,"  }

   return largestFact

 }
"
31330,"        vegetation index

         https://www.indexdatabase.de/db/i-single.php?id=135

         :return: index

         """"""

         return (self.nir - self.blue) / (self.nir + self.blue)
"
18556,"    return 0;

 }
"
28454,"        temp = parent.left;

         rightOrLeft = 0;

       } else {

         parent = temp;
"
31521,"            do

             {

                 // Remove all factors of 2 in v as they are not common

                 // v is not zero, so while will terminate

                 while ((v & 1) == 0)

                 {
"
16966,"   *

    * @param input a string prints the count of vowels

    */
"
41360,"  }

 }
"
15670," * @brief Reserves memory for new node

  * @returns a pointer to the newly allocated node if memory IS successfully reserved

  * @returns `NULL` if memory is NOT reserved

  */

 struct Node *allocateMemoryForNode()
"
66965,"        Enter the base: 2

         Enter the exponent: 0

     Output -->

         2 to the power of 0 is 1

 """"""
"
23401,"        }

       }

       while (value === list[position]) {
"
17016,"    }

 }
"
20793,"        if (buffRoot->val > val)

         {

             // Go left

             if (buffRoot->left != NULL)
"
23775,"      let current = this.head

       while (current.next.data !== this.head.data) {

         current = current.next

       }
"
30577,"n = 3

 fibonacci(n)

 # Output: 2

 # Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.

 n = 4

 fibonacci(n)
"
42593,"    while (edges--) {

         size_t u = 0, v = 0;

         std::cin >> u >> v;

         graph::addEdge(&adj, u, v);

     }
"
27708,"    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]

     >>> list(primes(10000))[-1]

     9973
"
45728,"}
"
32408," * Get number of divisors of a given number

  *

  * If \f$x = a \times b\f$, then both \f$a\f$ and \f$b\f$ are divisors of

  * \f$x\f$. Since multiplication is commutative, we only need to search till a
"
18748,"  *  @see [Timsort](https://en.wikipedia.org/wiki/Timsort)

   *  @param {Array} array

   */
"
12997,"        inv_count += mergeSort(arr, temp, left, mid);  // left sub-array

         inv_count += mergeSort(arr, temp, mid + 1, right);

         // inversions in the merge step

         inv_count += merge(arr, temp, left, mid, right);

     }
"
10809,"                }

                 // Step 3: Update the colors

                 parent->color = parColor;

                 parent->left->color = 0;

                 parent->right->color = 0;
"
11622,"            else

                 carry = 0;

             if (carry > 0 && ptr->next_digit == NULL)

                 add_digit(ptr, 0);
"
21856,"    assert hasVowels(""Hello World"");

     assert hasVowels(""Java is fun"");

     assert !hasVowels(""123hi"");
"
96510,"    ///     of ordinary differential equations. The method proceeds in a series of steps. At each step

     ///     the y-value is calculated by evaluating the differential equation at the previous step,

     ///     multiplying the result with the step-size and adding it to the last y-value:

     ///     y_n+1 = y_n + stepSize * f(x_n, y_n).
"
21834,"namespace hana = boost::hana;

 int main() {

     // 检查成员
"
14655,"        n = in.next();

         System.out.print(

             ""Enter beginning base (between "" + MINIMUM_BASE + "" and "" + MAXIMUM_BASE + ""): "");

         b1 = in.nextInt();

         if (b1 > MAXIMUM_BASE || b1 < MINIMUM_BASE) {
"
